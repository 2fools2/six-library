from os.path import join, split, basename, splitext

NAME            = 'nitf'
MAINTAINER      = 'asylvest@users.sourceforge.net'
VERSION         = '2.7'
MODULE_DEPS     = 'mt sys mem'
USELIB          = 'THREAD DL'
USELIB_LOCAL    = 'nitf-c'
LANG            = 'c++'
TEST_FILTER     = 'test_functional.cpp test_handles.cpp ' \
                  'test_mem_source.cpp test_static_plugin.cpp'
APPS            = 'apps/show_nitf++.cpp'

options = configure = distclean = lambda p: None

def build(bld):
    bld.module(**globals())
    
    env = bld.get_env()
    app_targets = []
    for app in APPS.split():
        app_name = splitext(basename(app))[0]
        app_targets.append(app_name)
        bld.program_helper(module_deps=NAME,
                           source=app, path=bld.path,
                           name=app_name)

    bld(features='add_targets', target='nitf-c++-apps',
        targets_to_add=app_targets)

    tests = bld.path.ant_glob(join('tests', '*.cpp'))
    test_targets = []
    for test in tests:
        test_filename = str(test)
        if test_filename not in TEST_FILTER:
            test_targets.append(splitext(test_filename)[0])

    bld(features='add_targets', target='nitf-c++-tests',
        targets_to_add=test_targets)
