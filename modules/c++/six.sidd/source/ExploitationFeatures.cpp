/* =========================================================================
 * This file is part of six.sidd-c++ 
 * =========================================================================
 * 
 * (C) Copyright 2004 - 2009, General Dynamics - Advanced Information Systems
 *
 * six.sidd-c++ is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this program; If not, 
 * see <http://www.gnu.org/licenses/>.
 *
 */
#include "six/sidd/ExploitationFeatures.h"

using namespace six;
using namespace six::sidd;

InputROI::InputROI(double nr, double nc, double fr, double fc) :
    size(nr, nc),
    upperLeft(fr, fc)
{
}

InputROI* InputROI::clone() const
{
    return new InputROI(*this);
}

TxRcvPolarization::TxRcvPolarization(PolarizationType tx, PolarizationType rcv,
                                     double rcvOffset) :
    txPolarization(tx),
    rcvPolarization(rcv),
    rcvPolarizationOffset(rcvOffset),
    processed(Init::undefined<BooleanType>())
{
}

TxRcvPolarization::TxRcvPolarization(PolarizationType tx, 
                                     PolarizationType rcv) :
    txPolarization(tx),
    rcvPolarization(rcv),
    rcvPolarizationOffset(Init::undefined<double>()),
    processed(Init::undefined<BooleanType>())
{
}

TxRcvPolarization* TxRcvPolarization::clone() const
{
    return new TxRcvPolarization(*this);
}

Information::Information() :
    sensorName(Init::undefined<std::string>()),
    radarMode(Init::undefined<RadarModeType>()),
    radarModeID(Init::undefined<std::string>()),
    localDateTime(Init::undefined<std::string>()),
    collectionDuration(Init::undefined<double>()),
    resolution(Init::undefined<RangeAzimuth<double> >())
{
    //! TODO: Should we set sensorName to SPOTLIGHT?
}

Information* Information::clone() const
{
    return new Information(*this);
}

Geometry::Geometry() :
    azimuth(Init::undefined<double>()),
    slope(Init::undefined<double>()),
    squint(Init::undefined<double>()),
    graze(Init::undefined<double>()),
    tilt(Init::undefined<double>())
{
}

Geometry* Geometry::clone() const
{
    return new Geometry(*this);
}

Phenomenology::Phenomenology() :
    shadow(Init::undefined<AngleMagnitude>()),
    layover(Init::undefined<AngleMagnitude>()),
    multiPath(Init::undefined<double>()),
    groundTrack(Init::undefined<double>())
{
}

Phenomenology* Phenomenology::clone() const
{
    return new Phenomenology(*this);
}

Collection* Collection::clone() const
{
    return new Collection(*this);
}

Product::Product() :
    resolution(Init::undefined<RowColDouble>()),
    north(Init::undefined<double>())
{
}

ExploitationFeatures::ExploitationFeatures(unsigned int numCollections)
{
    collections.resize(numCollections);
    for (unsigned int i = 0; i < numCollections; ++i)
    {
        collections[i].reset(new Collection());
    }
}

ExploitationFeatures* ExploitationFeatures::clone() const
{
    return new ExploitationFeatures(*this);
}
