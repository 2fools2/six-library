/* =========================================================================
 * This file is part of six.sidd-c++
 * =========================================================================
 *
 * (C) Copyright 2004 - 2013, General Dynamics - Advanced Information Systems
 *
 * six.sidd-c++ is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; If not,
 * see <http://www.gnu.org/licenses/>.
 *
 */
#ifndef __SIX_EXPLOITATION_FEATURES_H__
#define __SIX_EXPLOITATION_FEATURES_H__

#include <types/RgAz.h>
#include <six/Types.h>
#include <six/Init.h>

/*!
 *  This file deals with the SIDD data structures for ExploitationFeatures
 *
 */

namespace six
{
namespace sidd
{
/*!
 *  \struct InputROI
 *  \brief SIDD InputROI parameters
 *
 *  The InputROI parameter is used only when
 *  processing from SICD or have a parameter that lists the input source
 */
struct InputROI
{
    InputROI(double nr = 0, double nc = 0, double fr = 0, double fc = 0);

    //!  Extent of ROI
    RowColInt size;

    //!  Starting upper left point
    RowColInt upperLeft;

    /*!
     *  Create a deep copy of the object
     *
     */
    InputROI* clone() const;
};

/*!
 *  \struct TxRcvPolarization
 *  \brief Transmit/Receive Polarization parameters
 *
 *  Stores the transmit polarization type and the receive angle 
 *  relative to the transmit direction
 */
struct TxRcvPolarization
{
    TxRcvPolarization(PolarizationType tx, PolarizationType rcv,
                      double rcvOffset);

    TxRcvPolarization(PolarizationType tx = PolarizationType::NOT_SET,
                      PolarizationType rcv = PolarizationType::NOT_SET);

    PolarizationType txPolarization;
    PolarizationType rcvPolarization;
    double rcvPolarizationOffset;

    /**
     * Optional flag to describe whether this input polarization was used in
     * processing the product.
     */
    BooleanType processed;

    /*!
     *  Create a deep copy of the object
     *
     */
    TxRcvPolarization* clone() const;
};

/*!
 *  \struct Information
 *  \brief SIDD Information object (in ExploitationFeatures)
 *
 *  General collection information.  
 */
struct Information
{

    //!  Constructor.  Sets everything to undefined
    Information();

    //!  Clone the object (including inputROI if non-NULL)
    Information* clone() const;

    //! The name of the sensor
    std::string sensorName;

    /*!
     *  Radar collection mode.  The ModeType
     *  refers to the collection type
     */
    RadarModeType radarMode;

    /*!
     *  (Optional) RadarMode ModeID.  Value dependent on profile
     */
    std::string radarModeID;

    /*!
     *  Collection date and time defined in Coordinated Universal
     *  Time (UTC).  The seconds should be followed by a Z to
     *  indicate UTC.
     */
    DateTime collectionDateTime;

    /*!
     *  (Optional) Date and time defined in local
     *  time, stored as a string
     */
    std::string localDateTime;

    /*!
     *  The duration of collection (units = seconds)
     */
    double collectionDuration;

    /*!
     *  (Optional) Uniformly-weighted resolution (range and azimuth)
     *  processed in the slant plane.
     */
    types::RgAz<double> resolution;

    /*!
     *  (Optional) ROI representing portion of the input
     *  data used to make the product.
     */
    mem::ScopedCloneablePtr<InputROI> inputROI;

    /*!
     *  (Optional) Transmit polarization type and recieve polarization angle
     *  0.2 - unbounded
     */
    std::vector<mem::ScopedCloneablePtr<TxRcvPolarization> > polarization;
};

/*!
 *  \struct Geometry
 *  \brief SIDD Geometry param
 *
 *  Contains key geometry parameters independent of product processing
 */
struct Geometry
{
    /*!
     *  Clockwise angle from North indicating the ETP line of sight
     *  vector
     *
     */
    double azimuth;

    /*!
     *  Angle between the ETP at scene center and the range vector
     *  perpendicular to the direction of motion
     */
    double slope;

    /*!
     *  Angle between range and ground velocity vector at nadir
     */
    double squint;

    /*!
     *  Angle between the ETP and the range vector
     *
     */
    double graze;

    /*!
     *  Angle between the ETP and cross-range vector
     *
     */
    double tilt;

    /*!
     *  Exploitation feature extension related to geometry for a single 
     *  input image
     */
    std::vector<six::Parameter> extensions;

    //! Constructor, sets angles to Init::undefined<double>()
    Geometry();

    //! Copies self
    Geometry* clone() const;
};

/*!
 *  \struct Phenomenology
 *  \brief SIDD Phenomenology
 *
 *  Class containing meta-data for both the geometry and the final
 *  product processing
 *
 */
struct Phenomenology
{
    Phenomenology();

    /*!
     *  Creates a copy of self
     *
     */
    Phenomenology* clone() const;

    /*!
     *  Contains angle/mag for vertical objects occluding
     *  radar energy
     */
    AngleMagnitude shadow;

    /*!
     *  Contains the angle/mag for the layover of a unit height object
     */
    AngleMagnitude layover;

    /*!
     *  Range dependent phenomenon describing the energy from a single
     *  scatterer returned to the radar via more than one path
     *
     */
    double multiPath;

    /*!
     *  Counter-clockwise angle from increasing row direction to
     *  ground track at the center of the image
     */
    double groundTrack;

    /*!
     *  Exploitation feature extension related to phenomenology for a single 
     *  input image
     */
    std::vector<six::Parameter> extensions;

};

/*!
 *  Class containing meta-data associated with Collection data in SIDD.
 *  This is data coming from the input sources (e.g., SICDs)
 *
 */
struct Collection
{

    //!  Constructor
    Collection() :
        information(new Information()), 
        geometry(NULL), 
        phenomenology(NULL)
    {
    }

    /*!
     *  Deep copy of all objects
     *
     */
    Collection* clone() const;

    /*!
     *  Each collection is identified by a unique name.   This
     *  is an attribute to the Collection tag
     */
    std::string identifier;

    /*!
     *  Mandatory general collection information
     */
    mem::ScopedCloneablePtr<Information> information;

    /*!
     *  (Optional) Key geometry parameters independent of product
     *  processing
     */
    mem::ScopedCloneablePtr<Geometry> geometry;

    /*!
     *  (Optional) Phenomenology related to both the geometry
     *  and the final product processing
     */
    mem::ScopedCloneablePtr<Phenomenology> phenomenology;

};

/*!
 *  \struct Product
 *  \brief SIDD Product parameters
 *
 *  Metadata about the product, including the resolution and angle 
 *  to north
 */
struct Product
{
    //!  Constructor, everything is undefined
    Product();

    //!  Uniformly-weighted resolution projected into the Earth Tangent Plane.
    RowColDouble resolution;

    /*!
     *  Counter-clockwise angle from increasing row direction to north at
     *  the center of the image
     */
    double north;

    /*!
     *  Exploitation feature extension for the end product
     */
    std::vector<six::Parameter> extensions;
};

/*!
 *  \struct ExploitationFeatures
 *  \brief SIDD ExploitationFeatures
 *
 *  Class contains SIDD computed meta-data regarding the collections.
 */
struct ExploitationFeatures
{

    //!  Creates a collection object numCollections times
    ExploitationFeatures(unsigned int numCollections = 0);

    /*!
     *  Deep copy of the block, including copies of each Collection
     *
     */
    ExploitationFeatures* clone() const;

    /*!
     *  Meta-data associated with each collection
     */
    std::vector<mem::ScopedCloneablePtr<Collection> > collections;

    /*!
     *  Meta-data associated with the product
     *
     */
    Product product;
};

}
}
#endif

