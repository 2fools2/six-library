import os
import Options, Utils
from build import CPPBuildContext

#override the default build context with our own
Utils.g_module.build_context = Utils.g_module.install_context = Utils.g_module.clean_context = CPPBuildContext

MODULES = 'except str sys io mt nitf scene six six.sicd six.sidd tiff xml.lite'
#MODULES += ' sio.lite'
SAMPLES = 'samples'
def set_options(opt):
    opt.sub_options(MODULES)

def configure(conf):
    
    # Add this to take the cleanup leak over the warning
    if conf.env['PLATFORM'].startswith('sparc-sun'):
        conf.env.append_unique('CXXDEFINES', 'ELIMINATE_BROKEN_LINKAGE')

    conf.env['CPPPATH_MATH_LINEAR'] = os.path.join(conf.curdir, 'math.linear', 'include')
    conf.env['CPPPATH_MATH_POLY'] = os.path.join(conf.curdir, 'math.poly', 'include')

    conf.sub_config(MODULES)
    conf.sub_config(SAMPLES)

def build(bld):
    variant = bld.env['VARIANT'] or 'default'
    env = bld.env_of_name(variant)
    env.set_variant(variant)
    bld.add_subdirs(MODULES)
    bld.add_subdirs(SAMPLES)
    if 'DOXYGEN' in env and Options.is_install:
        bld.new_task_gen(rule='${DOXYGEN}', cwd=bld.path.abspath(), always=True)
        try:
            htmlDocs = bld.path.find_dir('doc/html')
            for f in htmlDocs.find_iter():
                relpath = f.relpath_gen(htmlDocs)
                bld.install_files('${PREFIX}/doc/%s' % relpath, f.abspath())
        except:{}

def distclean(context):
    context.recurse(MODULES)
    context.recurse(SAMPLES)
