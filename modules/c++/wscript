from os.path import join, exists
from waflib import Options, Utils

MODULES = 'cli except io logging math.linear math.poly mem mt nitf scene ' \
          'sio.lite six six.sicd six.sidd str sys tiff types xml.lite'
SAMPLES = 'samples'

def options(opt):
        opt.recurse(filter(lambda x: exists(join(opt.path.abspath(), x, 'wscript')),
                           MODULES.split()))

def configure(conf):
    conf.env.append_value('INCLUDES_UNITTEST', join(conf.path.abspath(), 'include'))
    
    conf.recurse(filter(lambda x: exists(join(conf.path.abspath(), x, 'wscript')),
                           MODULES.split()))
    conf.recurse(SAMPLES)

def build(bld):
    variant = bld.env['VARIANT'] or 'default'
    env = bld.all_envs[variant].derive()
    
    configBuilds = filter(lambda m: not exists(join(bld.path.abspath(), m, 'wscript')),
                          MODULES.split())
    # build these modules from their config files
    map(bld.fromConfig, map(lambda m: join(bld.path.abspath(), m), configBuilds))
    map(bld.recurse, filter(lambda m: m not in configBuilds, MODULES.split()))
    
    bld.recurse(SAMPLES)
    if 'DOXYGEN' in env and Options.is_install:
        bld.new_task_gen(rule='${DOXYGEN}', cwd=bld.path.abspath(), always=True)
        try:
            htmlDocs = bld.path.find_dir('doc/html')
            for f in htmlDocs.find_iter():
                relpath = f.relpath_gen(htmlDocs)
                bld.install_files('${PREFIX}/doc/%s' % relpath, f.abspath())
        except:{}


def distclean(context):
    context.recurse(filter(lambda x: exists(join(context.path.abspath(), x, 'wscript')),
                           MODULES.split()))
    context.recurse(SAMPLES)
