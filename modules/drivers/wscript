import os
import Options
from TaskGen import feature, before, taskgen
import Tools.misc as misc


def set_options(opt):
    opt.add_option('--disable-pcre', action='store_false', dest='enable_pcre',
                   help='turn off PCRE')
    opt.add_option('--enable-pcre', action='store_true',
                   default=True, help='turn on PCRE (default)')
    opt.add_option('--with-pcre-home', action='store',
                   help='Specify the PCRE Home - where PCRE is installed to')
    opt.add_option('--build-pcre', action='store_true',
                   default=False, help='force building PCRE from scratch')
    opt.add_option('--enable-xml-layer', action='store', choices=['expat', 'xerces'],
                   dest='xml_layer', default='expat', help='Specify the XML layer')
    opt.add_option('--with-xml-home', action='store', dest='xml_home',
                   help='Specify the XML Home - where the XML library is installed to')
    opt.add_option('--build-xml', action='store_true',
                   default=False, help='force building XML library (expat) from scratch')

def configure(conf):
    #-- XML --------------------------------------------------------------------
    xmlHome = Options.options.xml_home
    xmlLayer = Options.options.xml_layer
    makeXML = Options.options.build_xml
    pcreHome = Options.options.with_pcre_home
    enablePCRE = Options.options.enable_pcre
    
    if enablePCRE:
        makePCRE = False
        if Options.options.build_pcre:
            makePCRE = True
        elif pcreHome:
            conf.check_message_2('setting pcre home to %s' % pcreHome)
            conf.env.append_value('LIBPATH_PCRE', os.path.join(pcreHome, 'lib'))
            conf.env.append_value('CPPPATH_PCRE', os.path.join(pcreHome, 'include'))
        else:
            if not conf.check_cxx(lib='pcre', mandatory=False,
                                  uselib_store='PCRE'):
                #default to building locally
                makePCRE = True
        if makePCRE:
            conf.env['MAKE_PCRE'] = makePCRE
            conf.check_message_1('Building local lib')
            conf.check_message_2('pcre')
        else:
            conf.env['LIB_PCRE'] = ['pcre']

    if makeXML:
        xmlLayer = 'expat'
    
    if xmlHome and not makeXML:
        conf.check_message_1('Setting xml home')
        conf.check_message_2(xmlHome)
        conf.env.append_value('LIBPATH_XML', os.path.join(xmlHome, 'lib'))
        conf.env.append_value('CPPPATH_XML', os.path.join(xmlHome, 'include'))
    
    expatDefines = '-DUSE_EXPAT -DXML_STATIC'
    if not makeXML:
        if xmlLayer == 'expat':
            conf.env.append_value('CXXFLAGS_XML', expatDefines.split())
            if not xmlHome:
                #look for it on the system
                if not conf.check_cc(lib='expat', mandatory=False, uselib_store='XML') \
                    or not conf.check_cc(header_name='expat.h'):
                    #we must use/build the local one
                    makeXML = True
            else:
                conf.env['LIB_XML'] = ['expat']
        elif xmlLayer == 'xerces':
            conf.env.append_value('CXXFLAGS_XML', '-DUSE_XERCES')
            conf.env['LIB_XML'] = ['xerces-c']
            if not xmlHome:
                conf.check_cxx(lib='xerces-c', mandatory=True, uselib_store='XML')

    if makeXML:
        conf.env['MAKE_XML'] = xmlLayer
        conf.env.append_unique('CXXFLAGS_XML', expatDefines.split())
        conf.check_message_1('Building local lib')
        conf.check_message_2(xmlLayer)
    
    #add some flags for the nitro lib - if a lib states NITRO as a uselib (or uselib local)
    #these flags will get applied automatically
    conf.env.append_value('CCFLAGS_nitf-c', '-DNITF_MODULE_EXPORTS')
    conf.env.append_value('CXXFLAGS_nitf-c', '-DNITF_MODULE_EXPORTS')

@taskgen
@feature('untar')
def untar(self):
    import tarfile
    f = self.path.find_or_declare(self.fname)
    tf = tarfile.open(f.abspath(), 'r')
    p = self.path.abspath()
    for x in tf:
        tf.extract(x, p)
    tf.close()
    

@taskgen
@feature('m4subst')
def m4subst(tsk):
    import re
    #similar to the subst in misc.py - but outputs to the src directory
    m4_re = re.compile('@(\w+)@', re.M)

    env = tsk.env
    infile = os.path.join(tsk.path.abspath(), tsk.input)
    outfile = os.path.join(tsk.path.abspath(), tsk.output)
    
    file = open(infile, 'r')
    code = file.read()
    file.close()

    # replace all % by %% to prevent errors by % signs in the input file while string formatting
    code = code.replace('%', '%%')

    s = m4_re.sub(r'%(\1)s', code)

    di = tsk.dict or {}
    if not di:
        names = m4_re.findall(code)
        for i in names:
            di[i] = env.get_flat(i) or env.get_flat(i.upper())
    
    file = open(outfile, 'w')
    file.write(s % di)
    file.close()
    if tsk.chmod: os.chmod(outfile, tsk.chmod)


@taskgen
@feature('commentUndefs')
def commentUndefs(tsk):
    import re
    env = tsk.env
    infile = os.path.join(tsk.path.abspath(), tsk.input)
    outfile = os.path.join(tsk.path.abspath(), tsk.output)
    
    file = open(infile, 'r')
    code = file.read()
    file.close()

    code = re.sub(r'(#undef[^\n]*)(\n)', r'/* \1 */\2', code)
    file = open(outfile, 'w')
    file.write(code)
    file.close()
    if tsk.chmod: os.chmod(outfile, tsk.chmod)


@taskgen
@feature('makeHeader')
def makeHeader(tsk):
    outfile = os.path.join(tsk.path.abspath(), tsk.output)
    dest = open(outfile, 'w')
    guard = '__CONFIG_H__'
    dest.write('#ifndef %s\n#define %s\n\n' % (guard, guard))

    for k in tsk.defs.keys():
        v = tsk.defs[k]
        if v is None:
            v = ''
        dest.write('\n#ifndef %s\n#define %s %s\n#endif\n' % (k, k, v))
    
    if hasattr(tsk, 'undefs'):
        for u in tsk.undefs:
            dest.write('\n#undef %s\n' % u)

    dest.write('\n#endif /* %s */\n' % guard)
    dest.close()
    if tsk.chmod: os.chmod(outfile, tsk.chmod)


def build(bld):
    variant = bld.env['VARIANT']
    env = bld.env_of_name(variant)
    env.set_variant(variant)

    defs = env['defines']
    defList = []
    for k, v in defs.iteritems():
        if v:
            defList.append('%s=%s' % (k, v))
    #defs = map(lambda t: '%s=%s' % t, [(k, v) for k, v in bld.env['defines'].iteritems()])

    driversNode = bld.path

    if 'MAKE_PCRE' in env:
        fname = 'pcre-5.0'
        ut = bld.new_task_gen(path=bld.path, env=env.copy(),
                              fname='%s.tar' % fname, before='dftables')
        ut.features = ['untar']
        bld.add_group()
        
        driverNode = driversNode.ensure_dir_node_from_path(fname)
        
        #we need to do a few substitution transformations
        #these taken from the configure.in in the package
        pcreDict = dict(PCRE_MAJOR=5, PCRE_MINOR=0, PCRE_DATE='13-Sep-2004',
                        MATCH_LIMIT=10000000, POSIX_MALLOC_THRESHOLD=10,
                        HAVE_STRERROR=env['HAVE_STRERROR'],
                        HAVE_MEMMOVE=env['HAVE_MEMMOVE'],
                        HAVE_BCOPY=env['HAVE_BCOPY'],
                        EBCDIC=0, NEWLINE="'\\n'", LINK_SIZE=2,
                        EXPORT=None)
        
        configH = bld.new_task_gen(output='config.h',
                                   path=driverNode, env=env.copy(),
                                   defs=pcreDict, before='dftables')
        configH.features = ['makeHeader']
        
        pcreH = bld.new_task_gen(input='pcre.in', output='pcre.h', env=env.copy(),
                                 dict=pcreDict, path=driverNode, before='dftables')
        pcreH.features = ['m4subst']
        
        #make the dftables executable
        dfTables = bld.new_task_gen('cc', 'program', source='dftables.c',
                                    includes=['.'],
                                    target='dftables',
                                    path=driverNode,
                                    install_path=None,
                                    env=env.copy(),
                                    before='chartables')
        bld.add_group()
        
        appName = Options.platform.startswith('win32') and 'dftables.exe' or 'dftables'
        charTables = bld.new_task_gen(source=appName, path=driverNode,
                                      rule='${SRC} "%s/chartables.c"' % driverNode.abspath(),
                                      install_path=None, name='chartables',
                                      env=env.copy(), before='pcre')
        bld.add_group()
        
        
        pcreposix = bld.new_task_gen('cc', env['LIB_TYPE'] or 'staticlib',
                         includes=['.'], env=env.copy(),
                         target='pcreposix', source='pcreposix.c',
                         path=driverNode, export_incdirs='.')
    
        pcre = bld.new_task_gen('cc', env['LIB_TYPE'] or 'staticlib',
                         includes=['.'],
                         export_incdirs='.',
                         target='pcre',
                         source='maketables.c get.c study.c pcre.c',
                         path=driverNode,
                         env=env.copy(),
                         name='PCRE')
        
        bld.install_files('${PREFIX}/include',
                          map(lambda x: os.path.join(driverNode.abspath(), x),
                              'pcre.h pcreposix.h'.split()))
    
    if 'MAKE_XML' in env:
        
        driver = Options.options.xml_layer
        
        if driver == 'expat':
            fname = 'expat-2.0.0'
            ut = bld.new_task_gen(path=bld.path, fname='%s.tar' % fname,
                                  env=env.copy(), before='XML')
            ut.features = ['untar']
            bld.add_group()
            
            driverNode = driversNode.ensure_dir_node_from_path(fname)
        
            expatDefs = ['PACKAGE_VERSION="2.0.0"',
                         'XML_CONTEXT_BYTES=1024',
                         'XML_DTD=1',
                         'XML_NS=1',
                         'PACKAGE_STRING="expat 2.0.0"',
                         'XML_STATIC=1']
            
            sources = 'lib/xmlparse.c lib/xmltok.c lib/xmlrole.c'
            expat = bld.new_task_gen('cc', env['LIB_TYPE'] or 'staticlib', source=sources,
                             includes='.', export_incdirs='lib',
                             target='expat', path=driverNode,
                             uselib='XML', name='XML', env=env.copy(),
                             defines=defList + expatDefs)
            for f in ['expat.h', 'expat_external.h']:
                bld.install_files('${PREFIX}/include',
                              os.path.join(driverNode.abspath(), 'lib/%s' % f))
        else:
            raise Exception('Invalid XML driver: %s' % driver)
    
def distclean(context):
    #remove the untarred directories
    import shutil
    
    dirs = map(lambda d: os.path.join(context.curdir, d),
               ['expat-2.0.0'])
    for d in dirs:
        try:
            if os.path.exists(d):
                shutil.rmtree(d, ignore_errors=True)
        except:{}
