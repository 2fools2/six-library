# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_scene', [dirname(__file__)])
        except ImportError:
            import _scene
            return _scene
        if fp is not None:
            try:
                _mod = imp.load_module('_scene', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _scene = swig_import_helper()
    del swig_import_helper
else:
    import _scene
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _scene.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _scene.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _scene.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _scene.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _scene.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _scene.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _scene.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _scene.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _scene.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _scene.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _scene.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _scene.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _scene.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _scene.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _scene.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _scene.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _scene.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _scene.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import coda.coda_except
import coda.math_linear
import coda.math_poly
import coda.coda_types
import coda.coda_sys

_scene.TRACK_LEFT_swigconstant(_scene)
TRACK_LEFT = _scene.TRACK_LEFT

_scene.TRACK_RIGHT_swigconstant(_scene)
TRACK_RIGHT = _scene.TRACK_RIGHT

_scene.FEET_swigconstant(_scene)
FEET = _scene.FEET

_scene.METERS_swigconstant(_scene)
METERS = _scene.METERS

_scene.INVALID_UNITS_swigconstant(_scene)
INVALID_UNITS = _scene.INVALID_UNITS

_scene.DEGREES_swigconstant(_scene)
DEGREES = _scene.DEGREES

_scene.RADIANS_swigconstant(_scene)
RADIANS = _scene.RADIANS

_scene.INVALID_ANGULAR_UNITS_swigconstant(_scene)
INVALID_ANGULAR_UNITS = _scene.INVALID_ANGULAR_UNITS

_scene.XYZ_X_swigconstant(_scene)
XYZ_X = _scene.XYZ_X

_scene.XYZ_Y_swigconstant(_scene)
XYZ_Y = _scene.XYZ_Y

_scene.XYZ_Z_swigconstant(_scene)
XYZ_Z = _scene.XYZ_Z
class AngleMagnitude(_object):
    """Proxy of C++ scene::AngleMagnitude class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngleMagnitude, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngleMagnitude, name)
    __repr__ = _swig_repr

    def __init__(self, _angle=0, _magnitude=0):
        """
        __init__(scene::AngleMagnitude self, double _angle=0, double _magnitude=0) -> AngleMagnitude
        __init__(scene::AngleMagnitude self, double _angle=0) -> AngleMagnitude
        __init__(scene::AngleMagnitude self) -> AngleMagnitude
        """
        this = _scene.new_AngleMagnitude(_angle, _magnitude)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["angle"] = _scene.AngleMagnitude_angle_set
    __swig_getmethods__["angle"] = _scene.AngleMagnitude_angle_get
    if _newclass:
        angle = _swig_property(_scene.AngleMagnitude_angle_get, _scene.AngleMagnitude_angle_set)
    __swig_setmethods__["magnitude"] = _scene.AngleMagnitude_magnitude_set
    __swig_getmethods__["magnitude"] = _scene.AngleMagnitude_magnitude_get
    if _newclass:
        magnitude = _swig_property(_scene.AngleMagnitude_magnitude_get, _scene.AngleMagnitude_magnitude_set)

    def __eq__(self, am):
        """__eq__(AngleMagnitude self, AngleMagnitude am) -> bool"""
        return _scene.AngleMagnitude___eq__(self, am)


    def __ne__(self, am):
        """__ne__(AngleMagnitude self, AngleMagnitude am) -> bool"""
        return _scene.AngleMagnitude___ne__(self, am)

    __swig_destroy__ = _scene.delete_AngleMagnitude
    __del__ = lambda self: None
AngleMagnitude_swigregister = _scene.AngleMagnitude_swigregister
AngleMagnitude_swigregister(AngleMagnitude)

class LatLon(_object):
    """Proxy of C++ scene::LatLon class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatLon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LatLon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::LatLon self, double scalar=0.0) -> LatLon
        __init__(scene::LatLon self) -> LatLon
        __init__(scene::LatLon self, double lat, double lon) -> LatLon
        __init__(scene::LatLon self, LatLon lla) -> LatLon
        """
        this = _scene.new_LatLon(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getLat(self):
        """getLat(LatLon self) -> double"""
        return _scene.LatLon_getLat(self)


    def getLon(self):
        """getLon(LatLon self) -> double"""
        return _scene.LatLon_getLon(self)


    def getLatRadians(self):
        """getLatRadians(LatLon self) -> double"""
        return _scene.LatLon_getLatRadians(self)


    def getLonRadians(self):
        """getLonRadians(LatLon self) -> double"""
        return _scene.LatLon_getLonRadians(self)


    def setLat(self, lat):
        """setLat(LatLon self, double lat)"""
        return _scene.LatLon_setLat(self, lat)


    def setLon(self, lon):
        """setLon(LatLon self, double lon)"""
        return _scene.LatLon_setLon(self, lon)


    def setLatRadians(self, lat):
        """setLatRadians(LatLon self, double lat)"""
        return _scene.LatLon_setLatRadians(self, lat)


    def setLonRadians(self, lon):
        """setLonRadians(LatLon self, double lon)"""
        return _scene.LatLon_setLonRadians(self, lon)


    def __eq__(self, x):
        """__eq__(LatLon self, LatLon x) -> bool"""
        return _scene.LatLon___eq__(self, x)

    __swig_destroy__ = _scene.delete_LatLon
    __del__ = lambda self: None
LatLon_swigregister = _scene.LatLon_swigregister
LatLon_swigregister(LatLon)

class LatLonAlt(LatLon):
    """Proxy of C++ scene::LatLonAlt class"""
    __swig_setmethods__ = {}
    for _s in [LatLon]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatLonAlt, name, value)
    __swig_getmethods__ = {}
    for _s in [LatLon]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatLonAlt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::LatLonAlt self, double scalar=0.0) -> LatLonAlt
        __init__(scene::LatLonAlt self) -> LatLonAlt
        __init__(scene::LatLonAlt self, double lat, double lon, double alt=0) -> LatLonAlt
        __init__(scene::LatLonAlt self, double lat, double lon) -> LatLonAlt
        __init__(scene::LatLonAlt self, LatLonAlt lla) -> LatLonAlt
        """
        this = _scene.new_LatLonAlt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getLat(self):
        """getLat(LatLonAlt self) -> double"""
        return _scene.LatLonAlt_getLat(self)


    def getLon(self):
        """getLon(LatLonAlt self) -> double"""
        return _scene.LatLonAlt_getLon(self)


    def getLatRadians(self):
        """getLatRadians(LatLonAlt self) -> double"""
        return _scene.LatLonAlt_getLatRadians(self)


    def getLonRadians(self):
        """getLonRadians(LatLonAlt self) -> double"""
        return _scene.LatLonAlt_getLonRadians(self)


    def setLat(self, lat):
        """setLat(LatLonAlt self, double lat)"""
        return _scene.LatLonAlt_setLat(self, lat)


    def setLon(self, lon):
        """setLon(LatLonAlt self, double lon)"""
        return _scene.LatLonAlt_setLon(self, lon)


    def setLatRadians(self, lat):
        """setLatRadians(LatLonAlt self, double lat)"""
        return _scene.LatLonAlt_setLatRadians(self, lat)


    def setLonRadians(self, lon):
        """setLonRadians(LatLonAlt self, double lon)"""
        return _scene.LatLonAlt_setLonRadians(self, lon)


    def getAlt(self):
        """getAlt(LatLonAlt self) -> double"""
        return _scene.LatLonAlt_getAlt(self)


    def setAlt(self, alt):
        """setAlt(LatLonAlt self, double alt)"""
        return _scene.LatLonAlt_setAlt(self, alt)


    def __eq__(self, x):
        """__eq__(LatLonAlt self, LatLonAlt x) -> bool"""
        return _scene.LatLonAlt___eq__(self, x)

    __swig_destroy__ = _scene.delete_LatLonAlt
    __del__ = lambda self: None
LatLonAlt_swigregister = _scene.LatLonAlt_swigregister
LatLonAlt_swigregister(LatLonAlt)

class EllipsoidModel(_object):
    """Proxy of C++ scene::EllipsoidModel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::EllipsoidModel self) -> EllipsoidModel
        __init__(scene::EllipsoidModel self, EllipsoidModel m) -> EllipsoidModel
        __init__(scene::EllipsoidModel self, scene::Units unitsVal, scene::AngularUnits angularUnitsVal, double eqRadiusVal, double polRadiusVal) -> EllipsoidModel
        """
        this = _scene.new_EllipsoidModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_EllipsoidModel
    __del__ = lambda self: None

    def getUnits(self):
        """getUnits(EllipsoidModel self) -> scene::Units"""
        return _scene.EllipsoidModel_getUnits(self)


    def getAngularUnits(self):
        """getAngularUnits(EllipsoidModel self) -> scene::AngularUnits"""
        return _scene.EllipsoidModel_getAngularUnits(self)


    def getEquatorialRadius(self):
        """getEquatorialRadius(EllipsoidModel self) -> double"""
        return _scene.EllipsoidModel_getEquatorialRadius(self)


    def getPolarRadius(self):
        """getPolarRadius(EllipsoidModel self) -> double"""
        return _scene.EllipsoidModel_getPolarRadius(self)


    def calculateFlattening(self):
        """calculateFlattening(EllipsoidModel self) -> double"""
        return _scene.EllipsoidModel_calculateFlattening(self)


    def calculateEccentricity(self):
        """calculateEccentricity(EllipsoidModel self) -> double"""
        return _scene.EllipsoidModel_calculateEccentricity(self)


    def setUnits(self, val):
        """setUnits(EllipsoidModel self, scene::Units val)"""
        return _scene.EllipsoidModel_setUnits(self, val)


    def setAngularUnits(self, val):
        """setAngularUnits(EllipsoidModel self, scene::AngularUnits val)"""
        return _scene.EllipsoidModel_setAngularUnits(self, val)


    def setEquatorialRadius(self, val):
        """setEquatorialRadius(EllipsoidModel self, double val)"""
        return _scene.EllipsoidModel_setEquatorialRadius(self, val)


    def setPolarRadius(self, val):
        """setPolarRadius(EllipsoidModel self, double val)"""
        return _scene.EllipsoidModel_setPolarRadius(self, val)

EllipsoidModel_swigregister = _scene.EllipsoidModel_swigregister
EllipsoidModel_swigregister(EllipsoidModel)

class WGS84EllipsoidModel(EllipsoidModel):
    """Proxy of C++ scene::WGS84EllipsoidModel class"""
    __swig_setmethods__ = {}
    for _s in [EllipsoidModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WGS84EllipsoidModel, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipsoidModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WGS84EllipsoidModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::WGS84EllipsoidModel self) -> WGS84EllipsoidModel
        __init__(scene::WGS84EllipsoidModel self, scene::Units unitsVal, scene::AngularUnits angularUnitsVal) -> WGS84EllipsoidModel
        __init__(scene::WGS84EllipsoidModel self, WGS84EllipsoidModel m) -> WGS84EllipsoidModel
        """
        this = _scene.new_WGS84EllipsoidModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_WGS84EllipsoidModel
    __del__ = lambda self: None

    def initRadiusValues(self):
        """initRadiusValues(WGS84EllipsoidModel self)"""
        return _scene.WGS84EllipsoidModel_initRadiusValues(self)


    def setEquatorialRadius(self, val):
        """setEquatorialRadius(WGS84EllipsoidModel self, double val)"""
        return _scene.WGS84EllipsoidModel_setEquatorialRadius(self, val)


    def setPolarRadius(self, val):
        """setPolarRadius(WGS84EllipsoidModel self, double val)"""
        return _scene.WGS84EllipsoidModel_setPolarRadius(self, val)

WGS84EllipsoidModel_swigregister = _scene.WGS84EllipsoidModel_swigregister
WGS84EllipsoidModel_swigregister(WGS84EllipsoidModel)
cvar = _scene.cvar
WGS84EllipsoidModel.EQUATORIAL_RADIUS_METERS = _scene.cvar.WGS84EllipsoidModel_EQUATORIAL_RADIUS_METERS
WGS84EllipsoidModel.POLAR_RADIUS_METERS = _scene.cvar.WGS84EllipsoidModel_POLAR_RADIUS_METERS

class Utilities(_object):
    """Proxy of C++ scene::Utilities class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Utilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Utilities, name)
    __repr__ = _swig_repr

    def latLonToECEF(*args):
        """
        latLonToECEF(LatLonAlt latLon) -> Vector3
        latLonToECEF(LatLon latLon) -> Vector3
        """
        return _scene.Utilities_latLonToECEF(*args)

    if _newclass:
        latLonToECEF = staticmethod(latLonToECEF)
    __swig_getmethods__["latLonToECEF"] = lambda x: latLonToECEF

    def ecefToLatLon(vec):
        """ecefToLatLon(Vector3 vec) -> LatLonAlt"""
        return _scene.Utilities_ecefToLatLon(vec)

    if _newclass:
        ecefToLatLon = staticmethod(ecefToLatLon)
    __swig_getmethods__["ecefToLatLon"] = lambda x: ecefToLatLon

    def remapZeroTo360(degree):
        """remapZeroTo360(double degree) -> double"""
        return _scene.Utilities_remapZeroTo360(degree)

    if _newclass:
        remapZeroTo360 = staticmethod(remapZeroTo360)
    __swig_getmethods__["remapZeroTo360"] = lambda x: remapZeroTo360

    def __init__(self):
        """__init__(scene::Utilities self) -> Utilities"""
        this = _scene.new_Utilities()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_Utilities
    __del__ = lambda self: None
Utilities_swigregister = _scene.Utilities_swigregister
Utilities_swigregister(Utilities)

def Utilities_latLonToECEF(*args):
    """
    latLonToECEF(LatLonAlt latLon) -> Vector3
    Utilities_latLonToECEF(LatLon latLon) -> Vector3
    """
    return _scene.Utilities_latLonToECEF(*args)

def Utilities_ecefToLatLon(vec):
    """Utilities_ecefToLatLon(Vector3 vec) -> LatLonAlt"""
    return _scene.Utilities_ecefToLatLon(vec)

def Utilities_remapZeroTo360(degree):
    """Utilities_remapZeroTo360(double degree) -> double"""
    return _scene.Utilities_remapZeroTo360(degree)

class CoordinateTransform(_object):
    """Proxy of C++ scene::CoordinateTransform class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateTransform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::CoordinateTransform self) -> CoordinateTransform
        __init__(scene::CoordinateTransform self, EllipsoidModel initVals) -> CoordinateTransform
        """
        this = _scene.new_CoordinateTransform(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_CoordinateTransform
    __del__ = lambda self: None

    def setEllipsoidModel(self, initVals):
        """setEllipsoidModel(CoordinateTransform self, EllipsoidModel initVals)"""
        return _scene.CoordinateTransform_setEllipsoidModel(self, initVals)


    def getEllipsoidModel(self, *args):
        """
        getEllipsoidModel(CoordinateTransform self) -> EllipsoidModel
        getEllipsoidModel(CoordinateTransform self) -> EllipsoidModel
        """
        return _scene.CoordinateTransform_getEllipsoidModel(self, *args)


    def clone(self):
        """clone(CoordinateTransform self) -> CoordinateTransform"""
        return _scene.CoordinateTransform_clone(self)

CoordinateTransform_swigregister = _scene.CoordinateTransform_swigregister
CoordinateTransform_swigregister(CoordinateTransform)

class ECEFToLLATransform(CoordinateTransform):
    """Proxy of C++ scene::ECEFToLLATransform class"""
    __swig_setmethods__ = {}
    for _s in [CoordinateTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECEFToLLATransform, name, value)
    __swig_getmethods__ = {}
    for _s in [CoordinateTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ECEFToLLATransform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::ECEFToLLATransform self) -> ECEFToLLATransform
        __init__(scene::ECEFToLLATransform self, EllipsoidModel initVals) -> ECEFToLLATransform
        """
        this = _scene.new_ECEFToLLATransform(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_ECEFToLLATransform
    __del__ = lambda self: None

    def clone(self):
        """clone(ECEFToLLATransform self) -> ECEFToLLATransform"""
        return _scene.ECEFToLLATransform_clone(self)


    def transform(self, ecef):
        """transform(ECEFToLLATransform self, Vector3 ecef) -> LatLonAlt"""
        return _scene.ECEFToLLATransform_transform(self, ecef)

ECEFToLLATransform_swigregister = _scene.ECEFToLLATransform_swigregister
ECEFToLLATransform_swigregister(ECEFToLLATransform)

class LLAToECEFTransform(CoordinateTransform):
    """Proxy of C++ scene::LLAToECEFTransform class"""
    __swig_setmethods__ = {}
    for _s in [CoordinateTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLAToECEFTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [CoordinateTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LLAToECEFTransform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::LLAToECEFTransform self) -> LLAToECEFTransform
        __init__(scene::LLAToECEFTransform self, EllipsoidModel initVals) -> LLAToECEFTransform
        """
        this = _scene.new_LLAToECEFTransform(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_LLAToECEFTransform
    __del__ = lambda self: None

    def clone(self):
        """clone(LLAToECEFTransform self) -> LLAToECEFTransform"""
        return _scene.LLAToECEFTransform_clone(self)


    def transform(self, lla):
        """transform(LLAToECEFTransform self, LatLonAlt lla) -> Vector3"""
        return _scene.LLAToECEFTransform_transform(self, lla)

LLAToECEFTransform_swigregister = _scene.LLAToECEFTransform_swigregister
LLAToECEFTransform_swigregister(LLAToECEFTransform)

class LocalCoordinateTransform(_object):
    """Proxy of C++ scene::LocalCoordinateTransform class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalCoordinateTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalCoordinateTransform, name)
    __repr__ = _swig_repr

    def __init__(self, refPt):
        """__init__(scene::LocalCoordinateTransform self, LatLonAlt refPt) -> LocalCoordinateTransform"""
        this = _scene.new_LocalCoordinateTransform(refPt)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_LocalCoordinateTransform
    __del__ = lambda self: None

    def toECEFPoint(self, localPoint):
        """toECEFPoint(LocalCoordinateTransform self, Vector3 localPoint) -> Vector3"""
        return _scene.LocalCoordinateTransform_toECEFPoint(self, localPoint)


    def toLocalPoint(self, ecefPoint):
        """toLocalPoint(LocalCoordinateTransform self, Vector3 ecefPoint) -> Vector3"""
        return _scene.LocalCoordinateTransform_toLocalPoint(self, ecefPoint)


    def getTransformMatrix(self):
        """getTransformMatrix(LocalCoordinateTransform self) -> math::linear::MatrixMxN< 3,3,double >"""
        return _scene.LocalCoordinateTransform_getTransformMatrix(self)


    def getUnitVectorX(self):
        """getUnitVectorX(LocalCoordinateTransform self) -> Vector3"""
        return _scene.LocalCoordinateTransform_getUnitVectorX(self)


    def getUnitVectorY(self):
        """getUnitVectorY(LocalCoordinateTransform self) -> Vector3"""
        return _scene.LocalCoordinateTransform_getUnitVectorY(self)


    def getUnitVectorZ(self):
        """getUnitVectorZ(LocalCoordinateTransform self) -> Vector3"""
        return _scene.LocalCoordinateTransform_getUnitVectorZ(self)


    def rotate90(self):
        """rotate90(LocalCoordinateTransform self)"""
        return _scene.LocalCoordinateTransform_rotate90(self)

LocalCoordinateTransform_swigregister = _scene.LocalCoordinateTransform_swigregister
LocalCoordinateTransform_swigregister(LocalCoordinateTransform)

class ENUCoordinateTransform(LocalCoordinateTransform):
    """Proxy of C++ scene::ENUCoordinateTransform class"""
    __swig_setmethods__ = {}
    for _s in [LocalCoordinateTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENUCoordinateTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalCoordinateTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ENUCoordinateTransform, name)
    __repr__ = _swig_repr

    def __init__(self, refPt):
        """__init__(scene::ENUCoordinateTransform self, LatLonAlt refPt) -> ENUCoordinateTransform"""
        this = _scene.new_ENUCoordinateTransform(refPt)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_ENUCoordinateTransform
    __del__ = lambda self: None
ENUCoordinateTransform_swigregister = _scene.ENUCoordinateTransform_swigregister
ENUCoordinateTransform_swigregister(ENUCoordinateTransform)

class NEDCoordinateTransform(LocalCoordinateTransform):
    """Proxy of C++ scene::NEDCoordinateTransform class"""
    __swig_setmethods__ = {}
    for _s in [LocalCoordinateTransform]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NEDCoordinateTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalCoordinateTransform]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NEDCoordinateTransform, name)
    __repr__ = _swig_repr

    def __init__(self, refPt):
        """__init__(scene::NEDCoordinateTransform self, LatLonAlt refPt) -> NEDCoordinateTransform"""
        this = _scene.new_NEDCoordinateTransform(refPt)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _scene.delete_NEDCoordinateTransform
    __del__ = lambda self: None
NEDCoordinateTransform_swigregister = _scene.NEDCoordinateTransform_swigregister
NEDCoordinateTransform_swigregister(NEDCoordinateTransform)

class SceneGeometry(_object):
    """Proxy of C++ scene::SceneGeometry class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::SceneGeometry self, Vector3 arpVel, Vector3 arpPos, Vector3 refPos) -> SceneGeometry
        __init__(scene::SceneGeometry self, Vector3 arpVel, Vector3 arpPos, Vector3 refPos, Vector3 imageRow, Vector3 imageCol) -> SceneGeometry
        __init__(scene::SceneGeometry self, Vector3 arpVel, Vector3 arpPos, Vector3 refPos, Vector3 imageRow, Vector3 imageCol, Vector3 opX, Vector3 opY) -> SceneGeometry
        """
        this = _scene.new_SceneGeometry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setImageVectors(self, row, col):
        """setImageVectors(SceneGeometry self, Vector3 row, Vector3 col)"""
        return _scene.SceneGeometry_setImageVectors(self, row, col)


    def setOutputPlaneVectors(self, opX, opY):
        """setOutputPlaneVectors(SceneGeometry self, Vector3 opX, Vector3 opY)"""
        return _scene.SceneGeometry_setOutputPlaneVectors(self, opX, opY)


    def getImageRowVector(self):
        """getImageRowVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getImageRowVector(self)


    def getImageColVector(self):
        """getImageColVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getImageColVector(self)


    def getOPXVector(self):
        """getOPXVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getOPXVector(self)


    def getOPYVector(self):
        """getOPYVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getOPYVector(self)


    def getOPZVector(self):
        """getOPZVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getOPZVector(self)


    def getARPPosition(self):
        """getARPPosition(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getARPPosition(self)


    def getARPVelocity(self):
        """getARPVelocity(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getARPVelocity(self)


    def getReferencePosition(self):
        """getReferencePosition(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getReferencePosition(self)


    def getGroundTrack(self, normalVec):
        """getGroundTrack(SceneGeometry self, Vector3 normalVec) -> Vector3"""
        return _scene.SceneGeometry_getGroundTrack(self, normalVec)


    def getETPGroundTrack(self):
        """getETPGroundTrack(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getETPGroundTrack(self)


    def getOPGroundTrack(self):
        """getOPGroundTrack(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getOPGroundTrack(self)


    def getGroundRange(self):
        """getGroundRange(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getGroundRange(self)


    def getSideOfTrack(self):
        """getSideOfTrack(SceneGeometry self) -> scene::SideOfTrack"""
        return _scene.SceneGeometry_getSideOfTrack(self)


    def getImageAngle(self, vec):
        """getImageAngle(SceneGeometry self, Vector3 vec) -> double"""
        return _scene.SceneGeometry_getImageAngle(self, vec)


    def getSlantPlaneX(self):
        """getSlantPlaneX(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getSlantPlaneX(self)


    def getSlantPlaneY(self):
        """getSlantPlaneY(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getSlantPlaneY(self)


    def getSlantPlaneZ(self):
        """getSlantPlaneZ(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getSlantPlaneZ(self)


    def getGroundPlaneNormal(self):
        """getGroundPlaneNormal(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getGroundPlaneNormal(self)


    def getGrazingAngle(self, normalVec):
        """getGrazingAngle(SceneGeometry self, Vector3 normalVec) -> double"""
        return _scene.SceneGeometry_getGrazingAngle(self, normalVec)


    def getETPGrazingAngle(self):
        """getETPGrazingAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getETPGrazingAngle(self)


    def getOPGrazingAngle(self):
        """getOPGrazingAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getOPGrazingAngle(self)


    def getTiltAngle(self, normalVec):
        """getTiltAngle(SceneGeometry self, Vector3 normalVec) -> double"""
        return _scene.SceneGeometry_getTiltAngle(self, normalVec)


    def getETPTiltAngle(self):
        """getETPTiltAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getETPTiltAngle(self)


    def getOPTiltAngle(self):
        """getOPTiltAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getOPTiltAngle(self)


    def getDopplerConeAngle(self):
        """getDopplerConeAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getDopplerConeAngle(self)


    def getSquintAngle(self):
        """getSquintAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getSquintAngle(self)


    def getSlopeAngle(self, normalVec):
        """getSlopeAngle(SceneGeometry self, Vector3 normalVec) -> double"""
        return _scene.SceneGeometry_getSlopeAngle(self, normalVec)


    def getETPSlopeAngle(self):
        """getETPSlopeAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getETPSlopeAngle(self)


    def getOPSlopeAngle(self):
        """getOPSlopeAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getOPSlopeAngle(self)


    def getAzimuthAngle(self):
        """getAzimuthAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getAzimuthAngle(self)


    def getRotationAngle(self):
        """getRotationAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getRotationAngle(self)


    def getMultiPathVector(self):
        """getMultiPathVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getMultiPathVector(self)


    def getMultiPathAngle(self):
        """getMultiPathAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getMultiPathAngle(self)


    def getOPGroundTrackAngle(self):
        """getOPGroundTrackAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getOPGroundTrackAngle(self)


    def getOPAngle(self, vec):
        """getOPAngle(SceneGeometry self, Vector3 vec) -> double"""
        return _scene.SceneGeometry_getOPAngle(self, vec)


    def getOPNorthAngle(self):
        """getOPNorthAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getOPNorthAngle(self)


    def getOPLayoverAngle(self):
        """getOPLayoverAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getOPLayoverAngle(self)


    def getOPShadowAngle(self):
        """getOPShadowAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getOPShadowAngle(self)


    def getNorthVector(self):
        """getNorthVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getNorthVector(self)


    def getSceneCenterNorthVector(self):
        """getSceneCenterNorthVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getSceneCenterNorthVector(self)


    def getNorthAngle(self):
        """getNorthAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getNorthAngle(self)


    def getHeadingAngle(self):
        """getHeadingAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getHeadingAngle(self)


    def getLayoverVector(self, *args):
        """
        getLayoverVector(SceneGeometry self, Vector3 planeZ) -> Vector3
        getLayoverVector(SceneGeometry self) -> Vector3
        """
        return _scene.SceneGeometry_getLayoverVector(self, *args)


    def getLayover(self):
        """getLayover(SceneGeometry self) -> AngleMagnitude"""
        return _scene.SceneGeometry_getLayover(self)


    def getETPLayoverAngle(self):
        """getETPLayoverAngle(SceneGeometry self) -> double"""
        return _scene.SceneGeometry_getETPLayoverAngle(self)


    def getShadowVector(self):
        """getShadowVector(SceneGeometry self) -> Vector3"""
        return _scene.SceneGeometry_getShadowVector(self)


    def getShadow(self):
        """getShadow(SceneGeometry self) -> AngleMagnitude"""
        return _scene.SceneGeometry_getShadow(self)


    def getGroundResolution(self, res):
        """getGroundResolution(SceneGeometry self, RgAzDouble res) -> RowColDouble"""
        return _scene.SceneGeometry_getGroundResolution(self, res)

    __swig_destroy__ = _scene.delete_SceneGeometry
    __del__ = lambda self: None
SceneGeometry_swigregister = _scene.SceneGeometry_swigregister
SceneGeometry_swigregister(SceneGeometry)

class FrameType(_object):
    """Proxy of C++ scene::FrameType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameType, name)
    __repr__ = _swig_repr
    ECF = _scene.FrameType_ECF
    RIC_ECF = _scene.FrameType_RIC_ECF
    RIC_ECI = _scene.FrameType_RIC_ECI
    NOT_SET = _scene.FrameType_NOT_SET

    def __init__(self, *args):
        """
        __init__(scene::FrameType self, scene::FrameType::FrameTypesEnum value) -> FrameType
        __init__(scene::FrameType self) -> FrameType
        __init__(scene::FrameType self, std::string const & str) -> FrameType
        """
        this = _scene.new_FrameType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def toString(self):
        """toString(FrameType self) -> std::string"""
        return _scene.FrameType_toString(self)


    def fromString(str):
        """fromString(std::string const & str) -> scene::FrameType::FrameTypesEnum"""
        return _scene.FrameType_fromString(str)

    if _newclass:
        fromString = staticmethod(fromString)
    __swig_getmethods__["fromString"] = lambda x: fromString

    def __eq__(self, rhs):
        """__eq__(FrameType self, scene::FrameType::FrameTypesEnum rhs) -> bool"""
        return _scene.FrameType___eq__(self, rhs)


    def __ne__(self, rhs):
        """__ne__(FrameType self, scene::FrameType::FrameTypesEnum rhs) -> bool"""
        return _scene.FrameType___ne__(self, rhs)

    __swig_setmethods__["mValue"] = _scene.FrameType_mValue_set
    __swig_getmethods__["mValue"] = _scene.FrameType_mValue_get
    if _newclass:
        mValue = _swig_property(_scene.FrameType_mValue_get, _scene.FrameType_mValue_set)
    __swig_destroy__ = _scene.delete_FrameType
    __del__ = lambda self: None
FrameType_swigregister = _scene.FrameType_swigregister
FrameType_swigregister(FrameType)

def FrameType_fromString(str):
    """FrameType_fromString(std::string const & str) -> scene::FrameType::FrameTypesEnum"""
    return _scene.FrameType_fromString(str)

class Errors(_object):
    """Proxy of C++ scene::Errors class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Errors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Errors, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(scene::Errors self) -> Errors"""
        this = _scene.new_Errors()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clear(self):
        """clear(Errors self)"""
        return _scene.Errors_clear(self)

    __swig_setmethods__["mFrameType"] = _scene.Errors_mFrameType_set
    __swig_getmethods__["mFrameType"] = _scene.Errors_mFrameType_get
    if _newclass:
        mFrameType = _swig_property(_scene.Errors_mFrameType_get, _scene.Errors_mFrameType_set)
    __swig_setmethods__["mSensorErrorCovar"] = _scene.Errors_mSensorErrorCovar_set
    __swig_getmethods__["mSensorErrorCovar"] = _scene.Errors_mSensorErrorCovar_get
    if _newclass:
        mSensorErrorCovar = _swig_property(_scene.Errors_mSensorErrorCovar_get, _scene.Errors_mSensorErrorCovar_set)
    __swig_setmethods__["mUnmodeledErrorCovar"] = _scene.Errors_mUnmodeledErrorCovar_set
    __swig_getmethods__["mUnmodeledErrorCovar"] = _scene.Errors_mUnmodeledErrorCovar_get
    if _newclass:
        mUnmodeledErrorCovar = _swig_property(_scene.Errors_mUnmodeledErrorCovar_get, _scene.Errors_mUnmodeledErrorCovar_set)
    __swig_setmethods__["mIonoErrorCovar"] = _scene.Errors_mIonoErrorCovar_set
    __swig_getmethods__["mIonoErrorCovar"] = _scene.Errors_mIonoErrorCovar_get
    if _newclass:
        mIonoErrorCovar = _swig_property(_scene.Errors_mIonoErrorCovar_get, _scene.Errors_mIonoErrorCovar_set)
    __swig_setmethods__["mTropoErrorCovar"] = _scene.Errors_mTropoErrorCovar_set
    __swig_getmethods__["mTropoErrorCovar"] = _scene.Errors_mTropoErrorCovar_get
    if _newclass:
        mTropoErrorCovar = _swig_property(_scene.Errors_mTropoErrorCovar_get, _scene.Errors_mTropoErrorCovar_set)
    __swig_setmethods__["mPositionCorrCoefZero"] = _scene.Errors_mPositionCorrCoefZero_set
    __swig_getmethods__["mPositionCorrCoefZero"] = _scene.Errors_mPositionCorrCoefZero_get
    if _newclass:
        mPositionCorrCoefZero = _swig_property(_scene.Errors_mPositionCorrCoefZero_get, _scene.Errors_mPositionCorrCoefZero_set)
    __swig_setmethods__["mPositionDecorrRate"] = _scene.Errors_mPositionDecorrRate_set
    __swig_getmethods__["mPositionDecorrRate"] = _scene.Errors_mPositionDecorrRate_get
    if _newclass:
        mPositionDecorrRate = _swig_property(_scene.Errors_mPositionDecorrRate_get, _scene.Errors_mPositionDecorrRate_set)
    __swig_setmethods__["mRangeCorrCoefZero"] = _scene.Errors_mRangeCorrCoefZero_set
    __swig_getmethods__["mRangeCorrCoefZero"] = _scene.Errors_mRangeCorrCoefZero_get
    if _newclass:
        mRangeCorrCoefZero = _swig_property(_scene.Errors_mRangeCorrCoefZero_get, _scene.Errors_mRangeCorrCoefZero_set)
    __swig_setmethods__["mRangeDecorrRate"] = _scene.Errors_mRangeDecorrRate_set
    __swig_getmethods__["mRangeDecorrRate"] = _scene.Errors_mRangeDecorrRate_get
    if _newclass:
        mRangeDecorrRate = _swig_property(_scene.Errors_mRangeDecorrRate_get, _scene.Errors_mRangeDecorrRate_set)
    __swig_destroy__ = _scene.delete_Errors
    __del__ = lambda self: None
Errors_swigregister = _scene.Errors_swigregister
Errors_swigregister(Errors)

class AdjustableParams(_object):
    """Proxy of C++ scene::AdjustableParams class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdjustableParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdjustableParams, name)
    __repr__ = _swig_repr
    ARP_RADIAL = _scene.AdjustableParams_ARP_RADIAL
    ARP_IN_TRACK = _scene.AdjustableParams_ARP_IN_TRACK
    ARP_CROSS_TRACK = _scene.AdjustableParams_ARP_CROSS_TRACK
    ARP_VEL_RADIAL = _scene.AdjustableParams_ARP_VEL_RADIAL
    ARP_VEL_IN_TRACK = _scene.AdjustableParams_ARP_VEL_IN_TRACK
    ARP_VEL_CROSS_TRACK = _scene.AdjustableParams_ARP_VEL_CROSS_TRACK
    RANGE_BIAS = _scene.AdjustableParams_RANGE_BIAS
    NUM_PARAMS = _scene.AdjustableParams_NUM_PARAMS
    NUM_CORR_GROUPS = _scene.AdjustableParams_NUM_CORR_GROUPS

    def __init__(self):
        """__init__(scene::AdjustableParams self) -> AdjustableParams"""
        this = _scene.new_AdjustableParams()
        try:
            self.this.append(this)
        except:
            self.this = this

    def name(param):
        """name(scene::AdjustableParams::ParamsEnum param) -> std::string"""
        return _scene.AdjustableParams_name(param)

    if _newclass:
        name = staticmethod(name)
    __swig_getmethods__["name"] = lambda x: name

    def units(param):
        """units(scene::AdjustableParams::ParamsEnum param) -> std::string"""
        return _scene.AdjustableParams_units(param)

    if _newclass:
        units = staticmethod(units)
    __swig_getmethods__["units"] = lambda x: units

    def group(param):
        """group(scene::AdjustableParams::ParamsEnum param) -> int"""
        return _scene.AdjustableParams_group(param)

    if _newclass:
        group = staticmethod(group)
    __swig_getmethods__["group"] = lambda x: group

    def getARPVector(self):
        """getARPVector(AdjustableParams self) -> Vector3"""
        return _scene.AdjustableParams_getARPVector(self)


    def getARPVelocityVector(self):
        """getARPVelocityVector(AdjustableParams self) -> Vector3"""
        return _scene.AdjustableParams_getARPVelocityVector(self)

    __swig_setmethods__["mParams"] = _scene.AdjustableParams_mParams_set
    __swig_getmethods__["mParams"] = _scene.AdjustableParams_mParams_get
    if _newclass:
        mParams = _swig_property(_scene.AdjustableParams_mParams_get, _scene.AdjustableParams_mParams_set)

    def __getitem__(self, idx):
        """__getitem__(AdjustableParams self, std::ptrdiff_t idx) -> double"""
        return _scene.AdjustableParams___getitem__(self, idx)


    def __setitem__(self, idx, val):
        """__setitem__(AdjustableParams self, std::ptrdiff_t idx, double val)"""
        return _scene.AdjustableParams___setitem__(self, idx, val)

    __swig_destroy__ = _scene.delete_AdjustableParams
    __del__ = lambda self: None
AdjustableParams_swigregister = _scene.AdjustableParams_swigregister
AdjustableParams_swigregister(AdjustableParams)

def AdjustableParams_name(param):
    """AdjustableParams_name(scene::AdjustableParams::ParamsEnum param) -> std::string"""
    return _scene.AdjustableParams_name(param)

def AdjustableParams_units(param):
    """AdjustableParams_units(scene::AdjustableParams::ParamsEnum param) -> std::string"""
    return _scene.AdjustableParams_units(param)

def AdjustableParams_group(param):
    """AdjustableParams_group(scene::AdjustableParams::ParamsEnum param) -> int"""
    return _scene.AdjustableParams_group(param)

class ProjectionModel(_object):
    """Proxy of C++ scene::ProjectionModel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectionModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectionModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MAX_ITER = _scene.ProjectionModel_MAX_ITER
    __swig_destroy__ = _scene.delete_ProjectionModel
    __del__ = lambda self: None

    def computeImageTime(self, pixel):
        """computeImageTime(ProjectionModel self, RowColDouble pixel) -> double"""
        return _scene.ProjectionModel_computeImageTime(self, pixel)


    def computeARPPosition(self, time):
        """computeARPPosition(ProjectionModel self, double const time) -> Vector3"""
        return _scene.ProjectionModel_computeARPPosition(self, time)


    def computeARPVelocity(self, time):
        """computeARPVelocity(ProjectionModel self, double const time) -> Vector3"""
        return _scene.ProjectionModel_computeARPVelocity(self, time)


    def computeImageCoordinates(self, imagePlanePoint):
        """computeImageCoordinates(ProjectionModel self, Vector3 imagePlanePoint) -> RowColDouble"""
        return _scene.ProjectionModel_computeImageCoordinates(self, imagePlanePoint)


    def imageGridToECEF(self, gridPt):
        """imageGridToECEF(ProjectionModel self, RowColDouble gridPt) -> Vector3"""
        return _scene.ProjectionModel_imageGridToECEF(self, gridPt)


    def computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot):
        """computeContour(ProjectionModel self, Vector3 arpCOA, Vector3 velCOA, double timeCOA, RowColDouble imageGridPoint, double * r, double * rDot)"""
        return _scene.ProjectionModel_computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot)


    def contourToGroundPlane(self, rCOA, rDotCOA, arpCOA, velCOA, groundPlaneNormal, groundRefPoint):
        """contourToGroundPlane(ProjectionModel self, double rCOA, double rDotCOA, Vector3 arpCOA, Vector3 velCOA, Vector3 groundPlaneNormal, Vector3 groundRefPoint) -> Vector3"""
        return _scene.ProjectionModel_contourToGroundPlane(self, rCOA, rDotCOA, arpCOA, velCOA, groundPlaneNormal, groundRefPoint)


    def sceneToImage(self, *args):
        """
        sceneToImage(ProjectionModel self, Vector3 scenePoint, AdjustableParams delta, double * oTimeCOA=None) -> RowColDouble
        sceneToImage(ProjectionModel self, Vector3 scenePoint, AdjustableParams delta) -> RowColDouble
        sceneToImage(ProjectionModel self, Vector3 scenePoint, double * oTimeCOA=None) -> RowColDouble
        sceneToImage(ProjectionModel self, Vector3 scenePoint) -> RowColDouble
        """
        return _scene.ProjectionModel_sceneToImage(self, *args)


    def imageToScene(self, *args):
        """
        imageToScene(ProjectionModel self, RowColDouble imageGridPoint, Vector3 groundRefPoint, Vector3 groundPlaneNormal, AdjustableParams delta, double * oTimeCOA=None) -> Vector3
        imageToScene(ProjectionModel self, RowColDouble imageGridPoint, Vector3 groundRefPoint, Vector3 groundPlaneNormal, AdjustableParams delta) -> Vector3
        imageToScene(ProjectionModel self, RowColDouble imageGridPoint, Vector3 groundRefPoint, Vector3 groundPlaneNormal, double * oTimeCOA=None) -> Vector3
        imageToScene(ProjectionModel self, RowColDouble imageGridPoint, Vector3 groundRefPoint, Vector3 groundPlaneNormal) -> Vector3
        imageToScene(ProjectionModel self, RowColDouble imageGridPoint, double height, AdjustableParams delta, double heightThreshold=1.0, size_t maxNumIters=3) -> Vector3
        imageToScene(ProjectionModel self, RowColDouble imageGridPoint, double height, AdjustableParams delta, double heightThreshold=1.0) -> Vector3
        imageToScene(ProjectionModel self, RowColDouble imageGridPoint, double height, AdjustableParams delta) -> Vector3
        imageToScene(ProjectionModel self, RowColDouble imageGridPoint, double height) -> Vector3
        """
        return _scene.ProjectionModel_imageToScene(self, *args)


    def slantToImagePartials(self, imageGridPoint, delta=0.0001):
        """
        slantToImagePartials(ProjectionModel self, RowColDouble imageGridPoint, double delta=0.0001) -> math::linear::MatrixMxN< 2,2,double >
        slantToImagePartials(ProjectionModel self, RowColDouble imageGridPoint) -> math::linear::MatrixMxN< 2,2,double >
        """
        return _scene.ProjectionModel_slantToImagePartials(self, imageGridPoint, delta)


    def imageToSceneSensorPartials(self, *args):
        """
        imageToSceneSensorPartials(ProjectionModel self, RowColDouble imageGridPoint, double height, Vector3 scenePoint, double delta=0.0001) -> math::linear::MatrixMxN< 3,7,double >
        imageToSceneSensorPartials(ProjectionModel self, RowColDouble imageGridPoint, double height, Vector3 scenePoint) -> math::linear::MatrixMxN< 3,7,double >
        imageToSceneSensorPartials(ProjectionModel self, RowColDouble imageGridPoint, double height, double delta=0.0001) -> math::linear::MatrixMxN< 3,7,double >
        imageToSceneSensorPartials(ProjectionModel self, RowColDouble imageGridPoint, double height) -> math::linear::MatrixMxN< 3,7,double >
        """
        return _scene.ProjectionModel_imageToSceneSensorPartials(self, *args)


    def imageToScenePartials(self, *args):
        """
        imageToScenePartials(ProjectionModel self, RowColDouble imageGridPoint, double height, Vector3 scenePoint, double delta=0.0001) -> math::linear::MatrixMxN< 3,2,double >
        imageToScenePartials(ProjectionModel self, RowColDouble imageGridPoint, double height, Vector3 scenePoint) -> math::linear::MatrixMxN< 3,2,double >
        imageToScenePartials(ProjectionModel self, RowColDouble imageGridPoint, double height, double delta=0.0001) -> math::linear::MatrixMxN< 3,2,double >
        imageToScenePartials(ProjectionModel self, RowColDouble imageGridPoint, double height) -> math::linear::MatrixMxN< 3,2,double >
        """
        return _scene.ProjectionModel_imageToScenePartials(self, *args)


    def imageToSceneHeightPartial(self, *args):
        """
        imageToSceneHeightPartial(ProjectionModel self, RowColDouble imageGridPoint, double height, Vector3 scenePoint, double delta=0.0001) -> Matrix3x1
        imageToSceneHeightPartial(ProjectionModel self, RowColDouble imageGridPoint, double height, Vector3 scenePoint) -> Matrix3x1
        imageToSceneHeightPartial(ProjectionModel self, RowColDouble imageGridPoint, double height, double delta=0.0001) -> Matrix3x1
        imageToSceneHeightPartial(ProjectionModel self, RowColDouble imageGridPoint, double height) -> Matrix3x1
        """
        return _scene.ProjectionModel_imageToSceneHeightPartial(self, *args)


    def sceneToImageSensorPartials(self, *args):
        """
        sceneToImageSensorPartials(ProjectionModel self, Vector3 scenePoint, RowColDouble imageGridPoint, double delta=0.0001) -> math::linear::MatrixMxN< 2,7,double >
        sceneToImageSensorPartials(ProjectionModel self, Vector3 scenePoint, RowColDouble imageGridPoint) -> math::linear::MatrixMxN< 2,7,double >
        sceneToImageSensorPartials(ProjectionModel self, Vector3 scenePoint, double delta=0.0001) -> math::linear::MatrixMxN< 2,7,double >
        sceneToImageSensorPartials(ProjectionModel self, Vector3 scenePoint) -> math::linear::MatrixMxN< 2,7,double >
        """
        return _scene.ProjectionModel_sceneToImageSensorPartials(self, *args)


    def sceneToImagePartials(self, *args):
        """
        sceneToImagePartials(ProjectionModel self, Vector3 scenePoint, RowColDouble imageGridPoint, double delta=0.0001) -> math::linear::MatrixMxN< 2,3,double >
        sceneToImagePartials(ProjectionModel self, Vector3 scenePoint, RowColDouble imageGridPoint) -> math::linear::MatrixMxN< 2,3,double >
        sceneToImagePartials(ProjectionModel self, Vector3 scenePoint, double delta=0.0001) -> math::linear::MatrixMxN< 2,3,double >
        sceneToImagePartials(ProjectionModel self, Vector3 scenePoint) -> math::linear::MatrixMxN< 2,3,double >
        """
        return _scene.ProjectionModel_sceneToImagePartials(self, *args)


    def getErrorCovariance(self, *args):
        """
        getErrorCovariance(ProjectionModel self, Vector3 scenePoint, double timeCOA) -> math::linear::MatrixMxN< 7,7,double >
        getErrorCovariance(ProjectionModel self, Vector3 scenePoint, RowColDouble imageGridPoint) -> math::linear::MatrixMxN< 7,7,double >
        getErrorCovariance(ProjectionModel self, Vector3 scenePoint) -> math::linear::MatrixMxN< 7,7,double >
        getErrorCovariance(ProjectionModel self) -> math::linear::MatrixMxN< 7,7,double >
        """
        return _scene.ProjectionModel_getErrorCovariance(self, *args)


    def getUnmodeledErrorCovariance(self, imageGridPoint):
        """getUnmodeledErrorCovariance(ProjectionModel self, RowColDouble imageGridPoint) -> math::linear::MatrixMxN< 2,2,double >"""
        return _scene.ProjectionModel_getUnmodeledErrorCovariance(self, imageGridPoint)


    def getAdjustableParams(self, *args):
        """
        getAdjustableParams(ProjectionModel self) -> AdjustableParams
        getAdjustableParams(ProjectionModel self) -> AdjustableParams
        """
        return _scene.ProjectionModel_getAdjustableParams(self, *args)


    def getErrors(self, *args):
        """
        getErrors(ProjectionModel self) -> Errors
        getErrors(ProjectionModel self) -> Errors
        """
        return _scene.ProjectionModel_getErrors(self, *args)

ProjectionModel_swigregister = _scene.ProjectionModel_swigregister
ProjectionModel_swigregister(ProjectionModel)

class ProjectionModelWithImageVectors(ProjectionModel):
    """Proxy of C++ scene::ProjectionModelWithImageVectors class"""
    __swig_setmethods__ = {}
    for _s in [ProjectionModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectionModelWithImageVectors, name, value)
    __swig_getmethods__ = {}
    for _s in [ProjectionModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectionModelWithImageVectors, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def computeImageCoordinates(self, imagePlanePoint):
        """computeImageCoordinates(ProjectionModelWithImageVectors self, Vector3 imagePlanePoint) -> RowColDouble"""
        return _scene.ProjectionModelWithImageVectors_computeImageCoordinates(self, imagePlanePoint)


    def imageGridToECEF(self, gridPt):
        """imageGridToECEF(ProjectionModelWithImageVectors self, RowColDouble gridPt) -> Vector3"""
        return _scene.ProjectionModelWithImageVectors_imageGridToECEF(self, gridPt)

    __swig_destroy__ = _scene.delete_ProjectionModelWithImageVectors
    __del__ = lambda self: None
ProjectionModelWithImageVectors_swigregister = _scene.ProjectionModelWithImageVectors_swigregister
ProjectionModelWithImageVectors_swigregister(ProjectionModelWithImageVectors)

class RangeAzimProjectionModel(ProjectionModelWithImageVectors):
    """Proxy of C++ scene::RangeAzimProjectionModel class"""
    __swig_setmethods__ = {}
    for _s in [ProjectionModelWithImageVectors]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RangeAzimProjectionModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ProjectionModelWithImageVectors]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RangeAzimProjectionModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::RangeAzimProjectionModel self, Poly1D polarAnglePoly, Poly1D ksfPoly, Vector3 slantPlaneNormal, Vector3 imagePlaneRowVector, Vector3 imagePlaneColVector, Vector3 scp, PolyVector3 arpPoly, Poly2D timeCOAPoly, int lookDir, Errors errors) -> RangeAzimProjectionModel
        __init__(scene::RangeAzimProjectionModel self, Poly1D polarAnglePoly, Poly1D ksfPoly, Vector3 slantPlaneNormal, Vector3 imagePlaneRowVector, Vector3 imagePlaneColVector, Vector3 scp, PolyVector3 arpPoly, Poly2D timeCOAPoly, int lookDir) -> RangeAzimProjectionModel
        """
        this = _scene.new_RangeAzimProjectionModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot):
        """computeContour(RangeAzimProjectionModel self, Vector3 arpCOA, Vector3 velCOA, double timeCOA, RowColDouble imageGridPoint, double * r, double * rDot)"""
        return _scene.RangeAzimProjectionModel_computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot)

    __swig_destroy__ = _scene.delete_RangeAzimProjectionModel
    __del__ = lambda self: None
RangeAzimProjectionModel_swigregister = _scene.RangeAzimProjectionModel_swigregister
RangeAzimProjectionModel_swigregister(RangeAzimProjectionModel)

class RangeZeroProjectionModel(ProjectionModelWithImageVectors):
    """Proxy of C++ scene::RangeZeroProjectionModel class"""
    __swig_setmethods__ = {}
    for _s in [ProjectionModelWithImageVectors]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RangeZeroProjectionModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ProjectionModelWithImageVectors]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RangeZeroProjectionModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::RangeZeroProjectionModel self, Poly1D timeCAPoly, Poly2D dsrfPoly, double rangeCA, Vector3 slantPlaneNormal, Vector3 imagePlaneRowVector, Vector3 imagePlaneColVector, Vector3 scp, PolyVector3 arpPoly, Poly2D timeCOAPoly, int lookDir, Errors errors) -> RangeZeroProjectionModel
        __init__(scene::RangeZeroProjectionModel self, Poly1D timeCAPoly, Poly2D dsrfPoly, double rangeCA, Vector3 slantPlaneNormal, Vector3 imagePlaneRowVector, Vector3 imagePlaneColVector, Vector3 scp, PolyVector3 arpPoly, Poly2D timeCOAPoly, int lookDir) -> RangeZeroProjectionModel
        """
        this = _scene.new_RangeZeroProjectionModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot):
        """computeContour(RangeZeroProjectionModel self, Vector3 arpCOA, Vector3 velCOA, double timeCOA, RowColDouble imageGridPoint, double * r, double * rDot)"""
        return _scene.RangeZeroProjectionModel_computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot)

    __swig_destroy__ = _scene.delete_RangeZeroProjectionModel
    __del__ = lambda self: None
RangeZeroProjectionModel_swigregister = _scene.RangeZeroProjectionModel_swigregister
RangeZeroProjectionModel_swigregister(RangeZeroProjectionModel)

class PlaneProjectionModel(ProjectionModelWithImageVectors):
    """Proxy of C++ scene::PlaneProjectionModel class"""
    __swig_setmethods__ = {}
    for _s in [ProjectionModelWithImageVectors]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneProjectionModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ProjectionModelWithImageVectors]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneProjectionModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::PlaneProjectionModel self, Vector3 slantPlaneNormal, Vector3 imagePlaneRowVector, Vector3 imagePlaneColVector, Vector3 scp, PolyVector3 arpPoly, Poly2D timeCOAPoly, int lookDir, Errors errors) -> PlaneProjectionModel
        __init__(scene::PlaneProjectionModel self, Vector3 slantPlaneNormal, Vector3 imagePlaneRowVector, Vector3 imagePlaneColVector, Vector3 scp, PolyVector3 arpPoly, Poly2D timeCOAPoly, int lookDir) -> PlaneProjectionModel
        """
        this = _scene.new_PlaneProjectionModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot):
        """computeContour(PlaneProjectionModel self, Vector3 arpCOA, Vector3 velCOA, double timeCOA, RowColDouble imageGridPoint, double * r, double * rDot)"""
        return _scene.PlaneProjectionModel_computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot)

    __swig_destroy__ = _scene.delete_PlaneProjectionModel
    __del__ = lambda self: None
PlaneProjectionModel_swigregister = _scene.PlaneProjectionModel_swigregister
PlaneProjectionModel_swigregister(PlaneProjectionModel)

class GeodeticProjectionModel(ProjectionModel):
    """Proxy of C++ scene::GeodeticProjectionModel class"""
    __swig_setmethods__ = {}
    for _s in [ProjectionModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeodeticProjectionModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ProjectionModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeodeticProjectionModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(scene::GeodeticProjectionModel self, Vector3 slantPlaneNormal, Vector3 scp, PolyVector3 arpPoly, Poly2D timeCOAPoly, int lookDir, Errors errors) -> GeodeticProjectionModel
        __init__(scene::GeodeticProjectionModel self, Vector3 slantPlaneNormal, Vector3 scp, PolyVector3 arpPoly, Poly2D timeCOAPoly, int lookDir) -> GeodeticProjectionModel
        """
        this = _scene.new_GeodeticProjectionModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def computeImageCoordinates(self, imagePlanePoint):
        """computeImageCoordinates(GeodeticProjectionModel self, Vector3 imagePlanePoint) -> RowColDouble"""
        return _scene.GeodeticProjectionModel_computeImageCoordinates(self, imagePlanePoint)


    def computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot):
        """computeContour(GeodeticProjectionModel self, Vector3 arpCOA, Vector3 velCOA, double timeCOA, RowColDouble imageGridPoint, double * r, double * rDot)"""
        return _scene.GeodeticProjectionModel_computeContour(self, arpCOA, velCOA, timeCOA, imageGridPoint, r, rDot)


    def imageGridToECEF(self, gridPt):
        """imageGridToECEF(GeodeticProjectionModel self, RowColDouble gridPt) -> Vector3"""
        return _scene.GeodeticProjectionModel_imageGridToECEF(self, gridPt)

    __swig_destroy__ = _scene.delete_GeodeticProjectionModel
    __del__ = lambda self: None
GeodeticProjectionModel_swigregister = _scene.GeodeticProjectionModel_swigregister
GeodeticProjectionModel_swigregister(GeodeticProjectionModel)

class GridGeometry(_object):
    """Proxy of C++ scene::GridGeometry class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridGeometry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MAX_ITER = _scene.GridGeometry_MAX_ITER
    __swig_destroy__ = _scene.delete_GridGeometry
    __del__ = lambda self: None

    def gridToScene(self, gridPt, height):
        """gridToScene(GridGeometry self, Vector3 gridPt, double height) -> Vector3"""
        return _scene.GridGeometry_gridToScene(self, gridPt, height)


    def sceneToGrid(self, groundPt):
        """sceneToGrid(GridGeometry self, Vector3 groundPt) -> Vector3"""
        return _scene.GridGeometry_sceneToGrid(self, groundPt)

GridGeometry_swigregister = _scene.GridGeometry_swigregister
GridGeometry_swigregister(GridGeometry)

class PlanarGridGeometry(GridGeometry):
    """Proxy of C++ scene::PlanarGridGeometry class"""
    __swig_setmethods__ = {}
    for _s in [GridGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlanarGridGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [GridGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlanarGridGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, row, col, refPt, arpPoly, timeCOAPoly):
        """__init__(scene::PlanarGridGeometry self, Vector3 row, Vector3 col, Vector3 refPt, PolyVector3 arpPoly, Poly2D timeCOAPoly) -> PlanarGridGeometry"""
        this = _scene.new_PlanarGridGeometry(row, col, refPt, arpPoly, timeCOAPoly)
        try:
            self.this.append(this)
        except:
            self.this = this

    def gridToScene(self, gridPt, height):
        """gridToScene(PlanarGridGeometry self, Vector3 gridPt, double height) -> Vector3"""
        return _scene.PlanarGridGeometry_gridToScene(self, gridPt, height)


    def sceneToGrid(self, groundPt):
        """sceneToGrid(PlanarGridGeometry self, Vector3 groundPt) -> Vector3"""
        return _scene.PlanarGridGeometry_sceneToGrid(self, groundPt)

    __swig_destroy__ = _scene.delete_PlanarGridGeometry
    __del__ = lambda self: None
PlanarGridGeometry_swigregister = _scene.PlanarGridGeometry_swigregister
PlanarGridGeometry_swigregister(PlanarGridGeometry)

# This file is compatible with both classic and new-style classes.


