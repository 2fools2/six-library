/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif
/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif


/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
PySwigObject_repr(PySwigObject *v)
#else
PySwigObject_repr(PySwigObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
#else
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
#endif
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
#ifdef METH_NOARGS
  PyObject *repr = PySwigObject_repr(v);
#else
  PyObject *repr = PySwigObject_repr(v, NULL);
#endif
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      PySwigObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = PyString_FromString(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Like_T swig_types[0]
#define SWIGTYPE_p_ParameterIter swig_types[1]
#define SWIGTYPE_p_ParameterMap swig_types[2]
#define SWIGTYPE_p_allocator_type swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_const_reference swig_types[5]
#define SWIGTYPE_p_difference_type swig_types[6]
#define SWIGTYPE_p_except__Context swig_types[7]
#define SWIGTYPE_p_except__NullPointerReferenceException swig_types[8]
#define SWIGTYPE_p_logging__Logger swig_types[9]
#define SWIGTYPE_p_math__linear__VectorNT_2_double_t swig_types[10]
#define SWIGTYPE_p_math__linear__VectorNT_3_double_t swig_types[11]
#define SWIGTYPE_p_math__poly__OneDT_double_t swig_types[12]
#define SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t swig_types[13]
#define SWIGTYPE_p_math__poly__TwoDT_double_t swig_types[14]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t swig_types[15]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t swig_types[16]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t swig_types[17]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t swig_types[18]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t swig_types[19]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t swig_types[20]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t swig_types[21]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t swig_types[22]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t swig_types[23]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t swig_types[24]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t swig_types[25]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t swig_types[26]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t swig_types[27]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t swig_types[28]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t swig_types[29]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t swig_types[30]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t swig_types[31]
#define SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t swig_types[32]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t swig_types[33]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t swig_types[34]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t swig_types[35]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t swig_types[36]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t swig_types[37]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t swig_types[38]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t swig_types[39]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t swig_types[40]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t swig_types[41]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t swig_types[42]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t swig_types[43]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t swig_types[44]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t swig_types[45]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t swig_types[46]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t swig_types[47]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t swig_types[48]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t swig_types[49]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t swig_types[50]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t swig_types[51]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t swig_types[52]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t swig_types[53]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t swig_types[54]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t swig_types[55]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t swig_types[56]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t swig_types[57]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t swig_types[58]
#define SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t swig_types[59]
#define SWIGTYPE_p_nitf__DateTime swig_types[60]
#define SWIGTYPE_p_p_PyObject swig_types[61]
#define SWIGTYPE_p_reference swig_types[62]
#define SWIGTYPE_p_scene__AngleMagnitude swig_types[63]
#define SWIGTYPE_p_scene__FrameType swig_types[64]
#define SWIGTYPE_p_scene__GeodeticProjectionModel swig_types[65]
#define SWIGTYPE_p_scene__LatLon swig_types[66]
#define SWIGTYPE_p_scene__LatLonAlt swig_types[67]
#define SWIGTYPE_p_scene__PlaneProjectionModel swig_types[68]
#define SWIGTYPE_p_scene__ProjectionModel swig_types[69]
#define SWIGTYPE_p_scene__ProjectionModelWithImageVectors swig_types[70]
#define SWIGTYPE_p_scene__RangeAzimProjectionModel swig_types[71]
#define SWIGTYPE_p_scene__RangeZeroProjectionModel swig_types[72]
#define SWIGTYPE_p_scene__SceneGeometry swig_types[73]
#define SWIGTYPE_p_six__AmplitudeTable swig_types[74]
#define SWIGTYPE_p_six__AppliedType swig_types[75]
#define SWIGTYPE_p_six__AutofocusType swig_types[76]
#define SWIGTYPE_p_six__BooleanType swig_types[77]
#define SWIGTYPE_p_six__Classification swig_types[78]
#define SWIGTYPE_p_six__CollectType swig_types[79]
#define SWIGTYPE_p_six__ComplexImageGridType swig_types[80]
#define SWIGTYPE_p_six__ComplexImagePlaneType swig_types[81]
#define SWIGTYPE_p_six__Components swig_types[82]
#define SWIGTYPE_p_six__CompositeSCP swig_types[83]
#define SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t swig_types[84]
#define SWIGTYPE_p_six__CornersT_scene__LatLon_t swig_types[85]
#define SWIGTYPE_p_six__Data swig_types[86]
#define SWIGTYPE_p_six__DataType swig_types[87]
#define SWIGTYPE_p_six__DecorrType swig_types[88]
#define SWIGTYPE_p_six__DemodType swig_types[89]
#define SWIGTYPE_p_six__DualPolarizationType swig_types[90]
#define SWIGTYPE_p_six__EarthModelType swig_types[91]
#define SWIGTYPE_p_six__ErrorStatistics swig_types[92]
#define SWIGTYPE_p_six__FFTSign swig_types[93]
#define SWIGTYPE_p_six__ImageBeamCompensationType swig_types[94]
#define SWIGTYPE_p_six__ImageFormationType swig_types[95]
#define SWIGTYPE_p_six__IonoError swig_types[96]
#define SWIGTYPE_p_six__LUT swig_types[97]
#define SWIGTYPE_p_six__NoiseLevel swig_types[98]
#define SWIGTYPE_p_six__OrientationType swig_types[99]
#define SWIGTYPE_p_six__PixelType swig_types[100]
#define SWIGTYPE_p_six__PolarizationSequenceType swig_types[101]
#define SWIGTYPE_p_six__PolarizationType swig_types[102]
#define SWIGTYPE_p_six__PosVelError swig_types[103]
#define SWIGTYPE_p_six__RMAlgoType swig_types[104]
#define SWIGTYPE_p_six__RadarModeType swig_types[105]
#define SWIGTYPE_p_six__RadarSensor swig_types[106]
#define SWIGTYPE_p_six__Radiometric swig_types[107]
#define SWIGTYPE_p_six__ReferencePoint swig_types[108]
#define SWIGTYPE_p_six__SCP swig_types[109]
#define SWIGTYPE_p_six__SideOfTrackType swig_types[110]
#define SWIGTYPE_p_six__SlowTimeBeamCompensationType swig_types[111]
#define SWIGTYPE_p_six__TropoError swig_types[112]
#define SWIGTYPE_p_six__XMLControl swig_types[113]
#define SWIGTYPE_p_six__sicd__Antenna swig_types[114]
#define SWIGTYPE_p_six__sicd__AntennaParameters swig_types[115]
#define SWIGTYPE_p_six__sicd__Area swig_types[116]
#define SWIGTYPE_p_six__sicd__AreaDirectionParameters swig_types[117]
#define SWIGTYPE_p_six__sicd__AreaPlane swig_types[118]
#define SWIGTYPE_p_six__sicd__ChannelParameters swig_types[119]
#define SWIGTYPE_p_six__sicd__CollectionInformation swig_types[120]
#define SWIGTYPE_p_six__sicd__ComplexClassification swig_types[121]
#define SWIGTYPE_p_six__sicd__ComplexData swig_types[122]
#define SWIGTYPE_p_six__sicd__ComplexXMLControl swig_types[123]
#define SWIGTYPE_p_six__sicd__DirectionParameters swig_types[124]
#define SWIGTYPE_p_six__sicd__Distortion swig_types[125]
#define SWIGTYPE_p_six__sicd__ElectricalBoresight swig_types[126]
#define SWIGTYPE_p_six__sicd__GainAndPhasePolys swig_types[127]
#define SWIGTYPE_p_six__sicd__GeoData swig_types[128]
#define SWIGTYPE_p_six__sicd__GeoInfo swig_types[129]
#define SWIGTYPE_p_six__sicd__Grid swig_types[130]
#define SWIGTYPE_p_six__sicd__HalfPowerBeamwidths swig_types[131]
#define SWIGTYPE_p_six__sicd__INCA swig_types[132]
#define SWIGTYPE_p_six__sicd__ImageCreation swig_types[133]
#define SWIGTYPE_p_six__sicd__ImageData swig_types[134]
#define SWIGTYPE_p_six__sicd__ImageFormation swig_types[135]
#define SWIGTYPE_p_six__sicd__InterPulsePeriod swig_types[136]
#define SWIGTYPE_p_six__sicd__MatchCollect swig_types[137]
#define SWIGTYPE_p_six__sicd__MatchInformation swig_types[138]
#define SWIGTYPE_p_six__sicd__MatchType swig_types[139]
#define SWIGTYPE_p_six__sicd__PFA swig_types[140]
#define SWIGTYPE_p_six__sicd__PolarizationCalibration swig_types[141]
#define SWIGTYPE_p_six__sicd__Position swig_types[142]
#define SWIGTYPE_p_six__sicd__Processing swig_types[143]
#define SWIGTYPE_p_six__sicd__RMA swig_types[144]
#define SWIGTYPE_p_six__sicd__RMAT swig_types[145]
#define SWIGTYPE_p_six__sicd__RMCR swig_types[146]
#define SWIGTYPE_p_six__sicd__RadarCollection swig_types[147]
#define SWIGTYPE_p_six__sicd__RcvAPC swig_types[148]
#define SWIGTYPE_p_six__sicd__RcvChannelProcessed swig_types[149]
#define SWIGTYPE_p_six__sicd__RgAzComp swig_types[150]
#define SWIGTYPE_p_six__sicd__SCPCOA swig_types[151]
#define SWIGTYPE_p_six__sicd__Segment swig_types[152]
#define SWIGTYPE_p_six__sicd__SlowTimeDeskew swig_types[153]
#define SWIGTYPE_p_six__sicd__Timeline swig_types[154]
#define SWIGTYPE_p_six__sicd__TimelineSet swig_types[155]
#define SWIGTYPE_p_six__sicd__TxStep swig_types[156]
#define SWIGTYPE_p_six__sicd__Utilities swig_types[157]
#define SWIGTYPE_p_six__sicd__WaveformParameters swig_types[158]
#define SWIGTYPE_p_six__sicd__WeightType swig_types[159]
#define SWIGTYPE_p_size_type swig_types[160]
#define SWIGTYPE_p_std__invalid_argument swig_types[161]
#define SWIGTYPE_p_std__ostream swig_types[162]
#define SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t swig_types[163]
#define SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t swig_types[164]
#define SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__allocator_type swig_types[165]
#define SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type swig_types[166]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[167]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[168]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type swig_types[169]
#define SWIGTYPE_p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t swig_types[170]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t swig_types[171]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__allocator_type swig_types[172]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type swig_types[173]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t swig_types[174]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__allocator_type swig_types[175]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type swig_types[176]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t swig_types[177]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__allocator_type swig_types[178]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type swig_types[179]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t swig_types[180]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__allocator_type swig_types[181]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type swig_types[182]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t swig_types[183]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__allocator_type swig_types[184]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type swig_types[185]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t swig_types[186]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__allocator_type swig_types[187]
#define SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type swig_types[188]
#define SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t swig_types[189]
#define SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__allocator_type swig_types[190]
#define SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type swig_types[191]
#define SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t swig_types[192]
#define SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__allocator_type swig_types[193]
#define SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type swig_types[194]
#define SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t swig_types[195]
#define SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__allocator_type swig_types[196]
#define SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type swig_types[197]
#define SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t swig_types[198]
#define SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__allocator_type swig_types[199]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[200]
#define SWIGTYPE_p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t swig_types[201]
#define SWIGTYPE_p_swig__PySwigIterator swig_types[202]
#define SWIGTYPE_p_types__RowColT_double_t swig_types[203]
#define SWIGTYPE_p_types__RowColT_math__poly__TwoDT_double_t_t swig_types[204]
#define SWIGTYPE_p_types__RowColT_scene__LatLon_t swig_types[205]
#define SWIGTYPE_p_types__RowColT_sys__SSize_T_t swig_types[206]
#define SWIGTYPE_p_unsigned_char swig_types[207]
#define SWIGTYPE_p_value_type swig_types[208]
#define SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type swig_types[209]
static swig_type_info *swig_types[211];
static swig_module_info swig_module = {swig_types, 210, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _six_sicd.so
  ------------------------------------------------*/
#define SWIG_init    init_six_sicd

#define SWIG_name    "_six_sicd"

#define SWIGVERSION 0x010336 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}



#include <complex>
#include <utility>

#include "import/mem.h"
#include "import/six.h"
#include "import/six/sicd.h"

using namespace six::sicd;
using namespace six;



#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct PySwigIterator {
  private:
    PyObject_ptr _seq;

  protected:
    PySwigIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~PySwigIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual PySwigIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual PySwigIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const PySwigIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const PySwigIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual PySwigIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    PySwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const PySwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const PySwigIterator& x) const
    {
      return ! operator==(x);
    }
      
    PySwigIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    PySwigIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    PySwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    PySwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const PySwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::PySwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <string>


#include <complex> 


#include <utility>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) == SWIG_OK) ? SWIG_OLDOBJ : 0;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_Compare(v, w) < 0;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::PyObject_ptr>: public binary_function<swig::PyObject_ptr, swig::PyObject_ptr, bool>
  {
    bool
    operator()(const swig::PyObject_ptr& v, const swig::PyObject_ptr& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::PyObject_var>: public binary_function<swig::PyObject_var, swig::PyObject_var, bool>
  {
    bool
    operator()(const swig::PyObject_var& v, const swig::PyObject_var& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class PySwigIterator_T :  public PySwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef PySwigIterator_T<out_iterator> self_type;

    PySwigIterator_T(out_iterator curr, PyObject *seq)
      : PySwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const PySwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const PySwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class PySwigIteratorOpen_T :  public PySwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef PySwigIterator_T<out_iterator>  base;
    typedef PySwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    PySwigIteratorOpen_T(out_iterator curr, PyObject *seq)
      : PySwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    PySwigIterator *copy() const
    {
      return new self_type(*this);
    }

    PySwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    PySwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class PySwigIteratorClosed_T :  public PySwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef PySwigIterator_T<out_iterator>  base;    
    typedef PySwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    PySwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : PySwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    PySwigIterator *copy() const
    {
      return new self_type(*this);
    }

    PySwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    PySwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline PySwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new PySwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline PySwigIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new PySwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    PySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct PySequence_ArrowProxy
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct PySequence_InputIterator
  {
    typedef PySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_InputIterator()
    {
    }

    PySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_InputIterator<T, reference> iterator;
    typedef PySequence_InputIterator<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


six::sicd::ComplexData * getComplexData( const std::string& sicdPathname, const std::vector<std::string>& schemaPaths ) {
  std::auto_ptr<six::sicd::ComplexData> retv = Utilities::getComplexData(sicdPathname, schemaPaths);
  return retv.release();
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; Py_ssize_t len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class PySeq, class Seq>
  inline void
  assign(const PySeq& pyseq, Seq* seq) {
    // seq->assign(pyseq.begin(), pyseq.end()); // not used as not always implemented
    typedef typename PySeq::value_type value_type;
    typename PySeq::const_iterator it = pyseq.begin();
    for (;it != pyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  PySequence_Cont<value_type> pyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(pyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return pyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_std_complex_Sl_double_Sg_  (PyObject *o, std::complex<double>* val)
{
  if (PyComplex_Check(o)) {
    if (val) *val = std::complex<double>(PyComplex_RealAsDouble(o), PyComplex_ImagAsDouble(o));
    return SWIG_OK;
  } else {
    double d;    
    int res = SWIG_AddCast(SWIG_AsVal_double (o, &d));
    if (SWIG_IsOK(res)) {
      if (val) *val = std::complex<double>(d, 0.0);
      return res;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE PyObject*
SWIG_From_std_complex_Sl_double_Sg_  (/*@SWIG:/usr/share/swig/1.3.36/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<double>&



/*@SWIG@*/ c)
{
  return PyComplex_FromDoubles(std::real(c), std::imag(c));
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


  namespace swig {
    template <>  struct traits<mem::ScopedCloneablePtr< six::sicd::GeoInfo > > {
      typedef pointer_category category;
      static const char* type_name() { return"mem::ScopedCloneablePtr< six::sicd::GeoInfo >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >, std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mem::ScopedCloneablePtr< six::sicd::GeoInfo >" "," "std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg__iterator(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____nonzero__(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____len__(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg__pop(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____getslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____setslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____delslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____delitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____getitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *self,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____setitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg__append(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<scene::LatLon > {
      typedef pointer_category category;
      static const char* type_name() { return"scene::LatLon"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<scene::LatLon, std::allocator< scene::LatLon > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "scene::LatLon" "," "std::allocator< scene::LatLon >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_scene_LatLon_Sg__iterator(std::vector< scene::LatLon > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_scene_LatLon_Sg____nonzero__(std::vector< scene::LatLon > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< scene::LatLon >::size_type std_vector_Sl_scene_LatLon_Sg____len__(std::vector< scene::LatLon > const *self){
      return self->size();
    }
SWIGINTERN std::vector< scene::LatLon >::value_type std_vector_Sl_scene_LatLon_Sg__pop(std::vector< scene::LatLon > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<scene::LatLon,std::allocator< scene::LatLon > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< scene::LatLon,std::allocator< scene::LatLon > > *std_vector_Sl_scene_LatLon_Sg____getslice__(std::vector< scene::LatLon > *self,std::vector< scene::LatLon >::difference_type i,std::vector< scene::LatLon >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_scene_LatLon_Sg____setslice__(std::vector< scene::LatLon > *self,std::vector< scene::LatLon >::difference_type i,std::vector< scene::LatLon >::difference_type j,std::vector< scene::LatLon,std::allocator< scene::LatLon > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_scene_LatLon_Sg____delslice__(std::vector< scene::LatLon > *self,std::vector< scene::LatLon >::difference_type i,std::vector< scene::LatLon >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_scene_LatLon_Sg____delitem__(std::vector< scene::LatLon > *self,std::vector< scene::LatLon >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< scene::LatLon >::value_type const &std_vector_Sl_scene_LatLon_Sg____getitem__(std::vector< scene::LatLon > const *self,std::vector< scene::LatLon >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_scene_LatLon_Sg____setitem__(std::vector< scene::LatLon > *self,std::vector< scene::LatLon >::difference_type i,std::vector< scene::LatLon >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_scene_LatLon_Sg__append(std::vector< scene::LatLon > *self,std::vector< scene::LatLon >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<PolyXYZ > {
      typedef pointer_category category;
      static const char* type_name() { return"PolyXYZ"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<PolyXYZ, std::allocator< PolyXYZ > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "PolyXYZ" "," "std::allocator< PolyXYZ >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_PolyXYZ_Sg__iterator(std::vector< PolyXYZ > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_PolyXYZ_Sg____nonzero__(std::vector< PolyXYZ > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< PolyXYZ >::size_type std_vector_Sl_PolyXYZ_Sg____len__(std::vector< PolyXYZ > const *self){
      return self->size();
    }
SWIGINTERN std::vector< PolyXYZ >::value_type std_vector_Sl_PolyXYZ_Sg__pop(std::vector< PolyXYZ > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<PolyXYZ,std::allocator< PolyXYZ > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< PolyXYZ,std::allocator< PolyXYZ > > *std_vector_Sl_PolyXYZ_Sg____getslice__(std::vector< PolyXYZ > *self,std::vector< PolyXYZ >::difference_type i,std::vector< PolyXYZ >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_PolyXYZ_Sg____setslice__(std::vector< PolyXYZ > *self,std::vector< PolyXYZ >::difference_type i,std::vector< PolyXYZ >::difference_type j,std::vector< PolyXYZ,std::allocator< PolyXYZ > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_PolyXYZ_Sg____delslice__(std::vector< PolyXYZ > *self,std::vector< PolyXYZ >::difference_type i,std::vector< PolyXYZ >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_PolyXYZ_Sg____delitem__(std::vector< PolyXYZ > *self,std::vector< PolyXYZ >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< PolyXYZ >::value_type const &std_vector_Sl_PolyXYZ_Sg____getitem__(std::vector< PolyXYZ > const *self,std::vector< PolyXYZ >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_PolyXYZ_Sg____setitem__(std::vector< PolyXYZ > *self,std::vector< PolyXYZ >::difference_type i,std::vector< PolyXYZ >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_PolyXYZ_Sg__append(std::vector< PolyXYZ > *self,std::vector< PolyXYZ >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > {
      typedef pointer_category category;
      static const char* type_name() { return"mem::ScopedCloneablePtr< six::sicd::WaveformParameters >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >, std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters >" "," "std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg__iterator(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____nonzero__(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____len__(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg__pop(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____getslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____setslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____delslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____delitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____getitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *self,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____setitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg__append(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<mem::ScopedCloneablePtr< six::sicd::TxStep > > {
      typedef pointer_category category;
      static const char* type_name() { return"mem::ScopedCloneablePtr< six::sicd::TxStep >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >, std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mem::ScopedCloneablePtr< six::sicd::TxStep >" "," "std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg__iterator(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____nonzero__(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____len__(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg__pop(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____getslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____setslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____delslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____delitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____getitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *self,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____setitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg__append(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<mem::ScopedCloneablePtr< six::sicd::Segment > > {
      typedef pointer_category category;
      static const char* type_name() { return"mem::ScopedCloneablePtr< six::sicd::Segment >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >, std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mem::ScopedCloneablePtr< six::sicd::Segment >" "," "std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg__iterator(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____nonzero__(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____len__(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg__pop(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____getslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____setslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____delslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____delitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____getitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *self,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____setitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg__append(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > {
      typedef pointer_category category;
      static const char* type_name() { return"mem::ScopedCloneablePtr< six::sicd::ChannelParameters >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >, std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters >" "," "std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg__iterator(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____nonzero__(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____len__(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg__pop(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____getslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____setslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____delslice__(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____delitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____getitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *self,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____setitem__(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg__append(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *self,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &x){
      self->push_back(x);
    }

namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem__(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem__(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<six::sicd::Processing > {
      typedef pointer_category category;
      static const char* type_name() { return"six::sicd::Processing"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<six::sicd::Processing, std::allocator< six::sicd::Processing > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "six::sicd::Processing" "," "std::allocator< six::sicd::Processing >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_six_sicd_Processing_Sg__iterator(std::vector< six::sicd::Processing > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_six_sicd_Processing_Sg____nonzero__(std::vector< six::sicd::Processing > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< six::sicd::Processing >::size_type std_vector_Sl_six_sicd_Processing_Sg____len__(std::vector< six::sicd::Processing > const *self){
      return self->size();
    }
SWIGINTERN std::vector< six::sicd::Processing >::value_type std_vector_Sl_six_sicd_Processing_Sg__pop(std::vector< six::sicd::Processing > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *std_vector_Sl_six_sicd_Processing_Sg____getslice__(std::vector< six::sicd::Processing > *self,std::vector< six::sicd::Processing >::difference_type i,std::vector< six::sicd::Processing >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_six_sicd_Processing_Sg____setslice__(std::vector< six::sicd::Processing > *self,std::vector< six::sicd::Processing >::difference_type i,std::vector< six::sicd::Processing >::difference_type j,std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_six_sicd_Processing_Sg____delslice__(std::vector< six::sicd::Processing > *self,std::vector< six::sicd::Processing >::difference_type i,std::vector< six::sicd::Processing >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_six_sicd_Processing_Sg____delitem__(std::vector< six::sicd::Processing > *self,std::vector< six::sicd::Processing >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< six::sicd::Processing >::value_type const &std_vector_Sl_six_sicd_Processing_Sg____getitem__(std::vector< six::sicd::Processing > const *self,std::vector< six::sicd::Processing >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_six_sicd_Processing_Sg____setitem__(std::vector< six::sicd::Processing > *self,std::vector< six::sicd::Processing >::difference_type i,std::vector< six::sicd::Processing >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_six_sicd_Processing_Sg__append(std::vector< six::sicd::Processing > *self,std::vector< six::sicd::Processing >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<six::sicd::MatchCollect > {
      typedef pointer_category category;
      static const char* type_name() { return"six::sicd::MatchCollect"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<six::sicd::MatchCollect, std::allocator< six::sicd::MatchCollect > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "six::sicd::MatchCollect" "," "std::allocator< six::sicd::MatchCollect >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_six_sicd_MatchCollect_Sg__iterator(std::vector< six::sicd::MatchCollect > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_six_sicd_MatchCollect_Sg____nonzero__(std::vector< six::sicd::MatchCollect > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< six::sicd::MatchCollect >::size_type std_vector_Sl_six_sicd_MatchCollect_Sg____len__(std::vector< six::sicd::MatchCollect > const *self){
      return self->size();
    }
SWIGINTERN std::vector< six::sicd::MatchCollect >::value_type std_vector_Sl_six_sicd_MatchCollect_Sg__pop(std::vector< six::sicd::MatchCollect > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *std_vector_Sl_six_sicd_MatchCollect_Sg____getslice__(std::vector< six::sicd::MatchCollect > *self,std::vector< six::sicd::MatchCollect >::difference_type i,std::vector< six::sicd::MatchCollect >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_six_sicd_MatchCollect_Sg____setslice__(std::vector< six::sicd::MatchCollect > *self,std::vector< six::sicd::MatchCollect >::difference_type i,std::vector< six::sicd::MatchCollect >::difference_type j,std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_six_sicd_MatchCollect_Sg____delslice__(std::vector< six::sicd::MatchCollect > *self,std::vector< six::sicd::MatchCollect >::difference_type i,std::vector< six::sicd::MatchCollect >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_six_sicd_MatchCollect_Sg____delitem__(std::vector< six::sicd::MatchCollect > *self,std::vector< six::sicd::MatchCollect >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< six::sicd::MatchCollect >::value_type const &std_vector_Sl_six_sicd_MatchCollect_Sg____getitem__(std::vector< six::sicd::MatchCollect > const *self,std::vector< six::sicd::MatchCollect >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_six_sicd_MatchCollect_Sg____setitem__(std::vector< six::sicd::MatchCollect > *self,std::vector< six::sicd::MatchCollect >::difference_type i,std::vector< six::sicd::MatchCollect >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_six_sicd_MatchCollect_Sg__append(std::vector< six::sicd::MatchCollect > *self,std::vector< six::sicd::MatchCollect >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<mem::ScopedCopyablePtr< six::sicd::MatchType > > {
      typedef pointer_category category;
      static const char* type_name() { return"mem::ScopedCopyablePtr< six::sicd::MatchType >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >, std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mem::ScopedCopyablePtr< six::sicd::MatchType >" "," "std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg__iterator(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____nonzero__(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____len__(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg__pop(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____getslice__(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____setslice__(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____delslice__(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____delitem__(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____getitem__(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *self,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____setitem__(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg__append(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *self,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<six::sicd::TimelineSet > {
      typedef pointer_category category;
      static const char* type_name() { return"six::sicd::TimelineSet"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<six::sicd::TimelineSet*, std::allocator< six::sicd::TimelineSet * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "six::sicd::TimelineSet" " *," "std::allocator< six::sicd::TimelineSet * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_six_sicd_TimelineSet_Sm__Sg__iterator(std::vector< six::sicd::TimelineSet * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____nonzero__(std::vector< six::sicd::TimelineSet * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< six::sicd::TimelineSet * >::size_type std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____len__(std::vector< six::sicd::TimelineSet * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< six::sicd::TimelineSet * >::value_type std_vector_Sl_six_sicd_TimelineSet_Sm__Sg__pop(std::vector< six::sicd::TimelineSet * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____getslice__(std::vector< six::sicd::TimelineSet * > *self,std::vector< six::sicd::TimelineSet * >::difference_type i,std::vector< six::sicd::TimelineSet * >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____setslice__(std::vector< six::sicd::TimelineSet * > *self,std::vector< six::sicd::TimelineSet * >::difference_type i,std::vector< six::sicd::TimelineSet * >::difference_type j,std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____delslice__(std::vector< six::sicd::TimelineSet * > *self,std::vector< six::sicd::TimelineSet * >::difference_type i,std::vector< six::sicd::TimelineSet * >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____delitem__(std::vector< six::sicd::TimelineSet * > *self,std::vector< six::sicd::TimelineSet * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< six::sicd::TimelineSet * >::value_type std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____getitem__(std::vector< six::sicd::TimelineSet * > *self,std::vector< six::sicd::TimelineSet * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____setitem__(std::vector< six::sicd::TimelineSet * > *self,std::vector< six::sicd::TimelineSet * >::difference_type i,std::vector< six::sicd::TimelineSet * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_six_sicd_TimelineSet_Sm__Sg__append(std::vector< six::sicd::TimelineSet * > *self,std::vector< six::sicd::TimelineSet * >::value_type x){
      self->push_back(x);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_PySwigIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PySwigIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySwigIterator" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_value" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)((swig::PySwigIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (swig::PySwigIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PySwigIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::PySwigIterator *,size_t)\n"
    "    incr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (swig::PySwigIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PySwigIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::PySwigIterator *,size_t)\n"
    "    decr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_distance" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  try {
    result = ((swig::PySwigIterator const *)arg1)->distance((swig::PySwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_equal" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  try {
    result = (bool)((swig::PySwigIterator const *)arg1)->equal((swig::PySwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_copy" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_next" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_previous" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_advance" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___eq__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = (bool)((swig::PySwigIterator const *)arg1)->operator ==((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___ne__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = (bool)((swig::PySwigIterator const *)arg1)->operator !=((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___iadd__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      swig::PySwigIterator &_result_ref = (arg1)->operator +=(arg2);
      result = (swig::PySwigIterator *) &_result_ref;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___isub__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      swig::PySwigIterator &_result_ref = (arg1)->operator -=(arg2);
      result = (swig::PySwigIterator *) &_result_ref;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___add__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = ((swig::PySwigIterator const *)arg1)->operator -((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__PySwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PySwigIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *PySwigIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__PySwigIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getComplexData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::sicd::ComplexData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getComplexData",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getComplexData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getComplexData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getComplexData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getComplexData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = (six::sicd::ComplexData *)getComplexData((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexClassification_getLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexClassification *arg1 = (six::sicd::ComplexClassification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexClassification_getLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexClassification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexClassification_getLevel" "', argument " "1"" of type '" "six::sicd::ComplexClassification const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexClassification * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexClassification const *)arg1)->getLevel();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexClassification_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexClassification *arg1 = (six::sicd::ComplexClassification *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexClassification_put",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexClassification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexClassification_put" "', argument " "1"" of type '" "six::sicd::ComplexClassification const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexClassification * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexClassification_put" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexClassification_put" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try{
      {
        std::ostream &_result_ref = ((six::sicd::ComplexClassification const *)arg1)->put(*arg2);
        result = (std::ostream *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexClassification_level_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexClassification *arg1 = (six::sicd::ComplexClassification *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexClassification_level_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexClassification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexClassification_level_set" "', argument " "1"" of type '" "six::sicd::ComplexClassification *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexClassification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexClassification_level_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexClassification_level_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->level = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexClassification_level_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexClassification *arg1 = (six::sicd::ComplexClassification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexClassification_level_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexClassification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexClassification_level_get" "', argument " "1"" of type '" "six::sicd::ComplexClassification *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexClassification * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->level);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexClassification(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexClassification *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ComplexClassification")) SWIG_fail;
  {
    try{
      result = (six::sicd::ComplexClassification *)new six::sicd::ComplexClassification();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ComplexClassification, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComplexClassification(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexClassification *arg1 = (six::sicd::ComplexClassification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComplexClassification",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexClassification, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComplexClassification" "', argument " "1"" of type '" "six::sicd::ComplexClassification *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexClassification * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ComplexClassification_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__ComplexClassification, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CollectionInformation_collectorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_collectorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_collectorName_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->collectorName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_collectorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_collectorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_collectorName_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->collectorName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_illuminatorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_illuminatorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_illuminatorName_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->illuminatorName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_illuminatorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_illuminatorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_illuminatorName_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->illuminatorName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_coreName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_coreName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_coreName_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->coreName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_coreName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_coreName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_coreName_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->coreName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_collectType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  six::CollectType *arg2 = (six::CollectType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_collectType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_collectType_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_collectType_set" "', argument " "2"" of type '" "six::CollectType *""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try{
      if (arg1) (arg1)->collectType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_collectType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_collectType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_collectType_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      result = (six::CollectType *)& ((arg1)->collectType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_radarMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  six::RadarModeType *arg2 = (six::RadarModeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_radarMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_radarMode_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_radarMode_set" "', argument " "2"" of type '" "six::RadarModeType *""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try{
      if (arg1) (arg1)->radarMode = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_radarMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarModeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_radarMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_radarMode_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      result = (six::RadarModeType *)& ((arg1)->radarMode);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_radarModeID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_radarModeID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_radarModeID_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_radarModeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation_radarModeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->radarModeID = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_radarModeID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_radarModeID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_radarModeID_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->radarModeID);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_classification_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  six::sicd::ComplexClassification *arg2 = (six::sicd::ComplexClassification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_classification_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_classification_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__ComplexClassification, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_classification_set" "', argument " "2"" of type '" "six::sicd::ComplexClassification *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ComplexClassification * >(argp2);
  {
    try{
      if (arg1) (arg1)->classification = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_classification_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ComplexClassification *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_classification_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_classification_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      result = (six::sicd::ComplexClassification *)& ((arg1)->classification);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ComplexClassification, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_countryCodes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_countryCodes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_countryCodes_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_countryCodes_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->countryCodes = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_countryCodes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_countryCodes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_countryCodes_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->countryCodes);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_parameters_set" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation_parameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->parameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_parameters_get" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((arg1)->parameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CollectionInformation")) SWIG_fail;
  {
    try{
      result = (six::sicd::CollectionInformation *)new six::sicd::CollectionInformation();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__CollectionInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CollectionInformation" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CollectionInformation_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation_clone" "', argument " "1"" of type '" "six::sicd::CollectionInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      result = (six::sicd::CollectionInformation *)((six::sicd::CollectionInformation const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  six::sicd::CollectionInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation___eq__" "', argument " "1"" of type '" "six::sicd::CollectionInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__CollectionInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation___eq__" "', argument " "2"" of type '" "six::sicd::CollectionInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation___eq__" "', argument " "2"" of type '" "six::sicd::CollectionInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::CollectionInformation * >(argp2);
  {
    try{
      result = (bool)((six::sicd::CollectionInformation const *)arg1)->operator ==((six::sicd::CollectionInformation const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CollectionInformation___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  six::sicd::CollectionInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CollectionInformation___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionInformation___ne__" "', argument " "1"" of type '" "six::sicd::CollectionInformation const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__CollectionInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CollectionInformation___ne__" "', argument " "2"" of type '" "six::sicd::CollectionInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CollectionInformation___ne__" "', argument " "2"" of type '" "six::sicd::CollectionInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::CollectionInformation * >(argp2);
  {
    try{
      result = (bool)((six::sicd::CollectionInformation const *)arg1)->operator !=((six::sicd::CollectionInformation const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CollectionInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__CollectionInformation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ImageCreation_application_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageCreation_application_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_application_set" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageCreation_application_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCreation_application_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->application = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreation_application_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageCreation_application_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_application_get" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->application);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreation_dateTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  six::DateTime *arg2 = (six::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageCreation_dateTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_dateTime_set" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageCreation_dateTime_set" "', argument " "2"" of type '" "six::DateTime *""'"); 
  }
  arg2 = reinterpret_cast< six::DateTime * >(argp2);
  {
    try{
      if (arg1) (arg1)->dateTime = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreation_dateTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageCreation_dateTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_dateTime_get" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    try{
      result = (six::DateTime *)& ((arg1)->dateTime);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreation_site_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageCreation_site_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_site_set" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageCreation_site_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCreation_site_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->site = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreation_site_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageCreation_site_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_site_get" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->site);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreation_profile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageCreation_profile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_profile_set" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageCreation_profile_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageCreation_profile_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->profile = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreation_profile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageCreation_profile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_profile_get" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->profile);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageCreation_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageCreation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageCreation_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageCreation_clone" "', argument " "1"" of type '" "six::sicd::ImageCreation const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    try{
      result = (six::sicd::ImageCreation *)((six::sicd::ImageCreation const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ImageCreation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImageCreation")) SWIG_fail;
  {
    try{
      result = (six::sicd::ImageCreation *)new six::sicd::ImageCreation();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageCreation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImageCreation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImageCreation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImageCreation" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImageCreation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__ImageCreation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ImageData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImageData")) SWIG_fail;
  {
    try{
      result = (six::sicd::ImageData *)new six::sicd::ImageData();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImageData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImageData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImageData" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_clone" "', argument " "1"" of type '" "six::sicd::ImageData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result = (six::sicd::ImageData *)((six::sicd::ImageData const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_pixelType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  six::PixelType *arg2 = (six::PixelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_pixelType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_pixelType_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageData_pixelType_set" "', argument " "2"" of type '" "six::PixelType *""'"); 
  }
  arg2 = reinterpret_cast< six::PixelType * >(argp2);
  {
    try{
      if (arg1) (arg1)->pixelType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_pixelType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PixelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_pixelType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_pixelType_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result = (six::PixelType *)& ((arg1)->pixelType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PixelType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_amplitudeTable_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  six::AmplitudeTable *arg2 = (six::AmplitudeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_amplitudeTable_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_amplitudeTable_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AmplitudeTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageData_amplitudeTable_set" "', argument " "2"" of type '" "six::AmplitudeTable *""'"); 
  }
  arg2 = reinterpret_cast< six::AmplitudeTable * >(argp2);
  {
    try{
      if (arg1) (arg1)->amplitudeTable = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_amplitudeTable_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AmplitudeTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_amplitudeTable_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_amplitudeTable_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result = (six::AmplitudeTable *) ((arg1)->amplitudeTable);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_numRows_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_numRows_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_numRows_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageData_numRows_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (arg1)->numRows = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_numRows_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_numRows_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_numRows_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result =  ((arg1)->numRows);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_numCols_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_numCols_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_numCols_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageData_numCols_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (arg1)->numCols = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_numCols_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_numCols_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_numCols_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result =  ((arg1)->numCols);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_firstRow_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_firstRow_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_firstRow_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageData_firstRow_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (arg1)->firstRow = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_firstRow_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_firstRow_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_firstRow_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result =  ((arg1)->firstRow);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_firstCol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_firstCol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_firstCol_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageData_firstCol_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (arg1)->firstCol = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_firstCol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_firstCol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_firstCol_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result =  ((arg1)->firstCol);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_fullImage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  six::RowColInt *arg2 = (six::RowColInt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_fullImage_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_fullImage_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_types__RowColT_sys__SSize_T_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageData_fullImage_set" "', argument " "2"" of type '" "six::RowColInt *""'"); 
  }
  arg2 = reinterpret_cast< six::RowColInt * >(argp2);
  {
    try{
      if (arg1) (arg1)->fullImage = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_fullImage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RowColInt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_fullImage_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_fullImage_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result = (six::RowColInt *)& ((arg1)->fullImage);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_types__RowColT_sys__SSize_T_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_scpPixel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  six::RowColInt *arg2 = (six::RowColInt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_scpPixel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_scpPixel_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_types__RowColT_sys__SSize_T_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageData_scpPixel_set" "', argument " "2"" of type '" "six::RowColInt *""'"); 
  }
  arg2 = reinterpret_cast< six::RowColInt * >(argp2);
  {
    try{
      if (arg1) (arg1)->scpPixel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_scpPixel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RowColInt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_scpPixel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_scpPixel_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result = (six::RowColInt *)& ((arg1)->scpPixel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_types__RowColT_sys__SSize_T_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_validData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  std::vector< six::RowColInt,std::allocator< six::RowColInt > > *arg2 = (std::vector< six::RowColInt,std::allocator< six::RowColInt > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageData_validData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_validData_set" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageData_validData_set" "', argument " "2"" of type '" "std::vector< six::RowColInt,std::allocator< six::RowColInt > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::RowColInt,std::allocator< six::RowColInt > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->validData = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageData_validData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::RowColInt,std::allocator< six::RowColInt > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageData_validData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageData_validData_get" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result = (std::vector< six::RowColInt,std::allocator< six::RowColInt > > *)& ((arg1)->validData);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImageData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__ImageData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GeoInfo")) SWIG_fail;
  {
    try{
      result = (six::sicd::GeoInfo *)new six::sicd::GeoInfo();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoInfo" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_clone" "', argument " "1"" of type '" "six::sicd::GeoInfo const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  {
    try{
      result = (six::sicd::GeoInfo *)((six::sicd::GeoInfo const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo_name_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_name_set" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeoInfo_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->name = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_name_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_name_get" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->name);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_geoInfos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo_geoInfos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_geoInfos_set" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo_geoInfos_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->geoInfos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_geoInfos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_geoInfos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_geoInfos_get" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *)& ((arg1)->geoInfos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_desc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo_desc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_desc_set" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo_desc_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->desc = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_desc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_desc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_desc_get" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((arg1)->desc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_geometryLatLon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *arg2 = (std::vector< six::LatLon,std::allocator< six::LatLon > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoInfo_geometryLatLon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_geometryLatLon_set" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoInfo_geometryLatLon_set" "', argument " "2"" of type '" "std::vector< six::LatLon,std::allocator< six::LatLon > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::LatLon,std::allocator< six::LatLon > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->geometryLatLon = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoInfo_geometryLatLon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoInfo_geometryLatLon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoInfo_geometryLatLon_get" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  {
    try{
      result = (std::vector< six::LatLon,std::allocator< six::LatLon > > *)& ((arg1)->geometryLatLon);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GeoInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__GeoInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GeoData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GeoData")) SWIG_fail;
  {
    try{
      result = (six::sicd::GeoData *)new six::sicd::GeoData();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoData_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_clone" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  {
    try{
      result = (six::sicd::GeoData *)(arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_earthModel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  six::EarthModelType *arg2 = (six::EarthModelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoData_earthModel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_earthModel_set" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoData_earthModel_set" "', argument " "2"" of type '" "six::EarthModelType *""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try{
      if (arg1) (arg1)->earthModel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_earthModel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::EarthModelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoData_earthModel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_earthModel_get" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  {
    try{
      result = (six::EarthModelType *)& ((arg1)->earthModel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_scp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  six::SCP *arg2 = (six::SCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoData_scp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_scp_set" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__SCP, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoData_scp_set" "', argument " "2"" of type '" "six::SCP *""'"); 
  }
  arg2 = reinterpret_cast< six::SCP * >(argp2);
  {
    try{
      if (arg1) (arg1)->scp = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_scp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoData_scp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_scp_get" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  {
    try{
      result = (six::SCP *)& ((arg1)->scp);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SCP, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_imageCorners_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  six::LatLonCorners *arg2 = (six::LatLonCorners *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoData_imageCorners_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_imageCorners_set" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoData_imageCorners_set" "', argument " "2"" of type '" "six::LatLonCorners *""'"); 
  }
  arg2 = reinterpret_cast< six::LatLonCorners * >(argp2);
  {
    try{
      if (arg1) (arg1)->imageCorners = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_imageCorners_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LatLonCorners *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoData_imageCorners_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_imageCorners_get" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  {
    try{
      result = (six::LatLonCorners *)& ((arg1)->imageCorners);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_validData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *arg2 = (std::vector< six::LatLon,std::allocator< six::LatLon > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoData_validData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_validData_set" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoData_validData_set" "', argument " "2"" of type '" "std::vector< six::LatLon,std::allocator< six::LatLon > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::LatLon,std::allocator< six::LatLon > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->validData = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_validData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoData_validData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_validData_get" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  {
    try{
      result = (std::vector< six::LatLon,std::allocator< six::LatLon > > *)& ((arg1)->validData);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_geoInfos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeoData_geoInfos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_geoInfos_set" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeoData_geoInfos_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->geoInfos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeoData_geoInfos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeoData_geoInfos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeoData_geoInfos_get" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *)& ((arg1)->geoInfos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GeoData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GeoData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeoData" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GeoData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__GeoData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WeightType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WeightType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WeightType")) SWIG_fail;
  {
    try{
      result = (six::sicd::WeightType *)new six::sicd::WeightType();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WeightType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightType_windowName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WeightType *arg1 = (six::sicd::WeightType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightType_windowName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightType_windowName_set" "', argument " "1"" of type '" "six::sicd::WeightType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WeightType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightType_windowName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightType_windowName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->windowName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightType_windowName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WeightType *arg1 = (six::sicd::WeightType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeightType_windowName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightType_windowName_get" "', argument " "1"" of type '" "six::sicd::WeightType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WeightType * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->windowName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightType_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WeightType *arg1 = (six::sicd::WeightType *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightType_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightType_parameters_set" "', argument " "1"" of type '" "six::sicd::WeightType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WeightType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightType_parameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->parameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightType_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WeightType *arg1 = (six::sicd::WeightType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeightType_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightType_parameters_get" "', argument " "1"" of type '" "six::sicd::WeightType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WeightType * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((arg1)->parameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WeightType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WeightType *arg1 = (six::sicd::WeightType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WeightType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WeightType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WeightType" "', argument " "1"" of type '" "six::sicd::WeightType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WeightType * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WeightType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__WeightType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DirectionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DirectionParameters")) SWIG_fail;
  {
    try{
      result = (six::sicd::DirectionParameters *)new six::sicd::DirectionParameters();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__DirectionParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::DirectionParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_clone" "', argument " "1"" of type '" "six::sicd::DirectionParameters const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (six::sicd::DirectionParameters *)((six::sicd::DirectionParameters const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_unitVector_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_unitVector_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_unitVector_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionParameters_unitVector_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->unitVector = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_unitVector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_unitVector_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_unitVector_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->unitVector);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_sampleSpacing_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_sampleSpacing_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_sampleSpacing_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionParameters_sampleSpacing_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->sampleSpacing = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_sampleSpacing_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_sampleSpacing_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_sampleSpacing_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->sampleSpacing);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_impulseResponseWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_impulseResponseWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_impulseResponseWidth_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionParameters_impulseResponseWidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->impulseResponseWidth = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_impulseResponseWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_impulseResponseWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_impulseResponseWidth_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->impulseResponseWidth);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_sign_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  six::FFTSign *arg2 = (six::FFTSign *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_sign_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_sign_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__FFTSign, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionParameters_sign_set" "', argument " "2"" of type '" "six::FFTSign *""'"); 
  }
  arg2 = reinterpret_cast< six::FFTSign * >(argp2);
  {
    try{
      if (arg1) (arg1)->sign = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_sign_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::FFTSign *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_sign_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_sign_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (six::FFTSign *)& ((arg1)->sign);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__FFTSign, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_impulseResponseBandwidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_impulseResponseBandwidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_impulseResponseBandwidth_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionParameters_impulseResponseBandwidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->impulseResponseBandwidth = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_impulseResponseBandwidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_impulseResponseBandwidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_impulseResponseBandwidth_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->impulseResponseBandwidth);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_kCenter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_kCenter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_kCenter_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionParameters_kCenter_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->kCenter = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_kCenter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_kCenter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_kCenter_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->kCenter);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_deltaK1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_deltaK1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_deltaK1_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionParameters_deltaK1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->deltaK1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_deltaK1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_deltaK1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_deltaK1_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->deltaK1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_deltaK2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_deltaK2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_deltaK2_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectionParameters_deltaK2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->deltaK2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_deltaK2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_deltaK2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_deltaK2_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->deltaK2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_deltaKCOAPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_deltaKCOAPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_deltaKCOAPoly_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionParameters_deltaKCOAPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (arg1)->deltaKCOAPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_deltaKCOAPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_deltaKCOAPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_deltaKCOAPoly_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((arg1)->deltaKCOAPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_weightType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg2 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_weightType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_weightType_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionParameters_weightType_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp2);
  {
    try{
      if (arg1) (arg1)->weightType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_weightType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_weightType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_weightType_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::WeightType > *)& ((arg1)->weightType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_weights_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectionParameters_weights_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_weights_set" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectionParameters_weights_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->weights = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectionParameters_weights_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectionParameters_weights_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectionParameters_weights_get" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      result = (std::vector< double,std::allocator< double > > *)& ((arg1)->weights);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DirectionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::DirectionParameters *arg1 = (six::sicd::DirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DirectionParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__DirectionParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DirectionParameters" "', argument " "1"" of type '" "six::sicd::DirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::DirectionParameters * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DirectionParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__DirectionParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Grid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Grid")) SWIG_fail;
  {
    try{
      result = (six::sicd::Grid *)new six::sicd::Grid();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Grid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_clone" "', argument " "1"" of type '" "six::sicd::Grid const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  {
    try{
      result = (six::sicd::Grid *)((six::sicd::Grid const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_imagePlane_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  six::ComplexImagePlaneType *arg2 = (six::ComplexImagePlaneType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_imagePlane_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_imagePlane_set" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_imagePlane_set" "', argument " "2"" of type '" "six::ComplexImagePlaneType *""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImagePlaneType * >(argp2);
  {
    try{
      if (arg1) (arg1)->imagePlane = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_imagePlane_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ComplexImagePlaneType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_imagePlane_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_imagePlane_get" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  {
    try{
      result = (six::ComplexImagePlaneType *)& ((arg1)->imagePlane);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  six::ComplexImageGridType *arg2 = (six::ComplexImageGridType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_type_set" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_type_set" "', argument " "2"" of type '" "six::ComplexImageGridType *""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImageGridType * >(argp2);
  {
    try{
      if (arg1) (arg1)->type = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ComplexImageGridType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_type_get" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  {
    try{
      result = (six::ComplexImageGridType *)& ((arg1)->type);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_timeCOAPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_timeCOAPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_timeCOAPoly_set" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_timeCOAPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (arg1)->timeCOAPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_timeCOAPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_timeCOAPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_timeCOAPoly_get" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((arg1)->timeCOAPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_row_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *arg2 = (mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_row_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_row_set" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_row_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::DirectionParameters > * >(argp2);
  {
    try{
      if (arg1) (arg1)->row = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_row_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_row_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_row_get" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *)& ((arg1)->row);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_col_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *arg2 = (mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_col_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_col_set" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_col_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::DirectionParameters > * >(argp2);
  {
    try{
      if (arg1) (arg1)->col = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_col_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_col_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_col_get" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *)& ((arg1)->col);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Grid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Grid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Grid" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Grid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Grid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TimelineSet_tStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimelineSet_tStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_tStart_set" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimelineSet_tStart_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->tStart = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_tStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimelineSet_tStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_tStart_get" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  {
    try{
      result = (double) ((arg1)->tStart);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_tEnd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimelineSet_tEnd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_tEnd_set" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimelineSet_tEnd_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->tEnd = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_tEnd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimelineSet_tEnd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_tEnd_get" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  {
    try{
      result = (double) ((arg1)->tEnd);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_interPulsePeriodStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimelineSet_interPulsePeriodStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_interPulsePeriodStart_set" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimelineSet_interPulsePeriodStart_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->interPulsePeriodStart = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_interPulsePeriodStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimelineSet_interPulsePeriodStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_interPulsePeriodStart_get" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  {
    try{
      result = (int) ((arg1)->interPulsePeriodStart);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_interPulsePeriodEnd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimelineSet_interPulsePeriodEnd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_interPulsePeriodEnd_set" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimelineSet_interPulsePeriodEnd_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->interPulsePeriodEnd = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_interPulsePeriodEnd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimelineSet_interPulsePeriodEnd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_interPulsePeriodEnd_get" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  {
    try{
      result = (int) ((arg1)->interPulsePeriodEnd);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_interPulsePeriodPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimelineSet_interPulsePeriodPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_interPulsePeriodPoly_set" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimelineSet_interPulsePeriodPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->interPulsePeriodPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_interPulsePeriodPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimelineSet_interPulsePeriodPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_interPulsePeriodPoly_get" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->interPulsePeriodPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimelineSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TimelineSet")) SWIG_fail;
  {
    try{
      result = (six::sicd::TimelineSet *)new six::sicd::TimelineSet();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__TimelineSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TimelineSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimelineSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimelineSet" "', argument " "1"" of type '" "six::sicd::TimelineSet *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimelineSet_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TimelineSet *arg1 = (six::sicd::TimelineSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::TimelineSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimelineSet_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimelineSet_clone" "', argument " "1"" of type '" "six::sicd::TimelineSet const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TimelineSet * >(argp1);
  {
    try{
      result = (six::sicd::TimelineSet *)((six::sicd::TimelineSet const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__TimelineSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimelineSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__TimelineSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InterPulsePeriod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::InterPulsePeriod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InterPulsePeriod")) SWIG_fail;
  {
    try{
      result = (six::sicd::InterPulsePeriod *)new six::sicd::InterPulsePeriod();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__InterPulsePeriod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InterPulsePeriod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::InterPulsePeriod *arg1 = (six::sicd::InterPulsePeriod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InterPulsePeriod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__InterPulsePeriod, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InterPulsePeriod" "', argument " "1"" of type '" "six::sicd::InterPulsePeriod *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::InterPulsePeriod * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterPulsePeriod_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::InterPulsePeriod *arg1 = (six::sicd::InterPulsePeriod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::InterPulsePeriod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InterPulsePeriod_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__InterPulsePeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterPulsePeriod_clone" "', argument " "1"" of type '" "six::sicd::InterPulsePeriod const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::InterPulsePeriod * >(argp1);
  {
    try{
      result = (six::sicd::InterPulsePeriod *)((six::sicd::InterPulsePeriod const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__InterPulsePeriod, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterPulsePeriod_sets_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::InterPulsePeriod *arg1 = (six::sicd::InterPulsePeriod *) 0 ;
  std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *arg2 = (std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InterPulsePeriod_sets_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__InterPulsePeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterPulsePeriod_sets_set" "', argument " "1"" of type '" "six::sicd::InterPulsePeriod *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::InterPulsePeriod * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterPulsePeriod_sets_set" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->sets = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterPulsePeriod_sets_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::InterPulsePeriod *arg1 = (six::sicd::InterPulsePeriod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InterPulsePeriod_sets_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__InterPulsePeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterPulsePeriod_sets_get" "', argument " "1"" of type '" "six::sicd::InterPulsePeriod *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::InterPulsePeriod * >(argp1);
  {
    try{
      result = (std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *)& ((arg1)->sets);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InterPulsePeriod_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__InterPulsePeriod, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Timeline_collectStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  six::DateTime *arg2 = (six::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Timeline_collectStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timeline_collectStart_set" "', argument " "1"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timeline_collectStart_set" "', argument " "2"" of type '" "six::DateTime *""'"); 
  }
  arg2 = reinterpret_cast< six::DateTime * >(argp2);
  {
    try{
      if (arg1) (arg1)->collectStart = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timeline_collectStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timeline_collectStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timeline_collectStart_get" "', argument " "1"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  {
    try{
      result = (six::DateTime *)& ((arg1)->collectStart);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timeline_collectDuration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Timeline_collectDuration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timeline_collectDuration_set" "', argument " "1"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Timeline_collectDuration_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->collectDuration = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timeline_collectDuration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timeline_collectDuration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timeline_collectDuration_get" "', argument " "1"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  {
    try{
      result = (double) ((arg1)->collectDuration);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timeline_interPulsePeriod_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  six::sicd::InterPulsePeriod *arg2 = (six::sicd::InterPulsePeriod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Timeline_interPulsePeriod_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timeline_interPulsePeriod_set" "', argument " "1"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__InterPulsePeriod, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Timeline_interPulsePeriod_set" "', argument " "2"" of type '" "six::sicd::InterPulsePeriod *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::InterPulsePeriod * >(argp2);
  {
    try{
      if (arg1) (arg1)->interPulsePeriod = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timeline_interPulsePeriod_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::InterPulsePeriod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timeline_interPulsePeriod_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timeline_interPulsePeriod_get" "', argument " "1"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  {
    try{
      result = (six::sicd::InterPulsePeriod *) ((arg1)->interPulsePeriod);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__InterPulsePeriod, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Timeline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Timeline")) SWIG_fail;
  {
    try{
      result = (six::sicd::Timeline *)new six::sicd::Timeline();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Timeline, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Timeline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Timeline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Timeline" "', argument " "1"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Timeline_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Timeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Timeline_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Timeline_clone" "', argument " "1"" of type '" "six::sicd::Timeline const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  {
    try{
      result = (six::sicd::Timeline *)((six::sicd::Timeline const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Timeline_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Timeline, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RcvAPC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvAPC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RcvAPC")) SWIG_fail;
  {
    try{
      result = (six::sicd::RcvAPC *)new six::sicd::RcvAPC();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RcvAPC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RcvAPC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvAPC *arg1 = (six::sicd::RcvAPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RcvAPC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvAPC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RcvAPC" "', argument " "1"" of type '" "six::sicd::RcvAPC *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvAPC * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvAPC_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvAPC *arg1 = (six::sicd::RcvAPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RcvAPC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RcvAPC_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvAPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvAPC_clone" "', argument " "1"" of type '" "six::sicd::RcvAPC const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvAPC * >(argp1);
  {
    try{
      result = (six::sicd::RcvAPC *)((six::sicd::RcvAPC const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RcvAPC, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvAPC_rcvAPCPolys_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvAPC *arg1 = (six::sicd::RcvAPC *) 0 ;
  std::vector< six::PolyXYZ,std::allocator< six::PolyXYZ > > *arg2 = (std::vector< six::PolyXYZ,std::allocator< six::PolyXYZ > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RcvAPC_rcvAPCPolys_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvAPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvAPC_rcvAPCPolys_set" "', argument " "1"" of type '" "six::sicd::RcvAPC *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvAPC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RcvAPC_rcvAPCPolys_set" "', argument " "2"" of type '" "std::vector< six::PolyXYZ,std::allocator< six::PolyXYZ > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::PolyXYZ,std::allocator< six::PolyXYZ > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->rcvAPCPolys = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvAPC_rcvAPCPolys_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvAPC *arg1 = (six::sicd::RcvAPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::PolyXYZ,std::allocator< six::PolyXYZ > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RcvAPC_rcvAPCPolys_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvAPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvAPC_rcvAPCPolys_get" "', argument " "1"" of type '" "six::sicd::RcvAPC *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvAPC * >(argp1);
  {
    try{
      result = (std::vector< six::PolyXYZ,std::allocator< six::PolyXYZ > > *)& ((arg1)->rcvAPCPolys);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RcvAPC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__RcvAPC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Position_arpPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position_arpPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_arpPoly_set" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_arpPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (arg1)->arpPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_arpPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_arpPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_arpPoly_get" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((arg1)->arpPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_grpPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position_grpPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_grpPoly_set" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_grpPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (arg1)->grpPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_grpPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_grpPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_grpPoly_get" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((arg1)->grpPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_txAPCPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position_txAPCPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_txAPCPoly_set" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_txAPCPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (arg1)->txAPCPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_txAPCPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_txAPCPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_txAPCPoly_get" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((arg1)->txAPCPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_rcvAPC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  six::sicd::RcvAPC *arg2 = (six::sicd::RcvAPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Position_rcvAPC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_rcvAPC_set" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__RcvAPC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_rcvAPC_set" "', argument " "2"" of type '" "six::sicd::RcvAPC *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::RcvAPC * >(argp2);
  {
    try{
      if (arg1) (arg1)->rcvAPC = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_rcvAPC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RcvAPC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_rcvAPC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_rcvAPC_get" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  {
    try{
      result = (six::sicd::RcvAPC *) ((arg1)->rcvAPC);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RcvAPC, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Position")) SWIG_fail;
  {
    try{
      result = (six::sicd::Position *)new six::sicd::Position();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Position, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_clone" "', argument " "1"" of type '" "six::sicd::Position const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  {
    try{
      result = (six::sicd::Position *)((six::sicd::Position const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Position_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Position, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TxStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TxStep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TxStep")) SWIG_fail;
  {
    try{
      result = (six::sicd::TxStep *)new six::sicd::TxStep();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__TxStep, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TxStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TxStep *arg1 = (six::sicd::TxStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TxStep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TxStep, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TxStep" "', argument " "1"" of type '" "six::sicd::TxStep *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TxStep * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TxStep_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TxStep *arg1 = (six::sicd::TxStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::TxStep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TxStep_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxStep_clone" "', argument " "1"" of type '" "six::sicd::TxStep const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TxStep * >(argp1);
  {
    try{
      result = (six::sicd::TxStep *)((six::sicd::TxStep const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TxStep_waveformIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TxStep *arg1 = (six::sicd::TxStep *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TxStep_waveformIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxStep_waveformIndex_set" "', argument " "1"" of type '" "six::sicd::TxStep *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TxStep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TxStep_waveformIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->waveformIndex = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TxStep_waveformIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TxStep *arg1 = (six::sicd::TxStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TxStep_waveformIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxStep_waveformIndex_get" "', argument " "1"" of type '" "six::sicd::TxStep *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TxStep * >(argp1);
  {
    try{
      result = (int) ((arg1)->waveformIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TxStep_txPolarization_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TxStep *arg1 = (six::sicd::TxStep *) 0 ;
  six::PolarizationType *arg2 = (six::PolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TxStep_txPolarization_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxStep_txPolarization_set" "', argument " "1"" of type '" "six::sicd::TxStep *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TxStep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TxStep_txPolarization_set" "', argument " "2"" of type '" "six::PolarizationType *""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationType * >(argp2);
  {
    try{
      if (arg1) (arg1)->txPolarization = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TxStep_txPolarization_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TxStep *arg1 = (six::sicd::TxStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TxStep_txPolarization_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxStep_txPolarization_get" "', argument " "1"" of type '" "six::sicd::TxStep *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TxStep * >(argp1);
  {
    try{
      result = (six::PolarizationType *)& ((arg1)->txPolarization);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TxStep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__TxStep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WaveformParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WaveformParameters")) SWIG_fail;
  {
    try{
      result = (six::sicd::WaveformParameters *)new six::sicd::WaveformParameters();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WaveformParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WaveformParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WaveformParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WaveformParameters" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::WaveformParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_clone" "', argument " "1"" of type '" "six::sicd::WaveformParameters const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (six::sicd::WaveformParameters *)((six::sicd::WaveformParameters const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_txPulseLength_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_txPulseLength_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_txPulseLength_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_txPulseLength_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->txPulseLength = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_txPulseLength_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_txPulseLength_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_txPulseLength_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->txPulseLength);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_txRFBandwidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_txRFBandwidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_txRFBandwidth_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_txRFBandwidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->txRFBandwidth = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_txRFBandwidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_txRFBandwidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_txRFBandwidth_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->txRFBandwidth);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_txFrequencyStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_txFrequencyStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_txFrequencyStart_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_txFrequencyStart_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->txFrequencyStart = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_txFrequencyStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_txFrequencyStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_txFrequencyStart_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->txFrequencyStart);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_txFMRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_txFMRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_txFMRate_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_txFMRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->txFMRate = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_txFMRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_txFMRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_txFMRate_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->txFMRate);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvDemodType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  six::DemodType *arg2 = (six::DemodType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_rcvDemodType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvDemodType_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WaveformParameters_rcvDemodType_set" "', argument " "2"" of type '" "six::DemodType *""'"); 
  }
  arg2 = reinterpret_cast< six::DemodType * >(argp2);
  {
    try{
      if (arg1) (arg1)->rcvDemodType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvDemodType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DemodType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_rcvDemodType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvDemodType_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (six::DemodType *)& ((arg1)->rcvDemodType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DemodType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvWindowLength_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_rcvWindowLength_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvWindowLength_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_rcvWindowLength_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->rcvWindowLength = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvWindowLength_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_rcvWindowLength_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvWindowLength_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->rcvWindowLength);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_adcSampleRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_adcSampleRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_adcSampleRate_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_adcSampleRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->adcSampleRate = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_adcSampleRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_adcSampleRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_adcSampleRate_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->adcSampleRate);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvIFBandwidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_rcvIFBandwidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvIFBandwidth_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_rcvIFBandwidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->rcvIFBandwidth = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvIFBandwidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_rcvIFBandwidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvIFBandwidth_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->rcvIFBandwidth);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvFrequencyStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_rcvFrequencyStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvFrequencyStart_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_rcvFrequencyStart_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->rcvFrequencyStart = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvFrequencyStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_rcvFrequencyStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvFrequencyStart_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->rcvFrequencyStart);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvFMRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WaveformParameters_rcvFMRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvFMRate_set" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaveformParameters_rcvFMRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->rcvFMRate = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WaveformParameters_rcvFMRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WaveformParameters_rcvFMRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaveformParameters_rcvFMRate_get" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->rcvFMRate);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WaveformParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__WaveformParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ChannelParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ChannelParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ChannelParameters")) SWIG_fail;
  {
    try{
      result = (six::sicd::ChannelParameters *)new six::sicd::ChannelParameters();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ChannelParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelParameters_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ChannelParameters *arg1 = (six::sicd::ChannelParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ChannelParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelParameters_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelParameters_clone" "', argument " "1"" of type '" "six::sicd::ChannelParameters const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ChannelParameters * >(argp1);
  {
    try{
      result = (six::sicd::ChannelParameters *)((six::sicd::ChannelParameters const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelParameters_txRcvPolarization_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ChannelParameters *arg1 = (six::sicd::ChannelParameters *) 0 ;
  six::DualPolarizationType *arg2 = (six::DualPolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChannelParameters_txRcvPolarization_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelParameters_txRcvPolarization_set" "', argument " "1"" of type '" "six::sicd::ChannelParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ChannelParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelParameters_txRcvPolarization_set" "', argument " "2"" of type '" "six::DualPolarizationType *""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try{
      if (arg1) (arg1)->txRcvPolarization = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelParameters_txRcvPolarization_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ChannelParameters *arg1 = (six::sicd::ChannelParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DualPolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelParameters_txRcvPolarization_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelParameters_txRcvPolarization_get" "', argument " "1"" of type '" "six::sicd::ChannelParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ChannelParameters * >(argp1);
  {
    try{
      result = (six::DualPolarizationType *)& ((arg1)->txRcvPolarization);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelParameters_rcvAPCIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ChannelParameters *arg1 = (six::sicd::ChannelParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ChannelParameters_rcvAPCIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelParameters_rcvAPCIndex_set" "', argument " "1"" of type '" "six::sicd::ChannelParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ChannelParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelParameters_rcvAPCIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->rcvAPCIndex = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelParameters_rcvAPCIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ChannelParameters *arg1 = (six::sicd::ChannelParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelParameters_rcvAPCIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelParameters_rcvAPCIndex_get" "', argument " "1"" of type '" "six::sicd::ChannelParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ChannelParameters * >(argp1);
  {
    try{
      result = (int) ((arg1)->rcvAPCIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChannelParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ChannelParameters *arg1 = (six::sicd::ChannelParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ChannelParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ChannelParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChannelParameters" "', argument " "1"" of type '" "six::sicd::ChannelParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ChannelParameters * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChannelParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__ChannelParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AreaDirectionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AreaDirectionParameters")) SWIG_fail;
  {
    try{
      result = (six::sicd::AreaDirectionParameters *)new six::sicd::AreaDirectionParameters();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AreaDirectionParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AreaDirectionParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDirectionParameters_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_clone" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  {
    try{
      result = (six::sicd::AreaDirectionParameters *)((six::sicd::AreaDirectionParameters const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AreaDirectionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AreaDirectionParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AreaDirectionParameters" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_unitVector_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaDirectionParameters_unitVector_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_unitVector_set" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AreaDirectionParameters_unitVector_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->unitVector = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_unitVector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDirectionParameters_unitVector_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_unitVector_get" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->unitVector);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_spacing_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaDirectionParameters_spacing_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_spacing_set" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AreaDirectionParameters_spacing_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->spacing = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_spacing_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDirectionParameters_spacing_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_spacing_get" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->spacing);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_elements_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaDirectionParameters_elements_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_elements_set" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AreaDirectionParameters_elements_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (arg1)->elements = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_elements_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDirectionParameters_elements_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_elements_get" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  {
    try{
      result =  ((arg1)->elements);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaDirectionParameters_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_first_set" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AreaDirectionParameters_first_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (arg1)->first = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDirectionParameters_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters_first_get" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  {
    try{
      result =  ((arg1)->first);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  six::sicd::AreaDirectionParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaDirectionParameters___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters___eq__" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AreaDirectionParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AreaDirectionParameters___eq__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AreaDirectionParameters___eq__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp2);
  {
    try{
      result = (bool)((six::sicd::AreaDirectionParameters const *)arg1)->operator ==((six::sicd::AreaDirectionParameters const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDirectionParameters___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  six::sicd::AreaDirectionParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaDirectionParameters___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDirectionParameters___ne__" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AreaDirectionParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AreaDirectionParameters___ne__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AreaDirectionParameters___ne__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp2);
  {
    try{
      result = (bool)((six::sicd::AreaDirectionParameters const *)arg1)->operator !=((six::sicd::AreaDirectionParameters const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AreaDirectionParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__AreaDirectionParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  six::sicd::AreaDirectionParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AreaDirectionParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp2);
  {
    try{
      {
        std::ostream &_result_ref = six::sicd::operator <<(*arg1,(six::sicd::AreaDirectionParameters const &)*arg2);
        result = (std::ostream *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Segment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Segment")) SWIG_fail;
  {
    try{
      result = (six::sicd::Segment *)new six::sicd::Segment();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Segment, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Segment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Segment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Segment" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Segment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Segment_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_clone" "', argument " "1"" of type '" "six::sicd::Segment const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      result = (six::sicd::Segment *)((six::sicd::Segment const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_getNumLines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Segment_getNumLines",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_getNumLines" "', argument " "1"" of type '" "six::sicd::Segment const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      result = (int)((six::sicd::Segment const *)arg1)->getNumLines();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_getNumSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Segment_getNumSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_getNumSamples" "', argument " "1"" of type '" "six::sicd::Segment const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      result = (int)((six::sicd::Segment const *)arg1)->getNumSamples();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_startLine_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Segment_startLine_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_startLine_set" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Segment_startLine_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->startLine = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_startLine_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Segment_startLine_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_startLine_get" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      result = (int) ((arg1)->startLine);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_startSample_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Segment_startSample_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_startSample_set" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Segment_startSample_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->startSample = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_startSample_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Segment_startSample_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_startSample_get" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      result = (int) ((arg1)->startSample);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_endLine_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Segment_endLine_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_endLine_set" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Segment_endLine_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->endLine = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_endLine_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Segment_endLine_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_endLine_get" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      result = (int) ((arg1)->endLine);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_endSample_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Segment_endSample_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_endSample_set" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Segment_endSample_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->endSample = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_endSample_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Segment_endSample_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_endSample_get" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      result = (int) ((arg1)->endSample);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_identifier_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Segment_identifier_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_identifier_set" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Segment_identifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Segment_identifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->identifier = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Segment_identifier_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Segment_identifier_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Segment_identifier_get" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->identifier);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Segment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Segment, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AreaPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AreaPlane")) SWIG_fail;
  {
    try{
      result = (six::sicd::AreaPlane *)new six::sicd::AreaPlane();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AreaPlane, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AreaPlane *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaPlane_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_clone" "', argument " "1"" of type '" "six::sicd::AreaPlane const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  {
    try{
      result = (six::sicd::AreaPlane *)((six::sicd::AreaPlane const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_referencePoint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  six::ReferencePoint *arg2 = (six::ReferencePoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaPlane_referencePoint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_referencePoint_set" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AreaPlane_referencePoint_set" "', argument " "2"" of type '" "six::ReferencePoint *""'"); 
  }
  arg2 = reinterpret_cast< six::ReferencePoint * >(argp2);
  {
    try{
      if (arg1) (arg1)->referencePoint = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_referencePoint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ReferencePoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaPlane_referencePoint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_referencePoint_get" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  {
    try{
      result = (six::ReferencePoint *)& ((arg1)->referencePoint);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ReferencePoint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_xDirection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *arg2 = (mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaPlane_xDirection_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_xDirection_set" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AreaPlane_xDirection_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > * >(argp2);
  {
    try{
      if (arg1) (arg1)->xDirection = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_xDirection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaPlane_xDirection_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_xDirection_get" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *)& ((arg1)->xDirection);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_yDirection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *arg2 = (mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaPlane_yDirection_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_yDirection_set" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AreaPlane_yDirection_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > * >(argp2);
  {
    try{
      if (arg1) (arg1)->yDirection = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_yDirection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaPlane_yDirection_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_yDirection_get" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *)& ((arg1)->yDirection);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_segmentList_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaPlane_segmentList_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_segmentList_set" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AreaPlane_segmentList_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->segmentList = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_segmentList_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaPlane_segmentList_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_segmentList_get" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *)& ((arg1)->segmentList);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_orientation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  six::OrientationType *arg2 = (six::OrientationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AreaPlane_orientation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_orientation_set" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__OrientationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AreaPlane_orientation_set" "', argument " "2"" of type '" "six::OrientationType *""'"); 
  }
  arg2 = reinterpret_cast< six::OrientationType * >(argp2);
  {
    try{
      if (arg1) (arg1)->orientation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaPlane_orientation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::OrientationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaPlane_orientation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaPlane_orientation_get" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  {
    try{
      result = (six::OrientationType *)& ((arg1)->orientation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__OrientationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AreaPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaPlane *arg1 = (six::sicd::AreaPlane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AreaPlane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaPlane, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AreaPlane" "', argument " "1"" of type '" "six::sicd::AreaPlane *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaPlane * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AreaPlane_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__AreaPlane, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Area *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Area")) SWIG_fail;
  {
    try{
      result = (six::sicd::Area *)new six::sicd::Area();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Area, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Area_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Area *arg1 = (six::sicd::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Area *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Area_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Area_clone" "', argument " "1"" of type '" "six::sicd::Area const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Area * >(argp1);
  {
    try{
      result = (six::sicd::Area *)((six::sicd::Area const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Area_acpCorners_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Area *arg1 = (six::sicd::Area *) 0 ;
  six::LatLonAltCorners *arg2 = (six::LatLonAltCorners *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Area_acpCorners_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Area_acpCorners_set" "', argument " "1"" of type '" "six::sicd::Area *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Area * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Area_acpCorners_set" "', argument " "2"" of type '" "six::LatLonAltCorners *""'"); 
  }
  arg2 = reinterpret_cast< six::LatLonAltCorners * >(argp2);
  {
    try{
      if (arg1) (arg1)->acpCorners = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Area_acpCorners_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Area *arg1 = (six::sicd::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LatLonAltCorners *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Area_acpCorners_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Area_acpCorners_get" "', argument " "1"" of type '" "six::sicd::Area *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Area * >(argp1);
  {
    try{
      result = (six::LatLonAltCorners *)& ((arg1)->acpCorners);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Area_plane_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Area *arg1 = (six::sicd::Area *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::AreaPlane > *arg2 = (mem::ScopedCloneablePtr< six::sicd::AreaPlane > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Area_plane_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Area_plane_set" "', argument " "1"" of type '" "six::sicd::Area *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Area * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Area_plane_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::AreaPlane > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::AreaPlane > * >(argp2);
  {
    try{
      if (arg1) (arg1)->plane = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Area_plane_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Area *arg1 = (six::sicd::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::AreaPlane > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Area_plane_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Area_plane_get" "', argument " "1"" of type '" "six::sicd::Area *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Area * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::AreaPlane > *)& ((arg1)->plane);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Area *arg1 = (six::sicd::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Area, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Area" "', argument " "1"" of type '" "six::sicd::Area *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Area * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Area_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Area, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RadarCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RadarCollection")) SWIG_fail;
  {
    try{
      result = (six::sicd::RadarCollection *)new six::sicd::RadarCollection();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RadarCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RadarCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_clone" "', argument " "1"" of type '" "six::sicd::RadarCollection const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (six::sicd::RadarCollection *)((six::sicd::RadarCollection const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_refFrequencyIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_refFrequencyIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_refFrequencyIndex_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarCollection_refFrequencyIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->refFrequencyIndex = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_refFrequencyIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_refFrequencyIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_refFrequencyIndex_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (int) ((arg1)->refFrequencyIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_txFrequencyMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_txFrequencyMin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_txFrequencyMin_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarCollection_txFrequencyMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->txFrequencyMin = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_txFrequencyMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_txFrequencyMin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_txFrequencyMin_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (double) ((arg1)->txFrequencyMin);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_txFrequencyMax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_txFrequencyMax_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_txFrequencyMax_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadarCollection_txFrequencyMax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->txFrequencyMax = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_txFrequencyMax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_txFrequencyMax_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_txFrequencyMax_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (double) ((arg1)->txFrequencyMax);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_txPolarization_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  six::PolarizationSequenceType *arg2 = (six::PolarizationSequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_txPolarization_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_txPolarization_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarCollection_txPolarization_set" "', argument " "2"" of type '" "six::PolarizationSequenceType *""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationSequenceType * >(argp2);
  {
    try{
      if (arg1) (arg1)->txPolarization = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_txPolarization_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolarizationSequenceType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_txPolarization_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_txPolarization_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (six::PolarizationSequenceType *)& ((arg1)->txPolarization);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_polarizationHVAnglePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_polarizationHVAnglePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_polarizationHVAnglePoly_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarCollection_polarizationHVAnglePoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->polarizationHVAnglePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_polarizationHVAnglePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_polarizationHVAnglePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_polarizationHVAnglePoly_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->polarizationHVAnglePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_txSequence_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_txSequence_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_txSequence_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarCollection_txSequence_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->txSequence = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_txSequence_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_txSequence_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_txSequence_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *)& ((arg1)->txSequence);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_waveform_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_waveform_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_waveform_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarCollection_waveform_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->waveform = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_waveform_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_waveform_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_waveform_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *)& ((arg1)->waveform);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_rcvChannels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_rcvChannels_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_rcvChannels_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarCollection_rcvChannels_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->rcvChannels = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_rcvChannels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_rcvChannels_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_rcvChannels_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *)& ((arg1)->rcvChannels);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_area_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg2 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_area_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_area_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarCollection_area_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp2);
  {
    try{
      if (arg1) (arg1)->area = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_area_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Area > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_area_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_area_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Area > *)& ((arg1)->area);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadarCollection_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_parameters_set" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadarCollection_parameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->parameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadarCollection_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadarCollection_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadarCollection_parameters_get" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((arg1)->parameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RadarCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RadarCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RadarCollection" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RadarCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__RadarCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RcvChannelProcessed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RcvChannelProcessed")) SWIG_fail;
  {
    try{
      result = (six::sicd::RcvChannelProcessed *)new six::sicd::RcvChannelProcessed();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RcvChannelProcessed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvChannelProcessed_numChannelsProcessed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *arg1 = (six::sicd::RcvChannelProcessed *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RcvChannelProcessed_numChannelsProcessed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvChannelProcessed_numChannelsProcessed_set" "', argument " "1"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RcvChannelProcessed_numChannelsProcessed_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try{
      if (arg1) (arg1)->numChannelsProcessed = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvChannelProcessed_numChannelsProcessed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *arg1 = (six::sicd::RcvChannelProcessed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RcvChannelProcessed_numChannelsProcessed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvChannelProcessed_numChannelsProcessed_get" "', argument " "1"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp1);
  {
    try{
      result = (unsigned int) ((arg1)->numChannelsProcessed);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvChannelProcessed_prfScaleFactor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *arg1 = (six::sicd::RcvChannelProcessed *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RcvChannelProcessed_prfScaleFactor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvChannelProcessed_prfScaleFactor_set" "', argument " "1"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RcvChannelProcessed_prfScaleFactor_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->prfScaleFactor = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvChannelProcessed_prfScaleFactor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *arg1 = (six::sicd::RcvChannelProcessed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RcvChannelProcessed_prfScaleFactor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvChannelProcessed_prfScaleFactor_get" "', argument " "1"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp1);
  {
    try{
      result = (double) ((arg1)->prfScaleFactor);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvChannelProcessed_channelIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *arg1 = (six::sicd::RcvChannelProcessed *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RcvChannelProcessed_channelIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvChannelProcessed_channelIndex_set" "', argument " "1"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RcvChannelProcessed_channelIndex_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->channelIndex = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RcvChannelProcessed_channelIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *arg1 = (six::sicd::RcvChannelProcessed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RcvChannelProcessed_channelIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RcvChannelProcessed_channelIndex_get" "', argument " "1"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp1);
  {
    try{
      result = (std::vector< int,std::allocator< int > > *)& ((arg1)->channelIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RcvChannelProcessed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *arg1 = (six::sicd::RcvChannelProcessed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RcvChannelProcessed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvChannelProcessed, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RcvChannelProcessed" "', argument " "1"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RcvChannelProcessed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__RcvChannelProcessed, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Distortion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Distortion")) SWIG_fail;
  {
    try{
      result = (six::sicd::Distortion *)new six::sicd::Distortion();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Distortion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_calibrationDate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  six::DateTime *arg2 = (six::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_calibrationDate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_calibrationDate_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Distortion_calibrationDate_set" "', argument " "2"" of type '" "six::DateTime *""'"); 
  }
  arg2 = reinterpret_cast< six::DateTime * >(argp2);
  {
    try{
      if (arg1) (arg1)->calibrationDate = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_calibrationDate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_calibrationDate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_calibrationDate_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result = (six::DateTime *)& ((arg1)->calibrationDate);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_a_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_a_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->a = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_a_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result = (double) ((arg1)->a);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_f1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_f1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_f1_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_f1_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try{
      if (arg1) (arg1)->f1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_f1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_f1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_f1_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result =  ((arg1)->f1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_q1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_q1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_q1_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_q1_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try{
      if (arg1) (arg1)->q1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_q1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_q1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_q1_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result =  ((arg1)->q1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_q2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_q2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_q2_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_q2_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try{
      if (arg1) (arg1)->q2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_q2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_q2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_q2_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result =  ((arg1)->q2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_f2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_f2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_f2_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_f2_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try{
      if (arg1) (arg1)->f2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_f2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_f2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_f2_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result =  ((arg1)->f2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_q3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_q3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_q3_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_q3_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try{
      if (arg1) (arg1)->q3 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_q3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_q3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_q3_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result =  ((arg1)->q3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_q4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_q4_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_q4_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_q4_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  {
    try{
      if (arg1) (arg1)->q4 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_q4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_q4_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_q4_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result =  ((arg1)->q4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_gainErrorA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_gainErrorA_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_gainErrorA_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_gainErrorA_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->gainErrorA = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_gainErrorA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_gainErrorA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_gainErrorA_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result = (double) ((arg1)->gainErrorA);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_gainErrorF1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_gainErrorF1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_gainErrorF1_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_gainErrorF1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->gainErrorF1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_gainErrorF1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_gainErrorF1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_gainErrorF1_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result = (double) ((arg1)->gainErrorF1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_gainErrorF2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_gainErrorF2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_gainErrorF2_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_gainErrorF2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->gainErrorF2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_gainErrorF2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_gainErrorF2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_gainErrorF2_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result = (double) ((arg1)->gainErrorF2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_phaseErrorF1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_phaseErrorF1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_phaseErrorF1_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_phaseErrorF1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->phaseErrorF1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_phaseErrorF1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_phaseErrorF1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_phaseErrorF1_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result = (double) ((arg1)->phaseErrorF1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_phaseErrorF2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Distortion_phaseErrorF2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_phaseErrorF2_set" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Distortion_phaseErrorF2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->phaseErrorF2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Distortion_phaseErrorF2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Distortion_phaseErrorF2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Distortion_phaseErrorF2_get" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      result = (double) ((arg1)->phaseErrorF2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Distortion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Distortion *arg1 = (six::sicd::Distortion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Distortion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Distortion, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Distortion" "', argument " "1"" of type '" "six::sicd::Distortion *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Distortion * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Distortion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Distortion, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PolarizationCalibration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PolarizationCalibration")) SWIG_fail;
  {
    try{
      result = (six::sicd::PolarizationCalibration *)new six::sicd::PolarizationCalibration();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PolarizationCalibration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolarizationCalibration_hvAngleCompensationApplied_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *arg1 = (six::sicd::PolarizationCalibration *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationCalibration_hvAngleCompensationApplied_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationCalibration_hvAngleCompensationApplied_set" "', argument " "1"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationCalibration_hvAngleCompensationApplied_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (arg1)->hvAngleCompensationApplied = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolarizationCalibration_hvAngleCompensationApplied_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *arg1 = (six::sicd::PolarizationCalibration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolarizationCalibration_hvAngleCompensationApplied_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationCalibration_hvAngleCompensationApplied_get" "', argument " "1"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((arg1)->hvAngleCompensationApplied);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolarizationCalibration_distortionCorrectionApplied_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *arg1 = (six::sicd::PolarizationCalibration *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationCalibration_distortionCorrectionApplied_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationCalibration_distortionCorrectionApplied_set" "', argument " "1"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationCalibration_distortionCorrectionApplied_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (arg1)->distortionCorrectionApplied = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolarizationCalibration_distortionCorrectionApplied_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *arg1 = (six::sicd::PolarizationCalibration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolarizationCalibration_distortionCorrectionApplied_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationCalibration_distortionCorrectionApplied_get" "', argument " "1"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((arg1)->distortionCorrectionApplied);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolarizationCalibration_distortion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *arg1 = (six::sicd::PolarizationCalibration *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::Distortion > *arg2 = (mem::ScopedCopyablePtr< six::sicd::Distortion > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolarizationCalibration_distortion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationCalibration_distortion_set" "', argument " "1"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolarizationCalibration_distortion_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::Distortion > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Distortion > * >(argp2);
  {
    try{
      if (arg1) (arg1)->distortion = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolarizationCalibration_distortion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *arg1 = (six::sicd::PolarizationCalibration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::Distortion > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolarizationCalibration_distortion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolarizationCalibration_distortion_get" "', argument " "1"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::Distortion > *)& ((arg1)->distortion);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PolarizationCalibration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *arg1 = (six::sicd::PolarizationCalibration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PolarizationCalibration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PolarizationCalibration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PolarizationCalibration" "', argument " "1"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PolarizationCalibration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__PolarizationCalibration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Processing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Processing *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Processing")) SWIG_fail;
  {
    try{
      result = (six::sicd::Processing *)new six::sicd::Processing();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Processing, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Processing_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Processing *arg1 = (six::sicd::Processing *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Processing_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Processing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Processing_type_set" "', argument " "1"" of type '" "six::sicd::Processing *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Processing * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Processing_type_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Processing_type_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->type = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Processing_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Processing *arg1 = (six::sicd::Processing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Processing_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Processing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Processing_type_get" "', argument " "1"" of type '" "six::sicd::Processing *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Processing * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->type);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Processing_applied_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Processing *arg1 = (six::sicd::Processing *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Processing_applied_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Processing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Processing_applied_set" "', argument " "1"" of type '" "six::sicd::Processing *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Processing * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Processing_applied_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (arg1)->applied = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Processing_applied_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Processing *arg1 = (six::sicd::Processing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Processing_applied_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Processing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Processing_applied_get" "', argument " "1"" of type '" "six::sicd::Processing *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Processing * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((arg1)->applied);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Processing_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Processing *arg1 = (six::sicd::Processing *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Processing_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Processing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Processing_parameters_set" "', argument " "1"" of type '" "six::sicd::Processing *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Processing * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Processing_parameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->parameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Processing_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Processing *arg1 = (six::sicd::Processing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Processing_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Processing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Processing_parameters_get" "', argument " "1"" of type '" "six::sicd::Processing *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Processing * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((arg1)->parameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Processing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Processing *arg1 = (six::sicd::Processing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Processing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Processing, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Processing" "', argument " "1"" of type '" "six::sicd::Processing *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Processing * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Processing_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Processing, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ImageFormation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ImageFormation")) SWIG_fail;
  {
    try{
      result = (six::sicd::ImageFormation *)new six::sicd::ImageFormation();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageFormation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_segmentIdentifier_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_segmentIdentifier_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_segmentIdentifier_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_segmentIdentifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImageFormation_segmentIdentifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->segmentIdentifier = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_segmentIdentifier_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_segmentIdentifier_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_segmentIdentifier_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->segmentIdentifier);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_rcvChannelProcessed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg2 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_rcvChannelProcessed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_rcvChannelProcessed_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_rcvChannelProcessed_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp2);
  {
    try{
      if (arg1) (arg1)->rcvChannelProcessed = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_rcvChannelProcessed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_rcvChannelProcessed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_rcvChannelProcessed_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *)& ((arg1)->rcvChannelProcessed);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_txRcvPolarizationProc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  six::DualPolarizationType *arg2 = (six::DualPolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_txRcvPolarizationProc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_txRcvPolarizationProc_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_txRcvPolarizationProc_set" "', argument " "2"" of type '" "six::DualPolarizationType *""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try{
      if (arg1) (arg1)->txRcvPolarizationProc = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_txRcvPolarizationProc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DualPolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_txRcvPolarizationProc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_txRcvPolarizationProc_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (six::DualPolarizationType *)& ((arg1)->txRcvPolarizationProc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_imageFormationAlgorithm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  six::ImageFormationType *arg2 = (six::ImageFormationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_imageFormationAlgorithm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_imageFormationAlgorithm_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_imageFormationAlgorithm_set" "', argument " "2"" of type '" "six::ImageFormationType *""'"); 
  }
  arg2 = reinterpret_cast< six::ImageFormationType * >(argp2);
  {
    try{
      if (arg1) (arg1)->imageFormationAlgorithm = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_imageFormationAlgorithm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ImageFormationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_imageFormationAlgorithm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_imageFormationAlgorithm_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (six::ImageFormationType *)& ((arg1)->imageFormationAlgorithm);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_tStartProc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_tStartProc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_tStartProc_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageFormation_tStartProc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->tStartProc = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_tStartProc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_tStartProc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_tStartProc_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (double) ((arg1)->tStartProc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_tEndProc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_tEndProc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_tEndProc_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageFormation_tEndProc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->tEndProc = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_tEndProc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_tEndProc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_tEndProc_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (double) ((arg1)->tEndProc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_txFrequencyProcMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_txFrequencyProcMin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_txFrequencyProcMin_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageFormation_txFrequencyProcMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->txFrequencyProcMin = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_txFrequencyProcMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_txFrequencyProcMin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_txFrequencyProcMin_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (double) ((arg1)->txFrequencyProcMin);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_txFrequencyProcMax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_txFrequencyProcMax_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_txFrequencyProcMax_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImageFormation_txFrequencyProcMax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->txFrequencyProcMax = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_txFrequencyProcMax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_txFrequencyProcMax_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_txFrequencyProcMax_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (double) ((arg1)->txFrequencyProcMax);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_slowTimeBeamCompensation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  six::SlowTimeBeamCompensationType *arg2 = (six::SlowTimeBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_slowTimeBeamCompensation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_slowTimeBeamCompensation_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_slowTimeBeamCompensation_set" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType *""'"); 
  }
  arg2 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp2);
  {
    try{
      if (arg1) (arg1)->slowTimeBeamCompensation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_slowTimeBeamCompensation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SlowTimeBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_slowTimeBeamCompensation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_slowTimeBeamCompensation_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (six::SlowTimeBeamCompensationType *)& ((arg1)->slowTimeBeamCompensation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_imageBeamCompensation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  six::ImageBeamCompensationType *arg2 = (six::ImageBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_imageBeamCompensation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_imageBeamCompensation_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_imageBeamCompensation_set" "', argument " "2"" of type '" "six::ImageBeamCompensationType *""'"); 
  }
  arg2 = reinterpret_cast< six::ImageBeamCompensationType * >(argp2);
  {
    try{
      if (arg1) (arg1)->imageBeamCompensation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_imageBeamCompensation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ImageBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_imageBeamCompensation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_imageBeamCompensation_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (six::ImageBeamCompensationType *)& ((arg1)->imageBeamCompensation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_azimuthAutofocus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  six::AutofocusType *arg2 = (six::AutofocusType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_azimuthAutofocus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_azimuthAutofocus_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_azimuthAutofocus_set" "', argument " "2"" of type '" "six::AutofocusType *""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try{
      if (arg1) (arg1)->azimuthAutofocus = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_azimuthAutofocus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AutofocusType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_azimuthAutofocus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_azimuthAutofocus_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (six::AutofocusType *)& ((arg1)->azimuthAutofocus);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_rangeAutofocus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  six::AutofocusType *arg2 = (six::AutofocusType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_rangeAutofocus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_rangeAutofocus_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_rangeAutofocus_set" "', argument " "2"" of type '" "six::AutofocusType *""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try{
      if (arg1) (arg1)->rangeAutofocus = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_rangeAutofocus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AutofocusType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_rangeAutofocus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_rangeAutofocus_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (six::AutofocusType *)& ((arg1)->rangeAutofocus);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_processing_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *arg2 = (std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_processing_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_processing_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_processing_set" "', argument " "2"" of type '" "std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->processing = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_processing_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_processing_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_processing_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *)& ((arg1)->processing);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_polarizationCalibration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg2 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ImageFormation_polarizationCalibration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_polarizationCalibration_set" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImageFormation_polarizationCalibration_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp2);
  {
    try{
      if (arg1) (arg1)->polarizationCalibration = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImageFormation_polarizationCalibration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ImageFormation_polarizationCalibration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImageFormation_polarizationCalibration_get" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *)& ((arg1)->polarizationCalibration);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImageFormation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ImageFormation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImageFormation" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImageFormation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__ImageFormation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCPCOA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SCPCOA")) SWIG_fail;
  {
    try{
      result = (six::sicd::SCPCOA *)new six::sicd::SCPCOA();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__SCPCOA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_scpTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_scpTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_scpTime_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_scpTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->scpTime = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_scpTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_scpTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_scpTime_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->scpTime);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_arpPos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_arpPos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_arpPos_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPCOA_arpPos_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->arpPos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_arpPos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_arpPos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_arpPos_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->arpPos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_arpVel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_arpVel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_arpVel_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPCOA_arpVel_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->arpVel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_arpVel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_arpVel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_arpVel_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->arpVel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_arpAcc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_arpAcc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_arpAcc_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPCOA_arpAcc_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->arpAcc = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_arpAcc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_arpAcc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_arpAcc_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->arpAcc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_sideOfTrack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  six::SideOfTrackType *arg2 = (six::SideOfTrackType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_sideOfTrack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_sideOfTrack_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SCPCOA_sideOfTrack_set" "', argument " "2"" of type '" "six::SideOfTrackType *""'"); 
  }
  arg2 = reinterpret_cast< six::SideOfTrackType * >(argp2);
  {
    try{
      if (arg1) (arg1)->sideOfTrack = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_sideOfTrack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SideOfTrackType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_sideOfTrack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_sideOfTrack_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (six::SideOfTrackType *)& ((arg1)->sideOfTrack);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_slantRange_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_slantRange_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_slantRange_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_slantRange_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->slantRange = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_slantRange_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_slantRange_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_slantRange_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->slantRange);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_groundRange_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_groundRange_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_groundRange_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_groundRange_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->groundRange = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_groundRange_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_groundRange_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_groundRange_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->groundRange);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_dopplerConeAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_dopplerConeAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_dopplerConeAngle_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_dopplerConeAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->dopplerConeAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_dopplerConeAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_dopplerConeAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_dopplerConeAngle_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->dopplerConeAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_grazeAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_grazeAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_grazeAngle_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_grazeAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->grazeAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_grazeAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_grazeAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_grazeAngle_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->grazeAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_incidenceAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_incidenceAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_incidenceAngle_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_incidenceAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->incidenceAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_incidenceAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_incidenceAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_incidenceAngle_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->incidenceAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_twistAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_twistAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_twistAngle_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_twistAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->twistAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_twistAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_twistAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_twistAngle_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->twistAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_slopeAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_slopeAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_slopeAngle_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_slopeAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->slopeAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_slopeAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_slopeAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_slopeAngle_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->slopeAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_azimAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_azimAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_azimAngle_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_azimAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->azimAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_azimAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_azimAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_azimAngle_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->azimAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_layoverAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SCPCOA_layoverAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_layoverAngle_set" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCPCOA_layoverAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->layoverAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCPCOA_layoverAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SCPCOA_layoverAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCPCOA_layoverAngle_get" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (double) ((arg1)->layoverAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SCPCOA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SCPCOA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCPCOA" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SCPCOA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__SCPCOA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ElectricalBoresight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ElectricalBoresight")) SWIG_fail;
  {
    try{
      result = (six::sicd::ElectricalBoresight *)new six::sicd::ElectricalBoresight();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ElectricalBoresight, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElectricalBoresight___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *arg1 = (six::sicd::ElectricalBoresight *) 0 ;
  six::sicd::ElectricalBoresight *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElectricalBoresight___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElectricalBoresight___eq__" "', argument " "1"" of type '" "six::sicd::ElectricalBoresight const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__ElectricalBoresight,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElectricalBoresight___eq__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElectricalBoresight___eq__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp2);
  {
    try{
      result = (bool)((six::sicd::ElectricalBoresight const *)arg1)->operator ==((six::sicd::ElectricalBoresight const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElectricalBoresight___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *arg1 = (six::sicd::ElectricalBoresight *) 0 ;
  six::sicd::ElectricalBoresight *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElectricalBoresight___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElectricalBoresight___ne__" "', argument " "1"" of type '" "six::sicd::ElectricalBoresight const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__ElectricalBoresight,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElectricalBoresight___ne__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElectricalBoresight___ne__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp2);
  {
    try{
      result = (bool)((six::sicd::ElectricalBoresight const *)arg1)->operator !=((six::sicd::ElectricalBoresight const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElectricalBoresight_dcxPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *arg1 = (six::sicd::ElectricalBoresight *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElectricalBoresight_dcxPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElectricalBoresight_dcxPoly_set" "', argument " "1"" of type '" "six::sicd::ElectricalBoresight *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElectricalBoresight_dcxPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->dcxPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElectricalBoresight_dcxPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *arg1 = (six::sicd::ElectricalBoresight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElectricalBoresight_dcxPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElectricalBoresight_dcxPoly_get" "', argument " "1"" of type '" "six::sicd::ElectricalBoresight *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->dcxPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElectricalBoresight_dcyPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *arg1 = (six::sicd::ElectricalBoresight *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElectricalBoresight_dcyPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElectricalBoresight_dcyPoly_set" "', argument " "1"" of type '" "six::sicd::ElectricalBoresight *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElectricalBoresight_dcyPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->dcyPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElectricalBoresight_dcyPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *arg1 = (six::sicd::ElectricalBoresight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElectricalBoresight_dcyPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElectricalBoresight_dcyPoly_get" "', argument " "1"" of type '" "six::sicd::ElectricalBoresight *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->dcyPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ElectricalBoresight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *arg1 = (six::sicd::ElectricalBoresight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ElectricalBoresight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ElectricalBoresight, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElectricalBoresight" "', argument " "1"" of type '" "six::sicd::ElectricalBoresight *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElectricalBoresight_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__ElectricalBoresight, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  six::sicd::ElectricalBoresight *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__ElectricalBoresight,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp2);
  {
    try{
      {
        std::ostream &_result_ref = six::sicd::operator <<(*arg1,(six::sicd::ElectricalBoresight const &)*arg2);
        result = (std::ostream *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HalfPowerBeamwidths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HalfPowerBeamwidths")) SWIG_fail;
  {
    try{
      result = (six::sicd::HalfPowerBeamwidths *)new six::sicd::HalfPowerBeamwidths();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HalfPowerBeamwidths___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *arg1 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  six::sicd::HalfPowerBeamwidths *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HalfPowerBeamwidths___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HalfPowerBeamwidths___eq__" "', argument " "1"" of type '" "six::sicd::HalfPowerBeamwidths const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__HalfPowerBeamwidths,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HalfPowerBeamwidths___eq__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HalfPowerBeamwidths___eq__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp2);
  {
    try{
      result = (bool)((six::sicd::HalfPowerBeamwidths const *)arg1)->operator ==((six::sicd::HalfPowerBeamwidths const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HalfPowerBeamwidths___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *arg1 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  six::sicd::HalfPowerBeamwidths *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HalfPowerBeamwidths___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HalfPowerBeamwidths___ne__" "', argument " "1"" of type '" "six::sicd::HalfPowerBeamwidths const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__HalfPowerBeamwidths,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HalfPowerBeamwidths___ne__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HalfPowerBeamwidths___ne__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp2);
  {
    try{
      result = (bool)((six::sicd::HalfPowerBeamwidths const *)arg1)->operator !=((six::sicd::HalfPowerBeamwidths const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HalfPowerBeamwidths_dcx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *arg1 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HalfPowerBeamwidths_dcx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HalfPowerBeamwidths_dcx_set" "', argument " "1"" of type '" "six::sicd::HalfPowerBeamwidths *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HalfPowerBeamwidths_dcx_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->dcx = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HalfPowerBeamwidths_dcx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *arg1 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HalfPowerBeamwidths_dcx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HalfPowerBeamwidths_dcx_get" "', argument " "1"" of type '" "six::sicd::HalfPowerBeamwidths *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp1);
  {
    try{
      result = (double) ((arg1)->dcx);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HalfPowerBeamwidths_dcy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *arg1 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HalfPowerBeamwidths_dcy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HalfPowerBeamwidths_dcy_set" "', argument " "1"" of type '" "six::sicd::HalfPowerBeamwidths *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HalfPowerBeamwidths_dcy_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->dcy = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HalfPowerBeamwidths_dcy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *arg1 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HalfPowerBeamwidths_dcy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HalfPowerBeamwidths_dcy_get" "', argument " "1"" of type '" "six::sicd::HalfPowerBeamwidths *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp1);
  {
    try{
      result = (double) ((arg1)->dcy);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HalfPowerBeamwidths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *arg1 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HalfPowerBeamwidths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HalfPowerBeamwidths" "', argument " "1"" of type '" "six::sicd::HalfPowerBeamwidths *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HalfPowerBeamwidths_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  six::sicd::HalfPowerBeamwidths *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__HalfPowerBeamwidths,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp2);
  {
    try{
      {
        std::ostream &_result_ref = six::sicd::operator <<(*arg1,(six::sicd::HalfPowerBeamwidths const &)*arg2);
        result = (std::ostream *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GainAndPhasePolys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GainAndPhasePolys")) SWIG_fail;
  {
    try{
      result = (six::sicd::GainAndPhasePolys *)new six::sicd::GainAndPhasePolys();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GainAndPhasePolys, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GainAndPhasePolys___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *arg1 = (six::sicd::GainAndPhasePolys *) 0 ;
  six::sicd::GainAndPhasePolys *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GainAndPhasePolys___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GainAndPhasePolys___eq__" "', argument " "1"" of type '" "six::sicd::GainAndPhasePolys const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__GainAndPhasePolys,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GainAndPhasePolys___eq__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GainAndPhasePolys___eq__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp2);
  {
    try{
      result = (bool)((six::sicd::GainAndPhasePolys const *)arg1)->operator ==((six::sicd::GainAndPhasePolys const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GainAndPhasePolys___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *arg1 = (six::sicd::GainAndPhasePolys *) 0 ;
  six::sicd::GainAndPhasePolys *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GainAndPhasePolys___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GainAndPhasePolys___ne__" "', argument " "1"" of type '" "six::sicd::GainAndPhasePolys const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__GainAndPhasePolys,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GainAndPhasePolys___ne__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GainAndPhasePolys___ne__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp2);
  {
    try{
      result = (bool)((six::sicd::GainAndPhasePolys const *)arg1)->operator !=((six::sicd::GainAndPhasePolys const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GainAndPhasePolys_gainPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *arg1 = (six::sicd::GainAndPhasePolys *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GainAndPhasePolys_gainPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GainAndPhasePolys_gainPoly_set" "', argument " "1"" of type '" "six::sicd::GainAndPhasePolys *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GainAndPhasePolys_gainPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (arg1)->gainPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GainAndPhasePolys_gainPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *arg1 = (six::sicd::GainAndPhasePolys *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GainAndPhasePolys_gainPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GainAndPhasePolys_gainPoly_get" "', argument " "1"" of type '" "six::sicd::GainAndPhasePolys *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((arg1)->gainPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GainAndPhasePolys_phasePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *arg1 = (six::sicd::GainAndPhasePolys *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GainAndPhasePolys_phasePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GainAndPhasePolys_phasePoly_set" "', argument " "1"" of type '" "six::sicd::GainAndPhasePolys *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GainAndPhasePolys_phasePoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (arg1)->phasePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GainAndPhasePolys_phasePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *arg1 = (six::sicd::GainAndPhasePolys *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GainAndPhasePolys_phasePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GainAndPhasePolys_phasePoly_get" "', argument " "1"" of type '" "six::sicd::GainAndPhasePolys *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((arg1)->phasePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GainAndPhasePolys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *arg1 = (six::sicd::GainAndPhasePolys *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GainAndPhasePolys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GainAndPhasePolys, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GainAndPhasePolys" "', argument " "1"" of type '" "six::sicd::GainAndPhasePolys *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GainAndPhasePolys_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__GainAndPhasePolys, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  six::sicd::GainAndPhasePolys *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__GainAndPhasePolys,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp2);
  {
    try{
      {
        std::ostream &_result_ref = six::sicd::operator <<(*arg1,(six::sicd::GainAndPhasePolys const &)*arg2);
        result = (std::ostream *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AntennaParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AntennaParameters")) SWIG_fail;
  {
    try{
      result = (six::sicd::AntennaParameters *)new six::sicd::AntennaParameters();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AntennaParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  six::sicd::AntennaParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters___eq__" "', argument " "1"" of type '" "six::sicd::AntennaParameters const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AntennaParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters___eq__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AntennaParameters___eq__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AntennaParameters * >(argp2);
  {
    try{
      result = (bool)((six::sicd::AntennaParameters const *)arg1)->operator ==((six::sicd::AntennaParameters const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  six::sicd::AntennaParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters___ne__" "', argument " "1"" of type '" "six::sicd::AntennaParameters const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AntennaParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters___ne__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AntennaParameters___ne__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AntennaParameters * >(argp2);
  {
    try{
      result = (bool)((six::sicd::AntennaParameters const *)arg1)->operator !=((six::sicd::AntennaParameters const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_xAxisPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_xAxisPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_xAxisPoly_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_xAxisPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (arg1)->xAxisPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_xAxisPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_xAxisPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_xAxisPoly_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((arg1)->xAxisPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_yAxisPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_yAxisPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_yAxisPoly_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_yAxisPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (arg1)->yAxisPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_yAxisPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_yAxisPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_yAxisPoly_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((arg1)->yAxisPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_frequencyZero_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_frequencyZero_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_frequencyZero_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AntennaParameters_frequencyZero_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->frequencyZero = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_frequencyZero_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_frequencyZero_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_frequencyZero_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (double) ((arg1)->frequencyZero);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_electricalBoresight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg2 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_electricalBoresight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_electricalBoresight_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_electricalBoresight_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp2);
  {
    try{
      if (arg1) (arg1)->electricalBoresight = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_electricalBoresight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_electricalBoresight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_electricalBoresight_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *)& ((arg1)->electricalBoresight);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_halfPowerBeamwidths_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg2 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_halfPowerBeamwidths_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_halfPowerBeamwidths_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_halfPowerBeamwidths_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp2);
  {
    try{
      if (arg1) (arg1)->halfPowerBeamwidths = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_halfPowerBeamwidths_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_halfPowerBeamwidths_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_halfPowerBeamwidths_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *)& ((arg1)->halfPowerBeamwidths);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_array_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg2 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_array_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_array_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_array_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp2);
  {
    try{
      if (arg1) (arg1)->array = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_array_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_array_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_array_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *)& ((arg1)->array);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_element_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg2 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_element_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_element_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_element_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp2);
  {
    try{
      if (arg1) (arg1)->element = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_element_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_element_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_element_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *)& ((arg1)->element);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_gainBSPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_gainBSPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_gainBSPoly_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_gainBSPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->gainBSPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_gainBSPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_gainBSPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_gainBSPoly_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->gainBSPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_electricalBoresightFrequencyShift_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_electricalBoresightFrequencyShift_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_electricalBoresightFrequencyShift_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_electricalBoresightFrequencyShift_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (arg1)->electricalBoresightFrequencyShift = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_electricalBoresightFrequencyShift_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_electricalBoresightFrequencyShift_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_electricalBoresightFrequencyShift_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((arg1)->electricalBoresightFrequencyShift);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_mainlobeFrequencyDilation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AntennaParameters_mainlobeFrequencyDilation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_mainlobeFrequencyDilation_set" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AntennaParameters_mainlobeFrequencyDilation_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (arg1)->mainlobeFrequencyDilation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AntennaParameters_mainlobeFrequencyDilation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AntennaParameters_mainlobeFrequencyDilation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AntennaParameters_mainlobeFrequencyDilation_get" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((arg1)->mainlobeFrequencyDilation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AntennaParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AntennaParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AntennaParameters" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AntennaParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__AntennaParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  six::sicd::AntennaParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AntennaParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AntennaParameters * >(argp2);
  {
    try{
      {
        std::ostream &_result_ref = six::sicd::operator <<(*arg1,(six::sicd::AntennaParameters const &)*arg2);
        result = (std::ostream *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__sicd__ElectricalBoresight, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_six__sicd__AntennaParameters, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_4(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Antenna_tx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *arg1 = (six::sicd::Antenna *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg2 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Antenna_tx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Antenna_tx_set" "', argument " "1"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Antenna * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Antenna_tx_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp2);
  {
    try{
      if (arg1) (arg1)->tx = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Antenna_tx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *arg1 = (six::sicd::Antenna *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Antenna_tx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Antenna_tx_get" "', argument " "1"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Antenna * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)& ((arg1)->tx);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Antenna_rcv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *arg1 = (six::sicd::Antenna *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg2 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Antenna_rcv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Antenna_rcv_set" "', argument " "1"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Antenna * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Antenna_rcv_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp2);
  {
    try{
      if (arg1) (arg1)->rcv = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Antenna_rcv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *arg1 = (six::sicd::Antenna *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Antenna_rcv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Antenna_rcv_get" "', argument " "1"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Antenna * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)& ((arg1)->rcv);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Antenna_twoWay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *arg1 = (six::sicd::Antenna *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg2 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Antenna_twoWay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Antenna_twoWay_set" "', argument " "1"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Antenna * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Antenna_twoWay_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp2);
  {
    try{
      if (arg1) (arg1)->twoWay = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Antenna_twoWay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *arg1 = (six::sicd::Antenna *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Antenna_twoWay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Antenna_twoWay_get" "', argument " "1"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Antenna * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)& ((arg1)->twoWay);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Antenna(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Antenna")) SWIG_fail;
  {
    try{
      result = (six::sicd::Antenna *)new six::sicd::Antenna();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Antenna, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Antenna(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *arg1 = (six::sicd::Antenna *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Antenna",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Antenna, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Antenna" "', argument " "1"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Antenna * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Antenna_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Antenna, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatchCollect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchCollect *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MatchCollect")) SWIG_fail;
  {
    try{
      result = (six::sicd::MatchCollect *)new six::sicd::MatchCollect();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__MatchCollect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchCollect_coreName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchCollect *arg1 = (six::sicd::MatchCollect *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchCollect_coreName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_coreName_set" "', argument " "1"" of type '" "six::sicd::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchCollect * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchCollect_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchCollect_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->coreName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchCollect_coreName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchCollect *arg1 = (six::sicd::MatchCollect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchCollect_coreName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_coreName_get" "', argument " "1"" of type '" "six::sicd::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchCollect * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->coreName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchCollect_matchIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchCollect *arg1 = (six::sicd::MatchCollect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchCollect_matchIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_matchIndex_set" "', argument " "1"" of type '" "six::sicd::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchCollect * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatchCollect_matchIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->matchIndex = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchCollect_matchIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchCollect *arg1 = (six::sicd::MatchCollect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchCollect_matchIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_matchIndex_get" "', argument " "1"" of type '" "six::sicd::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchCollect * >(argp1);
  {
    try{
      result = (int) ((arg1)->matchIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchCollect_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchCollect *arg1 = (six::sicd::MatchCollect *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchCollect_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_parameters_set" "', argument " "1"" of type '" "six::sicd::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchCollect * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchCollect_parameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->parameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchCollect_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchCollect *arg1 = (six::sicd::MatchCollect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchCollect_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchCollect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchCollect_parameters_get" "', argument " "1"" of type '" "six::sicd::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchCollect * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((arg1)->parameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatchCollect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchCollect *arg1 = (six::sicd::MatchCollect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MatchCollect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchCollect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatchCollect" "', argument " "1"" of type '" "six::sicd::MatchCollect *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchCollect * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatchCollect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__MatchCollect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MatchType")) SWIG_fail;
  {
    try{
      result = (six::sicd::MatchType *)new six::sicd::MatchType();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__MatchType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_collectorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_collectorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_collectorName_set" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchType_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->collectorName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_collectorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_collectorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_collectorName_get" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->collectorName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_illuminatorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_illuminatorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_illuminatorName_set" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchType_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->illuminatorName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_illuminatorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_illuminatorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_illuminatorName_get" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->illuminatorName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_matchType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_matchType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_matchType_set" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_matchType_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->matchType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_matchType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_matchType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_matchType_get" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    try{
      result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->matchType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_typeID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_typeID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_typeID_set" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_typeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatchType_typeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (arg1)->typeID = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_typeID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_typeID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_typeID_get" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((arg1)->typeID);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_currentIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_currentIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_currentIndex_set" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatchType_currentIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (arg1)->currentIndex = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_currentIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_currentIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_currentIndex_get" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    try{
      result = (int) ((arg1)->currentIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_matchCollects_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *arg2 = (std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchType_matchCollects_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_matchCollects_set" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchType_matchCollects_set" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->matchCollects = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchType_matchCollects_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchType_matchCollects_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchType_matchCollects_get" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    try{
      result = (std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *)& ((arg1)->matchCollects);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchType *arg1 = (six::sicd::MatchType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatchType" "', argument " "1"" of type '" "six::sicd::MatchType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchType * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatchType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__MatchType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MatchInformation")) SWIG_fail;
  {
    try{
      result = (six::sicd::MatchInformation *)new six::sicd::MatchInformation();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__MatchInformation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchInformation_types_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchInformation *arg1 = (six::sicd::MatchInformation *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *arg2 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatchInformation_types_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchInformation_types_set" "', argument " "1"" of type '" "six::sicd::MatchInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchInformation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatchInformation_types_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > * >(argp2);
  {
    try{
      if (arg1) (arg1)->types = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchInformation_types_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchInformation *arg1 = (six::sicd::MatchInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatchInformation_types_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchInformation_types_get" "', argument " "1"" of type '" "six::sicd::MatchInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchInformation * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *)& ((arg1)->types);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchInformation *arg1 = (six::sicd::MatchInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchInformation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatchInformation" "', argument " "1"" of type '" "six::sicd::MatchInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchInformation * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatchInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__MatchInformation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SlowTimeDeskew(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SlowTimeDeskew *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SlowTimeDeskew")) SWIG_fail;
  {
    try{
      result = (six::sicd::SlowTimeDeskew *)new six::sicd::SlowTimeDeskew();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__SlowTimeDeskew, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SlowTimeDeskew(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SlowTimeDeskew *arg1 = (six::sicd::SlowTimeDeskew *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SlowTimeDeskew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SlowTimeDeskew, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SlowTimeDeskew" "', argument " "1"" of type '" "six::sicd::SlowTimeDeskew *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SlowTimeDeskew * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SlowTimeDeskew_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SlowTimeDeskew *arg1 = (six::sicd::SlowTimeDeskew *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::SlowTimeDeskew *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SlowTimeDeskew_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SlowTimeDeskew, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeDeskew_clone" "', argument " "1"" of type '" "six::sicd::SlowTimeDeskew const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SlowTimeDeskew * >(argp1);
  {
    try{
      result = (six::sicd::SlowTimeDeskew *)((six::sicd::SlowTimeDeskew const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__SlowTimeDeskew, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SlowTimeDeskew_applied_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SlowTimeDeskew *arg1 = (six::sicd::SlowTimeDeskew *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeDeskew_applied_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SlowTimeDeskew, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeDeskew_applied_set" "', argument " "1"" of type '" "six::sicd::SlowTimeDeskew *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SlowTimeDeskew * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SlowTimeDeskew_applied_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (arg1)->applied = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SlowTimeDeskew_applied_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SlowTimeDeskew *arg1 = (six::sicd::SlowTimeDeskew *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SlowTimeDeskew_applied_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SlowTimeDeskew, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeDeskew_applied_get" "', argument " "1"" of type '" "six::sicd::SlowTimeDeskew *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SlowTimeDeskew * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((arg1)->applied);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SlowTimeDeskew_slowTimeDeskewPhasePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SlowTimeDeskew *arg1 = (six::sicd::SlowTimeDeskew *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SlowTimeDeskew_slowTimeDeskewPhasePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SlowTimeDeskew, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeDeskew_slowTimeDeskewPhasePoly_set" "', argument " "1"" of type '" "six::sicd::SlowTimeDeskew *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SlowTimeDeskew * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SlowTimeDeskew_slowTimeDeskewPhasePoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (arg1)->slowTimeDeskewPhasePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SlowTimeDeskew_slowTimeDeskewPhasePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SlowTimeDeskew *arg1 = (six::sicd::SlowTimeDeskew *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SlowTimeDeskew_slowTimeDeskewPhasePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SlowTimeDeskew, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SlowTimeDeskew_slowTimeDeskewPhasePoly_get" "', argument " "1"" of type '" "six::sicd::SlowTimeDeskew *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SlowTimeDeskew * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((arg1)->slowTimeDeskewPhasePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SlowTimeDeskew_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__SlowTimeDeskew, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PFA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PFA")) SWIG_fail;
  {
    try{
      result = (six::sicd::PFA *)new six::sicd::PFA();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PFA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PFA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PFA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PFA" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::PFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_clone" "', argument " "1"" of type '" "six::sicd::PFA const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (six::sicd::PFA *)((six::sicd::PFA const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_focusPlaneNormal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_focusPlaneNormal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_focusPlaneNormal_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PFA_focusPlaneNormal_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->focusPlaneNormal = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_focusPlaneNormal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_focusPlaneNormal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_focusPlaneNormal_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->focusPlaneNormal);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_imagePlaneNormal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_imagePlaneNormal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_imagePlaneNormal_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PFA_imagePlaneNormal_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->imagePlaneNormal = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_imagePlaneNormal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_imagePlaneNormal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_imagePlaneNormal_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->imagePlaneNormal);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_polarAngleRefTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_polarAngleRefTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_polarAngleRefTime_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PFA_polarAngleRefTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->polarAngleRefTime = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_polarAngleRefTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_polarAngleRefTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_polarAngleRefTime_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (double) ((arg1)->polarAngleRefTime);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_polarAnglePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_polarAnglePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_polarAnglePoly_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PFA_polarAnglePoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->polarAnglePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_polarAnglePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_polarAnglePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_polarAnglePoly_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->polarAnglePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_spatialFrequencyScaleFactorPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_spatialFrequencyScaleFactorPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_spatialFrequencyScaleFactorPoly_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PFA_spatialFrequencyScaleFactorPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->spatialFrequencyScaleFactorPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_spatialFrequencyScaleFactorPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_spatialFrequencyScaleFactorPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_spatialFrequencyScaleFactorPoly_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->spatialFrequencyScaleFactorPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_krg1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_krg1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_krg1_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PFA_krg1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->krg1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_krg1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_krg1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_krg1_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (double) ((arg1)->krg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_krg2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_krg2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_krg2_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PFA_krg2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->krg2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_krg2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_krg2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_krg2_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (double) ((arg1)->krg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_kaz1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_kaz1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_kaz1_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PFA_kaz1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->kaz1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_kaz1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_kaz1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_kaz1_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (double) ((arg1)->kaz1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_kaz2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_kaz2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_kaz2_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PFA_kaz2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->kaz2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_kaz2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_kaz2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_kaz2_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (double) ((arg1)->kaz2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_slowTimeDeskew_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  six::sicd::SlowTimeDeskew *arg2 = (six::sicd::SlowTimeDeskew *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PFA_slowTimeDeskew_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_slowTimeDeskew_set" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__SlowTimeDeskew, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PFA_slowTimeDeskew_set" "', argument " "2"" of type '" "six::sicd::SlowTimeDeskew *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::SlowTimeDeskew * >(argp2);
  {
    try{
      if (arg1) (arg1)->slowTimeDeskew = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PFA_slowTimeDeskew_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::SlowTimeDeskew *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PFA_slowTimeDeskew_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PFA_slowTimeDeskew_get" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (six::sicd::SlowTimeDeskew *) ((arg1)->slowTimeDeskew);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__SlowTimeDeskew, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PFA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__PFA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RMAT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RMAT")) SWIG_fail;
  {
    try{
      result = (six::sicd::RMAT *)new six::sicd::RMAT();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMAT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_refTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_refTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_refTime_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAT_refTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->refTime = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_refTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_refTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_refTime_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (double) ((arg1)->refTime);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_refPos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_refPos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_refPos_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAT_refPos_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->refPos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_refPos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_refPos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_refPos_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->refPos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_refVel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_refVel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_refVel_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAT_refVel_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->refVel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_refVel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_refVel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_refVel_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->refVel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_distRefLinePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_distRefLinePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_distRefLinePoly_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAT_distRefLinePoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->distRefLinePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_distRefLinePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_distRefLinePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_distRefLinePoly_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->distRefLinePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_cosDCACOAPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_cosDCACOAPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_cosDCACOAPoly_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMAT_cosDCACOAPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (arg1)->cosDCACOAPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_cosDCACOAPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_cosDCACOAPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_cosDCACOAPoly_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((arg1)->cosDCACOAPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_kx1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_kx1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_kx1_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAT_kx1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->kx1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_kx1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_kx1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_kx1_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (double) ((arg1)->kx1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_kx2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_kx2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_kx2_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAT_kx2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->kx2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_kx2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_kx2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_kx2_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (double) ((arg1)->kx2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_ky1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_ky1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_ky1_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAT_ky1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->ky1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_ky1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_ky1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_ky1_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (double) ((arg1)->ky1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_ky2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_ky2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_ky2_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAT_ky2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->ky2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_ky2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_ky2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_ky2_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (double) ((arg1)->ky2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_dopConeAngleRef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMAT_dopConeAngleRef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_dopConeAngleRef_set" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMAT_dopConeAngleRef_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->dopConeAngleRef = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMAT_dopConeAngleRef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMAT_dopConeAngleRef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMAT_dopConeAngleRef_get" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (double) ((arg1)->dopConeAngleRef);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RMAT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RMAT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RMAT" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RMAT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__RMAT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RMCR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RMCR")) SWIG_fail;
  {
    try{
      result = (six::sicd::RMCR *)new six::sicd::RMCR();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMCR, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMCR_refPos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *arg1 = (six::sicd::RMCR *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMCR_refPos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMCR_refPos_set" "', argument " "1"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMCR * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMCR_refPos_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->refPos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMCR_refPos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *arg1 = (six::sicd::RMCR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMCR_refPos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMCR_refPos_get" "', argument " "1"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMCR * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->refPos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMCR_refVel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *arg1 = (six::sicd::RMCR *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMCR_refVel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMCR_refVel_set" "', argument " "1"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMCR * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMCR_refVel_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (arg1)->refVel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMCR_refVel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *arg1 = (six::sicd::RMCR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMCR_refVel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMCR_refVel_get" "', argument " "1"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMCR * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((arg1)->refVel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMCR_dopConeAngleRef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *arg1 = (six::sicd::RMCR *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMCR_dopConeAngleRef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMCR_dopConeAngleRef_set" "', argument " "1"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMCR * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RMCR_dopConeAngleRef_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->dopConeAngleRef = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMCR_dopConeAngleRef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *arg1 = (six::sicd::RMCR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMCR_dopConeAngleRef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMCR_dopConeAngleRef_get" "', argument " "1"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMCR * >(argp1);
  {
    try{
      result = (double) ((arg1)->dopConeAngleRef);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RMCR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *arg1 = (six::sicd::RMCR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RMCR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMCR, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RMCR" "', argument " "1"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMCR * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RMCR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__RMCR, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_INCA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_INCA")) SWIG_fail;
  {
    try{
      result = (six::sicd::INCA *)new six::sicd::INCA();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__INCA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_timeCAPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:INCA_timeCAPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_timeCAPoly_set" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INCA_timeCAPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->timeCAPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_timeCAPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:INCA_timeCAPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_timeCAPoly_get" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->timeCAPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_rangeCA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:INCA_rangeCA_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_rangeCA_set" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INCA_rangeCA_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->rangeCA = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_rangeCA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:INCA_rangeCA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_rangeCA_get" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  {
    try{
      result = (double) ((arg1)->rangeCA);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_freqZero_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:INCA_freqZero_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_freqZero_set" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INCA_freqZero_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->freqZero = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_freqZero_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:INCA_freqZero_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_freqZero_get" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  {
    try{
      result = (double) ((arg1)->freqZero);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_dopplerRateScaleFactorPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:INCA_dopplerRateScaleFactorPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_dopplerRateScaleFactorPoly_set" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INCA_dopplerRateScaleFactorPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (arg1)->dopplerRateScaleFactorPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_dopplerRateScaleFactorPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:INCA_dopplerRateScaleFactorPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_dopplerRateScaleFactorPoly_get" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((arg1)->dopplerRateScaleFactorPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_dopplerCentroidPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:INCA_dopplerCentroidPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_dopplerCentroidPoly_set" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INCA_dopplerCentroidPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (arg1)->dopplerCentroidPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_dopplerCentroidPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:INCA_dopplerCentroidPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_dopplerCentroidPoly_get" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((arg1)->dopplerCentroidPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_dopplerCentroidCOA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:INCA_dopplerCentroidCOA_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_dopplerCentroidCOA_set" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INCA_dopplerCentroidCOA_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (arg1)->dopplerCentroidCOA = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INCA_dopplerCentroidCOA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:INCA_dopplerCentroidCOA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INCA_dopplerCentroidCOA_get" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((arg1)->dopplerCentroidCOA);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_INCA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_INCA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_INCA" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *INCA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__INCA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RMA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RMA")) SWIG_fail;
  {
    try{
      result = (six::sicd::RMA *)new six::sicd::RMA();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMA_algoType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  six::RMAlgoType *arg2 = (six::RMAlgoType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMA_algoType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMA_algoType_set" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMA_algoType_set" "', argument " "2"" of type '" "six::RMAlgoType *""'"); 
  }
  arg2 = reinterpret_cast< six::RMAlgoType * >(argp2);
  {
    try{
      if (arg1) (arg1)->algoType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMA_algoType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RMAlgoType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMA_algoType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMA_algoType_get" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  {
    try{
      result = (six::RMAlgoType *)& ((arg1)->algoType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMA_rmat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg2 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMA_rmat_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMA_rmat_set" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMA_rmat_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp2);
  {
    try{
      if (arg1) (arg1)->rmat = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMA_rmat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMA_rmat_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMA_rmat_get" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMAT > *)& ((arg1)->rmat);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMA_rmcr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg2 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMA_rmcr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMA_rmcr_set" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMA_rmcr_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp2);
  {
    try{
      if (arg1) (arg1)->rmcr = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMA_rmcr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMA_rmcr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMA_rmcr_get" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMCR > *)& ((arg1)->rmcr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMA_inca_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg2 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RMA_inca_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMA_inca_set" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RMA_inca_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp2);
  {
    try{
      if (arg1) (arg1)->inca = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RMA_inca_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::INCA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RMA_inca_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RMA_inca_get" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::INCA > *)& ((arg1)->inca);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RMA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RMA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RMA" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RMA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__RMA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RgAzComp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RgAzComp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RgAzComp")) SWIG_fail;
  {
    try{
      result = (six::sicd::RgAzComp *)new six::sicd::RgAzComp();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RgAzComp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RgAzComp_azSF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RgAzComp *arg1 = (six::sicd::RgAzComp *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RgAzComp_azSF_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RgAzComp_azSF_set" "', argument " "1"" of type '" "six::sicd::RgAzComp *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RgAzComp * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RgAzComp_azSF_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (arg1)->azSF = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RgAzComp_azSF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RgAzComp *arg1 = (six::sicd::RgAzComp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RgAzComp_azSF_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RgAzComp_azSF_get" "', argument " "1"" of type '" "six::sicd::RgAzComp *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RgAzComp * >(argp1);
  {
    try{
      result = (double) ((arg1)->azSF);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RgAzComp_kazPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RgAzComp *arg1 = (six::sicd::RgAzComp *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RgAzComp_kazPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RgAzComp_kazPoly_set" "', argument " "1"" of type '" "six::sicd::RgAzComp *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RgAzComp * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RgAzComp_kazPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (arg1)->kazPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RgAzComp_kazPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RgAzComp *arg1 = (six::sicd::RgAzComp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RgAzComp_kazPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RgAzComp_kazPoly_get" "', argument " "1"" of type '" "six::sicd::RgAzComp *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RgAzComp * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((arg1)->kazPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RgAzComp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RgAzComp *arg1 = (six::sicd::RgAzComp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RgAzComp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RgAzComp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RgAzComp" "', argument " "1"" of type '" "six::sicd::RgAzComp *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RgAzComp * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RgAzComp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__RgAzComp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ComplexData_collectionInformation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg2 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_collectionInformation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_collectionInformation_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_collectionInformation_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp2);
  {
    try{
      if (arg1) (arg1)->collectionInformation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_collectionInformation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_collectionInformation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_collectionInformation_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *)& ((arg1)->collectionInformation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_imageCreation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg2 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_imageCreation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_imageCreation_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_imageCreation_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp2);
  {
    try{
      if (arg1) (arg1)->imageCreation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_imageCreation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_imageCreation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_imageCreation_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *)& ((arg1)->imageCreation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_imageData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg2 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_imageData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_imageData_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_imageData_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp2);
  {
    try{
      if (arg1) (arg1)->imageData = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_imageData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_imageData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_imageData_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ImageData > *)& ((arg1)->imageData);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_geoData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg2 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_geoData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_geoData_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_geoData_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp2);
  {
    try{
      if (arg1) (arg1)->geoData = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_geoData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_geoData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_geoData_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::GeoData > *)& ((arg1)->geoData);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_grid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg2 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_grid_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_grid_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_grid_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp2);
  {
    try{
      if (arg1) (arg1)->grid = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_grid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Grid > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_grid_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_grid_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Grid > *)& ((arg1)->grid);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_timeline_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg2 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_timeline_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_timeline_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_timeline_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp2);
  {
    try{
      if (arg1) (arg1)->timeline = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_timeline_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_timeline_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_timeline_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Timeline > *)& ((arg1)->timeline);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg2 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_position_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_position_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_position_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp2);
  {
    try{
      if (arg1) (arg1)->position = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_position_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_position_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Position > *)& ((arg1)->position);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_radarCollection_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg2 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_radarCollection_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_radarCollection_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_radarCollection_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp2);
  {
    try{
      if (arg1) (arg1)->radarCollection = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_radarCollection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_radarCollection_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_radarCollection_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *)& ((arg1)->radarCollection);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_imageFormation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg2 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_imageFormation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_imageFormation_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_imageFormation_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp2);
  {
    try{
      if (arg1) (arg1)->imageFormation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_imageFormation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_imageFormation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_imageFormation_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *)& ((arg1)->imageFormation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_scpcoa_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg2 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_scpcoa_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_scpcoa_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_scpcoa_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp2);
  {
    try{
      if (arg1) (arg1)->scpcoa = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_scpcoa_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_scpcoa_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_scpcoa_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *)& ((arg1)->scpcoa);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_radiometric_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCopyablePtr< six::Radiometric > *arg2 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_radiometric_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_radiometric_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_radiometric_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp2);
  {
    try{
      if (arg1) (arg1)->radiometric = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_radiometric_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Radiometric > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_radiometric_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_radiometric_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::Radiometric > *)& ((arg1)->radiometric);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_antenna_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg2 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_antenna_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_antenna_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_antenna_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp2);
  {
    try{
      if (arg1) (arg1)->antenna = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_antenna_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_antenna_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_antenna_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::Antenna > *)& ((arg1)->antenna);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_errorStatistics_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg2 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_errorStatistics_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_errorStatistics_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_errorStatistics_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp2);
  {
    try{
      if (arg1) (arg1)->errorStatistics = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_errorStatistics_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_errorStatistics_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_errorStatistics_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::ErrorStatistics > *)& ((arg1)->errorStatistics);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_matchInformation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg2 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_matchInformation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_matchInformation_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_matchInformation_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp2);
  {
    try{
      if (arg1) (arg1)->matchInformation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_matchInformation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_matchInformation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_matchInformation_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *)& ((arg1)->matchInformation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_pfa_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg2 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_pfa_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_pfa_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_pfa_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp2);
  {
    try{
      if (arg1) (arg1)->pfa = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_pfa_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::PFA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_pfa_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_pfa_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::PFA > *)& ((arg1)->pfa);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_rma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg2 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_rma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_rma_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_rma_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp2);
  {
    try{
      if (arg1) (arg1)->rma = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_rma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_rma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_rma_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMA > *)& ((arg1)->rma);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_rgAzComp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg2 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_rgAzComp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_rgAzComp_set" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_rgAzComp_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp2);
  {
    try{
      if (arg1) (arg1)->rgAzComp = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_rgAzComp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_rgAzComp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_rgAzComp_get" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *)& ((arg1)->rgAzComp);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ComplexData")) SWIG_fail;
  {
    try{
      result = (six::sicd::ComplexData *)new six::sicd::ComplexData();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ComplexData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComplexData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComplexData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComplexData" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getDataType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DataType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getDataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getDataType" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getDataType();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::DataType(static_cast< const six::DataType& >(result))), SWIGTYPE_p_six__DataType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Data *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_clone" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (six::Data *)((six::sicd::ComplexData const *)arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Data, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getPixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PixelType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getPixelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getPixelType" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getPixelType();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::PixelType(static_cast< const six::PixelType& >(result))), SWIGTYPE_p_six__PixelType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_setPixelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  six::PixelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_setPixelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_setPixelType" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__PixelType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_setPixelType" "', argument " "2"" of type '" "six::PixelType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexData_setPixelType" "', argument " "2"" of type '" "six::PixelType""'");
    } else {
      six::PixelType * temp = reinterpret_cast< six::PixelType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (arg1)->setPixelType(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getNumRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getNumRows",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getNumRows" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getNumRows();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_setNumRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_setNumRows",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_setNumRows" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexData_setNumRows" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      (arg1)->setNumRows(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getNumCols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getNumCols",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getNumCols" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getNumCols();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_setNumCols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_setNumCols",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_setNumCols" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComplexData_setNumCols" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      (arg1)->setNumCols(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getImageCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LatLonCorners result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getImageCorners",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getImageCorners" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getImageCorners();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::LatLonCorners(static_cast< const six::LatLonCorners& >(result))), SWIGTYPE_p_six__CornersT_scene__LatLon_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_setImageCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  six::LatLonCorners *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_setImageCorners",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_setImageCorners" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__CornersT_scene__LatLon_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_setImageCorners" "', argument " "2"" of type '" "six::LatLonCorners const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexData_setImageCorners" "', argument " "2"" of type '" "six::LatLonCorners const &""'"); 
  }
  arg2 = reinterpret_cast< six::LatLonCorners * >(argp2);
  {
    try{
      (arg1)->setImageCorners((six::LatLonCorners const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getName" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getName();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_setName" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ComplexData_setName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try{
      (arg1)->setName(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getSource" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getSource();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_setSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_setSource",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_setSource" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ComplexData_setSource" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try{
      (arg1)->setSource(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getCreationTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getCreationTime" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getCreationTime();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::DateTime(static_cast< const six::DateTime& >(result))), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_setCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  six::DateTime arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_setCreationTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_setCreationTime" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_nitf__DateTime,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_setCreationTime" "', argument " "2"" of type '" "six::DateTime""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexData_setCreationTime" "', argument " "2"" of type '" "six::DateTime""'");
    } else {
      six::DateTime * temp = reinterpret_cast< six::DateTime * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (arg1)->setCreationTime(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getCollectionStartDateTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getCollectionStartDateTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getCollectionStartDateTime" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getCollectionStartDateTime();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new six::DateTime(static_cast< const six::DateTime& >(result))), SWIGTYPE_p_nitf__DateTime, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getClassification__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Classification *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getClassification",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getClassification" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      {
        six::Classification const &_result_ref = ((six::sicd::ComplexData const *)arg1)->getClassification();
        result = (six::Classification *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Classification, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getClassification__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Classification *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getClassification",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getClassification" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      {
        six::Classification &_result_ref = (arg1)->getClassification();
        result = (six::Classification *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Classification, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getClassification(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__ComplexData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ComplexData_getClassification__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__ComplexData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ComplexData_getClassification__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ComplexData_getClassification'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getClassification(six::sicd::ComplexData const *)\n"
    "    getClassification(six::sicd::ComplexData *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getDisplayLUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LUT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getDisplayLUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getDisplayLUT" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (six::LUT *)(arg1)->getDisplayLUT();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__LUT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getVendorID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getVendorID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getVendorID" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getVendorID();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_getVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComplexData_getVersion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_getVersion" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = ((six::sicd::ComplexData const *)arg1)->getVersion();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComplexData_setVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComplexData_setVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComplexData_setVersion" "', argument " "1"" of type '" "six::sicd::ComplexData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComplexData_setVersion" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComplexData_setVersion" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setVersion((std::string const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *ComplexData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__ComplexData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ComplexXMLControl__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  logging::Logger *arg1 = (logging::Logger *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  six::sicd::ComplexXMLControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ComplexXMLControl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_logging__Logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComplexXMLControl" "', argument " "1"" of type '" "logging::Logger *""'"); 
  }
  arg1 = reinterpret_cast< logging::Logger * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ComplexXMLControl" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      result = (six::sicd::ComplexXMLControl *)new six::sicd::ComplexXMLControl(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ComplexXMLControl, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexXMLControl__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  logging::Logger *arg1 = (logging::Logger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ComplexXMLControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComplexXMLControl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_logging__Logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComplexXMLControl" "', argument " "1"" of type '" "logging::Logger *""'"); 
  }
  arg1 = reinterpret_cast< logging::Logger * >(argp1);
  {
    try{
      result = (six::sicd::ComplexXMLControl *)new six::sicd::ComplexXMLControl(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ComplexXMLControl, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexXMLControl__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexXMLControl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ComplexXMLControl")) SWIG_fail;
  {
    try{
      result = (six::sicd::ComplexXMLControl *)new six::sicd::ComplexXMLControl();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ComplexXMLControl, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ComplexXMLControl(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ComplexXMLControl__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_logging__Logger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ComplexXMLControl__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_logging__Logger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ComplexXMLControl__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ComplexXMLControl'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    six::sicd::ComplexXMLControl(logging::Logger *,bool)\n"
    "    six::sicd::ComplexXMLControl(logging::Logger *)\n"
    "    six::sicd::ComplexXMLControl()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComplexXMLControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexXMLControl *arg1 = (six::sicd::ComplexXMLControl *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComplexXMLControl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexXMLControl, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComplexXMLControl" "', argument " "1"" of type '" "six::sicd::ComplexXMLControl *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexXMLControl * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ComplexXMLControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__ComplexXMLControl, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SixSicdUtilities_getSceneGeometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  scene::SceneGeometry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SixSicdUtilities_getSceneGeometry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixSicdUtilities_getSceneGeometry" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  {
    try{
      result = (scene::SceneGeometry *)six::sicd::Utilities::getSceneGeometry((six::sicd::ComplexData const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__SceneGeometry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SixSicdUtilities_getProjectionModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ComplexData *arg1 = (six::sicd::ComplexData *) 0 ;
  scene::SceneGeometry *arg2 = (scene::SceneGeometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  scene::ProjectionModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SixSicdUtilities_getProjectionModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ComplexData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixSicdUtilities_getProjectionModel" "', argument " "1"" of type '" "six::sicd::ComplexData const *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ComplexData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__SceneGeometry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixSicdUtilities_getProjectionModel" "', argument " "2"" of type '" "scene::SceneGeometry const *""'"); 
  }
  arg2 = reinterpret_cast< scene::SceneGeometry * >(argp2);
  {
    try{
      result = (scene::ProjectionModel *)six::sicd::Utilities::getProjectionModel((six::sicd::ComplexData const *)arg1,(scene::SceneGeometry const *)arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__ProjectionModel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SixSicdUtilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Utilities *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SixSicdUtilities")) SWIG_fail;
  {
    try{
      result = (six::sicd::Utilities *)new six::sicd::Utilities();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Utilities, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SixSicdUtilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Utilities *arg1 = (six::sicd::Utilities *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SixSicdUtilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Utilities, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SixSicdUtilities" "', argument " "1"" of type '" "six::sicd::Utilities *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Utilities * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SixSicdUtilities_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_six__sicd__Utilities, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableCollectionInformation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::CollectionInformation *arg1 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableCollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableCollectionInformation" "', argument " "1"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::CollectionInformation * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *)new mem::ScopedCloneablePtr< six::sicd::CollectionInformation >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableCollectionInformation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableCollectionInformation")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *)new mem::ScopedCloneablePtr< six::sicd::CollectionInformation >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableCollectionInformation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableCollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableCollectionInformation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableCollectionInformation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *)new mem::ScopedCloneablePtr< six::sicd::CollectionInformation >((mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableCollectionInformation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableCollectionInformation__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__CollectionInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableCollectionInformation__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableCollectionInformation__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableCollectionInformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::CollectionInformation >(six::sicd::CollectionInformation *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::CollectionInformation >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::CollectionInformation >(mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (six::sicd::CollectionInformation *)((mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      {
        six::sicd::CollectionInformation &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *)arg1)->operator *();
        result = (six::sicd::CollectionInformation *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (six::sicd::CollectionInformation *)((mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  six::sicd::CollectionInformation *arg2 = (six::sicd::CollectionInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_reset" "', argument " "2"" of type '" "six::sicd::CollectionInformation *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::CollectionInformation * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableCollectionInformation_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__CollectionInformation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableCollectionInformation_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableCollectionInformation_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *,six::sicd::CollectionInformation *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableCollectionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableCollectionInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableCollectionInformation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_collectorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_collectorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_collectorName_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_collectorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->collectorName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_collectorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_collectorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_collectorName_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->collectorName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_illuminatorName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_illuminatorName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_illuminatorName_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_illuminatorName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->illuminatorName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_illuminatorName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_illuminatorName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_illuminatorName_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->illuminatorName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_coreName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_coreName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_coreName_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_coreName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->coreName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_coreName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_coreName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_coreName_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->coreName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_collectType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  six::CollectType *arg2 = (six::CollectType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_collectType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_collectType_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CollectType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_collectType_set" "', argument " "2"" of type '" "six::CollectType *""'"); 
  }
  arg2 = reinterpret_cast< six::CollectType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->collectType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_collectType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CollectType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_collectType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_collectType_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (six::CollectType *)& ((*arg1)->collectType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CollectType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_radarMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  six::RadarModeType *arg2 = (six::RadarModeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_radarMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_radarMode_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_radarMode_set" "', argument " "2"" of type '" "six::RadarModeType *""'"); 
  }
  arg2 = reinterpret_cast< six::RadarModeType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->radarMode = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_radarMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarModeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_radarMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_radarMode_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (six::RadarModeType *)& ((*arg1)->radarMode);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarModeType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_radarModeID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_radarModeID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_radarModeID_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_radarModeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation_radarModeID_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->radarModeID = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_radarModeID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_radarModeID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_radarModeID_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->radarModeID);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_classification_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  six::sicd::ComplexClassification *arg2 = (six::sicd::ComplexClassification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_classification_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_classification_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__ComplexClassification, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_classification_set" "', argument " "2"" of type '" "six::sicd::ComplexClassification *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ComplexClassification * >(argp2);
  {
    try{
      if (arg1) (*arg1)->classification = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_classification_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ComplexClassification *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_classification_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_classification_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (six::sicd::ComplexClassification *)& ((*arg1)->classification);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ComplexClassification, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_countryCodes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_countryCodes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_countryCodes_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_countryCodes_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->countryCodes = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_countryCodes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_countryCodes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_countryCodes_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (std::vector< std::string,std::allocator< std::string > > *)& ((*arg1)->countryCodes);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_parameters_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation_parameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->parameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_parameters_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((*arg1)->parameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::CollectionInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableCollectionInformation_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  {
    try{
      result = (six::sicd::CollectionInformation *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__CollectionInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  six::sicd::CollectionInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation___eq__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__CollectionInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation___eq__" "', argument " "2"" of type '" "six::sicd::CollectionInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation___eq__" "', argument " "2"" of type '" "six::sicd::CollectionInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::CollectionInformation * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator ==((six::sicd::CollectionInformation const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableCollectionInformation___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *) 0 ;
  six::sicd::CollectionInformation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableCollectionInformation___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableCollectionInformation___ne__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::CollectionInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__CollectionInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableCollectionInformation___ne__" "', argument " "2"" of type '" "six::sicd::CollectionInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableCollectionInformation___ne__" "', argument " "2"" of type '" "six::sicd::CollectionInformation const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::CollectionInformation * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator !=((six::sicd::CollectionInformation const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableCollectionInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableImageCreation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageCreation *arg1 = (six::sicd::ImageCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableImageCreation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableImageCreation" "', argument " "1"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageCreation * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *)new mem::ScopedCloneablePtr< six::sicd::ImageCreation >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableImageCreation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableImageCreation")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *)new mem::ScopedCloneablePtr< six::sicd::ImageCreation >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableImageCreation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableImageCreation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableImageCreation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableImageCreation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *)new mem::ScopedCloneablePtr< six::sicd::ImageCreation >((mem::ScopedCloneablePtr< six::sicd::ImageCreation > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableImageCreation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableImageCreation__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__ImageCreation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableImageCreation__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableImageCreation__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableImageCreation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::ImageCreation >(six::sicd::ImageCreation *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::ImageCreation >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::ImageCreation >(mem::ScopedCloneablePtr< six::sicd::ImageCreation > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageCreation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      result = (six::sicd::ImageCreation *)((mem::ScopedCloneablePtr< six::sicd::ImageCreation > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageCreation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      {
        six::sicd::ImageCreation &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::ImageCreation > const *)arg1)->operator *();
        result = (six::sicd::ImageCreation *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageCreation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      result = (six::sicd::ImageCreation *)((mem::ScopedCloneablePtr< six::sicd::ImageCreation > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  six::sicd::ImageCreation *arg2 = (six::sicd::ImageCreation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageCreation_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageCreation_reset" "', argument " "2"" of type '" "six::sicd::ImageCreation *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ImageCreation * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableImageCreation_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__ImageCreation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableImageCreation_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableImageCreation_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::ImageCreation > *,six::sicd::ImageCreation *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::ImageCreation > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableImageCreation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableImageCreation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableImageCreation" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_application_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageCreation_application_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_application_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageCreation_application_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableImageCreation_application_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->application = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_application_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation_application_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_application_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->application);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_dateTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  six::DateTime *arg2 = (six::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageCreation_dateTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_dateTime_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageCreation_dateTime_set" "', argument " "2"" of type '" "six::DateTime *""'"); 
  }
  arg2 = reinterpret_cast< six::DateTime * >(argp2);
  {
    try{
      if (arg1) (*arg1)->dateTime = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_dateTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation_dateTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_dateTime_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      result = (six::DateTime *)& ((*arg1)->dateTime);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_site_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageCreation_site_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_site_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageCreation_site_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableImageCreation_site_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->site = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_site_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation_site_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_site_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->site);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_profile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageCreation_profile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_profile_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageCreation_profile_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableImageCreation_profile_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->profile = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_profile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation_profile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_profile_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->profile);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageCreation_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageCreation > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageCreation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageCreation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageCreation_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageCreation_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageCreation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageCreation > * >(argp1);
  {
    try{
      result = (six::sicd::ImageCreation *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageCreation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableImageCreation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableImageData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageData *arg1 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableImageData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableImageData" "', argument " "1"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ImageData > *)new mem::ScopedCloneablePtr< six::sicd::ImageData >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableImageData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableImageData")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ImageData > *)new mem::ScopedCloneablePtr< six::sicd::ImageData >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableImageData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableImageData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableImageData" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableImageData" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ImageData > *)new mem::ScopedCloneablePtr< six::sicd::ImageData >((mem::ScopedCloneablePtr< six::sicd::ImageData > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableImageData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableImageData__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__ImageData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableImageData__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableImageData__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableImageData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::ImageData >(six::sicd::ImageData *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::ImageData >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::ImageData >(mem::ScopedCloneablePtr< six::sicd::ImageData > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (six::sicd::ImageData *)((mem::ScopedCloneablePtr< six::sicd::ImageData > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      {
        six::sicd::ImageData &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::ImageData > const *)arg1)->operator *();
        result = (six::sicd::ImageData *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (six::sicd::ImageData *)((mem::ScopedCloneablePtr< six::sicd::ImageData > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  six::sicd::ImageData *arg2 = (six::sicd::ImageData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageData_reset" "', argument " "2"" of type '" "six::sicd::ImageData *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ImageData * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableImageData_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__ImageData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableImageData_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableImageData_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::ImageData > *,six::sicd::ImageData *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::ImageData > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableImageData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableImageData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableImageData" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (six::sicd::ImageData *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_pixelType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  six::PixelType *arg2 = (six::PixelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_pixelType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_pixelType_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__PixelType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageData_pixelType_set" "', argument " "2"" of type '" "six::PixelType *""'"); 
  }
  arg2 = reinterpret_cast< six::PixelType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->pixelType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_pixelType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PixelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_pixelType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_pixelType_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (six::PixelType *)& ((*arg1)->pixelType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PixelType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_amplitudeTable_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  six::AmplitudeTable *arg2 = (six::AmplitudeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_amplitudeTable_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_amplitudeTable_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AmplitudeTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageData_amplitudeTable_set" "', argument " "2"" of type '" "six::AmplitudeTable *""'"); 
  }
  arg2 = reinterpret_cast< six::AmplitudeTable * >(argp2);
  {
    try{
      if (arg1) (*arg1)->amplitudeTable = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_amplitudeTable_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AmplitudeTable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_amplitudeTable_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_amplitudeTable_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (six::AmplitudeTable *) ((*arg1)->amplitudeTable);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AmplitudeTable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_numRows_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_numRows_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_numRows_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableImageData_numRows_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (*arg1)->numRows = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_numRows_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_numRows_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_numRows_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result =  ((*arg1)->numRows);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_numCols_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_numCols_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_numCols_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableImageData_numCols_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (*arg1)->numCols = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_numCols_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_numCols_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_numCols_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result =  ((*arg1)->numCols);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_firstRow_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_firstRow_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_firstRow_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableImageData_firstRow_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (*arg1)->firstRow = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_firstRow_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_firstRow_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_firstRow_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result =  ((*arg1)->firstRow);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_firstCol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_firstCol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_firstCol_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableImageData_firstCol_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (*arg1)->firstCol = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_firstCol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_firstCol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_firstCol_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result =  ((*arg1)->firstCol);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_fullImage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  six::RowColInt *arg2 = (six::RowColInt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_fullImage_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_fullImage_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_types__RowColT_sys__SSize_T_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageData_fullImage_set" "', argument " "2"" of type '" "six::RowColInt *""'"); 
  }
  arg2 = reinterpret_cast< six::RowColInt * >(argp2);
  {
    try{
      if (arg1) (*arg1)->fullImage = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_fullImage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RowColInt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_fullImage_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_fullImage_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (six::RowColInt *)& ((*arg1)->fullImage);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_types__RowColT_sys__SSize_T_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_scpPixel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  six::RowColInt *arg2 = (six::RowColInt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_scpPixel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_scpPixel_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_types__RowColT_sys__SSize_T_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageData_scpPixel_set" "', argument " "2"" of type '" "six::RowColInt *""'"); 
  }
  arg2 = reinterpret_cast< six::RowColInt * >(argp2);
  {
    try{
      if (arg1) (*arg1)->scpPixel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_scpPixel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RowColInt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_scpPixel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_scpPixel_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (six::RowColInt *)& ((*arg1)->scpPixel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_types__RowColT_sys__SSize_T_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_validData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  std::vector< six::RowColInt,std::allocator< six::RowColInt > > *arg2 = (std::vector< six::RowColInt,std::allocator< six::RowColInt > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableImageData_validData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_validData_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableImageData_validData_set" "', argument " "2"" of type '" "std::vector< six::RowColInt,std::allocator< six::RowColInt > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::RowColInt,std::allocator< six::RowColInt > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->validData = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableImageData_validData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ImageData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ImageData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::RowColInt,std::allocator< six::RowColInt > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableImageData_validData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableImageData_validData_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ImageData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ImageData > * >(argp1);
  {
    try{
      result = (std::vector< six::RowColInt,std::allocator< six::RowColInt > > *)& ((*arg1)->validData);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableImageData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableGeoData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoData *arg1 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableGeoData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableGeoData" "', argument " "1"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoData * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::GeoData > *)new mem::ScopedCloneablePtr< six::sicd::GeoData >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGeoData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableGeoData")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::GeoData > *)new mem::ScopedCloneablePtr< six::sicd::GeoData >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGeoData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableGeoData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableGeoData" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableGeoData" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::GeoData > *)new mem::ScopedCloneablePtr< six::sicd::GeoData >((mem::ScopedCloneablePtr< six::sicd::GeoData > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGeoData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableGeoData__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__GeoData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableGeoData__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableGeoData__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableGeoData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::GeoData >(six::sicd::GeoData *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::GeoData >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::GeoData >(mem::ScopedCloneablePtr< six::sicd::GeoData > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (six::sicd::GeoData *)((mem::ScopedCloneablePtr< six::sicd::GeoData > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      {
        six::sicd::GeoData &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::GeoData > const *)arg1)->operator *();
        result = (six::sicd::GeoData *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (six::sicd::GeoData *)((mem::ScopedCloneablePtr< six::sicd::GeoData > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  six::sicd::GeoData *arg2 = (six::sicd::GeoData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoData_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoData_reset" "', argument " "2"" of type '" "six::sicd::GeoData *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::GeoData * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableGeoData_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__GeoData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableGeoData_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableGeoData_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::GeoData > *,six::sicd::GeoData *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::GeoData > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableGeoData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableGeoData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableGeoData" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (six::sicd::GeoData *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoData, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_earthModel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  six::EarthModelType *arg2 = (six::EarthModelType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoData_earthModel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_earthModel_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoData_earthModel_set" "', argument " "2"" of type '" "six::EarthModelType *""'"); 
  }
  arg2 = reinterpret_cast< six::EarthModelType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->earthModel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_earthModel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::EarthModelType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData_earthModel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_earthModel_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (six::EarthModelType *)& ((*arg1)->earthModel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__EarthModelType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_scp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  six::SCP *arg2 = (six::SCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoData_scp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_scp_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__SCP, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoData_scp_set" "', argument " "2"" of type '" "six::SCP *""'"); 
  }
  arg2 = reinterpret_cast< six::SCP * >(argp2);
  {
    try{
      if (arg1) (*arg1)->scp = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_scp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData_scp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_scp_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (six::SCP *)& ((*arg1)->scp);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SCP, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_imageCorners_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  six::LatLonCorners *arg2 = (six::LatLonCorners *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoData_imageCorners_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_imageCorners_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoData_imageCorners_set" "', argument " "2"" of type '" "six::LatLonCorners *""'"); 
  }
  arg2 = reinterpret_cast< six::LatLonCorners * >(argp2);
  {
    try{
      if (arg1) (*arg1)->imageCorners = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_imageCorners_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LatLonCorners *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData_imageCorners_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_imageCorners_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (six::LatLonCorners *)& ((*arg1)->imageCorners);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CornersT_scene__LatLon_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_validData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *arg2 = (std::vector< six::LatLon,std::allocator< six::LatLon > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoData_validData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_validData_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoData_validData_set" "', argument " "2"" of type '" "std::vector< six::LatLon,std::allocator< six::LatLon > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::LatLon,std::allocator< six::LatLon > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->validData = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_validData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData_validData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_validData_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (std::vector< six::LatLon,std::allocator< six::LatLon > > *)& ((*arg1)->validData);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_geoInfos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoData_geoInfos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_geoInfos_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoData_geoInfos_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->geoInfos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoData_geoInfos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoData > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoData_geoInfos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoData_geoInfos_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoData > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoData > * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *)& ((*arg1)->geoInfos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableGeoData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableGrid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Grid *arg1 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Grid > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableGrid" "', argument " "1"" of type '" "six::sicd::Grid *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Grid * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Grid > *)new mem::ScopedCloneablePtr< six::sicd::Grid >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGrid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableGrid")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Grid > *)new mem::ScopedCloneablePtr< six::sicd::Grid >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGrid__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Grid > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableGrid" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableGrid" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Grid > *)new mem::ScopedCloneablePtr< six::sicd::Grid >((mem::ScopedCloneablePtr< six::sicd::Grid > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGrid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableGrid__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableGrid__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableGrid__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::Grid >(six::sicd::Grid *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::Grid >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::Grid >(mem::ScopedCloneablePtr< six::sicd::Grid > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (six::sicd::Grid *)((mem::ScopedCloneablePtr< six::sicd::Grid > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      {
        six::sicd::Grid &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::Grid > const *)arg1)->operator *();
        result = (six::sicd::Grid *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (six::sicd::Grid *)((mem::ScopedCloneablePtr< six::sicd::Grid > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  six::sicd::Grid *arg2 = (six::sicd::Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGrid_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGrid_reset" "', argument " "2"" of type '" "six::sicd::Grid *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::Grid * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableGrid_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__Grid, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableGrid_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableGrid_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Grid > *,six::sicd::Grid *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Grid > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableGrid" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (six::sicd::Grid *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_imagePlane_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  six::ComplexImagePlaneType *arg2 = (six::ComplexImagePlaneType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGrid_imagePlane_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_imagePlane_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGrid_imagePlane_set" "', argument " "2"" of type '" "six::ComplexImagePlaneType *""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImagePlaneType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->imagePlane = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_imagePlane_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ComplexImagePlaneType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid_imagePlane_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_imagePlane_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (six::ComplexImagePlaneType *)& ((*arg1)->imagePlane);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImagePlaneType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  six::ComplexImageGridType *arg2 = (six::ComplexImageGridType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGrid_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_type_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGrid_type_set" "', argument " "2"" of type '" "six::ComplexImageGridType *""'"); 
  }
  arg2 = reinterpret_cast< six::ComplexImageGridType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->type = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ComplexImageGridType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_type_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (six::ComplexImageGridType *)& ((*arg1)->type);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ComplexImageGridType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_timeCOAPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGrid_timeCOAPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_timeCOAPoly_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGrid_timeCOAPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->timeCOAPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_timeCOAPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid_timeCOAPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_timeCOAPoly_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->timeCOAPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_row_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *arg2 = (mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGrid_row_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_row_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGrid_row_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::DirectionParameters > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->row = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_row_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid_row_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_row_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *)& ((*arg1)->row);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_col_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *arg2 = (mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGrid_col_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_col_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGrid_col_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::DirectionParameters > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->col = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGrid_col_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Grid > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Grid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGrid_col_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGrid_col_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Grid > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Grid > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *)& ((*arg1)->col);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableGrid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableTimeline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Timeline *arg1 = (six::sicd::Timeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableTimeline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableTimeline" "', argument " "1"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Timeline * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Timeline > *)new mem::ScopedCloneablePtr< six::sicd::Timeline >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableTimeline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableTimeline")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Timeline > *)new mem::ScopedCloneablePtr< six::sicd::Timeline >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableTimeline__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableTimeline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableTimeline" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableTimeline" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Timeline > *)new mem::ScopedCloneablePtr< six::sicd::Timeline >((mem::ScopedCloneablePtr< six::sicd::Timeline > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableTimeline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableTimeline__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__Timeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableTimeline__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableTimeline__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableTimeline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::Timeline >(six::sicd::Timeline *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::Timeline >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::Timeline >(mem::ScopedCloneablePtr< six::sicd::Timeline > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Timeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTimeline_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      result = (six::sicd::Timeline *)((mem::ScopedCloneablePtr< six::sicd::Timeline > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Timeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTimeline___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      {
        six::sicd::Timeline &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::Timeline > const *)arg1)->operator *();
        result = (six::sicd::Timeline *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Timeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTimeline___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      result = (six::sicd::Timeline *)((mem::ScopedCloneablePtr< six::sicd::Timeline > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  six::sicd::Timeline *arg2 = (six::sicd::Timeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableTimeline_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableTimeline_reset" "', argument " "2"" of type '" "six::sicd::Timeline *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::Timeline * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTimeline_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableTimeline_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__Timeline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableTimeline_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableTimeline_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Timeline > *,six::sicd::Timeline *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Timeline > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableTimeline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableTimeline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableTimeline" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_collectStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  six::DateTime *arg2 = (six::DateTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableTimeline_collectStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_collectStart_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableTimeline_collectStart_set" "', argument " "2"" of type '" "six::DateTime *""'"); 
  }
  arg2 = reinterpret_cast< six::DateTime * >(argp2);
  {
    try{
      if (arg1) (*arg1)->collectStart = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_collectStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DateTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTimeline_collectStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_collectStart_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      result = (six::DateTime *)& ((*arg1)->collectStart);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nitf__DateTime, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_collectDuration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableTimeline_collectDuration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_collectDuration_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableTimeline_collectDuration_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->collectDuration = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_collectDuration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTimeline_collectDuration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_collectDuration_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->collectDuration);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_interPulsePeriod_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  six::sicd::InterPulsePeriod *arg2 = (six::sicd::InterPulsePeriod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableTimeline_interPulsePeriod_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_interPulsePeriod_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__InterPulsePeriod, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableTimeline_interPulsePeriod_set" "', argument " "2"" of type '" "six::sicd::InterPulsePeriod *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::InterPulsePeriod * >(argp2);
  {
    try{
      if (arg1) (*arg1)->interPulsePeriod = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_interPulsePeriod_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::InterPulsePeriod *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTimeline_interPulsePeriod_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_interPulsePeriod_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      result = (six::sicd::InterPulsePeriod *) ((*arg1)->interPulsePeriod);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__InterPulsePeriod, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTimeline_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Timeline > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Timeline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Timeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTimeline_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTimeline_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Timeline > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Timeline > * >(argp1);
  {
    try{
      result = (six::sicd::Timeline *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Timeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableTimeline_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneablePosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Position *arg1 = (six::sicd::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneablePosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneablePosition" "', argument " "1"" of type '" "six::sicd::Position *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Position * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Position > *)new mem::ScopedCloneablePtr< six::sicd::Position >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneablePosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneablePosition")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Position > *)new mem::ScopedCloneablePtr< six::sicd::Position >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneablePosition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Position > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneablePosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneablePosition" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneablePosition" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Position > *)new mem::ScopedCloneablePtr< six::sicd::Position >((mem::ScopedCloneablePtr< six::sicd::Position > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneablePosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneablePosition__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneablePosition__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneablePosition__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneablePosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::Position >(six::sicd::Position *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::Position >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::Position >(mem::ScopedCloneablePtr< six::sicd::Position > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      result = (six::sicd::Position *)((mem::ScopedCloneablePtr< six::sicd::Position > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      {
        six::sicd::Position &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::Position > const *)arg1)->operator *();
        result = (six::sicd::Position *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      result = (six::sicd::Position *)((mem::ScopedCloneablePtr< six::sicd::Position > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  six::sicd::Position *arg2 = (six::sicd::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePosition_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePosition_reset" "', argument " "2"" of type '" "six::sicd::Position *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::Position * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneablePosition_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneablePosition_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneablePosition_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Position > *,six::sicd::Position *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Position > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneablePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneablePosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneablePosition" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_arpPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePosition_arpPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_arpPoly_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePosition_arpPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (*arg1)->arpPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_arpPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition_arpPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_arpPoly_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((*arg1)->arpPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_grpPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePosition_grpPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_grpPoly_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePosition_grpPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (*arg1)->grpPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_grpPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition_grpPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_grpPoly_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((*arg1)->grpPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_txAPCPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePosition_txAPCPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_txAPCPoly_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePosition_txAPCPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (*arg1)->txAPCPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_txAPCPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition_txAPCPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_txAPCPoly_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((*arg1)->txAPCPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_rcvAPC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  six::sicd::RcvAPC *arg2 = (six::sicd::RcvAPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePosition_rcvAPC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_rcvAPC_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__RcvAPC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePosition_rcvAPC_set" "', argument " "2"" of type '" "six::sicd::RcvAPC *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::RcvAPC * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rcvAPC = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_rcvAPC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RcvAPC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition_rcvAPC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_rcvAPC_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      result = (six::sicd::RcvAPC *) ((*arg1)->rcvAPC);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RcvAPC, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePosition_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Position > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Position > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Position *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePosition_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePosition_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Position > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Position > * >(argp1);
  {
    try{
      result = (six::sicd::Position *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Position, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneablePosition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Position_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableRadarCollection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RadarCollection *arg1 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableRadarCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableRadarCollection" "', argument " "1"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RadarCollection * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *)new mem::ScopedCloneablePtr< six::sicd::RadarCollection >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableRadarCollection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableRadarCollection")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *)new mem::ScopedCloneablePtr< six::sicd::RadarCollection >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableRadarCollection__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableRadarCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableRadarCollection" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableRadarCollection" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *)new mem::ScopedCloneablePtr< six::sicd::RadarCollection >((mem::ScopedCloneablePtr< six::sicd::RadarCollection > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableRadarCollection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableRadarCollection__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__RadarCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableRadarCollection__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableRadarCollection__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableRadarCollection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::RadarCollection >(six::sicd::RadarCollection *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::RadarCollection >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::RadarCollection >(mem::ScopedCloneablePtr< six::sicd::RadarCollection > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RadarCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (six::sicd::RadarCollection *)((mem::ScopedCloneablePtr< six::sicd::RadarCollection > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RadarCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      {
        six::sicd::RadarCollection &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::RadarCollection > const *)arg1)->operator *();
        result = (six::sicd::RadarCollection *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RadarCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (six::sicd::RadarCollection *)((mem::ScopedCloneablePtr< six::sicd::RadarCollection > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  six::sicd::RadarCollection *arg2 = (six::sicd::RadarCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableRadarCollection_reset" "', argument " "2"" of type '" "six::sicd::RadarCollection *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::RadarCollection * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableRadarCollection_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__RadarCollection, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableRadarCollection_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableRadarCollection_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::RadarCollection > *,six::sicd::RadarCollection *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::RadarCollection > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableRadarCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableRadarCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableRadarCollection" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RadarCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (six::sicd::RadarCollection *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RadarCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_refFrequencyIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_refFrequencyIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_refFrequencyIndex_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableRadarCollection_refFrequencyIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (*arg1)->refFrequencyIndex = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_refFrequencyIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_refFrequencyIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_refFrequencyIndex_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (int) ((*arg1)->refFrequencyIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_txFrequencyMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_txFrequencyMin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_txFrequencyMin_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableRadarCollection_txFrequencyMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->txFrequencyMin = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_txFrequencyMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_txFrequencyMin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_txFrequencyMin_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->txFrequencyMin);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_txFrequencyMax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_txFrequencyMax_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_txFrequencyMax_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableRadarCollection_txFrequencyMax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->txFrequencyMax = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_txFrequencyMax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_txFrequencyMax_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_txFrequencyMax_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->txFrequencyMax);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_txPolarization_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  six::PolarizationSequenceType *arg2 = (six::PolarizationSequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_txPolarization_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_txPolarization_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableRadarCollection_txPolarization_set" "', argument " "2"" of type '" "six::PolarizationSequenceType *""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationSequenceType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->txPolarization = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_txPolarization_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolarizationSequenceType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_txPolarization_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_txPolarization_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (six::PolarizationSequenceType *)& ((*arg1)->txPolarization);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationSequenceType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_polarizationHVAnglePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_polarizationHVAnglePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_polarizationHVAnglePoly_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableRadarCollection_polarizationHVAnglePoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->polarizationHVAnglePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_polarizationHVAnglePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_polarizationHVAnglePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_polarizationHVAnglePoly_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->polarizationHVAnglePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_txSequence_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_txSequence_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_txSequence_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableRadarCollection_txSequence_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->txSequence = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_txSequence_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_txSequence_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_txSequence_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *)& ((*arg1)->txSequence);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_waveform_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_waveform_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_waveform_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableRadarCollection_waveform_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->waveform = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_waveform_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_waveform_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_waveform_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *)& ((*arg1)->waveform);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_rcvChannels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_rcvChannels_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_rcvChannels_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableRadarCollection_rcvChannels_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rcvChannels = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_rcvChannels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_rcvChannels_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_rcvChannels_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *)& ((*arg1)->rcvChannels);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_area_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg2 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_area_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_area_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableRadarCollection_area_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->area = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_area_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Area > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_area_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_area_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Area > *)& ((*arg1)->area);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableRadarCollection_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_parameters_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableRadarCollection_parameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->parameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableRadarCollection_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::RadarCollection > *arg1 = (mem::ScopedCloneablePtr< six::sicd::RadarCollection > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableRadarCollection_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableRadarCollection_parameters_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::RadarCollection > * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((*arg1)->parameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableRadarCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableImageFormation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ImageFormation *arg1 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableImageFormation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableImageFormation" "', argument " "1"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ImageFormation * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *)new mem::ScopedCopyablePtr< six::sicd::ImageFormation >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableImageFormation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableImageFormation")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *)new mem::ScopedCopyablePtr< six::sicd::ImageFormation >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableImageFormation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableImageFormation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableImageFormation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableImageFormation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *)new mem::ScopedCopyablePtr< six::sicd::ImageFormation >((mem::ScopedCopyablePtr< six::sicd::ImageFormation > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableImageFormation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableImageFormation__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__ImageFormation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableImageFormation__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableImageFormation__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableImageFormation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::ImageFormation >(six::sicd::ImageFormation *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::ImageFormation >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::ImageFormation >(mem::ScopedCopyablePtr< six::sicd::ImageFormation > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageFormation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (six::sicd::ImageFormation *)((mem::ScopedCopyablePtr< six::sicd::ImageFormation > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageFormation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      {
        six::sicd::ImageFormation &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::ImageFormation > const *)arg1)->operator *();
        result = (six::sicd::ImageFormation *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ImageFormation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (six::sicd::ImageFormation *)((mem::ScopedCopyablePtr< six::sicd::ImageFormation > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  six::sicd::ImageFormation *arg2 = (six::sicd::ImageFormation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__ImageFormation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_reset" "', argument " "2"" of type '" "six::sicd::ImageFormation *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ImageFormation * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableImageFormation_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__ImageFormation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableImageFormation_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableImageFormation_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::ImageFormation > *,six::sicd::ImageFormation *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::ImageFormation > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableImageFormation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableImageFormation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableImageFormation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_segmentIdentifier_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_segmentIdentifier_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_segmentIdentifier_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_segmentIdentifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableImageFormation_segmentIdentifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->segmentIdentifier = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_segmentIdentifier_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_segmentIdentifier_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_segmentIdentifier_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->segmentIdentifier);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_rcvChannelProcessed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg2 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_rcvChannelProcessed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_rcvChannelProcessed_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_rcvChannelProcessed_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rcvChannelProcessed = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_rcvChannelProcessed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_rcvChannelProcessed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_rcvChannelProcessed_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *)& ((*arg1)->rcvChannelProcessed);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_txRcvPolarizationProc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  six::DualPolarizationType *arg2 = (six::DualPolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_txRcvPolarizationProc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_txRcvPolarizationProc_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_txRcvPolarizationProc_set" "', argument " "2"" of type '" "six::DualPolarizationType *""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->txRcvPolarizationProc = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_txRcvPolarizationProc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DualPolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_txRcvPolarizationProc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_txRcvPolarizationProc_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (six::DualPolarizationType *)& ((*arg1)->txRcvPolarizationProc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_imageFormationAlgorithm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  six::ImageFormationType *arg2 = (six::ImageFormationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_imageFormationAlgorithm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_imageFormationAlgorithm_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_imageFormationAlgorithm_set" "', argument " "2"" of type '" "six::ImageFormationType *""'"); 
  }
  arg2 = reinterpret_cast< six::ImageFormationType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->imageFormationAlgorithm = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_imageFormationAlgorithm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ImageFormationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_imageFormationAlgorithm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_imageFormationAlgorithm_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (six::ImageFormationType *)& ((*arg1)->imageFormationAlgorithm);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageFormationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_tStartProc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_tStartProc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_tStartProc_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableImageFormation_tStartProc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->tStartProc = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_tStartProc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_tStartProc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_tStartProc_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->tStartProc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_tEndProc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_tEndProc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_tEndProc_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableImageFormation_tEndProc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->tEndProc = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_tEndProc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_tEndProc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_tEndProc_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->tEndProc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_txFrequencyProcMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_txFrequencyProcMin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_txFrequencyProcMin_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableImageFormation_txFrequencyProcMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->txFrequencyProcMin = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_txFrequencyProcMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_txFrequencyProcMin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_txFrequencyProcMin_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->txFrequencyProcMin);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_txFrequencyProcMax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_txFrequencyProcMax_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_txFrequencyProcMax_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableImageFormation_txFrequencyProcMax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->txFrequencyProcMax = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_txFrequencyProcMax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_txFrequencyProcMax_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_txFrequencyProcMax_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->txFrequencyProcMax);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_slowTimeBeamCompensation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  six::SlowTimeBeamCompensationType *arg2 = (six::SlowTimeBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_slowTimeBeamCompensation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_slowTimeBeamCompensation_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_slowTimeBeamCompensation_set" "', argument " "2"" of type '" "six::SlowTimeBeamCompensationType *""'"); 
  }
  arg2 = reinterpret_cast< six::SlowTimeBeamCompensationType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->slowTimeBeamCompensation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_slowTimeBeamCompensation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SlowTimeBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_slowTimeBeamCompensation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_slowTimeBeamCompensation_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (six::SlowTimeBeamCompensationType *)& ((*arg1)->slowTimeBeamCompensation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SlowTimeBeamCompensationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_imageBeamCompensation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  six::ImageBeamCompensationType *arg2 = (six::ImageBeamCompensationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_imageBeamCompensation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_imageBeamCompensation_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_imageBeamCompensation_set" "', argument " "2"" of type '" "six::ImageBeamCompensationType *""'"); 
  }
  arg2 = reinterpret_cast< six::ImageBeamCompensationType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->imageBeamCompensation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_imageBeamCompensation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ImageBeamCompensationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_imageBeamCompensation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_imageBeamCompensation_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (six::ImageBeamCompensationType *)& ((*arg1)->imageBeamCompensation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ImageBeamCompensationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_azimuthAutofocus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  six::AutofocusType *arg2 = (six::AutofocusType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_azimuthAutofocus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_azimuthAutofocus_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_azimuthAutofocus_set" "', argument " "2"" of type '" "six::AutofocusType *""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->azimuthAutofocus = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_azimuthAutofocus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AutofocusType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_azimuthAutofocus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_azimuthAutofocus_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (six::AutofocusType *)& ((*arg1)->azimuthAutofocus);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_rangeAutofocus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  six::AutofocusType *arg2 = (six::AutofocusType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_rangeAutofocus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_rangeAutofocus_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_rangeAutofocus_set" "', argument " "2"" of type '" "six::AutofocusType *""'"); 
  }
  arg2 = reinterpret_cast< six::AutofocusType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rangeAutofocus = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_rangeAutofocus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AutofocusType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_rangeAutofocus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_rangeAutofocus_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (six::AutofocusType *)& ((*arg1)->rangeAutofocus);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AutofocusType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_processing_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *arg2 = (std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_processing_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_processing_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_processing_set" "', argument " "2"" of type '" "std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->processing = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_processing_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_processing_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_processing_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *)& ((*arg1)->processing);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_polarizationCalibration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg2 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableImageFormation_polarizationCalibration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_polarizationCalibration_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableImageFormation_polarizationCalibration_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->polarizationCalibration = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableImageFormation_polarizationCalibration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ImageFormation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ImageFormation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableImageFormation_polarizationCalibration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableImageFormation_polarizationCalibration_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ImageFormation > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *)& ((*arg1)->polarizationCalibration);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableImageFormation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableSCPCOA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::SCPCOA *arg1 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableSCPCOA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableSCPCOA" "', argument " "1"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::SCPCOA * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *)new mem::ScopedCopyablePtr< six::sicd::SCPCOA >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableSCPCOA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableSCPCOA")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *)new mem::ScopedCopyablePtr< six::sicd::SCPCOA >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableSCPCOA__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableSCPCOA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableSCPCOA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableSCPCOA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *)new mem::ScopedCopyablePtr< six::sicd::SCPCOA >((mem::ScopedCopyablePtr< six::sicd::SCPCOA > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableSCPCOA(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableSCPCOA__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__SCPCOA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableSCPCOA__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableSCPCOA__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableSCPCOA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::SCPCOA >(six::sicd::SCPCOA *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::SCPCOA >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::SCPCOA >(mem::ScopedCopyablePtr< six::sicd::SCPCOA > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::SCPCOA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (six::sicd::SCPCOA *)((mem::ScopedCopyablePtr< six::sicd::SCPCOA > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::SCPCOA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      {
        six::sicd::SCPCOA &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::SCPCOA > const *)arg1)->operator *();
        result = (six::sicd::SCPCOA *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::SCPCOA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (six::sicd::SCPCOA *)((mem::ScopedCopyablePtr< six::sicd::SCPCOA > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  six::sicd::SCPCOA *arg2 = (six::sicd::SCPCOA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__SCPCOA, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableSCPCOA_reset" "', argument " "2"" of type '" "six::sicd::SCPCOA *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::SCPCOA * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableSCPCOA_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__SCPCOA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableSCPCOA_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableSCPCOA_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::SCPCOA > *,six::sicd::SCPCOA *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::SCPCOA > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableSCPCOA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableSCPCOA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableSCPCOA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_scpTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_scpTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_scpTime_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_scpTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->scpTime = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_scpTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_scpTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_scpTime_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->scpTime);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_arpPos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_arpPos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_arpPos_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableSCPCOA_arpPos_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->arpPos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_arpPos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_arpPos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_arpPos_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->arpPos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_arpVel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_arpVel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_arpVel_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableSCPCOA_arpVel_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->arpVel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_arpVel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_arpVel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_arpVel_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->arpVel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_arpAcc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_arpAcc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_arpAcc_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableSCPCOA_arpAcc_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->arpAcc = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_arpAcc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_arpAcc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_arpAcc_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->arpAcc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_sideOfTrack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  six::SideOfTrackType *arg2 = (six::SideOfTrackType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_sideOfTrack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_sideOfTrack_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableSCPCOA_sideOfTrack_set" "', argument " "2"" of type '" "six::SideOfTrackType *""'"); 
  }
  arg2 = reinterpret_cast< six::SideOfTrackType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->sideOfTrack = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_sideOfTrack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::SideOfTrackType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_sideOfTrack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_sideOfTrack_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (six::SideOfTrackType *)& ((*arg1)->sideOfTrack);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__SideOfTrackType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_slantRange_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_slantRange_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_slantRange_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_slantRange_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->slantRange = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_slantRange_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_slantRange_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_slantRange_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->slantRange);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_groundRange_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_groundRange_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_groundRange_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_groundRange_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->groundRange = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_groundRange_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_groundRange_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_groundRange_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->groundRange);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_dopplerConeAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_dopplerConeAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_dopplerConeAngle_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_dopplerConeAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->dopplerConeAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_dopplerConeAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_dopplerConeAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_dopplerConeAngle_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->dopplerConeAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_grazeAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_grazeAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_grazeAngle_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_grazeAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->grazeAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_grazeAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_grazeAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_grazeAngle_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->grazeAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_incidenceAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_incidenceAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_incidenceAngle_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_incidenceAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->incidenceAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_incidenceAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_incidenceAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_incidenceAngle_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->incidenceAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_twistAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_twistAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_twistAngle_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_twistAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->twistAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_twistAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_twistAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_twistAngle_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->twistAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_slopeAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_slopeAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_slopeAngle_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_slopeAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->slopeAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_slopeAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_slopeAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_slopeAngle_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->slopeAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_azimAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_azimAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_azimAngle_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_azimAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->azimAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_azimAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_azimAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_azimAngle_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->azimAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_layoverAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableSCPCOA_layoverAngle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_layoverAngle_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableSCPCOA_layoverAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->layoverAngle = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableSCPCOA_layoverAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::SCPCOA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::SCPCOA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableSCPCOA_layoverAngle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableSCPCOA_layoverAngle_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::SCPCOA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->layoverAngle);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableSCPCOA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadiometric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Radiometric *arg1 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Radiometric > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRadiometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRadiometric" "', argument " "1"" of type '" "six::Radiometric *""'"); 
  }
  arg1 = reinterpret_cast< six::Radiometric * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::Radiometric > *)new mem::ScopedCopyablePtr< six::Radiometric >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadiometric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRadiometric")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::Radiometric > *)new mem::ScopedCopyablePtr< six::Radiometric >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadiometric__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Radiometric > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRadiometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRadiometric" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRadiometric" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::Radiometric > *)new mem::ScopedCopyablePtr< six::Radiometric >((mem::ScopedCopyablePtr< six::Radiometric > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadiometric(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRadiometric__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__Radiometric, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRadiometric__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRadiometric__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableRadiometric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::Radiometric >(six::Radiometric *)\n"
    "    mem::ScopedCopyablePtr< six::Radiometric >()\n"
    "    mem::ScopedCopyablePtr< six::Radiometric >(mem::ScopedCopyablePtr< six::Radiometric > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Radiometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::Radiometric *)((mem::ScopedCopyablePtr< six::Radiometric > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Radiometric, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Radiometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      {
        six::Radiometric &_result_ref = ((mem::ScopedCopyablePtr< six::Radiometric > const *)arg1)->operator *();
        result = (six::Radiometric *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Radiometric, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Radiometric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::Radiometric *)((mem::ScopedCopyablePtr< six::Radiometric > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Radiometric, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Radiometric *arg2 = (six::Radiometric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__Radiometric, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_reset" "', argument " "2"" of type '" "six::Radiometric *""'"); 
  }
  arg2 = reinterpret_cast< six::Radiometric * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRadiometric_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__Radiometric, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRadiometric_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableRadiometric_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::Radiometric > *,six::Radiometric *)\n"
    "    reset(mem::ScopedCopyablePtr< six::Radiometric > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRadiometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRadiometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRadiometric" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_NL_ABSOLUTE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_NL_ABSOLUTE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_NL_ABSOLUTE_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (char *)(char *) (six::Radiometric::NL_ABSOLUTE);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_NL_RELATIVE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_NL_RELATIVE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_NL_RELATIVE_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (char *)(char *) (six::Radiometric::NL_RELATIVE);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_noiseLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::NoiseLevel *arg2 = (six::NoiseLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_noiseLevel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_noiseLevel_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_noiseLevel_set" "', argument " "2"" of type '" "six::NoiseLevel *""'"); 
  }
  arg2 = reinterpret_cast< six::NoiseLevel * >(argp2);
  {
    try{
      if (arg1) (*arg1)->noiseLevel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_noiseLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::NoiseLevel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_noiseLevel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_noiseLevel_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::NoiseLevel *)& ((*arg1)->noiseLevel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__NoiseLevel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_rcsSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_rcsSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_rcsSFPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_rcsSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rcsSFPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_rcsSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_rcsSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_rcsSFPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->rcsSFPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_betaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_betaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_betaZeroSFPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_betaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->betaZeroSFPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_betaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_betaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_betaZeroSFPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->betaZeroSFPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_sigmaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_sigmaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->sigmaZeroSFPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_sigmaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_sigmaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->sigmaZeroSFPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::AppliedType *arg2 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set" "', argument " "2"" of type '" "six::AppliedType *""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->sigmaZeroSFIncidenceMap = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::AppliedType *)& ((*arg1)->sigmaZeroSFIncidenceMap);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_gammaZeroSFPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_gammaZeroSFPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_gammaZeroSFPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_gammaZeroSFPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->gammaZeroSFPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_gammaZeroSFPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_gammaZeroSFPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_gammaZeroSFPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->gammaZeroSFPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  six::AppliedType *arg2 = (six::AppliedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__AppliedType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set" "', argument " "2"" of type '" "six::AppliedType *""'"); 
  }
  arg2 = reinterpret_cast< six::AppliedType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->gammaZeroSFIncidenceMap = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Radiometric > *arg1 = (mem::ScopedCopyablePtr< six::Radiometric > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::AppliedType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Radiometric > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Radiometric > * >(argp1);
  {
    try{
      result = (six::AppliedType *)& ((*arg1)->gammaZeroSFIncidenceMap);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__AppliedType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableRadiometric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Radiometric_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableAntenna__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Antenna *arg1 = (six::sicd::Antenna *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableAntenna",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableAntenna" "', argument " "1"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Antenna * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::Antenna > *)new mem::ScopedCopyablePtr< six::sicd::Antenna >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableAntenna__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableAntenna")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::Antenna > *)new mem::ScopedCopyablePtr< six::sicd::Antenna >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableAntenna__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableAntenna",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableAntenna" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableAntenna" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::Antenna > *)new mem::ScopedCopyablePtr< six::sicd::Antenna >((mem::ScopedCopyablePtr< six::sicd::Antenna > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableAntenna(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableAntenna__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__Antenna, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableAntenna__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableAntenna__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableAntenna'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::Antenna >(six::sicd::Antenna *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::Antenna >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::Antenna >(mem::ScopedCopyablePtr< six::sicd::Antenna > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Antenna *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntenna_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      result = (six::sicd::Antenna *)((mem::ScopedCopyablePtr< six::sicd::Antenna > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Antenna *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntenna___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      {
        six::sicd::Antenna &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::Antenna > const *)arg1)->operator *();
        result = (six::sicd::Antenna *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Antenna *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntenna___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      result = (six::sicd::Antenna *)((mem::ScopedCopyablePtr< six::sicd::Antenna > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  six::sicd::Antenna *arg2 = (six::sicd::Antenna *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntenna_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__Antenna, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntenna_reset" "', argument " "2"" of type '" "six::sicd::Antenna *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::Antenna * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntenna_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableAntenna_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__Antenna, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableAntenna_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableAntenna_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::Antenna > *,six::sicd::Antenna *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::Antenna > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableAntenna(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableAntenna",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableAntenna" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_tx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg2 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntenna_tx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_tx_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntenna_tx_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->tx = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_tx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntenna_tx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_tx_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)& ((*arg1)->tx);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_rcv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg2 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntenna_rcv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_rcv_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntenna_rcv_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rcv = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_rcv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntenna_rcv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_rcv_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)& ((*arg1)->rcv);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_twoWay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg2 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntenna_twoWay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_twoWay_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntenna_twoWay_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->twoWay = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntenna_twoWay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::Antenna > *arg1 = (mem::ScopedCopyablePtr< six::sicd::Antenna > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntenna_twoWay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntenna_twoWay_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::Antenna > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Antenna > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)& ((*arg1)->twoWay);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableAntenna_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableErrorStatistics__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::ErrorStatistics *arg1 = (six::ErrorStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableErrorStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableErrorStatistics" "', argument " "1"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg1 = reinterpret_cast< six::ErrorStatistics * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::ErrorStatistics > *)new mem::ScopedCopyablePtr< six::ErrorStatistics >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableErrorStatistics__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableErrorStatistics")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::ErrorStatistics > *)new mem::ScopedCopyablePtr< six::ErrorStatistics >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableErrorStatistics__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableErrorStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableErrorStatistics" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableErrorStatistics" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::ErrorStatistics > *)new mem::ScopedCopyablePtr< six::ErrorStatistics >((mem::ScopedCopyablePtr< six::ErrorStatistics > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableErrorStatistics(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableErrorStatistics__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__ErrorStatistics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableErrorStatistics__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableErrorStatistics__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableErrorStatistics'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::ErrorStatistics >(six::ErrorStatistics *)\n"
    "    mem::ScopedCopyablePtr< six::ErrorStatistics >()\n"
    "    mem::ScopedCopyablePtr< six::ErrorStatistics >(mem::ScopedCopyablePtr< six::ErrorStatistics > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ErrorStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      result = (six::ErrorStatistics *)((mem::ScopedCopyablePtr< six::ErrorStatistics > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ErrorStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      {
        six::ErrorStatistics &_result_ref = ((mem::ScopedCopyablePtr< six::ErrorStatistics > const *)arg1)->operator *();
        result = (six::ErrorStatistics *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::ErrorStatistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      result = (six::ErrorStatistics *)((mem::ScopedCopyablePtr< six::ErrorStatistics > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  six::ErrorStatistics *arg2 = (six::ErrorStatistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__ErrorStatistics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics_reset" "', argument " "2"" of type '" "six::ErrorStatistics *""'"); 
  }
  arg2 = reinterpret_cast< six::ErrorStatistics * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableErrorStatistics_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__ErrorStatistics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableErrorStatistics_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableErrorStatistics_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::ErrorStatistics > *,six::ErrorStatistics *)\n"
    "    reset(mem::ScopedCopyablePtr< six::ErrorStatistics > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableErrorStatistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableErrorStatistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableErrorStatistics" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_compositeSCP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg2 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics_compositeSCP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_compositeSCP_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics_compositeSCP_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->compositeSCP = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_compositeSCP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_compositeSCP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_compositeSCP_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)& ((*arg1)->compositeSCP);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_components_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  mem::ScopedCopyablePtr< six::Components > *arg2 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics_components_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_components_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics_components_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->components = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_components_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_components_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_components_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::Components > *)& ((*arg1)->components);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_additionalParameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableErrorStatistics_additionalParameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_additionalParameters_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableErrorStatistics_additionalParameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->additionalParameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableErrorStatistics_additionalParameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::ErrorStatistics > *arg1 = (mem::ScopedCopyablePtr< six::ErrorStatistics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableErrorStatistics_additionalParameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableErrorStatistics_additionalParameters_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::ErrorStatistics > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::ErrorStatistics > * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((*arg1)->additionalParameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableErrorStatistics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchInformation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::MatchInformation *arg1 = (six::sicd::MatchInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableMatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableMatchInformation" "', argument " "1"" of type '" "six::sicd::MatchInformation *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::MatchInformation * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *)new mem::ScopedCopyablePtr< six::sicd::MatchInformation >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchInformation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableMatchInformation")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *)new mem::ScopedCopyablePtr< six::sicd::MatchInformation >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchInformation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableMatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableMatchInformation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableMatchInformation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *)new mem::ScopedCopyablePtr< six::sicd::MatchInformation >((mem::ScopedCopyablePtr< six::sicd::MatchInformation > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableMatchInformation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableMatchInformation__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__MatchInformation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableMatchInformation__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableMatchInformation__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableMatchInformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::MatchInformation >(six::sicd::MatchInformation *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::MatchInformation >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::MatchInformation >(mem::ScopedCopyablePtr< six::sicd::MatchInformation > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::MatchInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  {
    try{
      result = (six::sicd::MatchInformation *)((mem::ScopedCopyablePtr< six::sicd::MatchInformation > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__MatchInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::MatchInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  {
    try{
      {
        six::sicd::MatchInformation &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::MatchInformation > const *)arg1)->operator *();
        result = (six::sicd::MatchInformation *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__MatchInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::MatchInformation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  {
    try{
      result = (six::sicd::MatchInformation *)((mem::ScopedCopyablePtr< six::sicd::MatchInformation > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__MatchInformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  six::sicd::MatchInformation *arg2 = (six::sicd::MatchInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchInformation_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__MatchInformation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchInformation_reset" "', argument " "2"" of type '" "six::sicd::MatchInformation *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::MatchInformation * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableMatchInformation_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__MatchInformation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableMatchInformation_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableMatchInformation_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::MatchInformation > *,six::sicd::MatchInformation *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::MatchInformation > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableMatchInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableMatchInformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableMatchInformation" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_types_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *arg2 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableMatchInformation_types_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_types_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableMatchInformation_types_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->types = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableMatchInformation_types_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::MatchInformation > *arg1 = (mem::ScopedCopyablePtr< six::sicd::MatchInformation > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableMatchInformation_types_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableMatchInformation_types_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::MatchInformation > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::MatchInformation > * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *)& ((*arg1)->types);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableMatchInformation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneablePFA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PFA *arg1 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::PFA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneablePFA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneablePFA" "', argument " "1"" of type '" "six::sicd::PFA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PFA * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::PFA > *)new mem::ScopedCloneablePtr< six::sicd::PFA >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneablePFA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneablePFA")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::PFA > *)new mem::ScopedCloneablePtr< six::sicd::PFA >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneablePFA__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::PFA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneablePFA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneablePFA" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneablePFA" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::PFA > *)new mem::ScopedCloneablePtr< six::sicd::PFA >((mem::ScopedCloneablePtr< six::sicd::PFA > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneablePFA(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneablePFA__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__PFA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneablePFA__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneablePFA__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneablePFA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::PFA >(six::sicd::PFA *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::PFA >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::PFA >(mem::ScopedCloneablePtr< six::sicd::PFA > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::PFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (six::sicd::PFA *)((mem::ScopedCloneablePtr< six::sicd::PFA > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::PFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      {
        six::sicd::PFA &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::PFA > const *)arg1)->operator *();
        result = (six::sicd::PFA *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::PFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (six::sicd::PFA *)((mem::ScopedCloneablePtr< six::sicd::PFA > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  six::sicd::PFA *arg2 = (six::sicd::PFA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePFA_reset" "', argument " "2"" of type '" "six::sicd::PFA *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::PFA * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneablePFA_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__PFA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneablePFA_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneablePFA_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::PFA > *,six::sicd::PFA *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::PFA > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneablePFA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneablePFA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneablePFA" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::PFA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (six::sicd::PFA *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PFA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_focusPlaneNormal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_focusPlaneNormal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_focusPlaneNormal_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePFA_focusPlaneNormal_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->focusPlaneNormal = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_focusPlaneNormal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_focusPlaneNormal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_focusPlaneNormal_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->focusPlaneNormal);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_imagePlaneNormal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_imagePlaneNormal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_imagePlaneNormal_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePFA_imagePlaneNormal_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->imagePlaneNormal = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_imagePlaneNormal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_imagePlaneNormal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_imagePlaneNormal_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->imagePlaneNormal);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_polarAngleRefTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_polarAngleRefTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_polarAngleRefTime_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneablePFA_polarAngleRefTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->polarAngleRefTime = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_polarAngleRefTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_polarAngleRefTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_polarAngleRefTime_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->polarAngleRefTime);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_polarAnglePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_polarAnglePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_polarAnglePoly_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePFA_polarAnglePoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->polarAnglePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_polarAnglePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_polarAnglePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_polarAnglePoly_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->polarAnglePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->spatialFrequencyScaleFactorPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->spatialFrequencyScaleFactorPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_krg1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_krg1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_krg1_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneablePFA_krg1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->krg1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_krg1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_krg1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_krg1_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->krg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_krg2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_krg2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_krg2_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneablePFA_krg2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->krg2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_krg2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_krg2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_krg2_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->krg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_kaz1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_kaz1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_kaz1_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneablePFA_kaz1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->kaz1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_kaz1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_kaz1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_kaz1_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->kaz1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_kaz2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_kaz2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_kaz2_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneablePFA_kaz2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->kaz2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_kaz2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_kaz2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_kaz2_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->kaz2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_slowTimeDeskew_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  six::sicd::SlowTimeDeskew *arg2 = (six::sicd::SlowTimeDeskew *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneablePFA_slowTimeDeskew_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_slowTimeDeskew_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__SlowTimeDeskew, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneablePFA_slowTimeDeskew_set" "', argument " "2"" of type '" "six::sicd::SlowTimeDeskew *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::SlowTimeDeskew * >(argp2);
  {
    try{
      if (arg1) (*arg1)->slowTimeDeskew = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneablePFA_slowTimeDeskew_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::PFA > *arg1 = (mem::ScopedCloneablePtr< six::sicd::PFA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::SlowTimeDeskew *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneablePFA_slowTimeDeskew_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneablePFA_slowTimeDeskew_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::PFA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::PFA > * >(argp1);
  {
    try{
      result = (six::sicd::SlowTimeDeskew *) ((*arg1)->slowTimeDeskew);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__SlowTimeDeskew, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneablePFA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMA *arg1 = (six::sicd::RMA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRMA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRMA" "', argument " "1"" of type '" "six::sicd::RMA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMA * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMA > *)new mem::ScopedCopyablePtr< six::sicd::RMA >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRMA")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMA > *)new mem::ScopedCopyablePtr< six::sicd::RMA >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMA__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRMA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRMA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRMA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMA > *)new mem::ScopedCopyablePtr< six::sicd::RMA >((mem::ScopedCopyablePtr< six::sicd::RMA > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMA(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRMA__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__RMA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRMA__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRMA__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableRMA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMA >(six::sicd::RMA *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMA >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMA >(mem::ScopedCopyablePtr< six::sicd::RMA > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      result = (six::sicd::RMA *)((mem::ScopedCopyablePtr< six::sicd::RMA > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMA___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      {
        six::sicd::RMA &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::RMA > const *)arg1)->operator *();
        result = (six::sicd::RMA *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMA___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      result = (six::sicd::RMA *)((mem::ScopedCopyablePtr< six::sicd::RMA > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  six::sicd::RMA *arg2 = (six::sicd::RMA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMA_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__RMA, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMA_reset" "', argument " "2"" of type '" "six::sicd::RMA *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::RMA * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMA_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRMA_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__RMA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRMA_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableRMA_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RMA > *,six::sicd::RMA *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RMA > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRMA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRMA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRMA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_algoType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  six::RMAlgoType *arg2 = (six::RMAlgoType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMA_algoType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_algoType_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMA_algoType_set" "', argument " "2"" of type '" "six::RMAlgoType *""'"); 
  }
  arg2 = reinterpret_cast< six::RMAlgoType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->algoType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_algoType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RMAlgoType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMA_algoType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_algoType_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      result = (six::RMAlgoType *)& ((*arg1)->algoType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RMAlgoType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_rmat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg2 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMA_rmat_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_rmat_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMA_rmat_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rmat = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_rmat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMA_rmat_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_rmat_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMAT > *)& ((*arg1)->rmat);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_rmcr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg2 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMA_rmcr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_rmcr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMA_rmcr_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rmcr = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_rmcr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMA_rmcr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_rmcr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMCR > *)& ((*arg1)->rmcr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_inca_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg2 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMA_inca_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_inca_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMA_inca_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->inca = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMA_inca_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::INCA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMA_inca_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMA_inca_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMA > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::INCA > *)& ((*arg1)->inca);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableRMA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRgAzComp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RgAzComp *arg1 = (six::sicd::RgAzComp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRgAzComp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRgAzComp" "', argument " "1"" of type '" "six::sicd::RgAzComp *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RgAzComp * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *)new mem::ScopedCopyablePtr< six::sicd::RgAzComp >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRgAzComp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRgAzComp")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *)new mem::ScopedCopyablePtr< six::sicd::RgAzComp >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRgAzComp__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRgAzComp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRgAzComp" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRgAzComp" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *)new mem::ScopedCopyablePtr< six::sicd::RgAzComp >((mem::ScopedCopyablePtr< six::sicd::RgAzComp > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRgAzComp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRgAzComp__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__RgAzComp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRgAzComp__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRgAzComp__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableRgAzComp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::RgAzComp >(six::sicd::RgAzComp *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::RgAzComp >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::RgAzComp >(mem::ScopedCopyablePtr< six::sicd::RgAzComp > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RgAzComp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRgAzComp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  {
    try{
      result = (six::sicd::RgAzComp *)((mem::ScopedCopyablePtr< six::sicd::RgAzComp > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RgAzComp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRgAzComp___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  {
    try{
      {
        six::sicd::RgAzComp &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::RgAzComp > const *)arg1)->operator *();
        result = (six::sicd::RgAzComp *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RgAzComp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRgAzComp___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  {
    try{
      result = (six::sicd::RgAzComp *)((mem::ScopedCopyablePtr< six::sicd::RgAzComp > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  six::sicd::RgAzComp *arg2 = (six::sicd::RgAzComp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRgAzComp_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__RgAzComp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRgAzComp_reset" "', argument " "2"" of type '" "six::sicd::RgAzComp *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::RgAzComp * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRgAzComp_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRgAzComp_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__RgAzComp, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRgAzComp_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableRgAzComp_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RgAzComp > *,six::sicd::RgAzComp *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RgAzComp > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRgAzComp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRgAzComp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRgAzComp" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp_azSF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRgAzComp_azSF_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp_azSF_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRgAzComp_azSF_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->azSF = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp_azSF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRgAzComp_azSF_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp_azSF_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->azSF);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp_kazPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRgAzComp_kazPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp_kazPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRgAzComp_kazPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->kazPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRgAzComp_kazPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RgAzComp > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RgAzComp > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRgAzComp_kazPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRgAzComp_kazPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RgAzComp > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->kazPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableRgAzComp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableGeoInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GeoInfo *arg1 = (six::sicd::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableGeoInfo" "', argument " "1"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GeoInfo * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *)new mem::ScopedCloneablePtr< six::sicd::GeoInfo >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGeoInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableGeoInfo")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *)new mem::ScopedCloneablePtr< six::sicd::GeoInfo >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGeoInfo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableGeoInfo" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableGeoInfo" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *)new mem::ScopedCloneablePtr< six::sicd::GeoInfo >((mem::ScopedCloneablePtr< six::sicd::GeoInfo > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableGeoInfo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableGeoInfo__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__GeoInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableGeoInfo__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableGeoInfo__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableGeoInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::GeoInfo >(six::sicd::GeoInfo *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::GeoInfo >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::GeoInfo >(mem::ScopedCloneablePtr< six::sicd::GeoInfo > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      result = (six::sicd::GeoInfo *)((mem::ScopedCloneablePtr< six::sicd::GeoInfo > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      {
        six::sicd::GeoInfo &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::GeoInfo > const *)arg1)->operator *();
        result = (six::sicd::GeoInfo *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      result = (six::sicd::GeoInfo *)((mem::ScopedCloneablePtr< six::sicd::GeoInfo > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  six::sicd::GeoInfo *arg2 = (six::sicd::GeoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoInfo_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoInfo_reset" "', argument " "2"" of type '" "six::sicd::GeoInfo *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::GeoInfo * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableGeoInfo_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__GeoInfo, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableGeoInfo_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableGeoInfo_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::GeoInfo > *,six::sicd::GeoInfo *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::GeoInfo > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableGeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableGeoInfo" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GeoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      result = (six::sicd::GeoInfo *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GeoInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoInfo_name_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_name_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoInfo_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableGeoInfo_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->name = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo_name_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_name_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->name);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_geoInfos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *arg2 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoInfo_geoInfos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_geoInfos_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoInfo_geoInfos_set" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->geoInfos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_geoInfos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo_geoInfos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_geoInfos_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *)& ((*arg1)->geoInfos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_desc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoInfo_desc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_desc_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoInfo_desc_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->desc = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_desc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo_desc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_desc_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((*arg1)->desc);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_geometryLatLon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *arg2 = (std::vector< six::LatLon,std::allocator< six::LatLon > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableGeoInfo_geometryLatLon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_geometryLatLon_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableGeoInfo_geometryLatLon_set" "', argument " "2"" of type '" "std::vector< six::LatLon,std::allocator< six::LatLon > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::LatLon,std::allocator< six::LatLon > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->geometryLatLon = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableGeoInfo_geometryLatLon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::GeoInfo > *arg1 = (mem::ScopedCloneablePtr< six::sicd::GeoInfo > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::LatLon,std::allocator< six::LatLon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableGeoInfo_geometryLatLon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableGeoInfo_geometryLatLon_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::GeoInfo > * >(argp1);
  {
    try{
      result = (std::vector< six::LatLon,std::allocator< six::LatLon > > *)& ((*arg1)->geometryLatLon);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableGeoInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_iterator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo___nonzero__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____nonzero__((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo___len__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____len__((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_pop" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableGeoInfo___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo___getslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo___getslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableGeoInfo___getslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCloneableGeoInfo___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableGeoInfo___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val3);
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCloneableGeoInfo___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableGeoInfo___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo___delslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo___delslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableGeoInfo___delslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableGeoInfo___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo___delitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableGeoInfo___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo___getitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &_result_ref = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____getitem__((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1,arg2);
          result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableGeoInfo___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo___setitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableGeoInfo___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg____setitem__(arg1,arg2,(mem::ScopedCloneablePtr< six::sicd::GeoInfo > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableGeoInfo_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_append" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableGeoInfo_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_GeoInfo_Sg__Sg__append(arg1,(mem::ScopedCloneablePtr< six::sicd::GeoInfo > const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableGeoInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorScopedCloneableGeoInfo")) SWIG_fail;
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableGeoInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCloneableGeoInfo",&obj0)) SWIG_fail;
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorScopedCloneableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCloneableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_empty" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = (bool)((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_size" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_clear" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableGeoInfo_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_swap" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableGeoInfo_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_get_allocator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::allocator_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_begin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_end" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_rbegin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_rend" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableGeoInfo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCloneableGeoInfo",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCloneableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type >(val1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_pop_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableGeoInfo_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableGeoInfo_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableGeoInfo_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorScopedCloneableGeoInfo_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorScopedCloneableGeoInfo_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableGeoInfo_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator)\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableGeoInfo__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type arg1 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorScopedCloneableGeoInfo",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCloneableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorScopedCloneableGeoInfo" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCloneableGeoInfo" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type * >(argp2);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >(arg1,(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableGeoInfo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorScopedCloneableGeoInfo__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorScopedCloneableGeoInfo__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorScopedCloneableGeoInfo__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorScopedCloneableGeoInfo__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorScopedCloneableGeoInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >()\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const &)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableGeoInfo_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_push_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableGeoInfo_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_front" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->front();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->back();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableGeoInfo_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_assign" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo_assign" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableGeoInfo_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableGeoInfo_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableGeoInfo_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCloneableGeoInfo_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCloneableGeoInfo_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableGeoInfo_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type)\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableGeoInfo_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCloneableGeoInfo_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableGeoInfo_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCloneableGeoInfo_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCloneableGeoInfo_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableGeoInfo_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableGeoInfo_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_reserve" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableGeoInfo_reserve" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableGeoInfo_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableGeoInfo_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableGeoInfo_capacity" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorScopedCloneableGeoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorScopedCloneableGeoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorScopedCloneableGeoInfo" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorScopedCloneableGeoInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorLatLon_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_iterator" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_scene_LatLon_Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon___nonzero__" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_scene_LatLon_Sg____nonzero__((std::vector< scene::LatLon > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon___len__" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = std_vector_Sl_scene_LatLon_Sg____len__((std::vector< scene::LatLon > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_pop" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_scene_LatLon_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< scene::LatLon >::value_type(static_cast< const std::vector< scene::LatLon >::value_type& >(result))), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::difference_type arg2 ;
  std::vector< scene::LatLon >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< scene::LatLon,std::allocator< scene::LatLon > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorLatLon___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon___getslice__" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon___getslice__" "', argument " "2"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorLatLon___getslice__" "', argument " "3"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< scene::LatLon >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< scene::LatLon,std::allocator< scene::LatLon > > *)std_vector_Sl_scene_LatLon_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::difference_type arg2 ;
  std::vector< scene::LatLon >::difference_type arg3 ;
  std::vector< scene::LatLon,std::allocator< scene::LatLon > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorLatLon___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon___setslice__" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon___setslice__" "', argument " "2"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorLatLon___setslice__" "', argument " "3"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< scene::LatLon >::difference_type >(val3);
  {
    std::vector<scene::LatLon,std::allocator< scene::LatLon > > *ptr = (std::vector<scene::LatLon,std::allocator< scene::LatLon > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorLatLon___setslice__" "', argument " "4"" of type '" "std::vector< scene::LatLon,std::allocator< scene::LatLon > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon___setslice__" "', argument " "4"" of type '" "std::vector< scene::LatLon,std::allocator< scene::LatLon > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_scene_LatLon_Sg____setslice__(arg1,arg2,arg3,(std::vector< scene::LatLon,std::allocator< scene::LatLon > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::difference_type arg2 ;
  std::vector< scene::LatLon >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorLatLon___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon___delslice__" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon___delslice__" "', argument " "2"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorLatLon___delslice__" "', argument " "3"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< scene::LatLon >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_scene_LatLon_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorLatLon___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon___delitem__" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon___delitem__" "', argument " "2"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_scene_LatLon_Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< scene::LatLon >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorLatLon___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon___getitem__" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon___getitem__" "', argument " "2"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< scene::LatLon >::value_type const &_result_ref = std_vector_Sl_scene_LatLon_Sg____getitem__((std::vector< scene::LatLon > const *)arg1,arg2);
          result = (std::vector< scene::LatLon >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::difference_type arg2 ;
  std::vector< scene::LatLon >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorLatLon___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon___setitem__" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon___setitem__" "', argument " "2"" of type '" "std::vector< scene::LatLon >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorLatLon___setitem__" "', argument " "3"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon___setitem__" "', argument " "3"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< scene::LatLon >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_scene_LatLon_Sg____setitem__(arg1,arg2,(scene::LatLon const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorLatLon_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_append" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorLatLon_append" "', argument " "2"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon_append" "', argument " "2"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< scene::LatLon >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_scene_LatLon_Sg__append(arg1,(scene::LatLon const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorLatLon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorLatLon")) SWIG_fail;
  {
    try{
      result = (std::vector< scene::LatLon > *)new std::vector< scene::LatLon >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorLatLon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorLatLon",&obj0)) SWIG_fail;
  {
    std::vector<scene::LatLon,std::allocator< scene::LatLon > > *ptr = (std::vector<scene::LatLon,std::allocator< scene::LatLon > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorLatLon" "', argument " "1"" of type '" "std::vector< scene::LatLon > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorLatLon" "', argument " "1"" of type '" "std::vector< scene::LatLon > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< scene::LatLon > *)new std::vector< scene::LatLon >((std::vector< scene::LatLon > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_empty" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = (bool)((std::vector< scene::LatLon > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_size" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = ((std::vector< scene::LatLon > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_clear" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorLatLon_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_swap" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorLatLon_swap" "', argument " "2"" of type '" "std::vector< scene::LatLon > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon_swap" "', argument " "2"" of type '" "std::vector< scene::LatLon > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< scene::LatLon > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< scene::LatLon > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_get_allocator" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = ((std::vector< scene::LatLon > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< scene::LatLon >::allocator_type(static_cast< const std::vector< scene::LatLon >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_begin" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = ((std::vector< scene::LatLon > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< scene::LatLon >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_end" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = ((std::vector< scene::LatLon > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< scene::LatLon >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_rbegin" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = ((std::vector< scene::LatLon > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< scene::LatLon >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_rend" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = ((std::vector< scene::LatLon > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< scene::LatLon >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorLatLon__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorLatLon",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorLatLon" "', argument " "1"" of type '" "std::vector< scene::LatLon >::size_type""'");
  } 
  arg1 = static_cast< std::vector< scene::LatLon >::size_type >(val1);
  {
    try{
      result = (std::vector< scene::LatLon > *)new std::vector< scene::LatLon >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_pop_back" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorLatLon_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_resize" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon_resize" "', argument " "2"" of type '" "std::vector< scene::LatLon >::size_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< scene::LatLon >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorLatLon_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_erase" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_erase" "', argument " "2"" of type '" "std::vector< scene::LatLon >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_erase" "', argument " "2"" of type '" "std::vector< scene::LatLon >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< scene::LatLon >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::iterator arg2 ;
  std::vector< scene::LatLon >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< scene::LatLon >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorLatLon_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_erase" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_erase" "', argument " "2"" of type '" "std::vector< scene::LatLon >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_erase" "', argument " "2"" of type '" "std::vector< scene::LatLon >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_erase" "', argument " "3"" of type '" "std::vector< scene::LatLon >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_erase" "', argument " "3"" of type '" "std::vector< scene::LatLon >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< scene::LatLon >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<scene::LatLon,std::allocator< scene::LatLon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorLatLon_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<scene::LatLon,std::allocator< scene::LatLon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorLatLon_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorLatLon_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< scene::LatLon > *,std::vector< scene::LatLon >::iterator)\n"
    "    erase(std::vector< scene::LatLon > *,std::vector< scene::LatLon >::iterator,std::vector< scene::LatLon >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorLatLon__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon >::size_type arg1 ;
  std::vector< scene::LatLon >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< scene::LatLon > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorLatLon",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorLatLon" "', argument " "1"" of type '" "std::vector< scene::LatLon >::size_type""'");
  } 
  arg1 = static_cast< std::vector< scene::LatLon >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorLatLon" "', argument " "2"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorLatLon" "', argument " "2"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< scene::LatLon >::value_type * >(argp2);
  {
    try{
      result = (std::vector< scene::LatLon > *)new std::vector< scene::LatLon >(arg1,(std::vector< scene::LatLon >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorLatLon(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorLatLon__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorLatLon__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<scene::LatLon,std::allocator< scene::LatLon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorLatLon__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorLatLon__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorLatLon'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< scene::LatLon >()\n"
    "    std::vector< scene::LatLon >(std::vector< scene::LatLon > const &)\n"
    "    std::vector< scene::LatLon >(std::vector< scene::LatLon >::size_type)\n"
    "    std::vector< scene::LatLon >(std::vector< scene::LatLon >::size_type,std::vector< scene::LatLon >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorLatLon_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_push_back" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorLatLon_push_back" "', argument " "2"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon_push_back" "', argument " "2"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< scene::LatLon >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< scene::LatLon >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_front" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      {
        std::vector< scene::LatLon >::value_type const &_result_ref = ((std::vector< scene::LatLon > const *)arg1)->front();
        result = (std::vector< scene::LatLon >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_back" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      {
        std::vector< scene::LatLon >::value_type const &_result_ref = ((std::vector< scene::LatLon > const *)arg1)->back();
        result = (std::vector< scene::LatLon >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::size_type arg2 ;
  std::vector< scene::LatLon >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorLatLon_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_assign" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon_assign" "', argument " "2"" of type '" "std::vector< scene::LatLon >::size_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorLatLon_assign" "', argument " "3"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon_assign" "', argument " "3"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< scene::LatLon >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< scene::LatLon >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::size_type arg2 ;
  std::vector< scene::LatLon >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorLatLon_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_resize" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon_resize" "', argument " "2"" of type '" "std::vector< scene::LatLon >::size_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorLatLon_resize" "', argument " "3"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon_resize" "', argument " "3"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< scene::LatLon >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< scene::LatLon >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<scene::LatLon,std::allocator< scene::LatLon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorLatLon_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<scene::LatLon,std::allocator< scene::LatLon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorLatLon_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorLatLon_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< scene::LatLon > *,std::vector< scene::LatLon >::size_type)\n"
    "    resize(std::vector< scene::LatLon > *,std::vector< scene::LatLon >::size_type,std::vector< scene::LatLon >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::iterator arg2 ;
  std::vector< scene::LatLon >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< scene::LatLon >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorLatLon_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_insert" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_insert" "', argument " "2"" of type '" "std::vector< scene::LatLon >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_insert" "', argument " "2"" of type '" "std::vector< scene::LatLon >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorLatLon_insert" "', argument " "3"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon_insert" "', argument " "3"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< scene::LatLon >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< scene::LatLon >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< scene::LatLon >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::iterator arg2 ;
  std::vector< scene::LatLon >::size_type arg3 ;
  std::vector< scene::LatLon >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorLatLon_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_insert" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_insert" "', argument " "2"" of type '" "std::vector< scene::LatLon >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorLatLon_insert" "', argument " "2"" of type '" "std::vector< scene::LatLon >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorLatLon_insert" "', argument " "3"" of type '" "std::vector< scene::LatLon >::size_type""'");
  } 
  arg3 = static_cast< std::vector< scene::LatLon >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorLatLon_insert" "', argument " "4"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorLatLon_insert" "', argument " "4"" of type '" "std::vector< scene::LatLon >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< scene::LatLon >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< scene::LatLon >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<scene::LatLon,std::allocator< scene::LatLon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorLatLon_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<scene::LatLon,std::allocator< scene::LatLon > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< scene::LatLon >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorLatLon_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorLatLon_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< scene::LatLon > *,std::vector< scene::LatLon >::iterator,std::vector< scene::LatLon >::value_type const &)\n"
    "    insert(std::vector< scene::LatLon > *,std::vector< scene::LatLon >::iterator,std::vector< scene::LatLon >::size_type,std::vector< scene::LatLon >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  std::vector< scene::LatLon >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorLatLon_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_reserve" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorLatLon_reserve" "', argument " "2"" of type '" "std::vector< scene::LatLon >::size_type""'");
  } 
  arg2 = static_cast< std::vector< scene::LatLon >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorLatLon_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< scene::LatLon >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorLatLon_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorLatLon_capacity" "', argument " "1"" of type '" "std::vector< scene::LatLon > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      result = ((std::vector< scene::LatLon > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorLatLon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< scene::LatLon > *arg1 = (std::vector< scene::LatLon > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorLatLon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorLatLon" "', argument " "1"" of type '" "std::vector< scene::LatLon > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< scene::LatLon > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorLatLon_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableAntennaParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AntennaParameters *arg1 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableAntennaParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableAntennaParameters" "', argument " "1"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AntennaParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)new mem::ScopedCopyablePtr< six::sicd::AntennaParameters >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableAntennaParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableAntennaParameters")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)new mem::ScopedCopyablePtr< six::sicd::AntennaParameters >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableAntennaParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableAntennaParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableAntennaParameters" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableAntennaParameters" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)new mem::ScopedCopyablePtr< six::sicd::AntennaParameters >((mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableAntennaParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableAntennaParameters__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__AntennaParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableAntennaParameters__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableAntennaParameters__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableAntennaParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::AntennaParameters >(six::sicd::AntennaParameters *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::AntennaParameters >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::AntennaParameters >(mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AntennaParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (six::sicd::AntennaParameters *)((mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AntennaParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      {
        six::sicd::AntennaParameters &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const *)arg1)->operator *();
        result = (six::sicd::AntennaParameters *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AntennaParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (six::sicd::AntennaParameters *)((mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  six::sicd::AntennaParameters *arg2 = (six::sicd::AntennaParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__AntennaParameters, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_reset" "', argument " "2"" of type '" "six::sicd::AntennaParameters *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AntennaParameters * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableAntennaParameters_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__AntennaParameters, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableAntennaParameters_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableAntennaParameters_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *,six::sicd::AntennaParameters *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableAntennaParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableAntennaParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableAntennaParameters" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  six::sicd::AntennaParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AntennaParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters___eq__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableAntennaParameters___eq__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AntennaParameters * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator ==((six::sicd::AntennaParameters const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  six::sicd::AntennaParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AntennaParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters___ne__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableAntennaParameters___ne__" "', argument " "2"" of type '" "six::sicd::AntennaParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AntennaParameters * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator !=((six::sicd::AntennaParameters const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_xAxisPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_xAxisPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_xAxisPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_xAxisPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (*arg1)->xAxisPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_xAxisPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_xAxisPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_xAxisPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((*arg1)->xAxisPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_yAxisPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  six::PolyXYZ *arg2 = (six::PolyXYZ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_yAxisPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_yAxisPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_yAxisPoly_set" "', argument " "2"" of type '" "six::PolyXYZ *""'"); 
  }
  arg2 = reinterpret_cast< six::PolyXYZ * >(argp2);
  {
    try{
      if (arg1) (*arg1)->yAxisPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_yAxisPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolyXYZ *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_yAxisPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_yAxisPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (six::PolyXYZ *)& ((*arg1)->yAxisPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_frequencyZero_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_frequencyZero_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_frequencyZero_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableAntennaParameters_frequencyZero_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->frequencyZero = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_frequencyZero_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_frequencyZero_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_frequencyZero_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->frequencyZero);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_electricalBoresight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg2 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_electricalBoresight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_electricalBoresight_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_electricalBoresight_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->electricalBoresight = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_electricalBoresight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_electricalBoresight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_electricalBoresight_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *)& ((*arg1)->electricalBoresight);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_halfPowerBeamwidths_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg2 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_halfPowerBeamwidths_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_halfPowerBeamwidths_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_halfPowerBeamwidths_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->halfPowerBeamwidths = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_halfPowerBeamwidths_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_halfPowerBeamwidths_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_halfPowerBeamwidths_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *)& ((*arg1)->halfPowerBeamwidths);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_array_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg2 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_array_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_array_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_array_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->array = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_array_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_array_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_array_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *)& ((*arg1)->array);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_element_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg2 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_element_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_element_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_element_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->element = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_element_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_element_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_element_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *)& ((*arg1)->element);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_gainBSPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_gainBSPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_gainBSPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_gainBSPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->gainBSPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_gainBSPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_gainBSPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_gainBSPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->gainBSPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->electricalBoresightFrequencyShift = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((*arg1)->electricalBoresightFrequencyShift);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->mainlobeFrequencyDilation = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AntennaParameters > * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((*arg1)->mainlobeFrequencyDilation);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableAntennaParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableElectricalBoresight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ElectricalBoresight *arg1 = (six::sicd::ElectricalBoresight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableElectricalBoresight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableElectricalBoresight" "', argument " "1"" of type '" "six::sicd::ElectricalBoresight *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *)new mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableElectricalBoresight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableElectricalBoresight")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *)new mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableElectricalBoresight__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableElectricalBoresight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableElectricalBoresight" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableElectricalBoresight" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *)new mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight >((mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableElectricalBoresight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableElectricalBoresight__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__ElectricalBoresight, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableElectricalBoresight__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableElectricalBoresight__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableElectricalBoresight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight >(six::sicd::ElectricalBoresight *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight >(mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ElectricalBoresight *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableElectricalBoresight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  {
    try{
      result = (six::sicd::ElectricalBoresight *)((mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ElectricalBoresight *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableElectricalBoresight___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  {
    try{
      {
        six::sicd::ElectricalBoresight &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const *)arg1)->operator *();
        result = (six::sicd::ElectricalBoresight *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ElectricalBoresight *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableElectricalBoresight___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  {
    try{
      result = (six::sicd::ElectricalBoresight *)((mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  six::sicd::ElectricalBoresight *arg2 = (six::sicd::ElectricalBoresight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableElectricalBoresight_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__ElectricalBoresight, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableElectricalBoresight_reset" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableElectricalBoresight_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableElectricalBoresight_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__ElectricalBoresight, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableElectricalBoresight_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableElectricalBoresight_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *,six::sicd::ElectricalBoresight *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableElectricalBoresight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableElectricalBoresight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableElectricalBoresight" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  six::sicd::ElectricalBoresight *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableElectricalBoresight___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__ElectricalBoresight,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableElectricalBoresight___eq__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableElectricalBoresight___eq__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator ==((six::sicd::ElectricalBoresight const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  six::sicd::ElectricalBoresight *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableElectricalBoresight___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__ElectricalBoresight,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableElectricalBoresight___ne__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableElectricalBoresight___ne__" "', argument " "2"" of type '" "six::sicd::ElectricalBoresight const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ElectricalBoresight * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator !=((six::sicd::ElectricalBoresight const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight_dcxPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableElectricalBoresight_dcxPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight_dcxPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableElectricalBoresight_dcxPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->dcxPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight_dcxPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableElectricalBoresight_dcxPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight_dcxPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->dcxPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight_dcyPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableElectricalBoresight_dcyPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight_dcyPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableElectricalBoresight_dcyPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->dcyPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableElectricalBoresight_dcyPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *arg1 = (mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableElectricalBoresight_dcyPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableElectricalBoresight_dcyPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->dcyPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableElectricalBoresight_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableHalfPowerBeamwidths__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::HalfPowerBeamwidths *arg1 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableHalfPowerBeamwidths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableHalfPowerBeamwidths" "', argument " "1"" of type '" "six::sicd::HalfPowerBeamwidths *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *)new mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableHalfPowerBeamwidths__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableHalfPowerBeamwidths")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *)new mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableHalfPowerBeamwidths__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableHalfPowerBeamwidths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableHalfPowerBeamwidths" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableHalfPowerBeamwidths" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *)new mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths >((mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableHalfPowerBeamwidths(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableHalfPowerBeamwidths__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableHalfPowerBeamwidths__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableHalfPowerBeamwidths__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableHalfPowerBeamwidths'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths >(six::sicd::HalfPowerBeamwidths *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths >(mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::HalfPowerBeamwidths *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableHalfPowerBeamwidths_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  {
    try{
      result = (six::sicd::HalfPowerBeamwidths *)((mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::HalfPowerBeamwidths *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableHalfPowerBeamwidths___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  {
    try{
      {
        six::sicd::HalfPowerBeamwidths &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const *)arg1)->operator *();
        result = (six::sicd::HalfPowerBeamwidths *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::HalfPowerBeamwidths *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableHalfPowerBeamwidths___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  {
    try{
      result = (six::sicd::HalfPowerBeamwidths *)((mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  six::sicd::HalfPowerBeamwidths *arg2 = (six::sicd::HalfPowerBeamwidths *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableHalfPowerBeamwidths_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableHalfPowerBeamwidths_reset" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableHalfPowerBeamwidths_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableHalfPowerBeamwidths_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__HalfPowerBeamwidths, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableHalfPowerBeamwidths_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableHalfPowerBeamwidths_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *,six::sicd::HalfPowerBeamwidths *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableHalfPowerBeamwidths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableHalfPowerBeamwidths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableHalfPowerBeamwidths" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  six::sicd::HalfPowerBeamwidths *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableHalfPowerBeamwidths___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__HalfPowerBeamwidths,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableHalfPowerBeamwidths___eq__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableHalfPowerBeamwidths___eq__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator ==((six::sicd::HalfPowerBeamwidths const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  six::sicd::HalfPowerBeamwidths *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableHalfPowerBeamwidths___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__HalfPowerBeamwidths,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableHalfPowerBeamwidths___ne__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableHalfPowerBeamwidths___ne__" "', argument " "2"" of type '" "six::sicd::HalfPowerBeamwidths const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::HalfPowerBeamwidths * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator !=((six::sicd::HalfPowerBeamwidths const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths_dcx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableHalfPowerBeamwidths_dcx_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths_dcx_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableHalfPowerBeamwidths_dcx_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->dcx = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths_dcx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableHalfPowerBeamwidths_dcx_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths_dcx_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->dcx);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths_dcy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableHalfPowerBeamwidths_dcy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths_dcy_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableHalfPowerBeamwidths_dcy_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->dcy = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableHalfPowerBeamwidths_dcy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *arg1 = (mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableHalfPowerBeamwidths_dcy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableHalfPowerBeamwidths_dcy_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->dcy);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableHalfPowerBeamwidths_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableGainAndPhasePolys__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::GainAndPhasePolys *arg1 = (six::sicd::GainAndPhasePolys *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableGainAndPhasePolys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableGainAndPhasePolys" "', argument " "1"" of type '" "six::sicd::GainAndPhasePolys *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *)new mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableGainAndPhasePolys__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableGainAndPhasePolys")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *)new mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableGainAndPhasePolys__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableGainAndPhasePolys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableGainAndPhasePolys" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableGainAndPhasePolys" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *)new mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys >((mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableGainAndPhasePolys(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableGainAndPhasePolys__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableGainAndPhasePolys__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableGainAndPhasePolys__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableGainAndPhasePolys'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys >(six::sicd::GainAndPhasePolys *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys >(mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GainAndPhasePolys *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGainAndPhasePolys_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  {
    try{
      result = (six::sicd::GainAndPhasePolys *)((mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GainAndPhasePolys *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGainAndPhasePolys___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  {
    try{
      {
        six::sicd::GainAndPhasePolys &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const *)arg1)->operator *();
        result = (six::sicd::GainAndPhasePolys *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::GainAndPhasePolys *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGainAndPhasePolys___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  {
    try{
      result = (six::sicd::GainAndPhasePolys *)((mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  six::sicd::GainAndPhasePolys *arg2 = (six::sicd::GainAndPhasePolys *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGainAndPhasePolys_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGainAndPhasePolys_reset" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGainAndPhasePolys_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableGainAndPhasePolys_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__GainAndPhasePolys, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableGainAndPhasePolys_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableGainAndPhasePolys_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *,six::sicd::GainAndPhasePolys *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableGainAndPhasePolys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableGainAndPhasePolys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableGainAndPhasePolys" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  six::sicd::GainAndPhasePolys *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGainAndPhasePolys___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__GainAndPhasePolys,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGainAndPhasePolys___eq__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableGainAndPhasePolys___eq__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator ==((six::sicd::GainAndPhasePolys const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  six::sicd::GainAndPhasePolys *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGainAndPhasePolys___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__GainAndPhasePolys,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGainAndPhasePolys___ne__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableGainAndPhasePolys___ne__" "', argument " "2"" of type '" "six::sicd::GainAndPhasePolys const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::GainAndPhasePolys * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator !=((six::sicd::GainAndPhasePolys const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys_gainPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGainAndPhasePolys_gainPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys_gainPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGainAndPhasePolys_gainPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->gainPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys_gainPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGainAndPhasePolys_gainPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys_gainPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->gainPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys_phasePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableGainAndPhasePolys_phasePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys_phasePoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableGainAndPhasePolys_phasePoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->phasePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableGainAndPhasePolys_phasePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *arg1 = (mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableGainAndPhasePolys_phasePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableGainAndPhasePolys_phasePoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->phasePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableGainAndPhasePolys_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableWeightType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WeightType *arg1 = (six::sicd::WeightType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableWeightType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableWeightType" "', argument " "1"" of type '" "six::sicd::WeightType *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WeightType * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::WeightType > *)new mem::ScopedCopyablePtr< six::sicd::WeightType >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableWeightType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableWeightType")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::WeightType > *)new mem::ScopedCopyablePtr< six::sicd::WeightType >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableWeightType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableWeightType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableWeightType" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableWeightType" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::WeightType > *)new mem::ScopedCopyablePtr< six::sicd::WeightType >((mem::ScopedCopyablePtr< six::sicd::WeightType > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableWeightType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableWeightType__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__WeightType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableWeightType__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableWeightType__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableWeightType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::WeightType >(six::sicd::WeightType *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::WeightType >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::WeightType >(mem::ScopedCopyablePtr< six::sicd::WeightType > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::WeightType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableWeightType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    try{
      result = (six::sicd::WeightType *)((mem::ScopedCopyablePtr< six::sicd::WeightType > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::WeightType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableWeightType___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    try{
      {
        six::sicd::WeightType &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::WeightType > const *)arg1)->operator *();
        result = (six::sicd::WeightType *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::WeightType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableWeightType___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    try{
      result = (six::sicd::WeightType *)((mem::ScopedCopyablePtr< six::sicd::WeightType > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  six::sicd::WeightType *arg2 = (six::sicd::WeightType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableWeightType_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__WeightType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableWeightType_reset" "', argument " "2"" of type '" "six::sicd::WeightType *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::WeightType * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableWeightType_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableWeightType_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__WeightType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableWeightType_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableWeightType_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::WeightType > *,six::sicd::WeightType *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::WeightType > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableWeightType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableWeightType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableWeightType" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType_windowName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableWeightType_windowName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType_windowName_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableWeightType_windowName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCopyableWeightType_windowName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->windowName = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType_windowName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableWeightType_windowName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType_windowName_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->windowName);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType_parameters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *arg2 = (std::vector< Parameter,std::allocator< Parameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableWeightType_parameters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType_parameters_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableWeightType_parameters_set" "', argument " "2"" of type '" "std::vector< Parameter,std::allocator< Parameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Parameter,std::allocator< Parameter > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->parameters = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableWeightType_parameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::WeightType > *arg1 = (mem::ScopedCopyablePtr< six::sicd::WeightType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Parameter,std::allocator< Parameter > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableWeightType_parameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableWeightType_parameters_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::WeightType > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::WeightType > * >(argp1);
  {
    try{
      result = (std::vector< Parameter,std::allocator< Parameter > > *)& ((*arg1)->parameters);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableWeightType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorPolyXYZ_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_iterator" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_PolyXYZ_Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ___nonzero__" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_PolyXYZ_Sg____nonzero__((std::vector< PolyXYZ > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ___len__" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = std_vector_Sl_PolyXYZ_Sg____len__((std::vector< PolyXYZ > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_pop" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_PolyXYZ_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< PolyXYZ >::value_type(static_cast< const std::vector< PolyXYZ >::value_type& >(result))), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::difference_type arg2 ;
  std::vector< PolyXYZ >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< PolyXYZ,std::allocator< PolyXYZ > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPolyXYZ___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ___getslice__" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ___getslice__" "', argument " "2"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPolyXYZ___getslice__" "', argument " "3"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< PolyXYZ >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< PolyXYZ,std::allocator< PolyXYZ > > *)std_vector_Sl_PolyXYZ_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::difference_type arg2 ;
  std::vector< PolyXYZ >::difference_type arg3 ;
  std::vector< PolyXYZ,std::allocator< PolyXYZ > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorPolyXYZ___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ___setslice__" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ___setslice__" "', argument " "2"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPolyXYZ___setslice__" "', argument " "3"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< PolyXYZ >::difference_type >(val3);
  {
    std::vector<PolyXYZ,std::allocator< PolyXYZ > > *ptr = (std::vector<PolyXYZ,std::allocator< PolyXYZ > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPolyXYZ___setslice__" "', argument " "4"" of type '" "std::vector< PolyXYZ,std::allocator< PolyXYZ > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ___setslice__" "', argument " "4"" of type '" "std::vector< PolyXYZ,std::allocator< PolyXYZ > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_PolyXYZ_Sg____setslice__(arg1,arg2,arg3,(std::vector< PolyXYZ,std::allocator< PolyXYZ > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::difference_type arg2 ;
  std::vector< PolyXYZ >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPolyXYZ___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ___delslice__" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ___delslice__" "', argument " "2"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPolyXYZ___delslice__" "', argument " "3"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< PolyXYZ >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_PolyXYZ_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPolyXYZ___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ___delitem__" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ___delitem__" "', argument " "2"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_PolyXYZ_Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< PolyXYZ >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPolyXYZ___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ___getitem__" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ___getitem__" "', argument " "2"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< PolyXYZ >::value_type const &_result_ref = std_vector_Sl_PolyXYZ_Sg____getitem__((std::vector< PolyXYZ > const *)arg1,arg2);
          result = (std::vector< PolyXYZ >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::difference_type arg2 ;
  std::vector< PolyXYZ >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPolyXYZ___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ___setitem__" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ___setitem__" "', argument " "2"" of type '" "std::vector< PolyXYZ >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPolyXYZ___setitem__" "', argument " "3"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ___setitem__" "', argument " "3"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< PolyXYZ >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_PolyXYZ_Sg____setitem__(arg1,arg2,(PolyXYZ const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPolyXYZ_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_append" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPolyXYZ_append" "', argument " "2"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ_append" "', argument " "2"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< PolyXYZ >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_PolyXYZ_Sg__append(arg1,(PolyXYZ const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPolyXYZ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorPolyXYZ")) SWIG_fail;
  {
    try{
      result = (std::vector< PolyXYZ > *)new std::vector< PolyXYZ >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPolyXYZ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorPolyXYZ",&obj0)) SWIG_fail;
  {
    std::vector<PolyXYZ,std::allocator< PolyXYZ > > *ptr = (std::vector<PolyXYZ,std::allocator< PolyXYZ > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorPolyXYZ" "', argument " "1"" of type '" "std::vector< PolyXYZ > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPolyXYZ" "', argument " "1"" of type '" "std::vector< PolyXYZ > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< PolyXYZ > *)new std::vector< PolyXYZ >((std::vector< PolyXYZ > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_empty" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = (bool)((std::vector< PolyXYZ > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_size" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = ((std::vector< PolyXYZ > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_clear" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPolyXYZ_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_swap" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPolyXYZ_swap" "', argument " "2"" of type '" "std::vector< PolyXYZ > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ_swap" "', argument " "2"" of type '" "std::vector< PolyXYZ > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< PolyXYZ > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< PolyXYZ > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_get_allocator" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = ((std::vector< PolyXYZ > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< PolyXYZ >::allocator_type(static_cast< const std::vector< PolyXYZ >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_begin" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = ((std::vector< PolyXYZ > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< PolyXYZ >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_end" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = ((std::vector< PolyXYZ > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< PolyXYZ >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_rbegin" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = ((std::vector< PolyXYZ > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< PolyXYZ >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_rend" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = ((std::vector< PolyXYZ > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< PolyXYZ >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPolyXYZ__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorPolyXYZ",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPolyXYZ" "', argument " "1"" of type '" "std::vector< PolyXYZ >::size_type""'");
  } 
  arg1 = static_cast< std::vector< PolyXYZ >::size_type >(val1);
  {
    try{
      result = (std::vector< PolyXYZ > *)new std::vector< PolyXYZ >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_pop_back" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPolyXYZ_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_resize" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ_resize" "', argument " "2"" of type '" "std::vector< PolyXYZ >::size_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< PolyXYZ >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPolyXYZ_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_erase" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_erase" "', argument " "2"" of type '" "std::vector< PolyXYZ >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_erase" "', argument " "2"" of type '" "std::vector< PolyXYZ >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< PolyXYZ >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::iterator arg2 ;
  std::vector< PolyXYZ >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< PolyXYZ >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPolyXYZ_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_erase" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_erase" "', argument " "2"" of type '" "std::vector< PolyXYZ >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_erase" "', argument " "2"" of type '" "std::vector< PolyXYZ >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_erase" "', argument " "3"" of type '" "std::vector< PolyXYZ >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_erase" "', argument " "3"" of type '" "std::vector< PolyXYZ >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< PolyXYZ >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<PolyXYZ,std::allocator< PolyXYZ > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorPolyXYZ_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<PolyXYZ,std::allocator< PolyXYZ > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorPolyXYZ_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorPolyXYZ_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< PolyXYZ > *,std::vector< PolyXYZ >::iterator)\n"
    "    erase(std::vector< PolyXYZ > *,std::vector< PolyXYZ >::iterator,std::vector< PolyXYZ >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPolyXYZ__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ >::size_type arg1 ;
  std::vector< PolyXYZ >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< PolyXYZ > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorPolyXYZ",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPolyXYZ" "', argument " "1"" of type '" "std::vector< PolyXYZ >::size_type""'");
  } 
  arg1 = static_cast< std::vector< PolyXYZ >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorPolyXYZ" "', argument " "2"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPolyXYZ" "', argument " "2"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< PolyXYZ >::value_type * >(argp2);
  {
    try{
      result = (std::vector< PolyXYZ > *)new std::vector< PolyXYZ >(arg1,(std::vector< PolyXYZ >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPolyXYZ(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorPolyXYZ__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorPolyXYZ__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<PolyXYZ,std::allocator< PolyXYZ > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorPolyXYZ__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorPolyXYZ__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorPolyXYZ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< PolyXYZ >()\n"
    "    std::vector< PolyXYZ >(std::vector< PolyXYZ > const &)\n"
    "    std::vector< PolyXYZ >(std::vector< PolyXYZ >::size_type)\n"
    "    std::vector< PolyXYZ >(std::vector< PolyXYZ >::size_type,std::vector< PolyXYZ >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPolyXYZ_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_push_back" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPolyXYZ_push_back" "', argument " "2"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ_push_back" "', argument " "2"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< PolyXYZ >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< PolyXYZ >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_front" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      {
        std::vector< PolyXYZ >::value_type const &_result_ref = ((std::vector< PolyXYZ > const *)arg1)->front();
        result = (std::vector< PolyXYZ >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_back" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      {
        std::vector< PolyXYZ >::value_type const &_result_ref = ((std::vector< PolyXYZ > const *)arg1)->back();
        result = (std::vector< PolyXYZ >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::size_type arg2 ;
  std::vector< PolyXYZ >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPolyXYZ_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_assign" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ_assign" "', argument " "2"" of type '" "std::vector< PolyXYZ >::size_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPolyXYZ_assign" "', argument " "3"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ_assign" "', argument " "3"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< PolyXYZ >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< PolyXYZ >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::size_type arg2 ;
  std::vector< PolyXYZ >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPolyXYZ_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_resize" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ_resize" "', argument " "2"" of type '" "std::vector< PolyXYZ >::size_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPolyXYZ_resize" "', argument " "3"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ_resize" "', argument " "3"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< PolyXYZ >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< PolyXYZ >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<PolyXYZ,std::allocator< PolyXYZ > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPolyXYZ_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<PolyXYZ,std::allocator< PolyXYZ > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPolyXYZ_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorPolyXYZ_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< PolyXYZ > *,std::vector< PolyXYZ >::size_type)\n"
    "    resize(std::vector< PolyXYZ > *,std::vector< PolyXYZ >::size_type,std::vector< PolyXYZ >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::iterator arg2 ;
  std::vector< PolyXYZ >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< PolyXYZ >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPolyXYZ_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_insert" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_insert" "', argument " "2"" of type '" "std::vector< PolyXYZ >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_insert" "', argument " "2"" of type '" "std::vector< PolyXYZ >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPolyXYZ_insert" "', argument " "3"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ_insert" "', argument " "3"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< PolyXYZ >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< PolyXYZ >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< PolyXYZ >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::iterator arg2 ;
  std::vector< PolyXYZ >::size_type arg3 ;
  std::vector< PolyXYZ >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorPolyXYZ_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_insert" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_insert" "', argument " "2"" of type '" "std::vector< PolyXYZ >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPolyXYZ_insert" "', argument " "2"" of type '" "std::vector< PolyXYZ >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPolyXYZ_insert" "', argument " "3"" of type '" "std::vector< PolyXYZ >::size_type""'");
  } 
  arg3 = static_cast< std::vector< PolyXYZ >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPolyXYZ_insert" "', argument " "4"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPolyXYZ_insert" "', argument " "4"" of type '" "std::vector< PolyXYZ >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< PolyXYZ >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< PolyXYZ >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<PolyXYZ,std::allocator< PolyXYZ > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPolyXYZ_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<PolyXYZ,std::allocator< PolyXYZ > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< PolyXYZ >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPolyXYZ_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorPolyXYZ_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< PolyXYZ > *,std::vector< PolyXYZ >::iterator,std::vector< PolyXYZ >::value_type const &)\n"
    "    insert(std::vector< PolyXYZ > *,std::vector< PolyXYZ >::iterator,std::vector< PolyXYZ >::size_type,std::vector< PolyXYZ >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  std::vector< PolyXYZ >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPolyXYZ_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_reserve" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPolyXYZ_reserve" "', argument " "2"" of type '" "std::vector< PolyXYZ >::size_type""'");
  } 
  arg2 = static_cast< std::vector< PolyXYZ >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPolyXYZ_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< PolyXYZ >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPolyXYZ_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPolyXYZ_capacity" "', argument " "1"" of type '" "std::vector< PolyXYZ > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      result = ((std::vector< PolyXYZ > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorPolyXYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PolyXYZ > *arg1 = (std::vector< PolyXYZ > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorPolyXYZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorPolyXYZ" "', argument " "1"" of type '" "std::vector< PolyXYZ > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PolyXYZ > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorPolyXYZ_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableAreaDirectionParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::AreaDirectionParameters *arg1 = (six::sicd::AreaDirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableAreaDirectionParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableAreaDirectionParameters" "', argument " "1"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *)new mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableAreaDirectionParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableAreaDirectionParameters")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *)new mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableAreaDirectionParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableAreaDirectionParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableAreaDirectionParameters" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableAreaDirectionParameters" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *)new mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters >((mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableAreaDirectionParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableAreaDirectionParameters__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableAreaDirectionParameters__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableAreaDirectionParameters__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableAreaDirectionParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters >(six::sicd::AreaDirectionParameters *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters >(mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AreaDirectionParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      result = (six::sicd::AreaDirectionParameters *)((mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AreaDirectionParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      {
        six::sicd::AreaDirectionParameters &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *)arg1)->operator *();
        result = (six::sicd::AreaDirectionParameters *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AreaDirectionParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      result = (six::sicd::AreaDirectionParameters *)((mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  six::sicd::AreaDirectionParameters *arg2 = (six::sicd::AreaDirectionParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAreaDirectionParameters_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableAreaDirectionParameters_reset" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableAreaDirectionParameters_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableAreaDirectionParameters_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableAreaDirectionParameters_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *,six::sicd::AreaDirectionParameters *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableAreaDirectionParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableAreaDirectionParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableAreaDirectionParameters" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::AreaDirectionParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_clone" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      result = (six::sicd::AreaDirectionParameters *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__AreaDirectionParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_unitVector_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAreaDirectionParameters_unitVector_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_unitVector_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableAreaDirectionParameters_unitVector_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->unitVector = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_unitVector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters_unitVector_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_unitVector_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->unitVector);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_spacing_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAreaDirectionParameters_spacing_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_spacing_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableAreaDirectionParameters_spacing_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->spacing = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_spacing_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters_spacing_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_spacing_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->spacing);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_elements_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAreaDirectionParameters_elements_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_elements_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableAreaDirectionParameters_elements_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (*arg1)->elements = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_elements_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters_elements_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_elements_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      result =  ((*arg1)->elements);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAreaDirectionParameters_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_first_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableAreaDirectionParameters_first_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try{
      if (arg1) (*arg1)->first = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableAreaDirectionParameters_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters_first_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  {
    try{
      result =  ((*arg1)->first);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  six::sicd::AreaDirectionParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAreaDirectionParameters___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters___eq__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AreaDirectionParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableAreaDirectionParameters___eq__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableAreaDirectionParameters___eq__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator ==((six::sicd::AreaDirectionParameters const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableAreaDirectionParameters___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *arg1 = (mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *) 0 ;
  six::sicd::AreaDirectionParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableAreaDirectionParameters___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableAreaDirectionParameters___ne__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_six__sicd__AreaDirectionParameters,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableAreaDirectionParameters___ne__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableAreaDirectionParameters___ne__" "', argument " "2"" of type '" "six::sicd::AreaDirectionParameters const &""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::AreaDirectionParameters * >(argp2);
  {
    try{
      result = (bool)(*arg1)->operator !=((six::sicd::AreaDirectionParameters const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableAreaDirectionParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableSegment__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Segment *arg1 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Segment > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableSegment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableSegment" "', argument " "1"" of type '" "six::sicd::Segment *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Segment * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Segment > *)new mem::ScopedCloneablePtr< six::sicd::Segment >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableSegment__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableSegment")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Segment > *)new mem::ScopedCloneablePtr< six::sicd::Segment >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableSegment__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Segment > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableSegment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableSegment" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableSegment" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Segment > *)new mem::ScopedCloneablePtr< six::sicd::Segment >((mem::ScopedCloneablePtr< six::sicd::Segment > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableSegment(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableSegment__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__Segment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableSegment__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableSegment__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableSegment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::Segment >(six::sicd::Segment *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::Segment >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::Segment >(mem::ScopedCloneablePtr< six::sicd::Segment > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Segment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (six::sicd::Segment *)((mem::ScopedCloneablePtr< six::sicd::Segment > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Segment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      {
        six::sicd::Segment &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::Segment > const *)arg1)->operator *();
        result = (six::sicd::Segment *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Segment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (six::sicd::Segment *)((mem::ScopedCloneablePtr< six::sicd::Segment > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  six::sicd::Segment *arg2 = (six::sicd::Segment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableSegment_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableSegment_reset" "', argument " "2"" of type '" "six::sicd::Segment *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::Segment * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableSegment_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__Segment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableSegment_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableSegment_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Segment > *,six::sicd::Segment *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Segment > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableSegment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableSegment" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Segment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (six::sicd::Segment *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Segment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_getNumLines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_getNumLines",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_getNumLines" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (int)(*arg1)->getNumLines();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_getNumSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_getNumSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_getNumSamples" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (int)(*arg1)->getNumSamples();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_startLine_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableSegment_startLine_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_startLine_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableSegment_startLine_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (*arg1)->startLine = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_startLine_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_startLine_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_startLine_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (int) ((*arg1)->startLine);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_startSample_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableSegment_startSample_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_startSample_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableSegment_startSample_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (*arg1)->startSample = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_startSample_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_startSample_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_startSample_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (int) ((*arg1)->startSample);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_endLine_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableSegment_endLine_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_endLine_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableSegment_endLine_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (*arg1)->endLine = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_endLine_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_endLine_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_endLine_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (int) ((*arg1)->endLine);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_endSample_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableSegment_endSample_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_endSample_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableSegment_endSample_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (*arg1)->endSample = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_endSample_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_endSample_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_endSample_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      result = (int) ((*arg1)->endSample);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_identifier_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableSegment_identifier_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_identifier_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableSegment_identifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScopedCloneableSegment_identifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      if (arg1) (*arg1)->identifier = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableSegment_identifier_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Segment > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Segment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableSegment_identifier_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableSegment_identifier_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Segment > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Segment > * >(argp1);
  {
    try{
      {
        std::string const &_result_ref =  ((*arg1)->identifier);
        result = (std::string *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableSegment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableTxStep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::TxStep *arg1 = (six::sicd::TxStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableTxStep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableTxStep" "', argument " "1"" of type '" "six::sicd::TxStep *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::TxStep * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::TxStep > *)new mem::ScopedCloneablePtr< six::sicd::TxStep >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableTxStep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableTxStep")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::TxStep > *)new mem::ScopedCloneablePtr< six::sicd::TxStep >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableTxStep__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableTxStep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableTxStep" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableTxStep" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::TxStep > *)new mem::ScopedCloneablePtr< six::sicd::TxStep >((mem::ScopedCloneablePtr< six::sicd::TxStep > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableTxStep(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableTxStep__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__TxStep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableTxStep__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableTxStep__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableTxStep'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::TxStep >(six::sicd::TxStep *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::TxStep >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::TxStep >(mem::ScopedCloneablePtr< six::sicd::TxStep > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::TxStep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTxStep_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      result = (six::sicd::TxStep *)((mem::ScopedCloneablePtr< six::sicd::TxStep > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::TxStep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTxStep___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      {
        six::sicd::TxStep &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::TxStep > const *)arg1)->operator *();
        result = (six::sicd::TxStep *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::TxStep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTxStep___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      result = (six::sicd::TxStep *)((mem::ScopedCloneablePtr< six::sicd::TxStep > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  six::sicd::TxStep *arg2 = (six::sicd::TxStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableTxStep_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableTxStep_reset" "', argument " "2"" of type '" "six::sicd::TxStep *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::TxStep * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTxStep_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableTxStep_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__TxStep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableTxStep_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableTxStep_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::TxStep > *,six::sicd::TxStep *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::TxStep > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableTxStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableTxStep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableTxStep" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::TxStep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTxStep_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      result = (six::sicd::TxStep *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__TxStep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_waveformIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableTxStep_waveformIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep_waveformIndex_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableTxStep_waveformIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (*arg1)->waveformIndex = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_waveformIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTxStep_waveformIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep_waveformIndex_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      result = (int) ((*arg1)->waveformIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_txPolarization_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  six::PolarizationType *arg2 = (six::PolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableTxStep_txPolarization_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep_txPolarization_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableTxStep_txPolarization_set" "', argument " "2"" of type '" "six::PolarizationType *""'"); 
  }
  arg2 = reinterpret_cast< six::PolarizationType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->txPolarization = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableTxStep_txPolarization_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::TxStep > *arg1 = (mem::ScopedCloneablePtr< six::sicd::TxStep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableTxStep_txPolarization_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableTxStep_txPolarization_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::TxStep > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::TxStep > * >(argp1);
  {
    try{
      result = (six::PolarizationType *)& ((*arg1)->txPolarization);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PolarizationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableTxStep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableWaveformParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::WaveformParameters *arg1 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableWaveformParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableWaveformParameters" "', argument " "1"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::WaveformParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *)new mem::ScopedCloneablePtr< six::sicd::WaveformParameters >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableWaveformParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableWaveformParameters")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *)new mem::ScopedCloneablePtr< six::sicd::WaveformParameters >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableWaveformParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableWaveformParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableWaveformParameters" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableWaveformParameters" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *)new mem::ScopedCloneablePtr< six::sicd::WaveformParameters >((mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableWaveformParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableWaveformParameters__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__WaveformParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableWaveformParameters__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableWaveformParameters__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableWaveformParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::WaveformParameters >(six::sicd::WaveformParameters *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::WaveformParameters >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::WaveformParameters >(mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::WaveformParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (six::sicd::WaveformParameters *)((mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::WaveformParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      {
        six::sicd::WaveformParameters &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const *)arg1)->operator *();
        result = (six::sicd::WaveformParameters *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::WaveformParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (six::sicd::WaveformParameters *)((mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  six::sicd::WaveformParameters *arg2 = (six::sicd::WaveformParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableWaveformParameters_reset" "', argument " "2"" of type '" "six::sicd::WaveformParameters *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::WaveformParameters * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableWaveformParameters_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__WaveformParameters, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableWaveformParameters_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableWaveformParameters_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *,six::sicd::WaveformParameters *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableWaveformParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableWaveformParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableWaveformParameters" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::WaveformParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (six::sicd::WaveformParameters *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__WaveformParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_txPulseLength_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_txPulseLength_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_txPulseLength_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_txPulseLength_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->txPulseLength = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_txPulseLength_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_txPulseLength_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_txPulseLength_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->txPulseLength);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_txRFBandwidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_txRFBandwidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_txRFBandwidth_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_txRFBandwidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->txRFBandwidth = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_txRFBandwidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_txRFBandwidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_txRFBandwidth_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->txRFBandwidth);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_txFrequencyStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_txFrequencyStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_txFrequencyStart_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_txFrequencyStart_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->txFrequencyStart = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_txFrequencyStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_txFrequencyStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_txFrequencyStart_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->txFrequencyStart);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_txFMRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_txFMRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_txFMRate_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_txFMRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->txFMRate = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_txFMRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_txFMRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_txFMRate_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->txFMRate);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvDemodType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  six::DemodType *arg2 = (six::DemodType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_rcvDemodType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvDemodType_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DemodType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableWaveformParameters_rcvDemodType_set" "', argument " "2"" of type '" "six::DemodType *""'"); 
  }
  arg2 = reinterpret_cast< six::DemodType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rcvDemodType = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvDemodType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DemodType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_rcvDemodType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvDemodType_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (six::DemodType *)& ((*arg1)->rcvDemodType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DemodType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvWindowLength_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_rcvWindowLength_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvWindowLength_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_rcvWindowLength_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->rcvWindowLength = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvWindowLength_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_rcvWindowLength_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvWindowLength_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->rcvWindowLength);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_adcSampleRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_adcSampleRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_adcSampleRate_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_adcSampleRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->adcSampleRate = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_adcSampleRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_adcSampleRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_adcSampleRate_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->adcSampleRate);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvIFBandwidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_rcvIFBandwidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvIFBandwidth_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_rcvIFBandwidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->rcvIFBandwidth = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvIFBandwidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_rcvIFBandwidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvIFBandwidth_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->rcvIFBandwidth);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvFrequencyStart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_rcvFrequencyStart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvFrequencyStart_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_rcvFrequencyStart_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->rcvFrequencyStart = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvFrequencyStart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_rcvFrequencyStart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvFrequencyStart_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->rcvFrequencyStart);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvFMRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableWaveformParameters_rcvFMRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvFMRate_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableWaveformParameters_rcvFMRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->rcvFMRate = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableWaveformParameters_rcvFMRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableWaveformParameters_rcvFMRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableWaveformParameters_rcvFMRate_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->rcvFMRate);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableWaveformParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::Area *arg1 = (six::sicd::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Area > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableArea" "', argument " "1"" of type '" "six::sicd::Area *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::Area * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Area > *)new mem::ScopedCloneablePtr< six::sicd::Area >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableArea__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableArea")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Area > *)new mem::ScopedCloneablePtr< six::sicd::Area >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableArea__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::Area > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableArea" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableArea" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::Area > *)new mem::ScopedCloneablePtr< six::sicd::Area >((mem::ScopedCloneablePtr< six::sicd::Area > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableArea(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableArea__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__Area, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableArea__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableArea__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::Area >(six::sicd::Area *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::Area >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::Area >(mem::ScopedCloneablePtr< six::sicd::Area > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Area *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableArea_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      result = (six::sicd::Area *)((mem::ScopedCloneablePtr< six::sicd::Area > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Area *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableArea___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      {
        six::sicd::Area &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::Area > const *)arg1)->operator *();
        result = (six::sicd::Area *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Area *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableArea___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      result = (six::sicd::Area *)((mem::ScopedCloneablePtr< six::sicd::Area > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  six::sicd::Area *arg2 = (six::sicd::Area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableArea_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableArea_reset" "', argument " "2"" of type '" "six::sicd::Area *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::Area * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableArea_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableArea_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__Area, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableArea_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableArea_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Area > *,six::sicd::Area *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::Area > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableArea" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::Area *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableArea_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      result = (six::sicd::Area *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__Area, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_acpCorners_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  six::LatLonAltCorners *arg2 = (six::LatLonAltCorners *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableArea_acpCorners_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea_acpCorners_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableArea_acpCorners_set" "', argument " "2"" of type '" "six::LatLonAltCorners *""'"); 
  }
  arg2 = reinterpret_cast< six::LatLonAltCorners * >(argp2);
  {
    try{
      if (arg1) (*arg1)->acpCorners = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_acpCorners_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::LatLonAltCorners *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableArea_acpCorners_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea_acpCorners_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      result = (six::LatLonAltCorners *)& ((*arg1)->acpCorners);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CornersT_scene__LatLonAlt_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_plane_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  mem::ScopedCloneablePtr< six::sicd::AreaPlane > *arg2 = (mem::ScopedCloneablePtr< six::sicd::AreaPlane > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableArea_plane_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea_plane_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableArea_plane_set" "', argument " "2"" of type '" "mem::ScopedCloneablePtr< six::sicd::AreaPlane > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::AreaPlane > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->plane = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableArea_plane_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::Area > *arg1 = (mem::ScopedCloneablePtr< six::sicd::Area > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::AreaPlane > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableArea_plane_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableArea_plane_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::Area > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::Area > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::AreaPlane > *)& ((*arg1)->plane);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__Area_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCloneableChannelParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::ChannelParameters *arg1 = (six::sicd::ChannelParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableChannelParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableChannelParameters" "', argument " "1"" of type '" "six::sicd::ChannelParameters *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::ChannelParameters * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *)new mem::ScopedCloneablePtr< six::sicd::ChannelParameters >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableChannelParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCloneableChannelParameters")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *)new mem::ScopedCloneablePtr< six::sicd::ChannelParameters >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableChannelParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCloneableChannelParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCloneableChannelParameters" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCloneableChannelParameters" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      result = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *)new mem::ScopedCloneablePtr< six::sicd::ChannelParameters >((mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCloneableChannelParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCloneableChannelParameters__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__ChannelParameters, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableChannelParameters__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCloneableChannelParameters__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCloneableChannelParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCloneablePtr< six::sicd::ChannelParameters >(six::sicd::ChannelParameters *)\n"
    "    mem::ScopedCloneablePtr< six::sicd::ChannelParameters >()\n"
    "    mem::ScopedCloneablePtr< six::sicd::ChannelParameters >(mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ChannelParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableChannelParameters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      result = (six::sicd::ChannelParameters *)((mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ChannelParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableChannelParameters___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters___ref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      {
        six::sicd::ChannelParameters &_result_ref = ((mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const *)arg1)->operator *();
        result = (six::sicd::ChannelParameters *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ChannelParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableChannelParameters___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters___deref__" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      result = (six::sicd::ChannelParameters *)((mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  six::sicd::ChannelParameters *arg2 = (six::sicd::ChannelParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableChannelParameters_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableChannelParameters_reset" "', argument " "2"" of type '" "six::sicd::ChannelParameters *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::ChannelParameters * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableChannelParameters_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters_reset" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCloneableChannelParameters_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__ChannelParameters, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCloneableChannelParameters_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCloneableChannelParameters_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *,six::sicd::ChannelParameters *)\n"
    "    reset(mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCloneableChannelParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCloneableChannelParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCloneableChannelParameters" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::ChannelParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableChannelParameters_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters_clone" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      result = (six::sicd::ChannelParameters *)(*arg1)->clone();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__ChannelParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_txRcvPolarization_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  six::DualPolarizationType *arg2 = (six::DualPolarizationType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableChannelParameters_txRcvPolarization_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters_txRcvPolarization_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCloneableChannelParameters_txRcvPolarization_set" "', argument " "2"" of type '" "six::DualPolarizationType *""'"); 
  }
  arg2 = reinterpret_cast< six::DualPolarizationType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->txRcvPolarization = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_txRcvPolarization_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DualPolarizationType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableChannelParameters_txRcvPolarization_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters_txRcvPolarization_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      result = (six::DualPolarizationType *)& ((*arg1)->txRcvPolarization);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DualPolarizationType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_rcvAPCIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCloneableChannelParameters_rcvAPCIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters_rcvAPCIndex_set" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCloneableChannelParameters_rcvAPCIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      if (arg1) (*arg1)->rcvAPCIndex = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCloneableChannelParameters_rcvAPCIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *arg1 = (mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCloneableChannelParameters_rcvAPCIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCloneableChannelParameters_rcvAPCIndex_get" "', argument " "1"" of type '" "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > * >(argp1);
  {
    try{
      result = (int) ((*arg1)->rcvAPCIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCloneableChannelParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_iterator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters___nonzero__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____nonzero__((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters___len__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____len__((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_pop" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableWaveformParameters___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters___getslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters___getslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableWaveformParameters___getslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCloneableWaveformParameters___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableWaveformParameters___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val3);
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCloneableWaveformParameters___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableWaveformParameters___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters___delslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters___delslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableWaveformParameters___delslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableWaveformParameters___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters___delitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableWaveformParameters___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters___getitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &_result_ref = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____getitem__((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1,arg2);
          result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableWaveformParameters___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters___setitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableWaveformParameters___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg____setitem__(arg1,arg2,(mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableWaveformParameters_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_append" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableWaveformParameters_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_WaveformParameters_Sg__Sg__append(arg1,(mem::ScopedCloneablePtr< six::sicd::WaveformParameters > const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableWaveformParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorScopedCloneableWaveformParameters")) SWIG_fail;
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableWaveformParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCloneableWaveformParameters",&obj0)) SWIG_fail;
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorScopedCloneableWaveformParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCloneableWaveformParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_empty" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = (bool)((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_size" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_clear" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableWaveformParameters_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_swap" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableWaveformParameters_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_get_allocator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::allocator_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_begin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_end" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_rbegin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_rend" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableWaveformParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCloneableWaveformParameters",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCloneableWaveformParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type >(val1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_pop_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableWaveformParameters_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableWaveformParameters_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableWaveformParameters_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorScopedCloneableWaveformParameters_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorScopedCloneableWaveformParameters_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableWaveformParameters_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator)\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableWaveformParameters__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type arg1 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorScopedCloneableWaveformParameters",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCloneableWaveformParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorScopedCloneableWaveformParameters" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCloneableWaveformParameters" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type * >(argp2);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >(arg1,(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableWaveformParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorScopedCloneableWaveformParameters__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorScopedCloneableWaveformParameters__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorScopedCloneableWaveformParameters__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorScopedCloneableWaveformParameters__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorScopedCloneableWaveformParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >()\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const &)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableWaveformParameters_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_push_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableWaveformParameters_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_front" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->front();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->back();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableWaveformParameters_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_assign" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters_assign" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableWaveformParameters_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableWaveformParameters_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableWaveformParameters_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCloneableWaveformParameters_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCloneableWaveformParameters_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableWaveformParameters_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type)\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableWaveformParameters_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCloneableWaveformParameters_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableWaveformParameters_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCloneableWaveformParameters_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCloneableWaveformParameters_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableWaveformParameters_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableWaveformParameters_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_reserve" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableWaveformParameters_reserve" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableWaveformParameters_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableWaveformParameters_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableWaveformParameters_capacity" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorScopedCloneableWaveformParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorScopedCloneableWaveformParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorScopedCloneableWaveformParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorScopedCloneableWaveformParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_iterator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep___nonzero__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____nonzero__((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep___len__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____len__((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_pop" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableTxStep___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep___getslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep___getslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableTxStep___getslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCloneableTxStep___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableTxStep___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val3);
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCloneableTxStep___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableTxStep___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep___delslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep___delslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableTxStep___delslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableTxStep___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep___delitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableTxStep___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep___getitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &_result_ref = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____getitem__((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1,arg2);
          result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableTxStep___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep___setitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableTxStep___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg____setitem__(arg1,arg2,(mem::ScopedCloneablePtr< six::sicd::TxStep > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableTxStep_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_append" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableTxStep_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_TxStep_Sg__Sg__append(arg1,(mem::ScopedCloneablePtr< six::sicd::TxStep > const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableTxStep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorScopedCloneableTxStep")) SWIG_fail;
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableTxStep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCloneableTxStep",&obj0)) SWIG_fail;
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorScopedCloneableTxStep" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCloneableTxStep" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_empty" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = (bool)((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_size" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_clear" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableTxStep_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_swap" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableTxStep_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_get_allocator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::allocator_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_begin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_end" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_rbegin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_rend" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableTxStep__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCloneableTxStep",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCloneableTxStep" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type >(val1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_pop_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableTxStep_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableTxStep_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableTxStep_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorScopedCloneableTxStep_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorScopedCloneableTxStep_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableTxStep_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator)\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableTxStep__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type arg1 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorScopedCloneableTxStep",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCloneableTxStep" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorScopedCloneableTxStep" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCloneableTxStep" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type * >(argp2);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >(arg1,(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableTxStep(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorScopedCloneableTxStep__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorScopedCloneableTxStep__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorScopedCloneableTxStep__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorScopedCloneableTxStep__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorScopedCloneableTxStep'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >()\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const &)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableTxStep_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_push_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableTxStep_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_front" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->front();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->back();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableTxStep_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_assign" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep_assign" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableTxStep_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableTxStep_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableTxStep_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCloneableTxStep_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCloneableTxStep_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableTxStep_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type)\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableTxStep_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCloneableTxStep_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableTxStep_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCloneableTxStep_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCloneableTxStep_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableTxStep_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableTxStep_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_reserve" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableTxStep_reserve" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableTxStep_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableTxStep_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableTxStep_capacity" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorScopedCloneableTxStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorScopedCloneableTxStep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorScopedCloneableTxStep" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorScopedCloneableTxStep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_iterator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment___nonzero__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____nonzero__((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment___len__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____len__((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_pop" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorScopedClonableSegment___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment___getslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment___getslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorScopedClonableSegment___getslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorScopedClonableSegment___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorScopedClonableSegment___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val3);
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorScopedClonableSegment___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorScopedClonableSegment___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment___delslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment___delslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorScopedClonableSegment___delslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorScopedClonableSegment___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment___delitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorScopedClonableSegment___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment___getitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &_result_ref = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____getitem__((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1,arg2);
          result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorScopedClonableSegment___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment___setitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorScopedClonableSegment___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg____setitem__(arg1,arg2,(mem::ScopedCloneablePtr< six::sicd::Segment > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorScopedClonableSegment_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_append" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorScopedClonableSegment_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_Segment_Sg__Sg__append(arg1,(mem::ScopedCloneablePtr< six::sicd::Segment > const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorScopedClonableSegment__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorScopedClonableSegment")) SWIG_fail;
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorScopedClonableSegment__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorScopedClonableSegment",&obj0)) SWIG_fail;
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorScopedClonableSegment" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorScopedClonableSegment" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_empty" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = (bool)((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_size" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_clear" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorScopedClonableSegment_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_swap" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorScopedClonableSegment_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_get_allocator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::allocator_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_begin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_end" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_rbegin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_rend" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorScopedClonableSegment__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorScopedClonableSegment",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorScopedClonableSegment" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type >(val1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_pop_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorScopedClonableSegment_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorScopedClonableSegment_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorScopedClonableSegment_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorScopedClonableSegment_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorScopedClonableSegment_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorScopedClonableSegment_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator)\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorScopedClonableSegment__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type arg1 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorScopedClonableSegment",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorScopedClonableSegment" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorScopedClonableSegment" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorScopedClonableSegment" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type * >(argp2);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >(arg1,(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorScopedClonableSegment(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorScopedClonableSegment__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorScopedClonableSegment__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorScopedClonableSegment__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorScopedClonableSegment__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_vectorScopedClonableSegment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >()\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const &)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorScopedClonableSegment_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_push_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorScopedClonableSegment_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_front" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->front();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->back();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorScopedClonableSegment_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_assign" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment_assign" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorScopedClonableSegment_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorScopedClonableSegment_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorScopedClonableSegment_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorScopedClonableSegment_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorScopedClonableSegment_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorScopedClonableSegment_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type)\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorScopedClonableSegment_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorScopedClonableSegment_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorScopedClonableSegment_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorScopedClonableSegment_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorScopedClonableSegment_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorScopedClonableSegment_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorScopedClonableSegment_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorScopedClonableSegment_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorScopedClonableSegment_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorScopedClonableSegment_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorScopedClonableSegment_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_reserve" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorScopedClonableSegment_reserve" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorScopedClonableSegment_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorScopedClonableSegment_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorScopedClonableSegment_capacity" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorScopedClonableSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorScopedClonableSegment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorScopedClonableSegment" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorScopedClonableSegment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_iterator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters___nonzero__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____nonzero__((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters___len__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____len__((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_pop" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableChannelParameters___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters___getslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters___getslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableChannelParameters___getslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *)std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCloneableChannelParameters___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableChannelParameters___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val3);
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCloneableChannelParameters___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableChannelParameters___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters___delslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters___delslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableChannelParameters___delslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableChannelParameters___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters___delitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableChannelParameters___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters___getitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &_result_ref = std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____getitem__((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1,arg2);
          result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableChannelParameters___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters___setitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableChannelParameters___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg____setitem__(arg1,arg2,(mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableChannelParameters_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_append" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableChannelParameters_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_mem_ScopedCloneablePtr_Sl_six_sicd_ChannelParameters_Sg__Sg__append(arg1,(mem::ScopedCloneablePtr< six::sicd::ChannelParameters > const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableChannelParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorScopedCloneableChannelParameters")) SWIG_fail;
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableChannelParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCloneableChannelParameters",&obj0)) SWIG_fail;
  {
    std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *ptr = (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorScopedCloneableChannelParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCloneableChannelParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_empty" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = (bool)((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_size" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_clear" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableChannelParameters_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_swap" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableChannelParameters_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_get_allocator" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::allocator_type(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_begin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_end" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_rbegin" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_rend" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableChannelParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCloneableChannelParameters",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCloneableChannelParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type >(val1);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_pop_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableChannelParameters_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableChannelParameters_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableChannelParameters_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorScopedCloneableChannelParameters_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorScopedCloneableChannelParameters_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableChannelParameters_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator)\n"
    "    erase(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableChannelParameters__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type arg1 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorScopedCloneableChannelParameters",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCloneableChannelParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorScopedCloneableChannelParameters" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCloneableChannelParameters" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type * >(argp2);
  {
    try{
      result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *)new std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >(arg1,(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCloneableChannelParameters(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorScopedCloneableChannelParameters__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorScopedCloneableChannelParameters__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorScopedCloneableChannelParameters__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorScopedCloneableChannelParameters__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorScopedCloneableChannelParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >()\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const &)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type)\n"
    "    std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableChannelParameters_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_push_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCloneableChannelParameters_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_front" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->front();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &_result_ref = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->back();
        result = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableChannelParameters_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_assign" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters_assign" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableChannelParameters_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableChannelParameters_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableChannelParameters_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCloneableChannelParameters_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCloneableChannelParameters_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableChannelParameters_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type)\n"
    "    resize(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCloneableChannelParameters_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator arg2 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type arg3 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCloneableChannelParameters_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCloneableChannelParameters_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCloneableChannelParameters_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCloneableChannelParameters_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCloneableChannelParameters_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)\n"
    "    insert(std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type,std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCloneableChannelParameters_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_reserve" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCloneableChannelParameters_reserve" "', argument " "2"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCloneableChannelParameters_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCloneableChannelParameters_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCloneableChannelParameters_capacity" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorScopedCloneableChannelParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *arg1 = (std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorScopedCloneableChannelParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorScopedCloneableChannelParameters" "', argument " "1"" of type '" "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorScopedCloneableChannelParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorInt_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      try {
        result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorInt___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorInt___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorInt___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorInt___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorInt___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorInt___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorInt___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorInt___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_int_Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< int >::value_type const &_result_ref = std_vector_Sl_int_Sg____getitem__((std::vector< int > const *)arg1,arg2);
          result = (std::vector< int >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorInt___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try{
      try {
        std_vector_Sl_int_Sg____setitem__(arg1,arg2,(int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorInt_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try{
      std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorInt")) SWIG_fail;
  {
    try{
      result = (std::vector< int > *)new std::vector< int >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorInt",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorInt" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorInt" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = (bool)((std::vector< int > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = ((std::vector< int > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorInt_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorInt_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorInt_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = ((std::vector< int > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_begin" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = ((std::vector< int > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_end" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = ((std::vector< int > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_rbegin" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = ((std::vector< int > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_rend" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = ((std::vector< int > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorInt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorInt",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorInt" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  {
    try{
      result = (std::vector< int > *)new std::vector< int >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorInt_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorInt_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorInt_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorInt_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorInt_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorInt_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< int > *,std::vector< int >::iterator)\n"
    "    erase(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorInt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorInt",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorInt" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorInt" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try{
      result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorInt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorInt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorInt__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorInt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorInt__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >()\n"
    "    std::vector< int >(std::vector< int > const &)\n"
    "    std::vector< int >(std::vector< int >::size_type)\n"
    "    std::vector< int >(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorInt_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try{
      (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      {
        std::vector< int >::value_type const &_result_ref = ((std::vector< int > const *)arg1)->front();
        result = (std::vector< int >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      {
        std::vector< int >::value_type const &_result_ref = ((std::vector< int > const *)arg1)->back();
        result = (std::vector< int >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorInt_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorInt_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try{
      (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorInt_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorInt_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try{
      (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorInt_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorInt_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorInt_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< int > *,std::vector< int >::size_type)\n"
    "    resize(std::vector< int > *,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorInt_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorInt_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorInt_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorInt_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorInt_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VectorInt_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< int >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorInt_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VectorInt_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorInt_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    insert(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorInt_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorInt_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorInt_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorInt_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorInt_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorInt" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorInt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRcvChannelProcessed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RcvChannelProcessed *arg1 = (six::sicd::RcvChannelProcessed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRcvChannelProcessed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRcvChannelProcessed" "', argument " "1"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *)new mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRcvChannelProcessed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRcvChannelProcessed")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *)new mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRcvChannelProcessed__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRcvChannelProcessed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRcvChannelProcessed" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRcvChannelProcessed" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *)new mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed >((mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRcvChannelProcessed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRcvChannelProcessed__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRcvChannelProcessed__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRcvChannelProcessed__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableRcvChannelProcessed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed >(six::sicd::RcvChannelProcessed *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed >(mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RcvChannelProcessed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRcvChannelProcessed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      result = (six::sicd::RcvChannelProcessed *)((mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RcvChannelProcessed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRcvChannelProcessed___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      {
        six::sicd::RcvChannelProcessed &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const *)arg1)->operator *();
        result = (six::sicd::RcvChannelProcessed *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RcvChannelProcessed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRcvChannelProcessed___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      result = (six::sicd::RcvChannelProcessed *)((mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  six::sicd::RcvChannelProcessed *arg2 = (six::sicd::RcvChannelProcessed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRcvChannelProcessed_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRcvChannelProcessed_reset" "', argument " "2"" of type '" "six::sicd::RcvChannelProcessed *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::RcvChannelProcessed * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRcvChannelProcessed_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRcvChannelProcessed_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__RcvChannelProcessed, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRcvChannelProcessed_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableRcvChannelProcessed_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *,six::sicd::RcvChannelProcessed *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRcvChannelProcessed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRcvChannelProcessed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRcvChannelProcessed" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try{
      if (arg1) (*arg1)->numChannelsProcessed = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      result = (unsigned int) ((*arg1)->numChannelsProcessed);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_prfScaleFactor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRcvChannelProcessed_prfScaleFactor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_prfScaleFactor_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRcvChannelProcessed_prfScaleFactor_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->prfScaleFactor = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_prfScaleFactor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRcvChannelProcessed_prfScaleFactor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_prfScaleFactor_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->prfScaleFactor);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_channelIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRcvChannelProcessed_channelIndex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_channelIndex_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRcvChannelProcessed_channelIndex_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->channelIndex = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRcvChannelProcessed_channelIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRcvChannelProcessed_channelIndex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRcvChannelProcessed_channelIndex_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > * >(argp1);
  {
    try{
      result = (std::vector< int,std::allocator< int > > *)& ((*arg1)->channelIndex);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableRcvChannelProcessed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorProcessing_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_iterator" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_six_sicd_Processing_Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing___nonzero__" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_six_sicd_Processing_Sg____nonzero__((std::vector< six::sicd::Processing > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing___len__" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = std_vector_Sl_six_sicd_Processing_Sg____len__((std::vector< six::sicd::Processing > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_pop" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_six_sicd_Processing_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::sicd::Processing >::value_type(static_cast< const std::vector< six::sicd::Processing >::value_type& >(result))), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::difference_type arg2 ;
  std::vector< six::sicd::Processing >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorProcessing___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing___getslice__" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing___getslice__" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorProcessing___getslice__" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *)std_vector_Sl_six_sicd_Processing_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::difference_type arg2 ;
  std::vector< six::sicd::Processing >::difference_type arg3 ;
  std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorProcessing___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing___setslice__" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing___setslice__" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorProcessing___setslice__" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val3);
  {
    std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > > *ptr = (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorProcessing___setslice__" "', argument " "4"" of type '" "std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing___setslice__" "', argument " "4"" of type '" "std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_six_sicd_Processing_Sg____setslice__(arg1,arg2,arg3,(std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::difference_type arg2 ;
  std::vector< six::sicd::Processing >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorProcessing___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing___delslice__" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing___delslice__" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorProcessing___delslice__" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_six_sicd_Processing_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorProcessing___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing___delitem__" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing___delitem__" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_six_sicd_Processing_Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::Processing >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorProcessing___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing___getitem__" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing___getitem__" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< six::sicd::Processing >::value_type const &_result_ref = std_vector_Sl_six_sicd_Processing_Sg____getitem__((std::vector< six::sicd::Processing > const *)arg1,arg2);
          result = (std::vector< six::sicd::Processing >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::difference_type arg2 ;
  std::vector< six::sicd::Processing >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorProcessing___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing___setitem__" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing___setitem__" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorProcessing___setitem__" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing___setitem__" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::Processing >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_six_sicd_Processing_Sg____setitem__(arg1,arg2,(six::sicd::Processing const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorProcessing_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_append" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorProcessing_append" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing_append" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::Processing >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_six_sicd_Processing_Sg__append(arg1,(six::sicd::Processing const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorProcessing__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorProcessing")) SWIG_fail;
  {
    try{
      result = (std::vector< six::sicd::Processing > *)new std::vector< six::sicd::Processing >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorProcessing__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorProcessing",&obj0)) SWIG_fail;
  {
    std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > > *ptr = (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorProcessing" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorProcessing" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< six::sicd::Processing > *)new std::vector< six::sicd::Processing >((std::vector< six::sicd::Processing > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_empty" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = (bool)((std::vector< six::sicd::Processing > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_size" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::Processing > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_clear" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorProcessing_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_swap" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorProcessing_swap" "', argument " "2"" of type '" "std::vector< six::sicd::Processing > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing_swap" "', argument " "2"" of type '" "std::vector< six::sicd::Processing > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< six::sicd::Processing > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_get_allocator" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::Processing > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::sicd::Processing >::allocator_type(static_cast< const std::vector< six::sicd::Processing >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_begin" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::Processing > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::Processing >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_end" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::Processing > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::Processing >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_rbegin" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::Processing > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::Processing >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_rend" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::Processing > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::Processing >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorProcessing__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorProcessing",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorProcessing" "', argument " "1"" of type '" "std::vector< six::sicd::Processing >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::sicd::Processing >::size_type >(val1);
  {
    try{
      result = (std::vector< six::sicd::Processing > *)new std::vector< six::sicd::Processing >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_pop_back" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorProcessing_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_resize" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing_resize" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::Processing >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorProcessing_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_erase" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_erase" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_erase" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::Processing >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::iterator arg2 ;
  std::vector< six::sicd::Processing >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::Processing >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorProcessing_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_erase" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_erase" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_erase" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_erase" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_erase" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::Processing >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorProcessing_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorProcessing_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorProcessing_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< six::sicd::Processing > *,std::vector< six::sicd::Processing >::iterator)\n"
    "    erase(std::vector< six::sicd::Processing > *,std::vector< six::sicd::Processing >::iterator,std::vector< six::sicd::Processing >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorProcessing__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing >::size_type arg1 ;
  std::vector< six::sicd::Processing >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::Processing > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorProcessing",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorProcessing" "', argument " "1"" of type '" "std::vector< six::sicd::Processing >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::sicd::Processing >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorProcessing" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorProcessing" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::Processing >::value_type * >(argp2);
  {
    try{
      result = (std::vector< six::sicd::Processing > *)new std::vector< six::sicd::Processing >(arg1,(std::vector< six::sicd::Processing >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorProcessing(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorProcessing__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorProcessing__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorProcessing__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorProcessing__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorProcessing'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::sicd::Processing >()\n"
    "    std::vector< six::sicd::Processing >(std::vector< six::sicd::Processing > const &)\n"
    "    std::vector< six::sicd::Processing >(std::vector< six::sicd::Processing >::size_type)\n"
    "    std::vector< six::sicd::Processing >(std::vector< six::sicd::Processing >::size_type,std::vector< six::sicd::Processing >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorProcessing_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_push_back" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorProcessing_push_back" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing_push_back" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::Processing >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< six::sicd::Processing >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_front" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      {
        std::vector< six::sicd::Processing >::value_type const &_result_ref = ((std::vector< six::sicd::Processing > const *)arg1)->front();
        result = (std::vector< six::sicd::Processing >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_back" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      {
        std::vector< six::sicd::Processing >::value_type const &_result_ref = ((std::vector< six::sicd::Processing > const *)arg1)->back();
        result = (std::vector< six::sicd::Processing >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::size_type arg2 ;
  std::vector< six::sicd::Processing >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorProcessing_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_assign" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing_assign" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorProcessing_assign" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing_assign" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::Processing >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< six::sicd::Processing >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::size_type arg2 ;
  std::vector< six::sicd::Processing >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorProcessing_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_resize" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing_resize" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorProcessing_resize" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing_resize" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::Processing >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< six::sicd::Processing >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorProcessing_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorProcessing_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorProcessing_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< six::sicd::Processing > *,std::vector< six::sicd::Processing >::size_type)\n"
    "    resize(std::vector< six::sicd::Processing > *,std::vector< six::sicd::Processing >::size_type,std::vector< six::sicd::Processing >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::iterator arg2 ;
  std::vector< six::sicd::Processing >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::Processing >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorProcessing_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_insert" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_insert" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_insert" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorProcessing_insert" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing_insert" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::Processing >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< six::sicd::Processing >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::Processing >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::iterator arg2 ;
  std::vector< six::sicd::Processing >::size_type arg3 ;
  std::vector< six::sicd::Processing >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorProcessing_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_insert" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_insert" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorProcessing_insert" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorProcessing_insert" "', argument " "3"" of type '" "std::vector< six::sicd::Processing >::size_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::Processing >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorProcessing_insert" "', argument " "4"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorProcessing_insert" "', argument " "4"" of type '" "std::vector< six::sicd::Processing >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< six::sicd::Processing >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< six::sicd::Processing >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorProcessing_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::Processing,std::allocator< six::sicd::Processing > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::Processing >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorProcessing_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorProcessing_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< six::sicd::Processing > *,std::vector< six::sicd::Processing >::iterator,std::vector< six::sicd::Processing >::value_type const &)\n"
    "    insert(std::vector< six::sicd::Processing > *,std::vector< six::sicd::Processing >::iterator,std::vector< six::sicd::Processing >::size_type,std::vector< six::sicd::Processing >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  std::vector< six::sicd::Processing >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorProcessing_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_reserve" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorProcessing_reserve" "', argument " "2"" of type '" "std::vector< six::sicd::Processing >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::Processing >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorProcessing_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::Processing >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorProcessing_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorProcessing_capacity" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::Processing > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorProcessing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::Processing > *arg1 = (std::vector< six::sicd::Processing > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorProcessing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorProcessing" "', argument " "1"" of type '" "std::vector< six::sicd::Processing > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::Processing > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorProcessing_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyablePolarizationCalibration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::PolarizationCalibration *arg1 = (six::sicd::PolarizationCalibration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyablePolarizationCalibration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyablePolarizationCalibration" "', argument " "1"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *)new mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePolarizationCalibration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyablePolarizationCalibration")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *)new mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePolarizationCalibration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyablePolarizationCalibration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyablePolarizationCalibration" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyablePolarizationCalibration" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *)new mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration >((mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePolarizationCalibration(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyablePolarizationCalibration__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__PolarizationCalibration, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyablePolarizationCalibration__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyablePolarizationCalibration__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyablePolarizationCalibration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration >(six::sicd::PolarizationCalibration *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration >(mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::PolarizationCalibration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePolarizationCalibration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      result = (six::sicd::PolarizationCalibration *)((mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::PolarizationCalibration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePolarizationCalibration___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      {
        six::sicd::PolarizationCalibration &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const *)arg1)->operator *();
        result = (six::sicd::PolarizationCalibration *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::PolarizationCalibration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePolarizationCalibration___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      result = (six::sicd::PolarizationCalibration *)((mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  six::sicd::PolarizationCalibration *arg2 = (six::sicd::PolarizationCalibration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePolarizationCalibration_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__PolarizationCalibration, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePolarizationCalibration_reset" "', argument " "2"" of type '" "six::sicd::PolarizationCalibration *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::PolarizationCalibration * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePolarizationCalibration_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyablePolarizationCalibration_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__PolarizationCalibration, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyablePolarizationCalibration_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyablePolarizationCalibration_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *,six::sicd::PolarizationCalibration *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyablePolarizationCalibration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyablePolarizationCalibration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyablePolarizationCalibration" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->hvAngleCompensationApplied = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((*arg1)->hvAngleCompensationApplied);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->distortionCorrectionApplied = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((*arg1)->distortionCorrectionApplied);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_distortion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  mem::ScopedCopyablePtr< six::sicd::Distortion > *arg2 = (mem::ScopedCopyablePtr< six::sicd::Distortion > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePolarizationCalibration_distortion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_distortion_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePolarizationCalibration_distortion_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::sicd::Distortion > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::Distortion > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->distortion = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePolarizationCalibration_distortion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *arg1 = (mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::Distortion > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePolarizationCalibration_distortion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePolarizationCalibration_distortion_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::Distortion > *)& ((*arg1)->distortion);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyablePolarizationCalibration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyablePosVelError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::PosVelError *arg1 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyablePosVelError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyablePosVelError" "', argument " "1"" of type '" "six::PosVelError *""'"); 
  }
  arg1 = reinterpret_cast< six::PosVelError * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)new mem::ScopedCopyablePtr< six::PosVelError >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePosVelError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyablePosVelError")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)new mem::ScopedCopyablePtr< six::PosVelError >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePosVelError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyablePosVelError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyablePosVelError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyablePosVelError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)new mem::ScopedCopyablePtr< six::PosVelError >((mem::ScopedCopyablePtr< six::PosVelError > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyablePosVelError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyablePosVelError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__PosVelError, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyablePosVelError__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyablePosVelError__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyablePosVelError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::PosVelError >(six::PosVelError *)\n"
    "    mem::ScopedCopyablePtr< six::PosVelError >()\n"
    "    mem::ScopedCopyablePtr< six::PosVelError >(mem::ScopedCopyablePtr< six::PosVelError > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PosVelError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (six::PosVelError *)((mem::ScopedCopyablePtr< six::PosVelError > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PosVelError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PosVelError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      {
        six::PosVelError &_result_ref = ((mem::ScopedCopyablePtr< six::PosVelError > const *)arg1)->operator *();
        result = (six::PosVelError *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PosVelError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::PosVelError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (six::PosVelError *)((mem::ScopedCopyablePtr< six::PosVelError > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__PosVelError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  six::PosVelError *arg2 = (six::PosVelError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__PosVelError, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError_reset" "', argument " "2"" of type '" "six::PosVelError *""'"); 
  }
  arg2 = reinterpret_cast< six::PosVelError * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyablePosVelError_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__PosVelError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyablePosVelError_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyablePosVelError_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::PosVelError > *,six::PosVelError *)\n"
    "    reset(mem::ScopedCopyablePtr< six::PosVelError > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyablePosVelError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyablePosVelError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyablePosVelError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_frame_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  six::FrameType *arg2 = (six::FrameType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_frame_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_frame_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_scene__FrameType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError_frame_set" "', argument " "2"" of type '" "six::FrameType *""'"); 
  }
  arg2 = reinterpret_cast< six::FrameType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->frame = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_frame_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::FrameType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_frame_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_frame_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (six::FrameType *)& ((*arg1)->frame);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_scene__FrameType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_p1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_p1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->p1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_p1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->p1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_p2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_p2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->p2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_p2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->p2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_p3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_p3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->p3 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_p3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_p3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_p3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->p3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_v1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->v1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->v1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_v2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_v2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->v2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_v2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->v2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_v3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v3_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyablePosVelError_v3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->v3 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_v3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_v3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_v3_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->v3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_corrCoefs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  mem::ScopedCopyablePtr< six::CorrCoefs > *arg2 = (mem::ScopedCopyablePtr< six::CorrCoefs > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_corrCoefs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_corrCoefs_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError_corrCoefs_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::CorrCoefs > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::CorrCoefs > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->corrCoefs = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_corrCoefs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CorrCoefs > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_corrCoefs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_corrCoefs_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::CorrCoefs > *)& ((*arg1)->corrCoefs);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_positionDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyablePosVelError_positionDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_positionDecorr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyablePosVelError_positionDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->positionDecorr = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyablePosVelError_positionDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::PosVelError > *arg1 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyablePosVelError_positionDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyablePosVelError_positionDecorr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp1);
  {
    try{
      result = (six::DecorrType *)& ((*arg1)->positionDecorr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyablePosVelError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadarSensor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::RadarSensor *arg1 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRadarSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRadarSensor" "', argument " "1"" of type '" "six::RadarSensor *""'"); 
  }
  arg1 = reinterpret_cast< six::RadarSensor * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)new mem::ScopedCopyablePtr< six::RadarSensor >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadarSensor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRadarSensor")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)new mem::ScopedCopyablePtr< six::RadarSensor >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadarSensor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRadarSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRadarSensor" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRadarSensor" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)new mem::ScopedCopyablePtr< six::RadarSensor >((mem::ScopedCopyablePtr< six::RadarSensor > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRadarSensor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRadarSensor__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__RadarSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRadarSensor__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRadarSensor__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableRadarSensor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::RadarSensor >(six::RadarSensor *)\n"
    "    mem::ScopedCopyablePtr< six::RadarSensor >()\n"
    "    mem::ScopedCopyablePtr< six::RadarSensor >(mem::ScopedCopyablePtr< six::RadarSensor > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      result = (six::RadarSensor *)((mem::ScopedCopyablePtr< six::RadarSensor > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      {
        six::RadarSensor &_result_ref = ((mem::ScopedCopyablePtr< six::RadarSensor > const *)arg1)->operator *();
        result = (six::RadarSensor *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::RadarSensor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      result = (six::RadarSensor *)((mem::ScopedCopyablePtr< six::RadarSensor > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  six::RadarSensor *arg2 = (six::RadarSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__RadarSensor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadarSensor_reset" "', argument " "2"" of type '" "six::RadarSensor *""'"); 
  }
  arg2 = reinterpret_cast< six::RadarSensor * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRadarSensor_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__RadarSensor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRadarSensor_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableRadarSensor_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::RadarSensor > *,six::RadarSensor *)\n"
    "    reset(mem::ScopedCopyablePtr< six::RadarSensor > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRadarSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRadarSensor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRadarSensor" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_rangeBias_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_rangeBias_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_rangeBias_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRadarSensor_rangeBias_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->rangeBias = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_rangeBias_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_rangeBias_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_rangeBias_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->rangeBias);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_clockFreqSF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_clockFreqSF_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_clockFreqSF_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRadarSensor_clockFreqSF_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->clockFreqSF = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_clockFreqSF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_clockFreqSF_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_clockFreqSF_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->clockFreqSF);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_transmitFreqSF_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_transmitFreqSF_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_transmitFreqSF_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRadarSensor_transmitFreqSF_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->transmitFreqSF = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_transmitFreqSF_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_transmitFreqSF_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_transmitFreqSF_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->transmitFreqSF);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_rangeBiasDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRadarSensor_rangeBiasDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_rangeBiasDecorr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRadarSensor_rangeBiasDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->rangeBiasDecorr = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRadarSensor_rangeBiasDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg1 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRadarSensor_rangeBiasDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRadarSensor_rangeBiasDecorr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp1);
  {
    try{
      result = (six::DecorrType *)& ((*arg1)->rangeBiasDecorr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableRadarSensor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableTropoError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::TropoError *arg1 = (six::TropoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableTropoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableTropoError" "', argument " "1"" of type '" "six::TropoError *""'"); 
  }
  arg1 = reinterpret_cast< six::TropoError * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::TropoError > *)new mem::ScopedCopyablePtr< six::TropoError >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableTropoError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableTropoError")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::TropoError > *)new mem::ScopedCopyablePtr< six::TropoError >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableTropoError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableTropoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableTropoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableTropoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::TropoError > *)new mem::ScopedCopyablePtr< six::TropoError >((mem::ScopedCopyablePtr< six::TropoError > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableTropoError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableTropoError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__TropoError, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableTropoError__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableTropoError__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableTropoError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::TropoError >(six::TropoError *)\n"
    "    mem::ScopedCopyablePtr< six::TropoError >()\n"
    "    mem::ScopedCopyablePtr< six::TropoError >(mem::ScopedCopyablePtr< six::TropoError > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::TropoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      result = (six::TropoError *)((mem::ScopedCopyablePtr< six::TropoError > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__TropoError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::TropoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      {
        six::TropoError &_result_ref = ((mem::ScopedCopyablePtr< six::TropoError > const *)arg1)->operator *();
        result = (six::TropoError *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__TropoError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::TropoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      result = (six::TropoError *)((mem::ScopedCopyablePtr< six::TropoError > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__TropoError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  six::TropoError *arg2 = (six::TropoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__TropoError, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableTropoError_reset" "', argument " "2"" of type '" "six::TropoError *""'"); 
  }
  arg2 = reinterpret_cast< six::TropoError * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableTropoError_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__TropoError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableTropoError_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableTropoError_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::TropoError > *,six::TropoError *)\n"
    "    reset(mem::ScopedCopyablePtr< six::TropoError > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableTropoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableTropoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableTropoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError_tropoRangeVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeVertical_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableTropoError_tropoRangeVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->tropoRangeVertical = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_tropoRangeVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeVertical_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->tropoRangeVertical);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeSlant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError_tropoRangeSlant_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeSlant_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableTropoError_tropoRangeSlant_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->tropoRangeSlant = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeSlant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_tropoRangeSlant_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeSlant_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->tropoRangeSlant);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableTropoError_tropoRangeDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeDecorr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableTropoError_tropoRangeDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->tropoRangeDecorr = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableTropoError_tropoRangeDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::TropoError > *arg1 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableTropoError_tropoRangeDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableTropoError_tropoRangeDecorr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp1);
  {
    try{
      result = (six::DecorrType *)& ((*arg1)->tropoRangeDecorr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableTropoError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableIonoError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::IonoError *arg1 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableIonoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableIonoError" "', argument " "1"" of type '" "six::IonoError *""'"); 
  }
  arg1 = reinterpret_cast< six::IonoError * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::IonoError > *)new mem::ScopedCopyablePtr< six::IonoError >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableIonoError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableIonoError")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::IonoError > *)new mem::ScopedCopyablePtr< six::IonoError >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableIonoError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableIonoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableIonoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableIonoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::IonoError > *)new mem::ScopedCopyablePtr< six::IonoError >((mem::ScopedCopyablePtr< six::IonoError > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableIonoError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableIonoError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__IonoError, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableIonoError__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableIonoError__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableIonoError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::IonoError >(six::IonoError *)\n"
    "    mem::ScopedCopyablePtr< six::IonoError >()\n"
    "    mem::ScopedCopyablePtr< six::IonoError >(mem::ScopedCopyablePtr< six::IonoError > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::IonoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      result = (six::IonoError *)((mem::ScopedCopyablePtr< six::IonoError > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__IonoError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::IonoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      {
        six::IonoError &_result_ref = ((mem::ScopedCopyablePtr< six::IonoError > const *)arg1)->operator *();
        result = (six::IonoError *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__IonoError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::IonoError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      result = (six::IonoError *)((mem::ScopedCopyablePtr< six::IonoError > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__IonoError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  six::IonoError *arg2 = (six::IonoError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__IonoError, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableIonoError_reset" "', argument " "2"" of type '" "six::IonoError *""'"); 
  }
  arg2 = reinterpret_cast< six::IonoError * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableIonoError_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__IonoError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableIonoError_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableIonoError_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::IonoError > *,six::IonoError *)\n"
    "    reset(mem::ScopedCopyablePtr< six::IonoError > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableIonoError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableIonoError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableIonoError" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_ionoRangeVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeVertical_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableIonoError_ionoRangeVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->ionoRangeVertical = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_ionoRangeVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeVertical_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->ionoRangeVertical);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeRateVertical_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_ionoRangeRateVertical_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeRateVertical_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableIonoError_ionoRangeRateVertical_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->ionoRangeRateVertical = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeRateVertical_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_ionoRangeRateVertical_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeRateVertical_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->ionoRangeRateVertical);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRgRgRateCC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_ionoRgRgRateCC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRgRgRateCC_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableIonoError_ionoRgRgRateCC_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->ionoRgRgRateCC = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRgRgRateCC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_ionoRgRgRateCC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRgRgRateCC_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->ionoRgRgRateCC);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeVertDecorr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  six::DecorrType *arg2 = (six::DecorrType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableIonoError_ionoRangeVertDecorr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeVertDecorr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__DecorrType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableIonoError_ionoRangeVertDecorr_set" "', argument " "2"" of type '" "six::DecorrType *""'"); 
  }
  arg2 = reinterpret_cast< six::DecorrType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->ionoRangeVertDecorr = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableIonoError_ionoRangeVertDecorr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::IonoError > *arg1 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::DecorrType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableIonoError_ionoRangeVertDecorr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableIonoError_ionoRangeVertDecorr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp1);
  {
    try{
      result = (six::DecorrType *)& ((*arg1)->ionoRangeVertDecorr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__DecorrType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableIonoError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableCompositeSCP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::CompositeSCP *arg1 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableCompositeSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableCompositeSCP" "', argument " "1"" of type '" "six::CompositeSCP *""'"); 
  }
  arg1 = reinterpret_cast< six::CompositeSCP * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)new mem::ScopedCopyablePtr< six::CompositeSCP >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCompositeSCP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableCompositeSCP")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)new mem::ScopedCopyablePtr< six::CompositeSCP >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCompositeSCP__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::CompositeSCP > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableCompositeSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableCompositeSCP" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableCompositeSCP" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::CompositeSCP > *)new mem::ScopedCopyablePtr< six::CompositeSCP >((mem::ScopedCopyablePtr< six::CompositeSCP > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableCompositeSCP(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableCompositeSCP__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__CompositeSCP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableCompositeSCP__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableCompositeSCP__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableCompositeSCP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::CompositeSCP >(six::CompositeSCP *)\n"
    "    mem::ScopedCopyablePtr< six::CompositeSCP >()\n"
    "    mem::ScopedCopyablePtr< six::CompositeSCP >(mem::ScopedCopyablePtr< six::CompositeSCP > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      result = (six::CompositeSCP *)((mem::ScopedCopyablePtr< six::CompositeSCP > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      {
        six::CompositeSCP &_result_ref = ((mem::ScopedCopyablePtr< six::CompositeSCP > const *)arg1)->operator *();
        result = (six::CompositeSCP *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      result = (six::CompositeSCP *)((mem::ScopedCopyablePtr< six::CompositeSCP > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  six::CompositeSCP *arg2 = (six::CompositeSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__CompositeSCP, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableCompositeSCP_reset" "', argument " "2"" of type '" "six::CompositeSCP *""'"); 
  }
  arg2 = reinterpret_cast< six::CompositeSCP * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableCompositeSCP_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__CompositeSCP, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableCompositeSCP_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableCompositeSCP_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::CompositeSCP > *,six::CompositeSCP *)\n"
    "    reset(mem::ScopedCopyablePtr< six::CompositeSCP > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableCompositeSCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableCompositeSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableCompositeSCP" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_scpType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  six::CompositeSCP::SCPType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_scpType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_scpType_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCompositeSCP_scpType_set" "', argument " "2"" of type '" "six::CompositeSCP::SCPType""'");
  } 
  arg2 = static_cast< six::CompositeSCP::SCPType >(val2);
  {
    try{
      if (arg1) (*arg1)->scpType = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_scpType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::CompositeSCP::SCPType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_scpType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_scpType_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      result = (six::CompositeSCP::SCPType) ((*arg1)->scpType);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_xErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_xErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_xErr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCompositeSCP_xErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->xErr = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_xErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_xErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_xErr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->xErr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_yErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_yErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_yErr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCompositeSCP_yErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->yErr = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_yErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_yErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_yErr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->yErr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_xyErr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableCompositeSCP_xyErr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_xyErr_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableCompositeSCP_xyErr_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->xyErr = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableCompositeSCP_xyErr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::CompositeSCP > *arg1 = (mem::ScopedCopyablePtr< six::CompositeSCP > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableCompositeSCP_xyErr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableCompositeSCP_xyErr_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::CompositeSCP > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::CompositeSCP > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->xyErr);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableCompositeSCP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableComponents__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::Components *arg1 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableComponents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableComponents" "', argument " "1"" of type '" "six::Components *""'"); 
  }
  arg1 = reinterpret_cast< six::Components * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::Components > *)new mem::ScopedCopyablePtr< six::Components >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableComponents__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableComponents")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::Components > *)new mem::ScopedCopyablePtr< six::Components >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableComponents__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::Components > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableComponents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableComponents" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableComponents" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::Components > *)new mem::ScopedCopyablePtr< six::Components >((mem::ScopedCopyablePtr< six::Components > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableComponents(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableComponents__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__Components, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableComponents__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableComponents__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableComponents'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::Components >(six::Components *)\n"
    "    mem::ScopedCopyablePtr< six::Components >()\n"
    "    mem::ScopedCopyablePtr< six::Components >(mem::ScopedCopyablePtr< six::Components > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Components *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      result = (six::Components *)((mem::ScopedCopyablePtr< six::Components > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Components, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Components *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      {
        six::Components &_result_ref = ((mem::ScopedCopyablePtr< six::Components > const *)arg1)->operator *();
        result = (six::Components *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Components, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Components *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      result = (six::Components *)((mem::ScopedCopyablePtr< six::Components > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__Components, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  six::Components *arg2 = (six::Components *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__Components, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_reset" "', argument " "2"" of type '" "six::Components *""'"); 
  }
  arg2 = reinterpret_cast< six::Components * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableComponents_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__Components, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableComponents_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableComponents_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::Components > *,six::Components *)\n"
    "    reset(mem::ScopedCopyablePtr< six::Components > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableComponents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableComponents" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_posVelError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *arg2 = (mem::ScopedCopyablePtr< six::PosVelError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_posVelError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_posVelError_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_posVelError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::PosVelError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::PosVelError > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->posVelError = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_posVelError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::PosVelError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_posVelError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_posVelError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::PosVelError > *)& ((*arg1)->posVelError);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_radarSensor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *arg2 = (mem::ScopedCopyablePtr< six::RadarSensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_radarSensor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_radarSensor_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_radarSensor_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::RadarSensor > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::RadarSensor > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->radarSensor = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_radarSensor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::RadarSensor > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_radarSensor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_radarSensor_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::RadarSensor > *)& ((*arg1)->radarSensor);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_tropoError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *arg2 = (mem::ScopedCopyablePtr< six::TropoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_tropoError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_tropoError_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_tropoError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::TropoError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::TropoError > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->tropoError = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_tropoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::TropoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_tropoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_tropoError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::TropoError > *)& ((*arg1)->tropoError);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__TropoError_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_ionoError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *arg2 = (mem::ScopedCopyablePtr< six::IonoError > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableComponents_ionoError_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_ionoError_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableComponents_ionoError_set" "', argument " "2"" of type '" "mem::ScopedCopyablePtr< six::IonoError > *""'"); 
  }
  arg2 = reinterpret_cast< mem::ScopedCopyablePtr< six::IonoError > * >(argp2);
  {
    try{
      if (arg1) (*arg1)->ionoError = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableComponents_ionoError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::Components > *arg1 = (mem::ScopedCopyablePtr< six::Components > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::IonoError > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableComponents_ionoError_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableComponents_ionoError_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::Components > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::Components > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::IonoError > *)& ((*arg1)->ionoError);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__IonoError_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableComponents_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__Components_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorMatchCollect_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_iterator" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_six_sicd_MatchCollect_Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___nonzero__" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_six_sicd_MatchCollect_Sg____nonzero__((std::vector< six::sicd::MatchCollect > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___len__" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = std_vector_Sl_six_sicd_MatchCollect_Sg____len__((std::vector< six::sicd::MatchCollect > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_pop" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_six_sicd_MatchCollect_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::sicd::MatchCollect >::value_type(static_cast< const std::vector< six::sicd::MatchCollect >::value_type& >(result))), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg2 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___getslice__" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___getslice__" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect___getslice__" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *)std_vector_Sl_six_sicd_MatchCollect_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg2 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg3 ;
  std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorMatchCollect___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___setslice__" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___setslice__" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect___setslice__" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val3);
  {
    std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *ptr = (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorMatchCollect___setslice__" "', argument " "4"" of type '" "std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect___setslice__" "', argument " "4"" of type '" "std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_six_sicd_MatchCollect_Sg____setslice__(arg1,arg2,arg3,(std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg2 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___delslice__" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___delslice__" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect___delslice__" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_six_sicd_MatchCollect_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___delitem__" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___delitem__" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_six_sicd_MatchCollect_Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::MatchCollect >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___getitem__" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___getitem__" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< six::sicd::MatchCollect >::value_type const &_result_ref = std_vector_Sl_six_sicd_MatchCollect_Sg____getitem__((std::vector< six::sicd::MatchCollect > const *)arg1,arg2);
          result = (std::vector< six::sicd::MatchCollect >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::difference_type arg2 ;
  std::vector< six::sicd::MatchCollect >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect___setitem__" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect___setitem__" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect___setitem__" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect___setitem__" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::MatchCollect >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_six_sicd_MatchCollect_Sg____setitem__(arg1,arg2,(six::sicd::MatchCollect const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_append" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchCollect_append" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_append" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::MatchCollect >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_six_sicd_MatchCollect_Sg__append(arg1,(six::sicd::MatchCollect const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorMatchCollect")) SWIG_fail;
  {
    try{
      result = (std::vector< six::sicd::MatchCollect > *)new std::vector< six::sicd::MatchCollect >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorMatchCollect",&obj0)) SWIG_fail;
  {
    std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *ptr = (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< six::sicd::MatchCollect > *)new std::vector< six::sicd::MatchCollect >((std::vector< six::sicd::MatchCollect > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_empty" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = (bool)((std::vector< six::sicd::MatchCollect > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_size" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::MatchCollect > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_clear" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_swap" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchCollect_swap" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_swap" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< six::sicd::MatchCollect > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_get_allocator" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::MatchCollect > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::sicd::MatchCollect >::allocator_type(static_cast< const std::vector< six::sicd::MatchCollect >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_begin" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::MatchCollect > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::MatchCollect >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_end" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::MatchCollect > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::MatchCollect >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_rbegin" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::MatchCollect > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::MatchCollect >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_rend" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::MatchCollect > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::MatchCollect >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorMatchCollect",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::sicd::MatchCollect >::size_type >(val1);
  {
    try{
      result = (std::vector< six::sicd::MatchCollect > *)new std::vector< six::sicd::MatchCollect >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_pop_back" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_resize" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect_resize" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::MatchCollect >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_erase" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::MatchCollect >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::iterator arg2 ;
  std::vector< six::sicd::MatchCollect >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::MatchCollect >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_erase" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_erase" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::MatchCollect >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorMatchCollect_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorMatchCollect_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorMatchCollect_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< six::sicd::MatchCollect > *,std::vector< six::sicd::MatchCollect >::iterator)\n"
    "    erase(std::vector< six::sicd::MatchCollect > *,std::vector< six::sicd::MatchCollect >::iterator,std::vector< six::sicd::MatchCollect >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect >::size_type arg1 ;
  std::vector< six::sicd::MatchCollect >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::MatchCollect > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorMatchCollect",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::sicd::MatchCollect >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorMatchCollect" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorMatchCollect" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::MatchCollect >::value_type * >(argp2);
  {
    try{
      result = (std::vector< six::sicd::MatchCollect > *)new std::vector< six::sicd::MatchCollect >(arg1,(std::vector< six::sicd::MatchCollect >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorMatchCollect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorMatchCollect__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorMatchCollect__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorMatchCollect__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorMatchCollect__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorMatchCollect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::sicd::MatchCollect >()\n"
    "    std::vector< six::sicd::MatchCollect >(std::vector< six::sicd::MatchCollect > const &)\n"
    "    std::vector< six::sicd::MatchCollect >(std::vector< six::sicd::MatchCollect >::size_type)\n"
    "    std::vector< six::sicd::MatchCollect >(std::vector< six::sicd::MatchCollect >::size_type,std::vector< six::sicd::MatchCollect >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_push_back" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorMatchCollect_push_back" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_push_back" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::MatchCollect >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< six::sicd::MatchCollect >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_front" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      {
        std::vector< six::sicd::MatchCollect >::value_type const &_result_ref = ((std::vector< six::sicd::MatchCollect > const *)arg1)->front();
        result = (std::vector< six::sicd::MatchCollect >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_back" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      {
        std::vector< six::sicd::MatchCollect >::value_type const &_result_ref = ((std::vector< six::sicd::MatchCollect > const *)arg1)->back();
        result = (std::vector< six::sicd::MatchCollect >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::size_type arg2 ;
  std::vector< six::sicd::MatchCollect >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_assign" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect_assign" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect_assign" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_assign" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::MatchCollect >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< six::sicd::MatchCollect >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::size_type arg2 ;
  std::vector< six::sicd::MatchCollect >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_resize" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect_resize" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect_resize" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_resize" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::MatchCollect >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< six::sicd::MatchCollect >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorMatchCollect_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchCollect_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorMatchCollect_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< six::sicd::MatchCollect > *,std::vector< six::sicd::MatchCollect >::size_type)\n"
    "    resize(std::vector< six::sicd::MatchCollect > *,std::vector< six::sicd::MatchCollect >::size_type,std::vector< six::sicd::MatchCollect >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::iterator arg2 ;
  std::vector< six::sicd::MatchCollect >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::MatchCollect >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorMatchCollect_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_insert" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_insert" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_insert" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorMatchCollect_insert" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_insert" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::MatchCollect >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< six::sicd::MatchCollect >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::MatchCollect >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::iterator arg2 ;
  std::vector< six::sicd::MatchCollect >::size_type arg3 ;
  std::vector< six::sicd::MatchCollect >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorMatchCollect_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_insert" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_insert" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorMatchCollect_insert" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorMatchCollect_insert" "', argument " "3"" of type '" "std::vector< six::sicd::MatchCollect >::size_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::MatchCollect >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorMatchCollect_insert" "', argument " "4"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorMatchCollect_insert" "', argument " "4"" of type '" "std::vector< six::sicd::MatchCollect >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< six::sicd::MatchCollect >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< six::sicd::MatchCollect >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorMatchCollect_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::MatchCollect >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorMatchCollect_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorMatchCollect_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< six::sicd::MatchCollect > *,std::vector< six::sicd::MatchCollect >::iterator,std::vector< six::sicd::MatchCollect >::value_type const &)\n"
    "    insert(std::vector< six::sicd::MatchCollect > *,std::vector< six::sicd::MatchCollect >::iterator,std::vector< six::sicd::MatchCollect >::size_type,std::vector< six::sicd::MatchCollect >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  std::vector< six::sicd::MatchCollect >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorMatchCollect_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_reserve" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorMatchCollect_reserve" "', argument " "2"" of type '" "std::vector< six::sicd::MatchCollect >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::MatchCollect >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorMatchCollect_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::MatchCollect >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorMatchCollect_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorMatchCollect_capacity" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::MatchCollect > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorMatchCollect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::MatchCollect > *arg1 = (std::vector< six::sicd::MatchCollect > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorMatchCollect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorMatchCollect" "', argument " "1"" of type '" "std::vector< six::sicd::MatchCollect > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::MatchCollect > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorMatchCollect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_iterator" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___nonzero__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____nonzero__((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___len__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____len__((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< mem::ScopedCopyablePtr< six::sicd::MatchType > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_pop" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___getslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___getslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType___getslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *)std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg3 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCopyableMatchType___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val3);
  {
    std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *ptr = (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType___setslice__" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___delslice__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___delslice__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType___delslice__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___delitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___delitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___getitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___getitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val2);
  {
    try{
      try {
        {
          std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &_result_ref = std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____getitem__((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1,arg2);
          result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType___setitem__" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type * >(argp3);
  {
    try{
      try {
        std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg____setitem__(arg1,arg2,(mem::ScopedCopyablePtr< six::sicd::MatchType > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_append" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableMatchType_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_append" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type * >(argp2);
  {
    try{
      std_vector_Sl_mem_ScopedCopyablePtr_Sl_six_sicd_MatchType_Sg__Sg__append(arg1,(mem::ScopedCopyablePtr< six::sicd::MatchType > const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorScopedCopyableMatchType")) SWIG_fail;
  {
    try{
      result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *)new std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCopyableMatchType",&obj0)) SWIG_fail;
  {
    std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *ptr = (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *)new std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_empty" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = (bool)((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_size" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_clear" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_swap" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableMatchType_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_swap" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_get_allocator" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::allocator_type(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_begin" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_end" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_rbegin" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_rend" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorScopedCopyableMatchType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type >(val1);
  {
    try{
      result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *)new std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_pop_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_erase" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCopyableMatchType_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator)\n"
    "    erase(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type arg1 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorScopedCopyableMatchType",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorScopedCopyableMatchType" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorScopedCopyableMatchType" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type * >(argp2);
  {
    try{
      result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *)new std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >(arg1,(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorScopedCopyableMatchType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorScopedCopyableMatchType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorScopedCopyableMatchType__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorScopedCopyableMatchType__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorScopedCopyableMatchType__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorScopedCopyableMatchType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >()\n"
    "    std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const &)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type)\n"
    "    std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_push_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorScopedCopyableMatchType_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_push_back" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type * >(argp2);
  {
    try{
      (arg1)->push_back((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_front" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &_result_ref = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->front();
        result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_back" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      {
        std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &_result_ref = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->back();
        result = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_assign" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType_assign" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_assign" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type * >(argp3);
  {
    try{
      (arg1)->assign(arg2,(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_resize" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type * >(argp3);
  {
    try{
      (arg1)->resize(arg2,(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorScopedCopyableMatchType_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCopyableMatchType_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type)\n"
    "    resize(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorScopedCopyableMatchType_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type * >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)*arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator arg2 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type arg3 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorScopedCopyableMatchType_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "3"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorScopedCopyableMatchType_insert" "', argument " "4"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type * >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)*arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorScopedCopyableMatchType_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorScopedCopyableMatchType_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorScopedCopyableMatchType_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)\n"
    "    insert(std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type,std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorScopedCopyableMatchType_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_reserve" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorScopedCopyableMatchType_reserve" "', argument " "2"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorScopedCopyableMatchType_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorScopedCopyableMatchType_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorScopedCopyableMatchType_capacity" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      result = ((std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorScopedCopyableMatchType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *arg1 = (std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorScopedCopyableMatchType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorScopedCopyableMatchType" "', argument " "1"" of type '" "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorScopedCopyableMatchType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMAT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMAT *arg1 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRMAT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRMAT" "', argument " "1"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMAT * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMAT > *)new mem::ScopedCopyablePtr< six::sicd::RMAT >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMAT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRMAT")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMAT > *)new mem::ScopedCopyablePtr< six::sicd::RMAT >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMAT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRMAT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRMAT" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRMAT" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMAT > *)new mem::ScopedCopyablePtr< six::sicd::RMAT >((mem::ScopedCopyablePtr< six::sicd::RMAT > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMAT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRMAT__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__RMAT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRMAT__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRMAT__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableRMAT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMAT >(six::sicd::RMAT *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMAT >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMAT >(mem::ScopedCopyablePtr< six::sicd::RMAT > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMAT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (six::sicd::RMAT *)((mem::ScopedCopyablePtr< six::sicd::RMAT > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMAT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      {
        six::sicd::RMAT &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::RMAT > const *)arg1)->operator *();
        result = (six::sicd::RMAT *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMAT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (six::sicd::RMAT *)((mem::ScopedCopyablePtr< six::sicd::RMAT > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  six::sicd::RMAT *arg2 = (six::sicd::RMAT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__RMAT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMAT_reset" "', argument " "2"" of type '" "six::sicd::RMAT *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::RMAT * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRMAT_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__RMAT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRMAT_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableRMAT_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RMAT > *,six::sicd::RMAT *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RMAT > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRMAT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRMAT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRMAT" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_refTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_refTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_refTime_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRMAT_refTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->refTime = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_refTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_refTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_refTime_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->refTime);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_refPos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_refPos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_refPos_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMAT_refPos_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->refPos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_refPos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_refPos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_refPos_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->refPos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_refVel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_refVel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_refVel_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMAT_refVel_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->refVel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_refVel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_refVel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_refVel_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->refVel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_distRefLinePoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_distRefLinePoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_distRefLinePoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMAT_distRefLinePoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->distRefLinePoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_distRefLinePoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_distRefLinePoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_distRefLinePoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->distRefLinePoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_cosDCACOAPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_cosDCACOAPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_cosDCACOAPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMAT_cosDCACOAPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->cosDCACOAPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_cosDCACOAPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_cosDCACOAPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_cosDCACOAPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->cosDCACOAPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_kx1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_kx1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_kx1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRMAT_kx1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->kx1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_kx1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_kx1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_kx1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->kx1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_kx2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_kx2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_kx2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRMAT_kx2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->kx2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_kx2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_kx2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_kx2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->kx2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_ky1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_ky1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_ky1_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRMAT_ky1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->ky1 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_ky1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_ky1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_ky1_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->ky1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_ky2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_ky2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_ky2_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRMAT_ky2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->ky2 = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_ky2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_ky2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_ky2_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->ky2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_dopConeAngleRef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMAT_dopConeAngleRef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_dopConeAngleRef_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRMAT_dopConeAngleRef_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->dopConeAngleRef = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMAT_dopConeAngleRef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMAT > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMAT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMAT_dopConeAngleRef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMAT_dopConeAngleRef_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMAT > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMAT > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->dopConeAngleRef);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableRMAT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMCR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::RMCR *arg1 = (six::sicd::RMCR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRMCR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRMCR" "', argument " "1"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::RMCR * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMCR > *)new mem::ScopedCopyablePtr< six::sicd::RMCR >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMCR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableRMCR")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMCR > *)new mem::ScopedCopyablePtr< six::sicd::RMCR >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMCR__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableRMCR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableRMCR" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableRMCR" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::RMCR > *)new mem::ScopedCopyablePtr< six::sicd::RMCR >((mem::ScopedCopyablePtr< six::sicd::RMCR > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableRMCR(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableRMCR__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__RMCR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRMCR__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableRMCR__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableRMCR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMCR >(six::sicd::RMCR *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMCR >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::RMCR >(mem::ScopedCopyablePtr< six::sicd::RMCR > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMCR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMCR_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      result = (six::sicd::RMCR *)((mem::ScopedCopyablePtr< six::sicd::RMCR > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMCR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMCR___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      {
        six::sicd::RMCR &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::RMCR > const *)arg1)->operator *();
        result = (six::sicd::RMCR *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::RMCR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMCR___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      result = (six::sicd::RMCR *)((mem::ScopedCopyablePtr< six::sicd::RMCR > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  six::sicd::RMCR *arg2 = (six::sicd::RMCR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMCR_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__RMCR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMCR_reset" "', argument " "2"" of type '" "six::sicd::RMCR *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::RMCR * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMCR_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableRMCR_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__RMCR, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableRMCR_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableRMCR_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RMCR > *,six::sicd::RMCR *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::RMCR > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableRMCR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableRMCR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableRMCR" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_refPos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMCR_refPos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_refPos_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMCR_refPos_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->refPos = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_refPos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMCR_refPos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_refPos_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->refPos);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_refVel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  six::Vector3 *arg2 = (six::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMCR_refVel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_refVel_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableRMCR_refVel_set" "', argument " "2"" of type '" "six::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< six::Vector3 * >(argp2);
  {
    try{
      if (arg1) (*arg1)->refVel = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_refVel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMCR_refVel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_refVel_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      result = (six::Vector3 *)& ((*arg1)->refVel);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__linear__VectorNT_3_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_dopConeAngleRef_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableRMCR_dopConeAngleRef_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_dopConeAngleRef_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableRMCR_dopConeAngleRef_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->dopConeAngleRef = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableRMCR_dopConeAngleRef_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::RMCR > *arg1 = (mem::ScopedCopyablePtr< six::sicd::RMCR > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableRMCR_dopConeAngleRef_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableRMCR_dopConeAngleRef_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::RMCR > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::RMCR > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->dopConeAngleRef);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableRMCR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScopedCopyableINCA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  six::sicd::INCA *arg1 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::INCA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableINCA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableINCA" "', argument " "1"" of type '" "six::sicd::INCA *""'"); 
  }
  arg1 = reinterpret_cast< six::sicd::INCA * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::INCA > *)new mem::ScopedCopyablePtr< six::sicd::INCA >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableINCA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScopedCopyableINCA")) SWIG_fail;
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::INCA > *)new mem::ScopedCopyablePtr< six::sicd::INCA >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableINCA__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  mem::ScopedCopyablePtr< six::sicd::INCA > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScopedCopyableINCA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScopedCopyableINCA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScopedCopyableINCA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > const &""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (mem::ScopedCopyablePtr< six::sicd::INCA > *)new mem::ScopedCopyablePtr< six::sicd::INCA >((mem::ScopedCopyablePtr< six::sicd::INCA > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScopedCopyableINCA(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScopedCopyableINCA__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_six__sicd__INCA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableINCA__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScopedCopyableINCA__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScopedCopyableINCA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mem::ScopedCopyablePtr< six::sicd::INCA >(six::sicd::INCA *)\n"
    "    mem::ScopedCopyablePtr< six::sicd::INCA >()\n"
    "    mem::ScopedCopyablePtr< six::sicd::INCA >(mem::ScopedCopyablePtr< six::sicd::INCA > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::INCA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (six::sicd::INCA *)((mem::ScopedCopyablePtr< six::sicd::INCA > const *)arg1)->get();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::INCA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA___ref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      {
        six::sicd::INCA &_result_ref = ((mem::ScopedCopyablePtr< six::sicd::INCA > const *)arg1)->operator *();
        result = (six::sicd::INCA *) &_result_ref;
      }
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::sicd::INCA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA___deref__" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > const *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (six::sicd::INCA *)((mem::ScopedCopyablePtr< six::sicd::INCA > const *)arg1)->operator ->();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  six::sicd::INCA *arg2 = (six::sicd::INCA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableINCA_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__sicd__INCA, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableINCA_reset" "', argument " "2"" of type '" "six::sicd::INCA *""'"); 
  }
  arg2 = reinterpret_cast< six::sicd::INCA * >(argp2);
  {
    try{
      (arg1)->reset(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_reset" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      (arg1)->reset();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_reset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScopedCopyableINCA_reset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_six__sicd__INCA, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScopedCopyableINCA_reset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScopedCopyableINCA_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::INCA > *,six::sicd::INCA *)\n"
    "    reset(mem::ScopedCopyablePtr< six::sicd::INCA > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScopedCopyableINCA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScopedCopyableINCA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScopedCopyableINCA" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_timeCAPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  six::Poly1D *arg2 = (six::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableINCA_timeCAPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_timeCAPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableINCA_timeCAPoly_set" "', argument " "2"" of type '" "six::Poly1D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly1D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->timeCAPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_timeCAPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly1D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA_timeCAPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_timeCAPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (six::Poly1D *)& ((*arg1)->timeCAPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__OneDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_rangeCA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableINCA_rangeCA_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_rangeCA_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableINCA_rangeCA_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->rangeCA = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_rangeCA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA_rangeCA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_rangeCA_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->rangeCA);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_freqZero_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableINCA_freqZero_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_freqZero_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScopedCopyableINCA_freqZero_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try{
      if (arg1) (*arg1)->freqZero = arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_freqZero_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA_freqZero_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_freqZero_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (double) ((*arg1)->freqZero);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_dopplerRateScaleFactorPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableINCA_dopplerRateScaleFactorPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_dopplerRateScaleFactorPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableINCA_dopplerRateScaleFactorPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->dopplerRateScaleFactorPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_dopplerRateScaleFactorPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA_dopplerRateScaleFactorPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_dopplerRateScaleFactorPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->dopplerRateScaleFactorPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_dopplerCentroidPoly_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  six::Poly2D *arg2 = (six::Poly2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableINCA_dopplerCentroidPoly_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_dopplerCentroidPoly_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableINCA_dopplerCentroidPoly_set" "', argument " "2"" of type '" "six::Poly2D *""'"); 
  }
  arg2 = reinterpret_cast< six::Poly2D * >(argp2);
  {
    try{
      if (arg1) (*arg1)->dopplerCentroidPoly = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_dopplerCentroidPoly_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::Poly2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA_dopplerCentroidPoly_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_dopplerCentroidPoly_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (six::Poly2D *)& ((*arg1)->dopplerCentroidPoly);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_math__poly__TwoDT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_dopplerCentroidCOA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  six::BooleanType *arg2 = (six::BooleanType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScopedCopyableINCA_dopplerCentroidCOA_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_dopplerCentroidCOA_set" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_six__BooleanType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScopedCopyableINCA_dopplerCentroidCOA_set" "', argument " "2"" of type '" "six::BooleanType *""'"); 
  }
  arg2 = reinterpret_cast< six::BooleanType * >(argp2);
  {
    try{
      if (arg1) (*arg1)->dopplerCentroidCOA = *arg2;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScopedCopyableINCA_dopplerCentroidCOA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mem::ScopedCopyablePtr< six::sicd::INCA > *arg1 = (mem::ScopedCopyablePtr< six::sicd::INCA > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  six::BooleanType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScopedCopyableINCA_dopplerCentroidCOA_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScopedCopyableINCA_dopplerCentroidCOA_get" "', argument " "1"" of type '" "mem::ScopedCopyablePtr< six::sicd::INCA > *""'"); 
  }
  arg1 = reinterpret_cast< mem::ScopedCopyablePtr< six::sicd::INCA > * >(argp1);
  {
    try{
      result = (six::BooleanType *)& ((*arg1)->dopplerCentroidCOA);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_six__BooleanType, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScopedCopyableINCA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorTimelineSet_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_iterator" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = (swig::PySwigIterator *)std_vector_Sl_six_sicd_TimelineSet_Sm__Sg__iterator(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet___nonzero__" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____nonzero__((std::vector< six::sicd::TimelineSet * > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet___len__" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____len__((std::vector< six::sicd::TimelineSet * > const *)arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_pop" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      try {
        result = (std::vector< six::sicd::TimelineSet * >::value_type)std_vector_Sl_six_sicd_TimelineSet_Sm__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg2 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTimelineSet___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet___getslice__" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet___getslice__" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorTimelineSet___getslice__" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *)std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg2 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg3 ;
  std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorTimelineSet___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet___setslice__" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet___setslice__" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorTimelineSet___setslice__" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val3);
  {
    std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > > *ptr = (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorTimelineSet___setslice__" "', argument " "4"" of type '" "std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorTimelineSet___setslice__" "', argument " "4"" of type '" "std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg2 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTimelineSet___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet___delslice__" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet___delslice__" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorTimelineSet___delslice__" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTimelineSet___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet___delitem__" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet___delitem__" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::TimelineSet * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTimelineSet___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet___getitem__" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet___getitem__" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< six::sicd::TimelineSet * >::value_type)std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____getitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::difference_type arg2 ;
  std::vector< six::sicd::TimelineSet * >::value_type arg3 = (std::vector< six::sicd::TimelineSet * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTimelineSet___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet___setitem__" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet___setitem__" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorTimelineSet___setitem__" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::TimelineSet * >::value_type >(argp3);
  {
    try{
      try {
        std_vector_Sl_six_sicd_TimelineSet_Sm__Sg____setitem__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::value_type arg2 = (std::vector< six::sicd::TimelineSet * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTimelineSet_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_append" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorTimelineSet_append" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::TimelineSet * >::value_type >(argp2);
  {
    try{
      std_vector_Sl_six_sicd_TimelineSet_Sm__Sg__append(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTimelineSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorTimelineSet")) SWIG_fail;
  {
    try{
      result = (std::vector< six::sicd::TimelineSet * > *)new std::vector< six::sicd::TimelineSet * >();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTimelineSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorTimelineSet",&obj0)) SWIG_fail;
  {
    std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > > *ptr = (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorTimelineSet" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorTimelineSet" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< six::sicd::TimelineSet * > *)new std::vector< six::sicd::TimelineSet * >((std::vector< six::sicd::TimelineSet * > const &)*arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_empty" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = (bool)((std::vector< six::sicd::TimelineSet * > const *)arg1)->empty();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_size" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::TimelineSet * > const *)arg1)->size();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_clear" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      (arg1)->clear();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTimelineSet_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_swap" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorTimelineSet_swap" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorTimelineSet_swap" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< six::sicd::TimelineSet * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_get_allocator" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::TimelineSet * > const *)arg1)->get_allocator();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< six::sicd::TimelineSet * >::allocator_type(static_cast< const std::vector< six::sicd::TimelineSet * >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_begin" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::TimelineSet * > const *)arg1)->begin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::TimelineSet * >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_end" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::TimelineSet * > const *)arg1)->end();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::TimelineSet * >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_rbegin" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::TimelineSet * > const *)arg1)->rbegin();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::TimelineSet * >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_rend" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::TimelineSet * > const *)arg1)->rend();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::TimelineSet * >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTimelineSet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorTimelineSet",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorTimelineSet" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::sicd::TimelineSet * >::size_type >(val1);
  {
    try{
      result = (std::vector< six::sicd::TimelineSet * > *)new std::vector< six::sicd::TimelineSet * >(arg1);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_pop_back" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTimelineSet_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_resize" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet_resize" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::TimelineSet * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTimelineSet_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_erase" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_erase" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_erase" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::TimelineSet * >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::iterator arg2 ;
  std::vector< six::sicd::TimelineSet * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::TimelineSet * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTimelineSet_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_erase" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_erase" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_erase" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_erase" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_erase" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::TimelineSet * >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorTimelineSet_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorTimelineSet_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorTimelineSet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< six::sicd::TimelineSet * > *,std::vector< six::sicd::TimelineSet * >::iterator)\n"
    "    erase(std::vector< six::sicd::TimelineSet * > *,std::vector< six::sicd::TimelineSet * >::iterator,std::vector< six::sicd::TimelineSet * >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTimelineSet__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * >::size_type arg1 ;
  std::vector< six::sicd::TimelineSet * >::value_type arg2 = (std::vector< six::sicd::TimelineSet * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< six::sicd::TimelineSet * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorTimelineSet",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorTimelineSet" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< six::sicd::TimelineSet * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorTimelineSet" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::TimelineSet * >::value_type >(argp2);
  {
    try{
      result = (std::vector< six::sicd::TimelineSet * > *)new std::vector< six::sicd::TimelineSet * >(arg1,arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTimelineSet(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorTimelineSet__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorTimelineSet__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorTimelineSet__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorTimelineSet__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorTimelineSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< six::sicd::TimelineSet * >()\n"
    "    std::vector< six::sicd::TimelineSet * >(std::vector< six::sicd::TimelineSet * > const &)\n"
    "    std::vector< six::sicd::TimelineSet * >(std::vector< six::sicd::TimelineSet * >::size_type)\n"
    "    std::vector< six::sicd::TimelineSet * >(std::vector< six::sicd::TimelineSet * >::size_type,std::vector< six::sicd::TimelineSet * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::value_type arg2 = (std::vector< six::sicd::TimelineSet * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTimelineSet_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_push_back" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorTimelineSet_push_back" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::value_type""'"); 
  }
  arg2 = reinterpret_cast< std::vector< six::sicd::TimelineSet * >::value_type >(argp2);
  {
    try{
      (arg1)->push_back(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_front" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = (std::vector< six::sicd::TimelineSet * >::value_type)((std::vector< six::sicd::TimelineSet * > const *)arg1)->front();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_back" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = (std::vector< six::sicd::TimelineSet * >::value_type)((std::vector< six::sicd::TimelineSet * > const *)arg1)->back();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::size_type arg2 ;
  std::vector< six::sicd::TimelineSet * >::value_type arg3 = (std::vector< six::sicd::TimelineSet * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTimelineSet_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_assign" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet_assign" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorTimelineSet_assign" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::TimelineSet * >::value_type >(argp3);
  {
    try{
      (arg1)->assign(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::size_type arg2 ;
  std::vector< six::sicd::TimelineSet * >::value_type arg3 = (std::vector< six::sicd::TimelineSet * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTimelineSet_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_resize" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet_resize" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorTimelineSet_resize" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::TimelineSet * >::value_type >(argp3);
  {
    try{
      (arg1)->resize(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorTimelineSet_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorTimelineSet_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorTimelineSet_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< six::sicd::TimelineSet * > *,std::vector< six::sicd::TimelineSet * >::size_type)\n"
    "    resize(std::vector< six::sicd::TimelineSet * > *,std::vector< six::sicd::TimelineSet * >::size_type,std::vector< six::sicd::TimelineSet * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::iterator arg2 ;
  std::vector< six::sicd::TimelineSet * >::value_type arg3 = (std::vector< six::sicd::TimelineSet * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< six::sicd::TimelineSet * >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTimelineSet_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_insert" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_insert" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_insert" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorTimelineSet_insert" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::value_type""'"); 
  }
  arg3 = reinterpret_cast< std::vector< six::sicd::TimelineSet * >::value_type >(argp3);
  {
    try{
      result = (arg1)->insert(arg2,arg3);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< six::sicd::TimelineSet * >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::iterator arg2 ;
  std::vector< six::sicd::TimelineSet * >::size_type arg3 ;
  std::vector< six::sicd::TimelineSet * >::value_type arg4 = (std::vector< six::sicd::TimelineSet * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorTimelineSet_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_insert" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_insert" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorTimelineSet_insert" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorTimelineSet_insert" "', argument " "3"" of type '" "std::vector< six::sicd::TimelineSet * >::size_type""'");
  } 
  arg3 = static_cast< std::vector< six::sicd::TimelineSet * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorTimelineSet_insert" "', argument " "4"" of type '" "std::vector< six::sicd::TimelineSet * >::value_type""'"); 
  }
  arg4 = reinterpret_cast< std::vector< six::sicd::TimelineSet * >::value_type >(argp4);
  {
    try{
      (arg1)->insert(arg2,arg3,arg4);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorTimelineSet_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<six::sicd::TimelineSet*,std::allocator< six::sicd::TimelineSet * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< six::sicd::TimelineSet * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorTimelineSet_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'VectorTimelineSet_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< six::sicd::TimelineSet * > *,std::vector< six::sicd::TimelineSet * >::iterator,std::vector< six::sicd::TimelineSet * >::value_type)\n"
    "    insert(std::vector< six::sicd::TimelineSet * > *,std::vector< six::sicd::TimelineSet * >::iterator,std::vector< six::sicd::TimelineSet * >::size_type,std::vector< six::sicd::TimelineSet * >::value_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  std::vector< six::sicd::TimelineSet * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTimelineSet_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_reserve" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTimelineSet_reserve" "', argument " "2"" of type '" "std::vector< six::sicd::TimelineSet * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< six::sicd::TimelineSet * >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTimelineSet_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< six::sicd::TimelineSet * >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTimelineSet_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTimelineSet_capacity" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      result = ((std::vector< six::sicd::TimelineSet * > const *)arg1)->capacity();
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorTimelineSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< six::sicd::TimelineSet * > *arg1 = (std::vector< six::sicd::TimelineSet * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorTimelineSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorTimelineSet" "', argument " "1"" of type '" "std::vector< six::sicd::TimelineSet * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< six::sicd::TimelineSet * > * >(argp1);
  {
    try{
      delete arg1;
    } catch(except::Exception & e) {
      PyErr_SetString(PyExc_RuntimeError, e.getMessage().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorTimelineSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"delete_PySwigIterator", _wrap_delete_PySwigIterator, METH_VARARGS, (char *)"delete_PySwigIterator(PySwigIterator self)"},
	 { (char *)"PySwigIterator_value", _wrap_PySwigIterator_value, METH_VARARGS, (char *)"PySwigIterator_value(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_incr", _wrap_PySwigIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> PySwigIterator\n"
		"PySwigIterator_incr(PySwigIterator self) -> PySwigIterator\n"
		""},
	 { (char *)"PySwigIterator_decr", _wrap_PySwigIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> PySwigIterator\n"
		"PySwigIterator_decr(PySwigIterator self) -> PySwigIterator\n"
		""},
	 { (char *)"PySwigIterator_distance", _wrap_PySwigIterator_distance, METH_VARARGS, (char *)"PySwigIterator_distance(PySwigIterator self, PySwigIterator x) -> ptrdiff_t"},
	 { (char *)"PySwigIterator_equal", _wrap_PySwigIterator_equal, METH_VARARGS, (char *)"PySwigIterator_equal(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator_copy", _wrap_PySwigIterator_copy, METH_VARARGS, (char *)"PySwigIterator_copy(PySwigIterator self) -> PySwigIterator"},
	 { (char *)"PySwigIterator_next", _wrap_PySwigIterator_next, METH_VARARGS, (char *)"PySwigIterator_next(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_previous", _wrap_PySwigIterator_previous, METH_VARARGS, (char *)"PySwigIterator_previous(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_advance", _wrap_PySwigIterator_advance, METH_VARARGS, (char *)"PySwigIterator_advance(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___eq__", _wrap_PySwigIterator___eq__, METH_VARARGS, (char *)"PySwigIterator___eq__(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator___ne__", _wrap_PySwigIterator___ne__, METH_VARARGS, (char *)"PySwigIterator___ne__(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator___iadd__", _wrap_PySwigIterator___iadd__, METH_VARARGS, (char *)"PySwigIterator___iadd__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___isub__", _wrap_PySwigIterator___isub__, METH_VARARGS, (char *)"PySwigIterator___isub__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___add__", _wrap_PySwigIterator___add__, METH_VARARGS, (char *)"PySwigIterator___add__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___sub__", _wrap_PySwigIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> PySwigIterator\n"
		"PySwigIterator___sub__(PySwigIterator self, PySwigIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"PySwigIterator_swigregister", PySwigIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"getComplexData", _wrap_getComplexData, METH_VARARGS, (char *)"getComplexData(string sicdPathname, VectorString schemaPaths) -> ComplexData"},
	 { (char *)"ComplexClassification_getLevel", _wrap_ComplexClassification_getLevel, METH_VARARGS, (char *)"ComplexClassification_getLevel(ComplexClassification self) -> string"},
	 { (char *)"ComplexClassification_put", _wrap_ComplexClassification_put, METH_VARARGS, (char *)"ComplexClassification_put(ComplexClassification self, std::ostream os) -> std::ostream"},
	 { (char *)"ComplexClassification_level_set", _wrap_ComplexClassification_level_set, METH_VARARGS, (char *)"ComplexClassification_level_set(ComplexClassification self, string level)"},
	 { (char *)"ComplexClassification_level_get", _wrap_ComplexClassification_level_get, METH_VARARGS, (char *)"ComplexClassification_level_get(ComplexClassification self) -> string"},
	 { (char *)"new_ComplexClassification", _wrap_new_ComplexClassification, METH_VARARGS, (char *)"new_ComplexClassification() -> ComplexClassification"},
	 { (char *)"delete_ComplexClassification", _wrap_delete_ComplexClassification, METH_VARARGS, (char *)"delete_ComplexClassification(ComplexClassification self)"},
	 { (char *)"ComplexClassification_swigregister", ComplexClassification_swigregister, METH_VARARGS, NULL},
	 { (char *)"CollectionInformation_collectorName_set", _wrap_CollectionInformation_collectorName_set, METH_VARARGS, (char *)"CollectionInformation_collectorName_set(CollectionInformation self, string collectorName)"},
	 { (char *)"CollectionInformation_collectorName_get", _wrap_CollectionInformation_collectorName_get, METH_VARARGS, (char *)"CollectionInformation_collectorName_get(CollectionInformation self) -> string"},
	 { (char *)"CollectionInformation_illuminatorName_set", _wrap_CollectionInformation_illuminatorName_set, METH_VARARGS, (char *)"CollectionInformation_illuminatorName_set(CollectionInformation self, string illuminatorName)"},
	 { (char *)"CollectionInformation_illuminatorName_get", _wrap_CollectionInformation_illuminatorName_get, METH_VARARGS, (char *)"CollectionInformation_illuminatorName_get(CollectionInformation self) -> string"},
	 { (char *)"CollectionInformation_coreName_set", _wrap_CollectionInformation_coreName_set, METH_VARARGS, (char *)"CollectionInformation_coreName_set(CollectionInformation self, string coreName)"},
	 { (char *)"CollectionInformation_coreName_get", _wrap_CollectionInformation_coreName_get, METH_VARARGS, (char *)"CollectionInformation_coreName_get(CollectionInformation self) -> string"},
	 { (char *)"CollectionInformation_collectType_set", _wrap_CollectionInformation_collectType_set, METH_VARARGS, (char *)"CollectionInformation_collectType_set(CollectionInformation self, CollectType collectType)"},
	 { (char *)"CollectionInformation_collectType_get", _wrap_CollectionInformation_collectType_get, METH_VARARGS, (char *)"CollectionInformation_collectType_get(CollectionInformation self) -> CollectType"},
	 { (char *)"CollectionInformation_radarMode_set", _wrap_CollectionInformation_radarMode_set, METH_VARARGS, (char *)"CollectionInformation_radarMode_set(CollectionInformation self, RadarModeType radarMode)"},
	 { (char *)"CollectionInformation_radarMode_get", _wrap_CollectionInformation_radarMode_get, METH_VARARGS, (char *)"CollectionInformation_radarMode_get(CollectionInformation self) -> RadarModeType"},
	 { (char *)"CollectionInformation_radarModeID_set", _wrap_CollectionInformation_radarModeID_set, METH_VARARGS, (char *)"CollectionInformation_radarModeID_set(CollectionInformation self, string radarModeID)"},
	 { (char *)"CollectionInformation_radarModeID_get", _wrap_CollectionInformation_radarModeID_get, METH_VARARGS, (char *)"CollectionInformation_radarModeID_get(CollectionInformation self) -> string"},
	 { (char *)"CollectionInformation_classification_set", _wrap_CollectionInformation_classification_set, METH_VARARGS, (char *)"CollectionInformation_classification_set(CollectionInformation self, ComplexClassification classification)"},
	 { (char *)"CollectionInformation_classification_get", _wrap_CollectionInformation_classification_get, METH_VARARGS, (char *)"CollectionInformation_classification_get(CollectionInformation self) -> ComplexClassification"},
	 { (char *)"CollectionInformation_countryCodes_set", _wrap_CollectionInformation_countryCodes_set, METH_VARARGS, (char *)"CollectionInformation_countryCodes_set(CollectionInformation self, VectorString countryCodes)"},
	 { (char *)"CollectionInformation_countryCodes_get", _wrap_CollectionInformation_countryCodes_get, METH_VARARGS, (char *)"CollectionInformation_countryCodes_get(CollectionInformation self) -> VectorString"},
	 { (char *)"CollectionInformation_parameters_set", _wrap_CollectionInformation_parameters_set, METH_VARARGS, (char *)"CollectionInformation_parameters_set(CollectionInformation self, std::vector<(Parameter,std::allocator<(Parameter)>)> parameters)"},
	 { (char *)"CollectionInformation_parameters_get", _wrap_CollectionInformation_parameters_get, METH_VARARGS, (char *)"CollectionInformation_parameters_get(CollectionInformation self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"new_CollectionInformation", _wrap_new_CollectionInformation, METH_VARARGS, (char *)"new_CollectionInformation() -> CollectionInformation"},
	 { (char *)"delete_CollectionInformation", _wrap_delete_CollectionInformation, METH_VARARGS, (char *)"delete_CollectionInformation(CollectionInformation self)"},
	 { (char *)"CollectionInformation_clone", _wrap_CollectionInformation_clone, METH_VARARGS, (char *)"CollectionInformation_clone(CollectionInformation self) -> CollectionInformation"},
	 { (char *)"CollectionInformation___eq__", _wrap_CollectionInformation___eq__, METH_VARARGS, (char *)"CollectionInformation___eq__(CollectionInformation self, CollectionInformation other) -> bool"},
	 { (char *)"CollectionInformation___ne__", _wrap_CollectionInformation___ne__, METH_VARARGS, (char *)"CollectionInformation___ne__(CollectionInformation self, CollectionInformation other) -> bool"},
	 { (char *)"CollectionInformation_swigregister", CollectionInformation_swigregister, METH_VARARGS, NULL},
	 { (char *)"ImageCreation_application_set", _wrap_ImageCreation_application_set, METH_VARARGS, (char *)"ImageCreation_application_set(ImageCreation self, string application)"},
	 { (char *)"ImageCreation_application_get", _wrap_ImageCreation_application_get, METH_VARARGS, (char *)"ImageCreation_application_get(ImageCreation self) -> string"},
	 { (char *)"ImageCreation_dateTime_set", _wrap_ImageCreation_dateTime_set, METH_VARARGS, (char *)"ImageCreation_dateTime_set(ImageCreation self, DateTime dateTime)"},
	 { (char *)"ImageCreation_dateTime_get", _wrap_ImageCreation_dateTime_get, METH_VARARGS, (char *)"ImageCreation_dateTime_get(ImageCreation self) -> DateTime"},
	 { (char *)"ImageCreation_site_set", _wrap_ImageCreation_site_set, METH_VARARGS, (char *)"ImageCreation_site_set(ImageCreation self, string site)"},
	 { (char *)"ImageCreation_site_get", _wrap_ImageCreation_site_get, METH_VARARGS, (char *)"ImageCreation_site_get(ImageCreation self) -> string"},
	 { (char *)"ImageCreation_profile_set", _wrap_ImageCreation_profile_set, METH_VARARGS, (char *)"ImageCreation_profile_set(ImageCreation self, string profile)"},
	 { (char *)"ImageCreation_profile_get", _wrap_ImageCreation_profile_get, METH_VARARGS, (char *)"ImageCreation_profile_get(ImageCreation self) -> string"},
	 { (char *)"ImageCreation_clone", _wrap_ImageCreation_clone, METH_VARARGS, (char *)"ImageCreation_clone(ImageCreation self) -> ImageCreation"},
	 { (char *)"new_ImageCreation", _wrap_new_ImageCreation, METH_VARARGS, (char *)"new_ImageCreation() -> ImageCreation"},
	 { (char *)"delete_ImageCreation", _wrap_delete_ImageCreation, METH_VARARGS, (char *)"delete_ImageCreation(ImageCreation self)"},
	 { (char *)"ImageCreation_swigregister", ImageCreation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ImageData", _wrap_new_ImageData, METH_VARARGS, (char *)"new_ImageData() -> ImageData"},
	 { (char *)"delete_ImageData", _wrap_delete_ImageData, METH_VARARGS, (char *)"delete_ImageData(ImageData self)"},
	 { (char *)"ImageData_clone", _wrap_ImageData_clone, METH_VARARGS, (char *)"ImageData_clone(ImageData self) -> ImageData"},
	 { (char *)"ImageData_pixelType_set", _wrap_ImageData_pixelType_set, METH_VARARGS, (char *)"ImageData_pixelType_set(ImageData self, PixelType pixelType)"},
	 { (char *)"ImageData_pixelType_get", _wrap_ImageData_pixelType_get, METH_VARARGS, (char *)"ImageData_pixelType_get(ImageData self) -> PixelType"},
	 { (char *)"ImageData_amplitudeTable_set", _wrap_ImageData_amplitudeTable_set, METH_VARARGS, (char *)"ImageData_amplitudeTable_set(ImageData self, AmplitudeTable amplitudeTable)"},
	 { (char *)"ImageData_amplitudeTable_get", _wrap_ImageData_amplitudeTable_get, METH_VARARGS, (char *)"ImageData_amplitudeTable_get(ImageData self) -> AmplitudeTable"},
	 { (char *)"ImageData_numRows_set", _wrap_ImageData_numRows_set, METH_VARARGS, (char *)"ImageData_numRows_set(ImageData self, size_t numRows)"},
	 { (char *)"ImageData_numRows_get", _wrap_ImageData_numRows_get, METH_VARARGS, (char *)"ImageData_numRows_get(ImageData self) -> size_t"},
	 { (char *)"ImageData_numCols_set", _wrap_ImageData_numCols_set, METH_VARARGS, (char *)"ImageData_numCols_set(ImageData self, size_t numCols)"},
	 { (char *)"ImageData_numCols_get", _wrap_ImageData_numCols_get, METH_VARARGS, (char *)"ImageData_numCols_get(ImageData self) -> size_t"},
	 { (char *)"ImageData_firstRow_set", _wrap_ImageData_firstRow_set, METH_VARARGS, (char *)"ImageData_firstRow_set(ImageData self, size_t firstRow)"},
	 { (char *)"ImageData_firstRow_get", _wrap_ImageData_firstRow_get, METH_VARARGS, (char *)"ImageData_firstRow_get(ImageData self) -> size_t"},
	 { (char *)"ImageData_firstCol_set", _wrap_ImageData_firstCol_set, METH_VARARGS, (char *)"ImageData_firstCol_set(ImageData self, size_t firstCol)"},
	 { (char *)"ImageData_firstCol_get", _wrap_ImageData_firstCol_get, METH_VARARGS, (char *)"ImageData_firstCol_get(ImageData self) -> size_t"},
	 { (char *)"ImageData_fullImage_set", _wrap_ImageData_fullImage_set, METH_VARARGS, (char *)"ImageData_fullImage_set(ImageData self, RowColInt fullImage)"},
	 { (char *)"ImageData_fullImage_get", _wrap_ImageData_fullImage_get, METH_VARARGS, (char *)"ImageData_fullImage_get(ImageData self) -> RowColInt"},
	 { (char *)"ImageData_scpPixel_set", _wrap_ImageData_scpPixel_set, METH_VARARGS, (char *)"ImageData_scpPixel_set(ImageData self, RowColInt scpPixel)"},
	 { (char *)"ImageData_scpPixel_get", _wrap_ImageData_scpPixel_get, METH_VARARGS, (char *)"ImageData_scpPixel_get(ImageData self) -> RowColInt"},
	 { (char *)"ImageData_validData_set", _wrap_ImageData_validData_set, METH_VARARGS, (char *)"ImageData_validData_set(ImageData self, std::vector<(six::RowColInt,std::allocator<(six::RowColInt)>)> validData)"},
	 { (char *)"ImageData_validData_get", _wrap_ImageData_validData_get, METH_VARARGS, (char *)"ImageData_validData_get(ImageData self) -> std::vector<(six::RowColInt,std::allocator<(six::RowColInt)>)>"},
	 { (char *)"ImageData_swigregister", ImageData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GeoInfo", _wrap_new_GeoInfo, METH_VARARGS, (char *)"new_GeoInfo() -> GeoInfo"},
	 { (char *)"delete_GeoInfo", _wrap_delete_GeoInfo, METH_VARARGS, (char *)"delete_GeoInfo(GeoInfo self)"},
	 { (char *)"GeoInfo_clone", _wrap_GeoInfo_clone, METH_VARARGS, (char *)"GeoInfo_clone(GeoInfo self) -> GeoInfo"},
	 { (char *)"GeoInfo_name_set", _wrap_GeoInfo_name_set, METH_VARARGS, (char *)"GeoInfo_name_set(GeoInfo self, string name)"},
	 { (char *)"GeoInfo_name_get", _wrap_GeoInfo_name_get, METH_VARARGS, (char *)"GeoInfo_name_get(GeoInfo self) -> string"},
	 { (char *)"GeoInfo_geoInfos_set", _wrap_GeoInfo_geoInfos_set, METH_VARARGS, (char *)"GeoInfo_geoInfos_set(GeoInfo self, VectorScopedCloneableGeoInfo geoInfos)"},
	 { (char *)"GeoInfo_geoInfos_get", _wrap_GeoInfo_geoInfos_get, METH_VARARGS, (char *)"GeoInfo_geoInfos_get(GeoInfo self) -> VectorScopedCloneableGeoInfo"},
	 { (char *)"GeoInfo_desc_set", _wrap_GeoInfo_desc_set, METH_VARARGS, (char *)"GeoInfo_desc_set(GeoInfo self, std::vector<(Parameter,std::allocator<(Parameter)>)> desc)"},
	 { (char *)"GeoInfo_desc_get", _wrap_GeoInfo_desc_get, METH_VARARGS, (char *)"GeoInfo_desc_get(GeoInfo self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"GeoInfo_geometryLatLon_set", _wrap_GeoInfo_geometryLatLon_set, METH_VARARGS, (char *)"GeoInfo_geometryLatLon_set(GeoInfo self, std::vector<(six::LatLon,std::allocator<(six::LatLon)>)> geometryLatLon)"},
	 { (char *)"GeoInfo_geometryLatLon_get", _wrap_GeoInfo_geometryLatLon_get, METH_VARARGS, (char *)"GeoInfo_geometryLatLon_get(GeoInfo self) -> std::vector<(six::LatLon,std::allocator<(six::LatLon)>)>"},
	 { (char *)"GeoInfo_swigregister", GeoInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GeoData", _wrap_new_GeoData, METH_VARARGS, (char *)"new_GeoData() -> GeoData"},
	 { (char *)"GeoData_clone", _wrap_GeoData_clone, METH_VARARGS, (char *)"GeoData_clone(GeoData self) -> GeoData"},
	 { (char *)"GeoData_earthModel_set", _wrap_GeoData_earthModel_set, METH_VARARGS, (char *)"GeoData_earthModel_set(GeoData self, EarthModelType earthModel)"},
	 { (char *)"GeoData_earthModel_get", _wrap_GeoData_earthModel_get, METH_VARARGS, (char *)"GeoData_earthModel_get(GeoData self) -> EarthModelType"},
	 { (char *)"GeoData_scp_set", _wrap_GeoData_scp_set, METH_VARARGS, (char *)"GeoData_scp_set(GeoData self, SCP scp)"},
	 { (char *)"GeoData_scp_get", _wrap_GeoData_scp_get, METH_VARARGS, (char *)"GeoData_scp_get(GeoData self) -> SCP"},
	 { (char *)"GeoData_imageCorners_set", _wrap_GeoData_imageCorners_set, METH_VARARGS, (char *)"GeoData_imageCorners_set(GeoData self, LatLonCorners imageCorners)"},
	 { (char *)"GeoData_imageCorners_get", _wrap_GeoData_imageCorners_get, METH_VARARGS, (char *)"GeoData_imageCorners_get(GeoData self) -> LatLonCorners"},
	 { (char *)"GeoData_validData_set", _wrap_GeoData_validData_set, METH_VARARGS, (char *)"GeoData_validData_set(GeoData self, std::vector<(six::LatLon,std::allocator<(six::LatLon)>)> validData)"},
	 { (char *)"GeoData_validData_get", _wrap_GeoData_validData_get, METH_VARARGS, (char *)"GeoData_validData_get(GeoData self) -> std::vector<(six::LatLon,std::allocator<(six::LatLon)>)>"},
	 { (char *)"GeoData_geoInfos_set", _wrap_GeoData_geoInfos_set, METH_VARARGS, (char *)"GeoData_geoInfos_set(GeoData self, VectorScopedCloneableGeoInfo geoInfos)"},
	 { (char *)"GeoData_geoInfos_get", _wrap_GeoData_geoInfos_get, METH_VARARGS, (char *)"GeoData_geoInfos_get(GeoData self) -> VectorScopedCloneableGeoInfo"},
	 { (char *)"delete_GeoData", _wrap_delete_GeoData, METH_VARARGS, (char *)"delete_GeoData(GeoData self)"},
	 { (char *)"GeoData_swigregister", GeoData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WeightType", _wrap_new_WeightType, METH_VARARGS, (char *)"new_WeightType() -> WeightType"},
	 { (char *)"WeightType_windowName_set", _wrap_WeightType_windowName_set, METH_VARARGS, (char *)"WeightType_windowName_set(WeightType self, string windowName)"},
	 { (char *)"WeightType_windowName_get", _wrap_WeightType_windowName_get, METH_VARARGS, (char *)"WeightType_windowName_get(WeightType self) -> string"},
	 { (char *)"WeightType_parameters_set", _wrap_WeightType_parameters_set, METH_VARARGS, (char *)"WeightType_parameters_set(WeightType self, std::vector<(Parameter,std::allocator<(Parameter)>)> parameters)"},
	 { (char *)"WeightType_parameters_get", _wrap_WeightType_parameters_get, METH_VARARGS, (char *)"WeightType_parameters_get(WeightType self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"delete_WeightType", _wrap_delete_WeightType, METH_VARARGS, (char *)"delete_WeightType(WeightType self)"},
	 { (char *)"WeightType_swigregister", WeightType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DirectionParameters", _wrap_new_DirectionParameters, METH_VARARGS, (char *)"new_DirectionParameters() -> DirectionParameters"},
	 { (char *)"DirectionParameters_clone", _wrap_DirectionParameters_clone, METH_VARARGS, (char *)"DirectionParameters_clone(DirectionParameters self) -> DirectionParameters"},
	 { (char *)"DirectionParameters_unitVector_set", _wrap_DirectionParameters_unitVector_set, METH_VARARGS, (char *)"DirectionParameters_unitVector_set(DirectionParameters self, Vector3 unitVector)"},
	 { (char *)"DirectionParameters_unitVector_get", _wrap_DirectionParameters_unitVector_get, METH_VARARGS, (char *)"DirectionParameters_unitVector_get(DirectionParameters self) -> Vector3"},
	 { (char *)"DirectionParameters_sampleSpacing_set", _wrap_DirectionParameters_sampleSpacing_set, METH_VARARGS, (char *)"DirectionParameters_sampleSpacing_set(DirectionParameters self, double sampleSpacing)"},
	 { (char *)"DirectionParameters_sampleSpacing_get", _wrap_DirectionParameters_sampleSpacing_get, METH_VARARGS, (char *)"DirectionParameters_sampleSpacing_get(DirectionParameters self) -> double"},
	 { (char *)"DirectionParameters_impulseResponseWidth_set", _wrap_DirectionParameters_impulseResponseWidth_set, METH_VARARGS, (char *)"DirectionParameters_impulseResponseWidth_set(DirectionParameters self, double impulseResponseWidth)"},
	 { (char *)"DirectionParameters_impulseResponseWidth_get", _wrap_DirectionParameters_impulseResponseWidth_get, METH_VARARGS, (char *)"DirectionParameters_impulseResponseWidth_get(DirectionParameters self) -> double"},
	 { (char *)"DirectionParameters_sign_set", _wrap_DirectionParameters_sign_set, METH_VARARGS, (char *)"DirectionParameters_sign_set(DirectionParameters self, FFTSign sign)"},
	 { (char *)"DirectionParameters_sign_get", _wrap_DirectionParameters_sign_get, METH_VARARGS, (char *)"DirectionParameters_sign_get(DirectionParameters self) -> FFTSign"},
	 { (char *)"DirectionParameters_impulseResponseBandwidth_set", _wrap_DirectionParameters_impulseResponseBandwidth_set, METH_VARARGS, (char *)"DirectionParameters_impulseResponseBandwidth_set(DirectionParameters self, double impulseResponseBandwidth)"},
	 { (char *)"DirectionParameters_impulseResponseBandwidth_get", _wrap_DirectionParameters_impulseResponseBandwidth_get, METH_VARARGS, (char *)"DirectionParameters_impulseResponseBandwidth_get(DirectionParameters self) -> double"},
	 { (char *)"DirectionParameters_kCenter_set", _wrap_DirectionParameters_kCenter_set, METH_VARARGS, (char *)"DirectionParameters_kCenter_set(DirectionParameters self, double kCenter)"},
	 { (char *)"DirectionParameters_kCenter_get", _wrap_DirectionParameters_kCenter_get, METH_VARARGS, (char *)"DirectionParameters_kCenter_get(DirectionParameters self) -> double"},
	 { (char *)"DirectionParameters_deltaK1_set", _wrap_DirectionParameters_deltaK1_set, METH_VARARGS, (char *)"DirectionParameters_deltaK1_set(DirectionParameters self, double deltaK1)"},
	 { (char *)"DirectionParameters_deltaK1_get", _wrap_DirectionParameters_deltaK1_get, METH_VARARGS, (char *)"DirectionParameters_deltaK1_get(DirectionParameters self) -> double"},
	 { (char *)"DirectionParameters_deltaK2_set", _wrap_DirectionParameters_deltaK2_set, METH_VARARGS, (char *)"DirectionParameters_deltaK2_set(DirectionParameters self, double deltaK2)"},
	 { (char *)"DirectionParameters_deltaK2_get", _wrap_DirectionParameters_deltaK2_get, METH_VARARGS, (char *)"DirectionParameters_deltaK2_get(DirectionParameters self) -> double"},
	 { (char *)"DirectionParameters_deltaKCOAPoly_set", _wrap_DirectionParameters_deltaKCOAPoly_set, METH_VARARGS, (char *)"DirectionParameters_deltaKCOAPoly_set(DirectionParameters self, Poly2D deltaKCOAPoly)"},
	 { (char *)"DirectionParameters_deltaKCOAPoly_get", _wrap_DirectionParameters_deltaKCOAPoly_get, METH_VARARGS, (char *)"DirectionParameters_deltaKCOAPoly_get(DirectionParameters self) -> Poly2D"},
	 { (char *)"DirectionParameters_weightType_set", _wrap_DirectionParameters_weightType_set, METH_VARARGS, (char *)"DirectionParameters_weightType_set(DirectionParameters self, ScopedCopyableWeightType weightType)"},
	 { (char *)"DirectionParameters_weightType_get", _wrap_DirectionParameters_weightType_get, METH_VARARGS, (char *)"DirectionParameters_weightType_get(DirectionParameters self) -> ScopedCopyableWeightType"},
	 { (char *)"DirectionParameters_weights_set", _wrap_DirectionParameters_weights_set, METH_VARARGS, (char *)"DirectionParameters_weights_set(DirectionParameters self, std_vector_double weights)"},
	 { (char *)"DirectionParameters_weights_get", _wrap_DirectionParameters_weights_get, METH_VARARGS, (char *)"DirectionParameters_weights_get(DirectionParameters self) -> std_vector_double"},
	 { (char *)"delete_DirectionParameters", _wrap_delete_DirectionParameters, METH_VARARGS, (char *)"delete_DirectionParameters(DirectionParameters self)"},
	 { (char *)"DirectionParameters_swigregister", DirectionParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Grid", _wrap_new_Grid, METH_VARARGS, (char *)"new_Grid() -> Grid"},
	 { (char *)"Grid_clone", _wrap_Grid_clone, METH_VARARGS, (char *)"Grid_clone(Grid self) -> Grid"},
	 { (char *)"Grid_imagePlane_set", _wrap_Grid_imagePlane_set, METH_VARARGS, (char *)"Grid_imagePlane_set(Grid self, ComplexImagePlaneType imagePlane)"},
	 { (char *)"Grid_imagePlane_get", _wrap_Grid_imagePlane_get, METH_VARARGS, (char *)"Grid_imagePlane_get(Grid self) -> ComplexImagePlaneType"},
	 { (char *)"Grid_type_set", _wrap_Grid_type_set, METH_VARARGS, (char *)"Grid_type_set(Grid self, ComplexImageGridType type)"},
	 { (char *)"Grid_type_get", _wrap_Grid_type_get, METH_VARARGS, (char *)"Grid_type_get(Grid self) -> ComplexImageGridType"},
	 { (char *)"Grid_timeCOAPoly_set", _wrap_Grid_timeCOAPoly_set, METH_VARARGS, (char *)"Grid_timeCOAPoly_set(Grid self, Poly2D timeCOAPoly)"},
	 { (char *)"Grid_timeCOAPoly_get", _wrap_Grid_timeCOAPoly_get, METH_VARARGS, (char *)"Grid_timeCOAPoly_get(Grid self) -> Poly2D"},
	 { (char *)"Grid_row_set", _wrap_Grid_row_set, METH_VARARGS, (char *)"Grid_row_set(Grid self, mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)> row)"},
	 { (char *)"Grid_row_get", _wrap_Grid_row_get, METH_VARARGS, (char *)"Grid_row_get(Grid self) -> mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)>"},
	 { (char *)"Grid_col_set", _wrap_Grid_col_set, METH_VARARGS, (char *)"Grid_col_set(Grid self, mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)> col)"},
	 { (char *)"Grid_col_get", _wrap_Grid_col_get, METH_VARARGS, (char *)"Grid_col_get(Grid self) -> mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)>"},
	 { (char *)"delete_Grid", _wrap_delete_Grid, METH_VARARGS, (char *)"delete_Grid(Grid self)"},
	 { (char *)"Grid_swigregister", Grid_swigregister, METH_VARARGS, NULL},
	 { (char *)"TimelineSet_tStart_set", _wrap_TimelineSet_tStart_set, METH_VARARGS, (char *)"TimelineSet_tStart_set(TimelineSet self, double tStart)"},
	 { (char *)"TimelineSet_tStart_get", _wrap_TimelineSet_tStart_get, METH_VARARGS, (char *)"TimelineSet_tStart_get(TimelineSet self) -> double"},
	 { (char *)"TimelineSet_tEnd_set", _wrap_TimelineSet_tEnd_set, METH_VARARGS, (char *)"TimelineSet_tEnd_set(TimelineSet self, double tEnd)"},
	 { (char *)"TimelineSet_tEnd_get", _wrap_TimelineSet_tEnd_get, METH_VARARGS, (char *)"TimelineSet_tEnd_get(TimelineSet self) -> double"},
	 { (char *)"TimelineSet_interPulsePeriodStart_set", _wrap_TimelineSet_interPulsePeriodStart_set, METH_VARARGS, (char *)"TimelineSet_interPulsePeriodStart_set(TimelineSet self, int interPulsePeriodStart)"},
	 { (char *)"TimelineSet_interPulsePeriodStart_get", _wrap_TimelineSet_interPulsePeriodStart_get, METH_VARARGS, (char *)"TimelineSet_interPulsePeriodStart_get(TimelineSet self) -> int"},
	 { (char *)"TimelineSet_interPulsePeriodEnd_set", _wrap_TimelineSet_interPulsePeriodEnd_set, METH_VARARGS, (char *)"TimelineSet_interPulsePeriodEnd_set(TimelineSet self, int interPulsePeriodEnd)"},
	 { (char *)"TimelineSet_interPulsePeriodEnd_get", _wrap_TimelineSet_interPulsePeriodEnd_get, METH_VARARGS, (char *)"TimelineSet_interPulsePeriodEnd_get(TimelineSet self) -> int"},
	 { (char *)"TimelineSet_interPulsePeriodPoly_set", _wrap_TimelineSet_interPulsePeriodPoly_set, METH_VARARGS, (char *)"TimelineSet_interPulsePeriodPoly_set(TimelineSet self, Poly1D interPulsePeriodPoly)"},
	 { (char *)"TimelineSet_interPulsePeriodPoly_get", _wrap_TimelineSet_interPulsePeriodPoly_get, METH_VARARGS, (char *)"TimelineSet_interPulsePeriodPoly_get(TimelineSet self) -> Poly1D"},
	 { (char *)"new_TimelineSet", _wrap_new_TimelineSet, METH_VARARGS, (char *)"new_TimelineSet() -> TimelineSet"},
	 { (char *)"delete_TimelineSet", _wrap_delete_TimelineSet, METH_VARARGS, (char *)"delete_TimelineSet(TimelineSet self)"},
	 { (char *)"TimelineSet_clone", _wrap_TimelineSet_clone, METH_VARARGS, (char *)"TimelineSet_clone(TimelineSet self) -> TimelineSet"},
	 { (char *)"TimelineSet_swigregister", TimelineSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InterPulsePeriod", _wrap_new_InterPulsePeriod, METH_VARARGS, (char *)"new_InterPulsePeriod() -> InterPulsePeriod"},
	 { (char *)"delete_InterPulsePeriod", _wrap_delete_InterPulsePeriod, METH_VARARGS, (char *)"delete_InterPulsePeriod(InterPulsePeriod self)"},
	 { (char *)"InterPulsePeriod_clone", _wrap_InterPulsePeriod_clone, METH_VARARGS, (char *)"InterPulsePeriod_clone(InterPulsePeriod self) -> InterPulsePeriod"},
	 { (char *)"InterPulsePeriod_sets_set", _wrap_InterPulsePeriod_sets_set, METH_VARARGS, (char *)"InterPulsePeriod_sets_set(InterPulsePeriod self, VectorTimelineSet sets)"},
	 { (char *)"InterPulsePeriod_sets_get", _wrap_InterPulsePeriod_sets_get, METH_VARARGS, (char *)"InterPulsePeriod_sets_get(InterPulsePeriod self) -> VectorTimelineSet"},
	 { (char *)"InterPulsePeriod_swigregister", InterPulsePeriod_swigregister, METH_VARARGS, NULL},
	 { (char *)"Timeline_collectStart_set", _wrap_Timeline_collectStart_set, METH_VARARGS, (char *)"Timeline_collectStart_set(Timeline self, DateTime collectStart)"},
	 { (char *)"Timeline_collectStart_get", _wrap_Timeline_collectStart_get, METH_VARARGS, (char *)"Timeline_collectStart_get(Timeline self) -> DateTime"},
	 { (char *)"Timeline_collectDuration_set", _wrap_Timeline_collectDuration_set, METH_VARARGS, (char *)"Timeline_collectDuration_set(Timeline self, double collectDuration)"},
	 { (char *)"Timeline_collectDuration_get", _wrap_Timeline_collectDuration_get, METH_VARARGS, (char *)"Timeline_collectDuration_get(Timeline self) -> double"},
	 { (char *)"Timeline_interPulsePeriod_set", _wrap_Timeline_interPulsePeriod_set, METH_VARARGS, (char *)"Timeline_interPulsePeriod_set(Timeline self, InterPulsePeriod interPulsePeriod)"},
	 { (char *)"Timeline_interPulsePeriod_get", _wrap_Timeline_interPulsePeriod_get, METH_VARARGS, (char *)"Timeline_interPulsePeriod_get(Timeline self) -> InterPulsePeriod"},
	 { (char *)"new_Timeline", _wrap_new_Timeline, METH_VARARGS, (char *)"new_Timeline() -> Timeline"},
	 { (char *)"delete_Timeline", _wrap_delete_Timeline, METH_VARARGS, (char *)"delete_Timeline(Timeline self)"},
	 { (char *)"Timeline_clone", _wrap_Timeline_clone, METH_VARARGS, (char *)"Timeline_clone(Timeline self) -> Timeline"},
	 { (char *)"Timeline_swigregister", Timeline_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RcvAPC", _wrap_new_RcvAPC, METH_VARARGS, (char *)"new_RcvAPC() -> RcvAPC"},
	 { (char *)"delete_RcvAPC", _wrap_delete_RcvAPC, METH_VARARGS, (char *)"delete_RcvAPC(RcvAPC self)"},
	 { (char *)"RcvAPC_clone", _wrap_RcvAPC_clone, METH_VARARGS, (char *)"RcvAPC_clone(RcvAPC self) -> RcvAPC"},
	 { (char *)"RcvAPC_rcvAPCPolys_set", _wrap_RcvAPC_rcvAPCPolys_set, METH_VARARGS, (char *)"RcvAPC_rcvAPCPolys_set(RcvAPC self, std::vector<(six::PolyXYZ,std::allocator<(six::PolyXYZ)>)> rcvAPCPolys)"},
	 { (char *)"RcvAPC_rcvAPCPolys_get", _wrap_RcvAPC_rcvAPCPolys_get, METH_VARARGS, (char *)"RcvAPC_rcvAPCPolys_get(RcvAPC self) -> std::vector<(six::PolyXYZ,std::allocator<(six::PolyXYZ)>)>"},
	 { (char *)"RcvAPC_swigregister", RcvAPC_swigregister, METH_VARARGS, NULL},
	 { (char *)"Position_arpPoly_set", _wrap_Position_arpPoly_set, METH_VARARGS, (char *)"Position_arpPoly_set(Position self, PolyXYZ arpPoly)"},
	 { (char *)"Position_arpPoly_get", _wrap_Position_arpPoly_get, METH_VARARGS, (char *)"Position_arpPoly_get(Position self) -> PolyXYZ"},
	 { (char *)"Position_grpPoly_set", _wrap_Position_grpPoly_set, METH_VARARGS, (char *)"Position_grpPoly_set(Position self, PolyXYZ grpPoly)"},
	 { (char *)"Position_grpPoly_get", _wrap_Position_grpPoly_get, METH_VARARGS, (char *)"Position_grpPoly_get(Position self) -> PolyXYZ"},
	 { (char *)"Position_txAPCPoly_set", _wrap_Position_txAPCPoly_set, METH_VARARGS, (char *)"Position_txAPCPoly_set(Position self, PolyXYZ txAPCPoly)"},
	 { (char *)"Position_txAPCPoly_get", _wrap_Position_txAPCPoly_get, METH_VARARGS, (char *)"Position_txAPCPoly_get(Position self) -> PolyXYZ"},
	 { (char *)"Position_rcvAPC_set", _wrap_Position_rcvAPC_set, METH_VARARGS, (char *)"Position_rcvAPC_set(Position self, RcvAPC rcvAPC)"},
	 { (char *)"Position_rcvAPC_get", _wrap_Position_rcvAPC_get, METH_VARARGS, (char *)"Position_rcvAPC_get(Position self) -> RcvAPC"},
	 { (char *)"new_Position", _wrap_new_Position, METH_VARARGS, (char *)"new_Position() -> Position"},
	 { (char *)"delete_Position", _wrap_delete_Position, METH_VARARGS, (char *)"delete_Position(Position self)"},
	 { (char *)"Position_clone", _wrap_Position_clone, METH_VARARGS, (char *)"Position_clone(Position self) -> Position"},
	 { (char *)"Position_swigregister", Position_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TxStep", _wrap_new_TxStep, METH_VARARGS, (char *)"new_TxStep() -> TxStep"},
	 { (char *)"delete_TxStep", _wrap_delete_TxStep, METH_VARARGS, (char *)"delete_TxStep(TxStep self)"},
	 { (char *)"TxStep_clone", _wrap_TxStep_clone, METH_VARARGS, (char *)"TxStep_clone(TxStep self) -> TxStep"},
	 { (char *)"TxStep_waveformIndex_set", _wrap_TxStep_waveformIndex_set, METH_VARARGS, (char *)"TxStep_waveformIndex_set(TxStep self, int waveformIndex)"},
	 { (char *)"TxStep_waveformIndex_get", _wrap_TxStep_waveformIndex_get, METH_VARARGS, (char *)"TxStep_waveformIndex_get(TxStep self) -> int"},
	 { (char *)"TxStep_txPolarization_set", _wrap_TxStep_txPolarization_set, METH_VARARGS, (char *)"TxStep_txPolarization_set(TxStep self, PolarizationType txPolarization)"},
	 { (char *)"TxStep_txPolarization_get", _wrap_TxStep_txPolarization_get, METH_VARARGS, (char *)"TxStep_txPolarization_get(TxStep self) -> PolarizationType"},
	 { (char *)"TxStep_swigregister", TxStep_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WaveformParameters", _wrap_new_WaveformParameters, METH_VARARGS, (char *)"new_WaveformParameters() -> WaveformParameters"},
	 { (char *)"delete_WaveformParameters", _wrap_delete_WaveformParameters, METH_VARARGS, (char *)"delete_WaveformParameters(WaveformParameters self)"},
	 { (char *)"WaveformParameters_clone", _wrap_WaveformParameters_clone, METH_VARARGS, (char *)"WaveformParameters_clone(WaveformParameters self) -> WaveformParameters"},
	 { (char *)"WaveformParameters_txPulseLength_set", _wrap_WaveformParameters_txPulseLength_set, METH_VARARGS, (char *)"WaveformParameters_txPulseLength_set(WaveformParameters self, double txPulseLength)"},
	 { (char *)"WaveformParameters_txPulseLength_get", _wrap_WaveformParameters_txPulseLength_get, METH_VARARGS, (char *)"WaveformParameters_txPulseLength_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_txRFBandwidth_set", _wrap_WaveformParameters_txRFBandwidth_set, METH_VARARGS, (char *)"WaveformParameters_txRFBandwidth_set(WaveformParameters self, double txRFBandwidth)"},
	 { (char *)"WaveformParameters_txRFBandwidth_get", _wrap_WaveformParameters_txRFBandwidth_get, METH_VARARGS, (char *)"WaveformParameters_txRFBandwidth_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_txFrequencyStart_set", _wrap_WaveformParameters_txFrequencyStart_set, METH_VARARGS, (char *)"WaveformParameters_txFrequencyStart_set(WaveformParameters self, double txFrequencyStart)"},
	 { (char *)"WaveformParameters_txFrequencyStart_get", _wrap_WaveformParameters_txFrequencyStart_get, METH_VARARGS, (char *)"WaveformParameters_txFrequencyStart_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_txFMRate_set", _wrap_WaveformParameters_txFMRate_set, METH_VARARGS, (char *)"WaveformParameters_txFMRate_set(WaveformParameters self, double txFMRate)"},
	 { (char *)"WaveformParameters_txFMRate_get", _wrap_WaveformParameters_txFMRate_get, METH_VARARGS, (char *)"WaveformParameters_txFMRate_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_rcvDemodType_set", _wrap_WaveformParameters_rcvDemodType_set, METH_VARARGS, (char *)"WaveformParameters_rcvDemodType_set(WaveformParameters self, DemodType rcvDemodType)"},
	 { (char *)"WaveformParameters_rcvDemodType_get", _wrap_WaveformParameters_rcvDemodType_get, METH_VARARGS, (char *)"WaveformParameters_rcvDemodType_get(WaveformParameters self) -> DemodType"},
	 { (char *)"WaveformParameters_rcvWindowLength_set", _wrap_WaveformParameters_rcvWindowLength_set, METH_VARARGS, (char *)"WaveformParameters_rcvWindowLength_set(WaveformParameters self, double rcvWindowLength)"},
	 { (char *)"WaveformParameters_rcvWindowLength_get", _wrap_WaveformParameters_rcvWindowLength_get, METH_VARARGS, (char *)"WaveformParameters_rcvWindowLength_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_adcSampleRate_set", _wrap_WaveformParameters_adcSampleRate_set, METH_VARARGS, (char *)"WaveformParameters_adcSampleRate_set(WaveformParameters self, double adcSampleRate)"},
	 { (char *)"WaveformParameters_adcSampleRate_get", _wrap_WaveformParameters_adcSampleRate_get, METH_VARARGS, (char *)"WaveformParameters_adcSampleRate_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_rcvIFBandwidth_set", _wrap_WaveformParameters_rcvIFBandwidth_set, METH_VARARGS, (char *)"WaveformParameters_rcvIFBandwidth_set(WaveformParameters self, double rcvIFBandwidth)"},
	 { (char *)"WaveformParameters_rcvIFBandwidth_get", _wrap_WaveformParameters_rcvIFBandwidth_get, METH_VARARGS, (char *)"WaveformParameters_rcvIFBandwidth_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_rcvFrequencyStart_set", _wrap_WaveformParameters_rcvFrequencyStart_set, METH_VARARGS, (char *)"WaveformParameters_rcvFrequencyStart_set(WaveformParameters self, double rcvFrequencyStart)"},
	 { (char *)"WaveformParameters_rcvFrequencyStart_get", _wrap_WaveformParameters_rcvFrequencyStart_get, METH_VARARGS, (char *)"WaveformParameters_rcvFrequencyStart_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_rcvFMRate_set", _wrap_WaveformParameters_rcvFMRate_set, METH_VARARGS, (char *)"WaveformParameters_rcvFMRate_set(WaveformParameters self, double rcvFMRate)"},
	 { (char *)"WaveformParameters_rcvFMRate_get", _wrap_WaveformParameters_rcvFMRate_get, METH_VARARGS, (char *)"WaveformParameters_rcvFMRate_get(WaveformParameters self) -> double"},
	 { (char *)"WaveformParameters_swigregister", WaveformParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ChannelParameters", _wrap_new_ChannelParameters, METH_VARARGS, (char *)"new_ChannelParameters() -> ChannelParameters"},
	 { (char *)"ChannelParameters_clone", _wrap_ChannelParameters_clone, METH_VARARGS, (char *)"ChannelParameters_clone(ChannelParameters self) -> ChannelParameters"},
	 { (char *)"ChannelParameters_txRcvPolarization_set", _wrap_ChannelParameters_txRcvPolarization_set, METH_VARARGS, (char *)"ChannelParameters_txRcvPolarization_set(ChannelParameters self, DualPolarizationType txRcvPolarization)"},
	 { (char *)"ChannelParameters_txRcvPolarization_get", _wrap_ChannelParameters_txRcvPolarization_get, METH_VARARGS, (char *)"ChannelParameters_txRcvPolarization_get(ChannelParameters self) -> DualPolarizationType"},
	 { (char *)"ChannelParameters_rcvAPCIndex_set", _wrap_ChannelParameters_rcvAPCIndex_set, METH_VARARGS, (char *)"ChannelParameters_rcvAPCIndex_set(ChannelParameters self, int rcvAPCIndex)"},
	 { (char *)"ChannelParameters_rcvAPCIndex_get", _wrap_ChannelParameters_rcvAPCIndex_get, METH_VARARGS, (char *)"ChannelParameters_rcvAPCIndex_get(ChannelParameters self) -> int"},
	 { (char *)"delete_ChannelParameters", _wrap_delete_ChannelParameters, METH_VARARGS, (char *)"delete_ChannelParameters(ChannelParameters self)"},
	 { (char *)"ChannelParameters_swigregister", ChannelParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AreaDirectionParameters", _wrap_new_AreaDirectionParameters, METH_VARARGS, (char *)"new_AreaDirectionParameters() -> AreaDirectionParameters"},
	 { (char *)"AreaDirectionParameters_clone", _wrap_AreaDirectionParameters_clone, METH_VARARGS, (char *)"AreaDirectionParameters_clone(AreaDirectionParameters self) -> AreaDirectionParameters"},
	 { (char *)"delete_AreaDirectionParameters", _wrap_delete_AreaDirectionParameters, METH_VARARGS, (char *)"delete_AreaDirectionParameters(AreaDirectionParameters self)"},
	 { (char *)"AreaDirectionParameters_unitVector_set", _wrap_AreaDirectionParameters_unitVector_set, METH_VARARGS, (char *)"AreaDirectionParameters_unitVector_set(AreaDirectionParameters self, Vector3 unitVector)"},
	 { (char *)"AreaDirectionParameters_unitVector_get", _wrap_AreaDirectionParameters_unitVector_get, METH_VARARGS, (char *)"AreaDirectionParameters_unitVector_get(AreaDirectionParameters self) -> Vector3"},
	 { (char *)"AreaDirectionParameters_spacing_set", _wrap_AreaDirectionParameters_spacing_set, METH_VARARGS, (char *)"AreaDirectionParameters_spacing_set(AreaDirectionParameters self, double spacing)"},
	 { (char *)"AreaDirectionParameters_spacing_get", _wrap_AreaDirectionParameters_spacing_get, METH_VARARGS, (char *)"AreaDirectionParameters_spacing_get(AreaDirectionParameters self) -> double"},
	 { (char *)"AreaDirectionParameters_elements_set", _wrap_AreaDirectionParameters_elements_set, METH_VARARGS, (char *)"AreaDirectionParameters_elements_set(AreaDirectionParameters self, size_t elements)"},
	 { (char *)"AreaDirectionParameters_elements_get", _wrap_AreaDirectionParameters_elements_get, METH_VARARGS, (char *)"AreaDirectionParameters_elements_get(AreaDirectionParameters self) -> size_t"},
	 { (char *)"AreaDirectionParameters_first_set", _wrap_AreaDirectionParameters_first_set, METH_VARARGS, (char *)"AreaDirectionParameters_first_set(AreaDirectionParameters self, size_t first)"},
	 { (char *)"AreaDirectionParameters_first_get", _wrap_AreaDirectionParameters_first_get, METH_VARARGS, (char *)"AreaDirectionParameters_first_get(AreaDirectionParameters self) -> size_t"},
	 { (char *)"AreaDirectionParameters___eq__", _wrap_AreaDirectionParameters___eq__, METH_VARARGS, (char *)"AreaDirectionParameters___eq__(AreaDirectionParameters self, AreaDirectionParameters other) -> bool"},
	 { (char *)"AreaDirectionParameters___ne__", _wrap_AreaDirectionParameters___ne__, METH_VARARGS, (char *)"AreaDirectionParameters___ne__(AreaDirectionParameters self, AreaDirectionParameters other) -> bool"},
	 { (char *)"AreaDirectionParameters_swigregister", AreaDirectionParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Segment", _wrap_new_Segment, METH_VARARGS, (char *)"new_Segment() -> Segment"},
	 { (char *)"delete_Segment", _wrap_delete_Segment, METH_VARARGS, (char *)"delete_Segment(Segment self)"},
	 { (char *)"Segment_clone", _wrap_Segment_clone, METH_VARARGS, (char *)"Segment_clone(Segment self) -> Segment"},
	 { (char *)"Segment_getNumLines", _wrap_Segment_getNumLines, METH_VARARGS, (char *)"Segment_getNumLines(Segment self) -> int"},
	 { (char *)"Segment_getNumSamples", _wrap_Segment_getNumSamples, METH_VARARGS, (char *)"Segment_getNumSamples(Segment self) -> int"},
	 { (char *)"Segment_startLine_set", _wrap_Segment_startLine_set, METH_VARARGS, (char *)"Segment_startLine_set(Segment self, int startLine)"},
	 { (char *)"Segment_startLine_get", _wrap_Segment_startLine_get, METH_VARARGS, (char *)"Segment_startLine_get(Segment self) -> int"},
	 { (char *)"Segment_startSample_set", _wrap_Segment_startSample_set, METH_VARARGS, (char *)"Segment_startSample_set(Segment self, int startSample)"},
	 { (char *)"Segment_startSample_get", _wrap_Segment_startSample_get, METH_VARARGS, (char *)"Segment_startSample_get(Segment self) -> int"},
	 { (char *)"Segment_endLine_set", _wrap_Segment_endLine_set, METH_VARARGS, (char *)"Segment_endLine_set(Segment self, int endLine)"},
	 { (char *)"Segment_endLine_get", _wrap_Segment_endLine_get, METH_VARARGS, (char *)"Segment_endLine_get(Segment self) -> int"},
	 { (char *)"Segment_endSample_set", _wrap_Segment_endSample_set, METH_VARARGS, (char *)"Segment_endSample_set(Segment self, int endSample)"},
	 { (char *)"Segment_endSample_get", _wrap_Segment_endSample_get, METH_VARARGS, (char *)"Segment_endSample_get(Segment self) -> int"},
	 { (char *)"Segment_identifier_set", _wrap_Segment_identifier_set, METH_VARARGS, (char *)"Segment_identifier_set(Segment self, string identifier)"},
	 { (char *)"Segment_identifier_get", _wrap_Segment_identifier_get, METH_VARARGS, (char *)"Segment_identifier_get(Segment self) -> string"},
	 { (char *)"Segment_swigregister", Segment_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AreaPlane", _wrap_new_AreaPlane, METH_VARARGS, (char *)"new_AreaPlane() -> AreaPlane"},
	 { (char *)"AreaPlane_clone", _wrap_AreaPlane_clone, METH_VARARGS, (char *)"AreaPlane_clone(AreaPlane self) -> AreaPlane"},
	 { (char *)"AreaPlane_referencePoint_set", _wrap_AreaPlane_referencePoint_set, METH_VARARGS, (char *)"AreaPlane_referencePoint_set(AreaPlane self, ReferencePoint referencePoint)"},
	 { (char *)"AreaPlane_referencePoint_get", _wrap_AreaPlane_referencePoint_get, METH_VARARGS, (char *)"AreaPlane_referencePoint_get(AreaPlane self) -> ReferencePoint"},
	 { (char *)"AreaPlane_xDirection_set", _wrap_AreaPlane_xDirection_set, METH_VARARGS, (char *)"AreaPlane_xDirection_set(AreaPlane self, mem::ScopedCloneablePtr<(six::sicd::AreaDirectionParameters)> xDirection)"},
	 { (char *)"AreaPlane_xDirection_get", _wrap_AreaPlane_xDirection_get, METH_VARARGS, (char *)"AreaPlane_xDirection_get(AreaPlane self) -> mem::ScopedCloneablePtr<(six::sicd::AreaDirectionParameters)>"},
	 { (char *)"AreaPlane_yDirection_set", _wrap_AreaPlane_yDirection_set, METH_VARARGS, (char *)"AreaPlane_yDirection_set(AreaPlane self, mem::ScopedCloneablePtr<(six::sicd::AreaDirectionParameters)> yDirection)"},
	 { (char *)"AreaPlane_yDirection_get", _wrap_AreaPlane_yDirection_get, METH_VARARGS, (char *)"AreaPlane_yDirection_get(AreaPlane self) -> mem::ScopedCloneablePtr<(six::sicd::AreaDirectionParameters)>"},
	 { (char *)"AreaPlane_segmentList_set", _wrap_AreaPlane_segmentList_set, METH_VARARGS, (char *)"AreaPlane_segmentList_set(AreaPlane self, vectorScopedClonableSegment segmentList)"},
	 { (char *)"AreaPlane_segmentList_get", _wrap_AreaPlane_segmentList_get, METH_VARARGS, (char *)"AreaPlane_segmentList_get(AreaPlane self) -> vectorScopedClonableSegment"},
	 { (char *)"AreaPlane_orientation_set", _wrap_AreaPlane_orientation_set, METH_VARARGS, (char *)"AreaPlane_orientation_set(AreaPlane self, OrientationType orientation)"},
	 { (char *)"AreaPlane_orientation_get", _wrap_AreaPlane_orientation_get, METH_VARARGS, (char *)"AreaPlane_orientation_get(AreaPlane self) -> OrientationType"},
	 { (char *)"delete_AreaPlane", _wrap_delete_AreaPlane, METH_VARARGS, (char *)"delete_AreaPlane(AreaPlane self)"},
	 { (char *)"AreaPlane_swigregister", AreaPlane_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Area", _wrap_new_Area, METH_VARARGS, (char *)"new_Area() -> Area"},
	 { (char *)"Area_clone", _wrap_Area_clone, METH_VARARGS, (char *)"Area_clone(Area self) -> Area"},
	 { (char *)"Area_acpCorners_set", _wrap_Area_acpCorners_set, METH_VARARGS, (char *)"Area_acpCorners_set(Area self, LatLonAltCorners acpCorners)"},
	 { (char *)"Area_acpCorners_get", _wrap_Area_acpCorners_get, METH_VARARGS, (char *)"Area_acpCorners_get(Area self) -> LatLonAltCorners"},
	 { (char *)"Area_plane_set", _wrap_Area_plane_set, METH_VARARGS, (char *)"Area_plane_set(Area self, mem::ScopedCloneablePtr<(six::sicd::AreaPlane)> plane)"},
	 { (char *)"Area_plane_get", _wrap_Area_plane_get, METH_VARARGS, (char *)"Area_plane_get(Area self) -> mem::ScopedCloneablePtr<(six::sicd::AreaPlane)>"},
	 { (char *)"delete_Area", _wrap_delete_Area, METH_VARARGS, (char *)"delete_Area(Area self)"},
	 { (char *)"Area_swigregister", Area_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RadarCollection", _wrap_new_RadarCollection, METH_VARARGS, (char *)"new_RadarCollection() -> RadarCollection"},
	 { (char *)"RadarCollection_clone", _wrap_RadarCollection_clone, METH_VARARGS, (char *)"RadarCollection_clone(RadarCollection self) -> RadarCollection"},
	 { (char *)"RadarCollection_refFrequencyIndex_set", _wrap_RadarCollection_refFrequencyIndex_set, METH_VARARGS, (char *)"RadarCollection_refFrequencyIndex_set(RadarCollection self, int refFrequencyIndex)"},
	 { (char *)"RadarCollection_refFrequencyIndex_get", _wrap_RadarCollection_refFrequencyIndex_get, METH_VARARGS, (char *)"RadarCollection_refFrequencyIndex_get(RadarCollection self) -> int"},
	 { (char *)"RadarCollection_txFrequencyMin_set", _wrap_RadarCollection_txFrequencyMin_set, METH_VARARGS, (char *)"RadarCollection_txFrequencyMin_set(RadarCollection self, double txFrequencyMin)"},
	 { (char *)"RadarCollection_txFrequencyMin_get", _wrap_RadarCollection_txFrequencyMin_get, METH_VARARGS, (char *)"RadarCollection_txFrequencyMin_get(RadarCollection self) -> double"},
	 { (char *)"RadarCollection_txFrequencyMax_set", _wrap_RadarCollection_txFrequencyMax_set, METH_VARARGS, (char *)"RadarCollection_txFrequencyMax_set(RadarCollection self, double txFrequencyMax)"},
	 { (char *)"RadarCollection_txFrequencyMax_get", _wrap_RadarCollection_txFrequencyMax_get, METH_VARARGS, (char *)"RadarCollection_txFrequencyMax_get(RadarCollection self) -> double"},
	 { (char *)"RadarCollection_txPolarization_set", _wrap_RadarCollection_txPolarization_set, METH_VARARGS, (char *)"RadarCollection_txPolarization_set(RadarCollection self, PolarizationSequenceType txPolarization)"},
	 { (char *)"RadarCollection_txPolarization_get", _wrap_RadarCollection_txPolarization_get, METH_VARARGS, (char *)"RadarCollection_txPolarization_get(RadarCollection self) -> PolarizationSequenceType"},
	 { (char *)"RadarCollection_polarizationHVAnglePoly_set", _wrap_RadarCollection_polarizationHVAnglePoly_set, METH_VARARGS, (char *)"RadarCollection_polarizationHVAnglePoly_set(RadarCollection self, Poly1D polarizationHVAnglePoly)"},
	 { (char *)"RadarCollection_polarizationHVAnglePoly_get", _wrap_RadarCollection_polarizationHVAnglePoly_get, METH_VARARGS, (char *)"RadarCollection_polarizationHVAnglePoly_get(RadarCollection self) -> Poly1D"},
	 { (char *)"RadarCollection_txSequence_set", _wrap_RadarCollection_txSequence_set, METH_VARARGS, (char *)"RadarCollection_txSequence_set(RadarCollection self, VectorScopedCloneableTxStep txSequence)"},
	 { (char *)"RadarCollection_txSequence_get", _wrap_RadarCollection_txSequence_get, METH_VARARGS, (char *)"RadarCollection_txSequence_get(RadarCollection self) -> VectorScopedCloneableTxStep"},
	 { (char *)"RadarCollection_waveform_set", _wrap_RadarCollection_waveform_set, METH_VARARGS, (char *)"RadarCollection_waveform_set(RadarCollection self, VectorScopedCloneableWaveformParameters waveform)"},
	 { (char *)"RadarCollection_waveform_get", _wrap_RadarCollection_waveform_get, METH_VARARGS, (char *)"RadarCollection_waveform_get(RadarCollection self) -> VectorScopedCloneableWaveformParameters"},
	 { (char *)"RadarCollection_rcvChannels_set", _wrap_RadarCollection_rcvChannels_set, METH_VARARGS, (char *)"RadarCollection_rcvChannels_set(RadarCollection self, VectorScopedCloneableChannelParameters rcvChannels)"},
	 { (char *)"RadarCollection_rcvChannels_get", _wrap_RadarCollection_rcvChannels_get, METH_VARARGS, (char *)"RadarCollection_rcvChannels_get(RadarCollection self) -> VectorScopedCloneableChannelParameters"},
	 { (char *)"RadarCollection_area_set", _wrap_RadarCollection_area_set, METH_VARARGS, (char *)"RadarCollection_area_set(RadarCollection self, ScopedCloneableArea area)"},
	 { (char *)"RadarCollection_area_get", _wrap_RadarCollection_area_get, METH_VARARGS, (char *)"RadarCollection_area_get(RadarCollection self) -> ScopedCloneableArea"},
	 { (char *)"RadarCollection_parameters_set", _wrap_RadarCollection_parameters_set, METH_VARARGS, (char *)"RadarCollection_parameters_set(RadarCollection self, std::vector<(Parameter,std::allocator<(Parameter)>)> parameters)"},
	 { (char *)"RadarCollection_parameters_get", _wrap_RadarCollection_parameters_get, METH_VARARGS, (char *)"RadarCollection_parameters_get(RadarCollection self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"delete_RadarCollection", _wrap_delete_RadarCollection, METH_VARARGS, (char *)"delete_RadarCollection(RadarCollection self)"},
	 { (char *)"RadarCollection_swigregister", RadarCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RcvChannelProcessed", _wrap_new_RcvChannelProcessed, METH_VARARGS, (char *)"new_RcvChannelProcessed() -> RcvChannelProcessed"},
	 { (char *)"RcvChannelProcessed_numChannelsProcessed_set", _wrap_RcvChannelProcessed_numChannelsProcessed_set, METH_VARARGS, (char *)"RcvChannelProcessed_numChannelsProcessed_set(RcvChannelProcessed self, unsigned int numChannelsProcessed)"},
	 { (char *)"RcvChannelProcessed_numChannelsProcessed_get", _wrap_RcvChannelProcessed_numChannelsProcessed_get, METH_VARARGS, (char *)"RcvChannelProcessed_numChannelsProcessed_get(RcvChannelProcessed self) -> unsigned int"},
	 { (char *)"RcvChannelProcessed_prfScaleFactor_set", _wrap_RcvChannelProcessed_prfScaleFactor_set, METH_VARARGS, (char *)"RcvChannelProcessed_prfScaleFactor_set(RcvChannelProcessed self, double prfScaleFactor)"},
	 { (char *)"RcvChannelProcessed_prfScaleFactor_get", _wrap_RcvChannelProcessed_prfScaleFactor_get, METH_VARARGS, (char *)"RcvChannelProcessed_prfScaleFactor_get(RcvChannelProcessed self) -> double"},
	 { (char *)"RcvChannelProcessed_channelIndex_set", _wrap_RcvChannelProcessed_channelIndex_set, METH_VARARGS, (char *)"RcvChannelProcessed_channelIndex_set(RcvChannelProcessed self, VectorInt channelIndex)"},
	 { (char *)"RcvChannelProcessed_channelIndex_get", _wrap_RcvChannelProcessed_channelIndex_get, METH_VARARGS, (char *)"RcvChannelProcessed_channelIndex_get(RcvChannelProcessed self) -> VectorInt"},
	 { (char *)"delete_RcvChannelProcessed", _wrap_delete_RcvChannelProcessed, METH_VARARGS, (char *)"delete_RcvChannelProcessed(RcvChannelProcessed self)"},
	 { (char *)"RcvChannelProcessed_swigregister", RcvChannelProcessed_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Distortion", _wrap_new_Distortion, METH_VARARGS, (char *)"new_Distortion() -> Distortion"},
	 { (char *)"Distortion_calibrationDate_set", _wrap_Distortion_calibrationDate_set, METH_VARARGS, (char *)"Distortion_calibrationDate_set(Distortion self, DateTime calibrationDate)"},
	 { (char *)"Distortion_calibrationDate_get", _wrap_Distortion_calibrationDate_get, METH_VARARGS, (char *)"Distortion_calibrationDate_get(Distortion self) -> DateTime"},
	 { (char *)"Distortion_a_set", _wrap_Distortion_a_set, METH_VARARGS, (char *)"Distortion_a_set(Distortion self, double a)"},
	 { (char *)"Distortion_a_get", _wrap_Distortion_a_get, METH_VARARGS, (char *)"Distortion_a_get(Distortion self) -> double"},
	 { (char *)"Distortion_f1_set", _wrap_Distortion_f1_set, METH_VARARGS, (char *)"Distortion_f1_set(Distortion self, std::complex<(double)> f1)"},
	 { (char *)"Distortion_f1_get", _wrap_Distortion_f1_get, METH_VARARGS, (char *)"Distortion_f1_get(Distortion self) -> std::complex<(double)>"},
	 { (char *)"Distortion_q1_set", _wrap_Distortion_q1_set, METH_VARARGS, (char *)"Distortion_q1_set(Distortion self, std::complex<(double)> q1)"},
	 { (char *)"Distortion_q1_get", _wrap_Distortion_q1_get, METH_VARARGS, (char *)"Distortion_q1_get(Distortion self) -> std::complex<(double)>"},
	 { (char *)"Distortion_q2_set", _wrap_Distortion_q2_set, METH_VARARGS, (char *)"Distortion_q2_set(Distortion self, std::complex<(double)> q2)"},
	 { (char *)"Distortion_q2_get", _wrap_Distortion_q2_get, METH_VARARGS, (char *)"Distortion_q2_get(Distortion self) -> std::complex<(double)>"},
	 { (char *)"Distortion_f2_set", _wrap_Distortion_f2_set, METH_VARARGS, (char *)"Distortion_f2_set(Distortion self, std::complex<(double)> f2)"},
	 { (char *)"Distortion_f2_get", _wrap_Distortion_f2_get, METH_VARARGS, (char *)"Distortion_f2_get(Distortion self) -> std::complex<(double)>"},
	 { (char *)"Distortion_q3_set", _wrap_Distortion_q3_set, METH_VARARGS, (char *)"Distortion_q3_set(Distortion self, std::complex<(double)> q3)"},
	 { (char *)"Distortion_q3_get", _wrap_Distortion_q3_get, METH_VARARGS, (char *)"Distortion_q3_get(Distortion self) -> std::complex<(double)>"},
	 { (char *)"Distortion_q4_set", _wrap_Distortion_q4_set, METH_VARARGS, (char *)"Distortion_q4_set(Distortion self, std::complex<(double)> q4)"},
	 { (char *)"Distortion_q4_get", _wrap_Distortion_q4_get, METH_VARARGS, (char *)"Distortion_q4_get(Distortion self) -> std::complex<(double)>"},
	 { (char *)"Distortion_gainErrorA_set", _wrap_Distortion_gainErrorA_set, METH_VARARGS, (char *)"Distortion_gainErrorA_set(Distortion self, double gainErrorA)"},
	 { (char *)"Distortion_gainErrorA_get", _wrap_Distortion_gainErrorA_get, METH_VARARGS, (char *)"Distortion_gainErrorA_get(Distortion self) -> double"},
	 { (char *)"Distortion_gainErrorF1_set", _wrap_Distortion_gainErrorF1_set, METH_VARARGS, (char *)"Distortion_gainErrorF1_set(Distortion self, double gainErrorF1)"},
	 { (char *)"Distortion_gainErrorF1_get", _wrap_Distortion_gainErrorF1_get, METH_VARARGS, (char *)"Distortion_gainErrorF1_get(Distortion self) -> double"},
	 { (char *)"Distortion_gainErrorF2_set", _wrap_Distortion_gainErrorF2_set, METH_VARARGS, (char *)"Distortion_gainErrorF2_set(Distortion self, double gainErrorF2)"},
	 { (char *)"Distortion_gainErrorF2_get", _wrap_Distortion_gainErrorF2_get, METH_VARARGS, (char *)"Distortion_gainErrorF2_get(Distortion self) -> double"},
	 { (char *)"Distortion_phaseErrorF1_set", _wrap_Distortion_phaseErrorF1_set, METH_VARARGS, (char *)"Distortion_phaseErrorF1_set(Distortion self, double phaseErrorF1)"},
	 { (char *)"Distortion_phaseErrorF1_get", _wrap_Distortion_phaseErrorF1_get, METH_VARARGS, (char *)"Distortion_phaseErrorF1_get(Distortion self) -> double"},
	 { (char *)"Distortion_phaseErrorF2_set", _wrap_Distortion_phaseErrorF2_set, METH_VARARGS, (char *)"Distortion_phaseErrorF2_set(Distortion self, double phaseErrorF2)"},
	 { (char *)"Distortion_phaseErrorF2_get", _wrap_Distortion_phaseErrorF2_get, METH_VARARGS, (char *)"Distortion_phaseErrorF2_get(Distortion self) -> double"},
	 { (char *)"delete_Distortion", _wrap_delete_Distortion, METH_VARARGS, (char *)"delete_Distortion(Distortion self)"},
	 { (char *)"Distortion_swigregister", Distortion_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PolarizationCalibration", _wrap_new_PolarizationCalibration, METH_VARARGS, (char *)"new_PolarizationCalibration() -> PolarizationCalibration"},
	 { (char *)"PolarizationCalibration_hvAngleCompensationApplied_set", _wrap_PolarizationCalibration_hvAngleCompensationApplied_set, METH_VARARGS, (char *)"PolarizationCalibration_hvAngleCompensationApplied_set(PolarizationCalibration self, BooleanType hvAngleCompensationApplied)"},
	 { (char *)"PolarizationCalibration_hvAngleCompensationApplied_get", _wrap_PolarizationCalibration_hvAngleCompensationApplied_get, METH_VARARGS, (char *)"PolarizationCalibration_hvAngleCompensationApplied_get(PolarizationCalibration self) -> BooleanType"},
	 { (char *)"PolarizationCalibration_distortionCorrectionApplied_set", _wrap_PolarizationCalibration_distortionCorrectionApplied_set, METH_VARARGS, (char *)"PolarizationCalibration_distortionCorrectionApplied_set(PolarizationCalibration self, BooleanType distortionCorrectionApplied)"},
	 { (char *)"PolarizationCalibration_distortionCorrectionApplied_get", _wrap_PolarizationCalibration_distortionCorrectionApplied_get, METH_VARARGS, (char *)"PolarizationCalibration_distortionCorrectionApplied_get(PolarizationCalibration self) -> BooleanType"},
	 { (char *)"PolarizationCalibration_distortion_set", _wrap_PolarizationCalibration_distortion_set, METH_VARARGS, (char *)"PolarizationCalibration_distortion_set(PolarizationCalibration self, mem::ScopedCopyablePtr<(six::sicd::Distortion)> distortion)"},
	 { (char *)"PolarizationCalibration_distortion_get", _wrap_PolarizationCalibration_distortion_get, METH_VARARGS, (char *)"PolarizationCalibration_distortion_get(PolarizationCalibration self) -> mem::ScopedCopyablePtr<(six::sicd::Distortion)>"},
	 { (char *)"delete_PolarizationCalibration", _wrap_delete_PolarizationCalibration, METH_VARARGS, (char *)"delete_PolarizationCalibration(PolarizationCalibration self)"},
	 { (char *)"PolarizationCalibration_swigregister", PolarizationCalibration_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Processing", _wrap_new_Processing, METH_VARARGS, (char *)"new_Processing() -> Processing"},
	 { (char *)"Processing_type_set", _wrap_Processing_type_set, METH_VARARGS, (char *)"Processing_type_set(Processing self, string type)"},
	 { (char *)"Processing_type_get", _wrap_Processing_type_get, METH_VARARGS, (char *)"Processing_type_get(Processing self) -> string"},
	 { (char *)"Processing_applied_set", _wrap_Processing_applied_set, METH_VARARGS, (char *)"Processing_applied_set(Processing self, BooleanType applied)"},
	 { (char *)"Processing_applied_get", _wrap_Processing_applied_get, METH_VARARGS, (char *)"Processing_applied_get(Processing self) -> BooleanType"},
	 { (char *)"Processing_parameters_set", _wrap_Processing_parameters_set, METH_VARARGS, (char *)"Processing_parameters_set(Processing self, std::vector<(Parameter,std::allocator<(Parameter)>)> parameters)"},
	 { (char *)"Processing_parameters_get", _wrap_Processing_parameters_get, METH_VARARGS, (char *)"Processing_parameters_get(Processing self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"delete_Processing", _wrap_delete_Processing, METH_VARARGS, (char *)"delete_Processing(Processing self)"},
	 { (char *)"Processing_swigregister", Processing_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ImageFormation", _wrap_new_ImageFormation, METH_VARARGS, (char *)"new_ImageFormation() -> ImageFormation"},
	 { (char *)"ImageFormation_segmentIdentifier_set", _wrap_ImageFormation_segmentIdentifier_set, METH_VARARGS, (char *)"ImageFormation_segmentIdentifier_set(ImageFormation self, string segmentIdentifier)"},
	 { (char *)"ImageFormation_segmentIdentifier_get", _wrap_ImageFormation_segmentIdentifier_get, METH_VARARGS, (char *)"ImageFormation_segmentIdentifier_get(ImageFormation self) -> string"},
	 { (char *)"ImageFormation_rcvChannelProcessed_set", _wrap_ImageFormation_rcvChannelProcessed_set, METH_VARARGS, (char *)"ImageFormation_rcvChannelProcessed_set(ImageFormation self, ScopedCopyableRcvChannelProcessed rcvChannelProcessed)"},
	 { (char *)"ImageFormation_rcvChannelProcessed_get", _wrap_ImageFormation_rcvChannelProcessed_get, METH_VARARGS, (char *)"ImageFormation_rcvChannelProcessed_get(ImageFormation self) -> ScopedCopyableRcvChannelProcessed"},
	 { (char *)"ImageFormation_txRcvPolarizationProc_set", _wrap_ImageFormation_txRcvPolarizationProc_set, METH_VARARGS, (char *)"ImageFormation_txRcvPolarizationProc_set(ImageFormation self, DualPolarizationType txRcvPolarizationProc)"},
	 { (char *)"ImageFormation_txRcvPolarizationProc_get", _wrap_ImageFormation_txRcvPolarizationProc_get, METH_VARARGS, (char *)"ImageFormation_txRcvPolarizationProc_get(ImageFormation self) -> DualPolarizationType"},
	 { (char *)"ImageFormation_imageFormationAlgorithm_set", _wrap_ImageFormation_imageFormationAlgorithm_set, METH_VARARGS, (char *)"ImageFormation_imageFormationAlgorithm_set(ImageFormation self, ImageFormationType imageFormationAlgorithm)"},
	 { (char *)"ImageFormation_imageFormationAlgorithm_get", _wrap_ImageFormation_imageFormationAlgorithm_get, METH_VARARGS, (char *)"ImageFormation_imageFormationAlgorithm_get(ImageFormation self) -> ImageFormationType"},
	 { (char *)"ImageFormation_tStartProc_set", _wrap_ImageFormation_tStartProc_set, METH_VARARGS, (char *)"ImageFormation_tStartProc_set(ImageFormation self, double tStartProc)"},
	 { (char *)"ImageFormation_tStartProc_get", _wrap_ImageFormation_tStartProc_get, METH_VARARGS, (char *)"ImageFormation_tStartProc_get(ImageFormation self) -> double"},
	 { (char *)"ImageFormation_tEndProc_set", _wrap_ImageFormation_tEndProc_set, METH_VARARGS, (char *)"ImageFormation_tEndProc_set(ImageFormation self, double tEndProc)"},
	 { (char *)"ImageFormation_tEndProc_get", _wrap_ImageFormation_tEndProc_get, METH_VARARGS, (char *)"ImageFormation_tEndProc_get(ImageFormation self) -> double"},
	 { (char *)"ImageFormation_txFrequencyProcMin_set", _wrap_ImageFormation_txFrequencyProcMin_set, METH_VARARGS, (char *)"ImageFormation_txFrequencyProcMin_set(ImageFormation self, double txFrequencyProcMin)"},
	 { (char *)"ImageFormation_txFrequencyProcMin_get", _wrap_ImageFormation_txFrequencyProcMin_get, METH_VARARGS, (char *)"ImageFormation_txFrequencyProcMin_get(ImageFormation self) -> double"},
	 { (char *)"ImageFormation_txFrequencyProcMax_set", _wrap_ImageFormation_txFrequencyProcMax_set, METH_VARARGS, (char *)"ImageFormation_txFrequencyProcMax_set(ImageFormation self, double txFrequencyProcMax)"},
	 { (char *)"ImageFormation_txFrequencyProcMax_get", _wrap_ImageFormation_txFrequencyProcMax_get, METH_VARARGS, (char *)"ImageFormation_txFrequencyProcMax_get(ImageFormation self) -> double"},
	 { (char *)"ImageFormation_slowTimeBeamCompensation_set", _wrap_ImageFormation_slowTimeBeamCompensation_set, METH_VARARGS, (char *)"ImageFormation_slowTimeBeamCompensation_set(ImageFormation self, SlowTimeBeamCompensationType slowTimeBeamCompensation)"},
	 { (char *)"ImageFormation_slowTimeBeamCompensation_get", _wrap_ImageFormation_slowTimeBeamCompensation_get, METH_VARARGS, (char *)"ImageFormation_slowTimeBeamCompensation_get(ImageFormation self) -> SlowTimeBeamCompensationType"},
	 { (char *)"ImageFormation_imageBeamCompensation_set", _wrap_ImageFormation_imageBeamCompensation_set, METH_VARARGS, (char *)"ImageFormation_imageBeamCompensation_set(ImageFormation self, ImageBeamCompensationType imageBeamCompensation)"},
	 { (char *)"ImageFormation_imageBeamCompensation_get", _wrap_ImageFormation_imageBeamCompensation_get, METH_VARARGS, (char *)"ImageFormation_imageBeamCompensation_get(ImageFormation self) -> ImageBeamCompensationType"},
	 { (char *)"ImageFormation_azimuthAutofocus_set", _wrap_ImageFormation_azimuthAutofocus_set, METH_VARARGS, (char *)"ImageFormation_azimuthAutofocus_set(ImageFormation self, AutofocusType azimuthAutofocus)"},
	 { (char *)"ImageFormation_azimuthAutofocus_get", _wrap_ImageFormation_azimuthAutofocus_get, METH_VARARGS, (char *)"ImageFormation_azimuthAutofocus_get(ImageFormation self) -> AutofocusType"},
	 { (char *)"ImageFormation_rangeAutofocus_set", _wrap_ImageFormation_rangeAutofocus_set, METH_VARARGS, (char *)"ImageFormation_rangeAutofocus_set(ImageFormation self, AutofocusType rangeAutofocus)"},
	 { (char *)"ImageFormation_rangeAutofocus_get", _wrap_ImageFormation_rangeAutofocus_get, METH_VARARGS, (char *)"ImageFormation_rangeAutofocus_get(ImageFormation self) -> AutofocusType"},
	 { (char *)"ImageFormation_processing_set", _wrap_ImageFormation_processing_set, METH_VARARGS, (char *)"ImageFormation_processing_set(ImageFormation self, VectorProcessing processing)"},
	 { (char *)"ImageFormation_processing_get", _wrap_ImageFormation_processing_get, METH_VARARGS, (char *)"ImageFormation_processing_get(ImageFormation self) -> VectorProcessing"},
	 { (char *)"ImageFormation_polarizationCalibration_set", _wrap_ImageFormation_polarizationCalibration_set, METH_VARARGS, (char *)"ImageFormation_polarizationCalibration_set(ImageFormation self, ScopedCopyablePolarizationCalibration polarizationCalibration)"},
	 { (char *)"ImageFormation_polarizationCalibration_get", _wrap_ImageFormation_polarizationCalibration_get, METH_VARARGS, (char *)"ImageFormation_polarizationCalibration_get(ImageFormation self) -> ScopedCopyablePolarizationCalibration"},
	 { (char *)"delete_ImageFormation", _wrap_delete_ImageFormation, METH_VARARGS, (char *)"delete_ImageFormation(ImageFormation self)"},
	 { (char *)"ImageFormation_swigregister", ImageFormation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCPCOA", _wrap_new_SCPCOA, METH_VARARGS, (char *)"new_SCPCOA() -> SCPCOA"},
	 { (char *)"SCPCOA_scpTime_set", _wrap_SCPCOA_scpTime_set, METH_VARARGS, (char *)"SCPCOA_scpTime_set(SCPCOA self, double scpTime)"},
	 { (char *)"SCPCOA_scpTime_get", _wrap_SCPCOA_scpTime_get, METH_VARARGS, (char *)"SCPCOA_scpTime_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_arpPos_set", _wrap_SCPCOA_arpPos_set, METH_VARARGS, (char *)"SCPCOA_arpPos_set(SCPCOA self, Vector3 arpPos)"},
	 { (char *)"SCPCOA_arpPos_get", _wrap_SCPCOA_arpPos_get, METH_VARARGS, (char *)"SCPCOA_arpPos_get(SCPCOA self) -> Vector3"},
	 { (char *)"SCPCOA_arpVel_set", _wrap_SCPCOA_arpVel_set, METH_VARARGS, (char *)"SCPCOA_arpVel_set(SCPCOA self, Vector3 arpVel)"},
	 { (char *)"SCPCOA_arpVel_get", _wrap_SCPCOA_arpVel_get, METH_VARARGS, (char *)"SCPCOA_arpVel_get(SCPCOA self) -> Vector3"},
	 { (char *)"SCPCOA_arpAcc_set", _wrap_SCPCOA_arpAcc_set, METH_VARARGS, (char *)"SCPCOA_arpAcc_set(SCPCOA self, Vector3 arpAcc)"},
	 { (char *)"SCPCOA_arpAcc_get", _wrap_SCPCOA_arpAcc_get, METH_VARARGS, (char *)"SCPCOA_arpAcc_get(SCPCOA self) -> Vector3"},
	 { (char *)"SCPCOA_sideOfTrack_set", _wrap_SCPCOA_sideOfTrack_set, METH_VARARGS, (char *)"SCPCOA_sideOfTrack_set(SCPCOA self, SideOfTrackType sideOfTrack)"},
	 { (char *)"SCPCOA_sideOfTrack_get", _wrap_SCPCOA_sideOfTrack_get, METH_VARARGS, (char *)"SCPCOA_sideOfTrack_get(SCPCOA self) -> SideOfTrackType"},
	 { (char *)"SCPCOA_slantRange_set", _wrap_SCPCOA_slantRange_set, METH_VARARGS, (char *)"SCPCOA_slantRange_set(SCPCOA self, double slantRange)"},
	 { (char *)"SCPCOA_slantRange_get", _wrap_SCPCOA_slantRange_get, METH_VARARGS, (char *)"SCPCOA_slantRange_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_groundRange_set", _wrap_SCPCOA_groundRange_set, METH_VARARGS, (char *)"SCPCOA_groundRange_set(SCPCOA self, double groundRange)"},
	 { (char *)"SCPCOA_groundRange_get", _wrap_SCPCOA_groundRange_get, METH_VARARGS, (char *)"SCPCOA_groundRange_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_dopplerConeAngle_set", _wrap_SCPCOA_dopplerConeAngle_set, METH_VARARGS, (char *)"SCPCOA_dopplerConeAngle_set(SCPCOA self, double dopplerConeAngle)"},
	 { (char *)"SCPCOA_dopplerConeAngle_get", _wrap_SCPCOA_dopplerConeAngle_get, METH_VARARGS, (char *)"SCPCOA_dopplerConeAngle_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_grazeAngle_set", _wrap_SCPCOA_grazeAngle_set, METH_VARARGS, (char *)"SCPCOA_grazeAngle_set(SCPCOA self, double grazeAngle)"},
	 { (char *)"SCPCOA_grazeAngle_get", _wrap_SCPCOA_grazeAngle_get, METH_VARARGS, (char *)"SCPCOA_grazeAngle_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_incidenceAngle_set", _wrap_SCPCOA_incidenceAngle_set, METH_VARARGS, (char *)"SCPCOA_incidenceAngle_set(SCPCOA self, double incidenceAngle)"},
	 { (char *)"SCPCOA_incidenceAngle_get", _wrap_SCPCOA_incidenceAngle_get, METH_VARARGS, (char *)"SCPCOA_incidenceAngle_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_twistAngle_set", _wrap_SCPCOA_twistAngle_set, METH_VARARGS, (char *)"SCPCOA_twistAngle_set(SCPCOA self, double twistAngle)"},
	 { (char *)"SCPCOA_twistAngle_get", _wrap_SCPCOA_twistAngle_get, METH_VARARGS, (char *)"SCPCOA_twistAngle_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_slopeAngle_set", _wrap_SCPCOA_slopeAngle_set, METH_VARARGS, (char *)"SCPCOA_slopeAngle_set(SCPCOA self, double slopeAngle)"},
	 { (char *)"SCPCOA_slopeAngle_get", _wrap_SCPCOA_slopeAngle_get, METH_VARARGS, (char *)"SCPCOA_slopeAngle_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_azimAngle_set", _wrap_SCPCOA_azimAngle_set, METH_VARARGS, (char *)"SCPCOA_azimAngle_set(SCPCOA self, double azimAngle)"},
	 { (char *)"SCPCOA_azimAngle_get", _wrap_SCPCOA_azimAngle_get, METH_VARARGS, (char *)"SCPCOA_azimAngle_get(SCPCOA self) -> double"},
	 { (char *)"SCPCOA_layoverAngle_set", _wrap_SCPCOA_layoverAngle_set, METH_VARARGS, (char *)"SCPCOA_layoverAngle_set(SCPCOA self, double layoverAngle)"},
	 { (char *)"SCPCOA_layoverAngle_get", _wrap_SCPCOA_layoverAngle_get, METH_VARARGS, (char *)"SCPCOA_layoverAngle_get(SCPCOA self) -> double"},
	 { (char *)"delete_SCPCOA", _wrap_delete_SCPCOA, METH_VARARGS, (char *)"delete_SCPCOA(SCPCOA self)"},
	 { (char *)"SCPCOA_swigregister", SCPCOA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ElectricalBoresight", _wrap_new_ElectricalBoresight, METH_VARARGS, (char *)"new_ElectricalBoresight() -> ElectricalBoresight"},
	 { (char *)"ElectricalBoresight___eq__", _wrap_ElectricalBoresight___eq__, METH_VARARGS, (char *)"ElectricalBoresight___eq__(ElectricalBoresight self, ElectricalBoresight other) -> bool"},
	 { (char *)"ElectricalBoresight___ne__", _wrap_ElectricalBoresight___ne__, METH_VARARGS, (char *)"ElectricalBoresight___ne__(ElectricalBoresight self, ElectricalBoresight other) -> bool"},
	 { (char *)"ElectricalBoresight_dcxPoly_set", _wrap_ElectricalBoresight_dcxPoly_set, METH_VARARGS, (char *)"ElectricalBoresight_dcxPoly_set(ElectricalBoresight self, Poly1D dcxPoly)"},
	 { (char *)"ElectricalBoresight_dcxPoly_get", _wrap_ElectricalBoresight_dcxPoly_get, METH_VARARGS, (char *)"ElectricalBoresight_dcxPoly_get(ElectricalBoresight self) -> Poly1D"},
	 { (char *)"ElectricalBoresight_dcyPoly_set", _wrap_ElectricalBoresight_dcyPoly_set, METH_VARARGS, (char *)"ElectricalBoresight_dcyPoly_set(ElectricalBoresight self, Poly1D dcyPoly)"},
	 { (char *)"ElectricalBoresight_dcyPoly_get", _wrap_ElectricalBoresight_dcyPoly_get, METH_VARARGS, (char *)"ElectricalBoresight_dcyPoly_get(ElectricalBoresight self) -> Poly1D"},
	 { (char *)"delete_ElectricalBoresight", _wrap_delete_ElectricalBoresight, METH_VARARGS, (char *)"delete_ElectricalBoresight(ElectricalBoresight self)"},
	 { (char *)"ElectricalBoresight_swigregister", ElectricalBoresight_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HalfPowerBeamwidths", _wrap_new_HalfPowerBeamwidths, METH_VARARGS, (char *)"new_HalfPowerBeamwidths() -> HalfPowerBeamwidths"},
	 { (char *)"HalfPowerBeamwidths___eq__", _wrap_HalfPowerBeamwidths___eq__, METH_VARARGS, (char *)"HalfPowerBeamwidths___eq__(HalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"},
	 { (char *)"HalfPowerBeamwidths___ne__", _wrap_HalfPowerBeamwidths___ne__, METH_VARARGS, (char *)"HalfPowerBeamwidths___ne__(HalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"},
	 { (char *)"HalfPowerBeamwidths_dcx_set", _wrap_HalfPowerBeamwidths_dcx_set, METH_VARARGS, (char *)"HalfPowerBeamwidths_dcx_set(HalfPowerBeamwidths self, double dcx)"},
	 { (char *)"HalfPowerBeamwidths_dcx_get", _wrap_HalfPowerBeamwidths_dcx_get, METH_VARARGS, (char *)"HalfPowerBeamwidths_dcx_get(HalfPowerBeamwidths self) -> double"},
	 { (char *)"HalfPowerBeamwidths_dcy_set", _wrap_HalfPowerBeamwidths_dcy_set, METH_VARARGS, (char *)"HalfPowerBeamwidths_dcy_set(HalfPowerBeamwidths self, double dcy)"},
	 { (char *)"HalfPowerBeamwidths_dcy_get", _wrap_HalfPowerBeamwidths_dcy_get, METH_VARARGS, (char *)"HalfPowerBeamwidths_dcy_get(HalfPowerBeamwidths self) -> double"},
	 { (char *)"delete_HalfPowerBeamwidths", _wrap_delete_HalfPowerBeamwidths, METH_VARARGS, (char *)"delete_HalfPowerBeamwidths(HalfPowerBeamwidths self)"},
	 { (char *)"HalfPowerBeamwidths_swigregister", HalfPowerBeamwidths_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GainAndPhasePolys", _wrap_new_GainAndPhasePolys, METH_VARARGS, (char *)"new_GainAndPhasePolys() -> GainAndPhasePolys"},
	 { (char *)"GainAndPhasePolys___eq__", _wrap_GainAndPhasePolys___eq__, METH_VARARGS, (char *)"GainAndPhasePolys___eq__(GainAndPhasePolys self, GainAndPhasePolys other) -> bool"},
	 { (char *)"GainAndPhasePolys___ne__", _wrap_GainAndPhasePolys___ne__, METH_VARARGS, (char *)"GainAndPhasePolys___ne__(GainAndPhasePolys self, GainAndPhasePolys other) -> bool"},
	 { (char *)"GainAndPhasePolys_gainPoly_set", _wrap_GainAndPhasePolys_gainPoly_set, METH_VARARGS, (char *)"GainAndPhasePolys_gainPoly_set(GainAndPhasePolys self, Poly2D gainPoly)"},
	 { (char *)"GainAndPhasePolys_gainPoly_get", _wrap_GainAndPhasePolys_gainPoly_get, METH_VARARGS, (char *)"GainAndPhasePolys_gainPoly_get(GainAndPhasePolys self) -> Poly2D"},
	 { (char *)"GainAndPhasePolys_phasePoly_set", _wrap_GainAndPhasePolys_phasePoly_set, METH_VARARGS, (char *)"GainAndPhasePolys_phasePoly_set(GainAndPhasePolys self, Poly2D phasePoly)"},
	 { (char *)"GainAndPhasePolys_phasePoly_get", _wrap_GainAndPhasePolys_phasePoly_get, METH_VARARGS, (char *)"GainAndPhasePolys_phasePoly_get(GainAndPhasePolys self) -> Poly2D"},
	 { (char *)"delete_GainAndPhasePolys", _wrap_delete_GainAndPhasePolys, METH_VARARGS, (char *)"delete_GainAndPhasePolys(GainAndPhasePolys self)"},
	 { (char *)"GainAndPhasePolys_swigregister", GainAndPhasePolys_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AntennaParameters", _wrap_new_AntennaParameters, METH_VARARGS, (char *)"new_AntennaParameters() -> AntennaParameters"},
	 { (char *)"AntennaParameters___eq__", _wrap_AntennaParameters___eq__, METH_VARARGS, (char *)"AntennaParameters___eq__(AntennaParameters self, AntennaParameters other) -> bool"},
	 { (char *)"AntennaParameters___ne__", _wrap_AntennaParameters___ne__, METH_VARARGS, (char *)"AntennaParameters___ne__(AntennaParameters self, AntennaParameters other) -> bool"},
	 { (char *)"AntennaParameters_xAxisPoly_set", _wrap_AntennaParameters_xAxisPoly_set, METH_VARARGS, (char *)"AntennaParameters_xAxisPoly_set(AntennaParameters self, PolyXYZ xAxisPoly)"},
	 { (char *)"AntennaParameters_xAxisPoly_get", _wrap_AntennaParameters_xAxisPoly_get, METH_VARARGS, (char *)"AntennaParameters_xAxisPoly_get(AntennaParameters self) -> PolyXYZ"},
	 { (char *)"AntennaParameters_yAxisPoly_set", _wrap_AntennaParameters_yAxisPoly_set, METH_VARARGS, (char *)"AntennaParameters_yAxisPoly_set(AntennaParameters self, PolyXYZ yAxisPoly)"},
	 { (char *)"AntennaParameters_yAxisPoly_get", _wrap_AntennaParameters_yAxisPoly_get, METH_VARARGS, (char *)"AntennaParameters_yAxisPoly_get(AntennaParameters self) -> PolyXYZ"},
	 { (char *)"AntennaParameters_frequencyZero_set", _wrap_AntennaParameters_frequencyZero_set, METH_VARARGS, (char *)"AntennaParameters_frequencyZero_set(AntennaParameters self, double frequencyZero)"},
	 { (char *)"AntennaParameters_frequencyZero_get", _wrap_AntennaParameters_frequencyZero_get, METH_VARARGS, (char *)"AntennaParameters_frequencyZero_get(AntennaParameters self) -> double"},
	 { (char *)"AntennaParameters_electricalBoresight_set", _wrap_AntennaParameters_electricalBoresight_set, METH_VARARGS, (char *)"AntennaParameters_electricalBoresight_set(AntennaParameters self, ScopedCopyableElectricalBoresight electricalBoresight)"},
	 { (char *)"AntennaParameters_electricalBoresight_get", _wrap_AntennaParameters_electricalBoresight_get, METH_VARARGS, (char *)"AntennaParameters_electricalBoresight_get(AntennaParameters self) -> ScopedCopyableElectricalBoresight"},
	 { (char *)"AntennaParameters_halfPowerBeamwidths_set", _wrap_AntennaParameters_halfPowerBeamwidths_set, METH_VARARGS, (char *)"AntennaParameters_halfPowerBeamwidths_set(AntennaParameters self, ScopedCopyableHalfPowerBeamwidths halfPowerBeamwidths)"},
	 { (char *)"AntennaParameters_halfPowerBeamwidths_get", _wrap_AntennaParameters_halfPowerBeamwidths_get, METH_VARARGS, (char *)"AntennaParameters_halfPowerBeamwidths_get(AntennaParameters self) -> ScopedCopyableHalfPowerBeamwidths"},
	 { (char *)"AntennaParameters_array_set", _wrap_AntennaParameters_array_set, METH_VARARGS, (char *)"AntennaParameters_array_set(AntennaParameters self, ScopedCopyableGainAndPhasePolys array)"},
	 { (char *)"AntennaParameters_array_get", _wrap_AntennaParameters_array_get, METH_VARARGS, (char *)"AntennaParameters_array_get(AntennaParameters self) -> ScopedCopyableGainAndPhasePolys"},
	 { (char *)"AntennaParameters_element_set", _wrap_AntennaParameters_element_set, METH_VARARGS, (char *)"AntennaParameters_element_set(AntennaParameters self, ScopedCopyableGainAndPhasePolys element)"},
	 { (char *)"AntennaParameters_element_get", _wrap_AntennaParameters_element_get, METH_VARARGS, (char *)"AntennaParameters_element_get(AntennaParameters self) -> ScopedCopyableGainAndPhasePolys"},
	 { (char *)"AntennaParameters_gainBSPoly_set", _wrap_AntennaParameters_gainBSPoly_set, METH_VARARGS, (char *)"AntennaParameters_gainBSPoly_set(AntennaParameters self, Poly1D gainBSPoly)"},
	 { (char *)"AntennaParameters_gainBSPoly_get", _wrap_AntennaParameters_gainBSPoly_get, METH_VARARGS, (char *)"AntennaParameters_gainBSPoly_get(AntennaParameters self) -> Poly1D"},
	 { (char *)"AntennaParameters_electricalBoresightFrequencyShift_set", _wrap_AntennaParameters_electricalBoresightFrequencyShift_set, METH_VARARGS, (char *)"AntennaParameters_electricalBoresightFrequencyShift_set(AntennaParameters self, BooleanType electricalBoresightFrequencyShift)"},
	 { (char *)"AntennaParameters_electricalBoresightFrequencyShift_get", _wrap_AntennaParameters_electricalBoresightFrequencyShift_get, METH_VARARGS, (char *)"AntennaParameters_electricalBoresightFrequencyShift_get(AntennaParameters self) -> BooleanType"},
	 { (char *)"AntennaParameters_mainlobeFrequencyDilation_set", _wrap_AntennaParameters_mainlobeFrequencyDilation_set, METH_VARARGS, (char *)"AntennaParameters_mainlobeFrequencyDilation_set(AntennaParameters self, BooleanType mainlobeFrequencyDilation)"},
	 { (char *)"AntennaParameters_mainlobeFrequencyDilation_get", _wrap_AntennaParameters_mainlobeFrequencyDilation_get, METH_VARARGS, (char *)"AntennaParameters_mainlobeFrequencyDilation_get(AntennaParameters self) -> BooleanType"},
	 { (char *)"delete_AntennaParameters", _wrap_delete_AntennaParameters, METH_VARARGS, (char *)"delete_AntennaParameters(AntennaParameters self)"},
	 { (char *)"AntennaParameters_swigregister", AntennaParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, (char *)"\n"
		"__lshift__(std::ostream os, AreaDirectionParameters d) -> std::ostream\n"
		"__lshift__(std::ostream os, ElectricalBoresight d) -> std::ostream\n"
		"__lshift__(std::ostream os, HalfPowerBeamwidths d) -> std::ostream\n"
		"__lshift__(std::ostream os, GainAndPhasePolys d) -> std::ostream\n"
		"__lshift__(std::ostream os, AntennaParameters d) -> std::ostream\n"
		""},
	 { (char *)"Antenna_tx_set", _wrap_Antenna_tx_set, METH_VARARGS, (char *)"Antenna_tx_set(Antenna self, ScopedCopyableAntennaParameters tx)"},
	 { (char *)"Antenna_tx_get", _wrap_Antenna_tx_get, METH_VARARGS, (char *)"Antenna_tx_get(Antenna self) -> ScopedCopyableAntennaParameters"},
	 { (char *)"Antenna_rcv_set", _wrap_Antenna_rcv_set, METH_VARARGS, (char *)"Antenna_rcv_set(Antenna self, ScopedCopyableAntennaParameters rcv)"},
	 { (char *)"Antenna_rcv_get", _wrap_Antenna_rcv_get, METH_VARARGS, (char *)"Antenna_rcv_get(Antenna self) -> ScopedCopyableAntennaParameters"},
	 { (char *)"Antenna_twoWay_set", _wrap_Antenna_twoWay_set, METH_VARARGS, (char *)"Antenna_twoWay_set(Antenna self, ScopedCopyableAntennaParameters twoWay)"},
	 { (char *)"Antenna_twoWay_get", _wrap_Antenna_twoWay_get, METH_VARARGS, (char *)"Antenna_twoWay_get(Antenna self) -> ScopedCopyableAntennaParameters"},
	 { (char *)"new_Antenna", _wrap_new_Antenna, METH_VARARGS, (char *)"new_Antenna() -> Antenna"},
	 { (char *)"delete_Antenna", _wrap_delete_Antenna, METH_VARARGS, (char *)"delete_Antenna(Antenna self)"},
	 { (char *)"Antenna_swigregister", Antenna_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MatchCollect", _wrap_new_MatchCollect, METH_VARARGS, (char *)"new_MatchCollect() -> MatchCollect"},
	 { (char *)"MatchCollect_coreName_set", _wrap_MatchCollect_coreName_set, METH_VARARGS, (char *)"MatchCollect_coreName_set(MatchCollect self, string coreName)"},
	 { (char *)"MatchCollect_coreName_get", _wrap_MatchCollect_coreName_get, METH_VARARGS, (char *)"MatchCollect_coreName_get(MatchCollect self) -> string"},
	 { (char *)"MatchCollect_matchIndex_set", _wrap_MatchCollect_matchIndex_set, METH_VARARGS, (char *)"MatchCollect_matchIndex_set(MatchCollect self, int matchIndex)"},
	 { (char *)"MatchCollect_matchIndex_get", _wrap_MatchCollect_matchIndex_get, METH_VARARGS, (char *)"MatchCollect_matchIndex_get(MatchCollect self) -> int"},
	 { (char *)"MatchCollect_parameters_set", _wrap_MatchCollect_parameters_set, METH_VARARGS, (char *)"MatchCollect_parameters_set(MatchCollect self, std::vector<(Parameter,std::allocator<(Parameter)>)> parameters)"},
	 { (char *)"MatchCollect_parameters_get", _wrap_MatchCollect_parameters_get, METH_VARARGS, (char *)"MatchCollect_parameters_get(MatchCollect self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"delete_MatchCollect", _wrap_delete_MatchCollect, METH_VARARGS, (char *)"delete_MatchCollect(MatchCollect self)"},
	 { (char *)"MatchCollect_swigregister", MatchCollect_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MatchType", _wrap_new_MatchType, METH_VARARGS, (char *)"new_MatchType() -> MatchType"},
	 { (char *)"MatchType_collectorName_set", _wrap_MatchType_collectorName_set, METH_VARARGS, (char *)"MatchType_collectorName_set(MatchType self, string collectorName)"},
	 { (char *)"MatchType_collectorName_get", _wrap_MatchType_collectorName_get, METH_VARARGS, (char *)"MatchType_collectorName_get(MatchType self) -> string"},
	 { (char *)"MatchType_illuminatorName_set", _wrap_MatchType_illuminatorName_set, METH_VARARGS, (char *)"MatchType_illuminatorName_set(MatchType self, string illuminatorName)"},
	 { (char *)"MatchType_illuminatorName_get", _wrap_MatchType_illuminatorName_get, METH_VARARGS, (char *)"MatchType_illuminatorName_get(MatchType self) -> string"},
	 { (char *)"MatchType_matchType_set", _wrap_MatchType_matchType_set, METH_VARARGS, (char *)"MatchType_matchType_set(MatchType self, VectorString matchType)"},
	 { (char *)"MatchType_matchType_get", _wrap_MatchType_matchType_get, METH_VARARGS, (char *)"MatchType_matchType_get(MatchType self) -> VectorString"},
	 { (char *)"MatchType_typeID_set", _wrap_MatchType_typeID_set, METH_VARARGS, (char *)"MatchType_typeID_set(MatchType self, string typeID)"},
	 { (char *)"MatchType_typeID_get", _wrap_MatchType_typeID_get, METH_VARARGS, (char *)"MatchType_typeID_get(MatchType self) -> string"},
	 { (char *)"MatchType_currentIndex_set", _wrap_MatchType_currentIndex_set, METH_VARARGS, (char *)"MatchType_currentIndex_set(MatchType self, int currentIndex)"},
	 { (char *)"MatchType_currentIndex_get", _wrap_MatchType_currentIndex_get, METH_VARARGS, (char *)"MatchType_currentIndex_get(MatchType self) -> int"},
	 { (char *)"MatchType_matchCollects_set", _wrap_MatchType_matchCollects_set, METH_VARARGS, (char *)"MatchType_matchCollects_set(MatchType self, VectorMatchCollect matchCollects)"},
	 { (char *)"MatchType_matchCollects_get", _wrap_MatchType_matchCollects_get, METH_VARARGS, (char *)"MatchType_matchCollects_get(MatchType self) -> VectorMatchCollect"},
	 { (char *)"delete_MatchType", _wrap_delete_MatchType, METH_VARARGS, (char *)"delete_MatchType(MatchType self)"},
	 { (char *)"MatchType_swigregister", MatchType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MatchInformation", _wrap_new_MatchInformation, METH_VARARGS, (char *)"new_MatchInformation() -> MatchInformation"},
	 { (char *)"MatchInformation_types_set", _wrap_MatchInformation_types_set, METH_VARARGS, (char *)"MatchInformation_types_set(MatchInformation self, VectorScopedCopyableMatchType types)"},
	 { (char *)"MatchInformation_types_get", _wrap_MatchInformation_types_get, METH_VARARGS, (char *)"MatchInformation_types_get(MatchInformation self) -> VectorScopedCopyableMatchType"},
	 { (char *)"delete_MatchInformation", _wrap_delete_MatchInformation, METH_VARARGS, (char *)"delete_MatchInformation(MatchInformation self)"},
	 { (char *)"MatchInformation_swigregister", MatchInformation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SlowTimeDeskew", _wrap_new_SlowTimeDeskew, METH_VARARGS, (char *)"new_SlowTimeDeskew() -> SlowTimeDeskew"},
	 { (char *)"delete_SlowTimeDeskew", _wrap_delete_SlowTimeDeskew, METH_VARARGS, (char *)"delete_SlowTimeDeskew(SlowTimeDeskew self)"},
	 { (char *)"SlowTimeDeskew_clone", _wrap_SlowTimeDeskew_clone, METH_VARARGS, (char *)"SlowTimeDeskew_clone(SlowTimeDeskew self) -> SlowTimeDeskew"},
	 { (char *)"SlowTimeDeskew_applied_set", _wrap_SlowTimeDeskew_applied_set, METH_VARARGS, (char *)"SlowTimeDeskew_applied_set(SlowTimeDeskew self, BooleanType applied)"},
	 { (char *)"SlowTimeDeskew_applied_get", _wrap_SlowTimeDeskew_applied_get, METH_VARARGS, (char *)"SlowTimeDeskew_applied_get(SlowTimeDeskew self) -> BooleanType"},
	 { (char *)"SlowTimeDeskew_slowTimeDeskewPhasePoly_set", _wrap_SlowTimeDeskew_slowTimeDeskewPhasePoly_set, METH_VARARGS, (char *)"SlowTimeDeskew_slowTimeDeskewPhasePoly_set(SlowTimeDeskew self, Poly2D slowTimeDeskewPhasePoly)"},
	 { (char *)"SlowTimeDeskew_slowTimeDeskewPhasePoly_get", _wrap_SlowTimeDeskew_slowTimeDeskewPhasePoly_get, METH_VARARGS, (char *)"SlowTimeDeskew_slowTimeDeskewPhasePoly_get(SlowTimeDeskew self) -> Poly2D"},
	 { (char *)"SlowTimeDeskew_swigregister", SlowTimeDeskew_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PFA", _wrap_new_PFA, METH_VARARGS, (char *)"new_PFA() -> PFA"},
	 { (char *)"delete_PFA", _wrap_delete_PFA, METH_VARARGS, (char *)"delete_PFA(PFA self)"},
	 { (char *)"PFA_clone", _wrap_PFA_clone, METH_VARARGS, (char *)"PFA_clone(PFA self) -> PFA"},
	 { (char *)"PFA_focusPlaneNormal_set", _wrap_PFA_focusPlaneNormal_set, METH_VARARGS, (char *)"PFA_focusPlaneNormal_set(PFA self, Vector3 focusPlaneNormal)"},
	 { (char *)"PFA_focusPlaneNormal_get", _wrap_PFA_focusPlaneNormal_get, METH_VARARGS, (char *)"PFA_focusPlaneNormal_get(PFA self) -> Vector3"},
	 { (char *)"PFA_imagePlaneNormal_set", _wrap_PFA_imagePlaneNormal_set, METH_VARARGS, (char *)"PFA_imagePlaneNormal_set(PFA self, Vector3 imagePlaneNormal)"},
	 { (char *)"PFA_imagePlaneNormal_get", _wrap_PFA_imagePlaneNormal_get, METH_VARARGS, (char *)"PFA_imagePlaneNormal_get(PFA self) -> Vector3"},
	 { (char *)"PFA_polarAngleRefTime_set", _wrap_PFA_polarAngleRefTime_set, METH_VARARGS, (char *)"PFA_polarAngleRefTime_set(PFA self, double polarAngleRefTime)"},
	 { (char *)"PFA_polarAngleRefTime_get", _wrap_PFA_polarAngleRefTime_get, METH_VARARGS, (char *)"PFA_polarAngleRefTime_get(PFA self) -> double"},
	 { (char *)"PFA_polarAnglePoly_set", _wrap_PFA_polarAnglePoly_set, METH_VARARGS, (char *)"PFA_polarAnglePoly_set(PFA self, Poly1D polarAnglePoly)"},
	 { (char *)"PFA_polarAnglePoly_get", _wrap_PFA_polarAnglePoly_get, METH_VARARGS, (char *)"PFA_polarAnglePoly_get(PFA self) -> Poly1D"},
	 { (char *)"PFA_spatialFrequencyScaleFactorPoly_set", _wrap_PFA_spatialFrequencyScaleFactorPoly_set, METH_VARARGS, (char *)"PFA_spatialFrequencyScaleFactorPoly_set(PFA self, Poly1D spatialFrequencyScaleFactorPoly)"},
	 { (char *)"PFA_spatialFrequencyScaleFactorPoly_get", _wrap_PFA_spatialFrequencyScaleFactorPoly_get, METH_VARARGS, (char *)"PFA_spatialFrequencyScaleFactorPoly_get(PFA self) -> Poly1D"},
	 { (char *)"PFA_krg1_set", _wrap_PFA_krg1_set, METH_VARARGS, (char *)"PFA_krg1_set(PFA self, double krg1)"},
	 { (char *)"PFA_krg1_get", _wrap_PFA_krg1_get, METH_VARARGS, (char *)"PFA_krg1_get(PFA self) -> double"},
	 { (char *)"PFA_krg2_set", _wrap_PFA_krg2_set, METH_VARARGS, (char *)"PFA_krg2_set(PFA self, double krg2)"},
	 { (char *)"PFA_krg2_get", _wrap_PFA_krg2_get, METH_VARARGS, (char *)"PFA_krg2_get(PFA self) -> double"},
	 { (char *)"PFA_kaz1_set", _wrap_PFA_kaz1_set, METH_VARARGS, (char *)"PFA_kaz1_set(PFA self, double kaz1)"},
	 { (char *)"PFA_kaz1_get", _wrap_PFA_kaz1_get, METH_VARARGS, (char *)"PFA_kaz1_get(PFA self) -> double"},
	 { (char *)"PFA_kaz2_set", _wrap_PFA_kaz2_set, METH_VARARGS, (char *)"PFA_kaz2_set(PFA self, double kaz2)"},
	 { (char *)"PFA_kaz2_get", _wrap_PFA_kaz2_get, METH_VARARGS, (char *)"PFA_kaz2_get(PFA self) -> double"},
	 { (char *)"PFA_slowTimeDeskew_set", _wrap_PFA_slowTimeDeskew_set, METH_VARARGS, (char *)"PFA_slowTimeDeskew_set(PFA self, SlowTimeDeskew slowTimeDeskew)"},
	 { (char *)"PFA_slowTimeDeskew_get", _wrap_PFA_slowTimeDeskew_get, METH_VARARGS, (char *)"PFA_slowTimeDeskew_get(PFA self) -> SlowTimeDeskew"},
	 { (char *)"PFA_swigregister", PFA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RMAT", _wrap_new_RMAT, METH_VARARGS, (char *)"new_RMAT() -> RMAT"},
	 { (char *)"RMAT_refTime_set", _wrap_RMAT_refTime_set, METH_VARARGS, (char *)"RMAT_refTime_set(RMAT self, double refTime)"},
	 { (char *)"RMAT_refTime_get", _wrap_RMAT_refTime_get, METH_VARARGS, (char *)"RMAT_refTime_get(RMAT self) -> double"},
	 { (char *)"RMAT_refPos_set", _wrap_RMAT_refPos_set, METH_VARARGS, (char *)"RMAT_refPos_set(RMAT self, Vector3 refPos)"},
	 { (char *)"RMAT_refPos_get", _wrap_RMAT_refPos_get, METH_VARARGS, (char *)"RMAT_refPos_get(RMAT self) -> Vector3"},
	 { (char *)"RMAT_refVel_set", _wrap_RMAT_refVel_set, METH_VARARGS, (char *)"RMAT_refVel_set(RMAT self, Vector3 refVel)"},
	 { (char *)"RMAT_refVel_get", _wrap_RMAT_refVel_get, METH_VARARGS, (char *)"RMAT_refVel_get(RMAT self) -> Vector3"},
	 { (char *)"RMAT_distRefLinePoly_set", _wrap_RMAT_distRefLinePoly_set, METH_VARARGS, (char *)"RMAT_distRefLinePoly_set(RMAT self, Poly1D distRefLinePoly)"},
	 { (char *)"RMAT_distRefLinePoly_get", _wrap_RMAT_distRefLinePoly_get, METH_VARARGS, (char *)"RMAT_distRefLinePoly_get(RMAT self) -> Poly1D"},
	 { (char *)"RMAT_cosDCACOAPoly_set", _wrap_RMAT_cosDCACOAPoly_set, METH_VARARGS, (char *)"RMAT_cosDCACOAPoly_set(RMAT self, Poly2D cosDCACOAPoly)"},
	 { (char *)"RMAT_cosDCACOAPoly_get", _wrap_RMAT_cosDCACOAPoly_get, METH_VARARGS, (char *)"RMAT_cosDCACOAPoly_get(RMAT self) -> Poly2D"},
	 { (char *)"RMAT_kx1_set", _wrap_RMAT_kx1_set, METH_VARARGS, (char *)"RMAT_kx1_set(RMAT self, double kx1)"},
	 { (char *)"RMAT_kx1_get", _wrap_RMAT_kx1_get, METH_VARARGS, (char *)"RMAT_kx1_get(RMAT self) -> double"},
	 { (char *)"RMAT_kx2_set", _wrap_RMAT_kx2_set, METH_VARARGS, (char *)"RMAT_kx2_set(RMAT self, double kx2)"},
	 { (char *)"RMAT_kx2_get", _wrap_RMAT_kx2_get, METH_VARARGS, (char *)"RMAT_kx2_get(RMAT self) -> double"},
	 { (char *)"RMAT_ky1_set", _wrap_RMAT_ky1_set, METH_VARARGS, (char *)"RMAT_ky1_set(RMAT self, double ky1)"},
	 { (char *)"RMAT_ky1_get", _wrap_RMAT_ky1_get, METH_VARARGS, (char *)"RMAT_ky1_get(RMAT self) -> double"},
	 { (char *)"RMAT_ky2_set", _wrap_RMAT_ky2_set, METH_VARARGS, (char *)"RMAT_ky2_set(RMAT self, double ky2)"},
	 { (char *)"RMAT_ky2_get", _wrap_RMAT_ky2_get, METH_VARARGS, (char *)"RMAT_ky2_get(RMAT self) -> double"},
	 { (char *)"RMAT_dopConeAngleRef_set", _wrap_RMAT_dopConeAngleRef_set, METH_VARARGS, (char *)"RMAT_dopConeAngleRef_set(RMAT self, double dopConeAngleRef)"},
	 { (char *)"RMAT_dopConeAngleRef_get", _wrap_RMAT_dopConeAngleRef_get, METH_VARARGS, (char *)"RMAT_dopConeAngleRef_get(RMAT self) -> double"},
	 { (char *)"delete_RMAT", _wrap_delete_RMAT, METH_VARARGS, (char *)"delete_RMAT(RMAT self)"},
	 { (char *)"RMAT_swigregister", RMAT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RMCR", _wrap_new_RMCR, METH_VARARGS, (char *)"new_RMCR() -> RMCR"},
	 { (char *)"RMCR_refPos_set", _wrap_RMCR_refPos_set, METH_VARARGS, (char *)"RMCR_refPos_set(RMCR self, Vector3 refPos)"},
	 { (char *)"RMCR_refPos_get", _wrap_RMCR_refPos_get, METH_VARARGS, (char *)"RMCR_refPos_get(RMCR self) -> Vector3"},
	 { (char *)"RMCR_refVel_set", _wrap_RMCR_refVel_set, METH_VARARGS, (char *)"RMCR_refVel_set(RMCR self, Vector3 refVel)"},
	 { (char *)"RMCR_refVel_get", _wrap_RMCR_refVel_get, METH_VARARGS, (char *)"RMCR_refVel_get(RMCR self) -> Vector3"},
	 { (char *)"RMCR_dopConeAngleRef_set", _wrap_RMCR_dopConeAngleRef_set, METH_VARARGS, (char *)"RMCR_dopConeAngleRef_set(RMCR self, double dopConeAngleRef)"},
	 { (char *)"RMCR_dopConeAngleRef_get", _wrap_RMCR_dopConeAngleRef_get, METH_VARARGS, (char *)"RMCR_dopConeAngleRef_get(RMCR self) -> double"},
	 { (char *)"delete_RMCR", _wrap_delete_RMCR, METH_VARARGS, (char *)"delete_RMCR(RMCR self)"},
	 { (char *)"RMCR_swigregister", RMCR_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_INCA", _wrap_new_INCA, METH_VARARGS, (char *)"new_INCA() -> INCA"},
	 { (char *)"INCA_timeCAPoly_set", _wrap_INCA_timeCAPoly_set, METH_VARARGS, (char *)"INCA_timeCAPoly_set(INCA self, Poly1D timeCAPoly)"},
	 { (char *)"INCA_timeCAPoly_get", _wrap_INCA_timeCAPoly_get, METH_VARARGS, (char *)"INCA_timeCAPoly_get(INCA self) -> Poly1D"},
	 { (char *)"INCA_rangeCA_set", _wrap_INCA_rangeCA_set, METH_VARARGS, (char *)"INCA_rangeCA_set(INCA self, double rangeCA)"},
	 { (char *)"INCA_rangeCA_get", _wrap_INCA_rangeCA_get, METH_VARARGS, (char *)"INCA_rangeCA_get(INCA self) -> double"},
	 { (char *)"INCA_freqZero_set", _wrap_INCA_freqZero_set, METH_VARARGS, (char *)"INCA_freqZero_set(INCA self, double freqZero)"},
	 { (char *)"INCA_freqZero_get", _wrap_INCA_freqZero_get, METH_VARARGS, (char *)"INCA_freqZero_get(INCA self) -> double"},
	 { (char *)"INCA_dopplerRateScaleFactorPoly_set", _wrap_INCA_dopplerRateScaleFactorPoly_set, METH_VARARGS, (char *)"INCA_dopplerRateScaleFactorPoly_set(INCA self, Poly2D dopplerRateScaleFactorPoly)"},
	 { (char *)"INCA_dopplerRateScaleFactorPoly_get", _wrap_INCA_dopplerRateScaleFactorPoly_get, METH_VARARGS, (char *)"INCA_dopplerRateScaleFactorPoly_get(INCA self) -> Poly2D"},
	 { (char *)"INCA_dopplerCentroidPoly_set", _wrap_INCA_dopplerCentroidPoly_set, METH_VARARGS, (char *)"INCA_dopplerCentroidPoly_set(INCA self, Poly2D dopplerCentroidPoly)"},
	 { (char *)"INCA_dopplerCentroidPoly_get", _wrap_INCA_dopplerCentroidPoly_get, METH_VARARGS, (char *)"INCA_dopplerCentroidPoly_get(INCA self) -> Poly2D"},
	 { (char *)"INCA_dopplerCentroidCOA_set", _wrap_INCA_dopplerCentroidCOA_set, METH_VARARGS, (char *)"INCA_dopplerCentroidCOA_set(INCA self, BooleanType dopplerCentroidCOA)"},
	 { (char *)"INCA_dopplerCentroidCOA_get", _wrap_INCA_dopplerCentroidCOA_get, METH_VARARGS, (char *)"INCA_dopplerCentroidCOA_get(INCA self) -> BooleanType"},
	 { (char *)"delete_INCA", _wrap_delete_INCA, METH_VARARGS, (char *)"delete_INCA(INCA self)"},
	 { (char *)"INCA_swigregister", INCA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RMA", _wrap_new_RMA, METH_VARARGS, (char *)"new_RMA() -> RMA"},
	 { (char *)"RMA_algoType_set", _wrap_RMA_algoType_set, METH_VARARGS, (char *)"RMA_algoType_set(RMA self, RMAlgoType algoType)"},
	 { (char *)"RMA_algoType_get", _wrap_RMA_algoType_get, METH_VARARGS, (char *)"RMA_algoType_get(RMA self) -> RMAlgoType"},
	 { (char *)"RMA_rmat_set", _wrap_RMA_rmat_set, METH_VARARGS, (char *)"RMA_rmat_set(RMA self, ScopedCopyableRMAT rmat)"},
	 { (char *)"RMA_rmat_get", _wrap_RMA_rmat_get, METH_VARARGS, (char *)"RMA_rmat_get(RMA self) -> ScopedCopyableRMAT"},
	 { (char *)"RMA_rmcr_set", _wrap_RMA_rmcr_set, METH_VARARGS, (char *)"RMA_rmcr_set(RMA self, ScopedCopyableRMCR rmcr)"},
	 { (char *)"RMA_rmcr_get", _wrap_RMA_rmcr_get, METH_VARARGS, (char *)"RMA_rmcr_get(RMA self) -> ScopedCopyableRMCR"},
	 { (char *)"RMA_inca_set", _wrap_RMA_inca_set, METH_VARARGS, (char *)"RMA_inca_set(RMA self, ScopedCopyableINCA inca)"},
	 { (char *)"RMA_inca_get", _wrap_RMA_inca_get, METH_VARARGS, (char *)"RMA_inca_get(RMA self) -> ScopedCopyableINCA"},
	 { (char *)"delete_RMA", _wrap_delete_RMA, METH_VARARGS, (char *)"delete_RMA(RMA self)"},
	 { (char *)"RMA_swigregister", RMA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RgAzComp", _wrap_new_RgAzComp, METH_VARARGS, (char *)"new_RgAzComp() -> RgAzComp"},
	 { (char *)"RgAzComp_azSF_set", _wrap_RgAzComp_azSF_set, METH_VARARGS, (char *)"RgAzComp_azSF_set(RgAzComp self, double azSF)"},
	 { (char *)"RgAzComp_azSF_get", _wrap_RgAzComp_azSF_get, METH_VARARGS, (char *)"RgAzComp_azSF_get(RgAzComp self) -> double"},
	 { (char *)"RgAzComp_kazPoly_set", _wrap_RgAzComp_kazPoly_set, METH_VARARGS, (char *)"RgAzComp_kazPoly_set(RgAzComp self, Poly1D kazPoly)"},
	 { (char *)"RgAzComp_kazPoly_get", _wrap_RgAzComp_kazPoly_get, METH_VARARGS, (char *)"RgAzComp_kazPoly_get(RgAzComp self) -> Poly1D"},
	 { (char *)"delete_RgAzComp", _wrap_delete_RgAzComp, METH_VARARGS, (char *)"delete_RgAzComp(RgAzComp self)"},
	 { (char *)"RgAzComp_swigregister", RgAzComp_swigregister, METH_VARARGS, NULL},
	 { (char *)"ComplexData_collectionInformation_set", _wrap_ComplexData_collectionInformation_set, METH_VARARGS, (char *)"ComplexData_collectionInformation_set(ComplexData self, ScopedCloneableCollectionInformation collectionInformation)"},
	 { (char *)"ComplexData_collectionInformation_get", _wrap_ComplexData_collectionInformation_get, METH_VARARGS, (char *)"ComplexData_collectionInformation_get(ComplexData self) -> ScopedCloneableCollectionInformation"},
	 { (char *)"ComplexData_imageCreation_set", _wrap_ComplexData_imageCreation_set, METH_VARARGS, (char *)"ComplexData_imageCreation_set(ComplexData self, ScopedCloneableImageCreation imageCreation)"},
	 { (char *)"ComplexData_imageCreation_get", _wrap_ComplexData_imageCreation_get, METH_VARARGS, (char *)"ComplexData_imageCreation_get(ComplexData self) -> ScopedCloneableImageCreation"},
	 { (char *)"ComplexData_imageData_set", _wrap_ComplexData_imageData_set, METH_VARARGS, (char *)"ComplexData_imageData_set(ComplexData self, ScopedCloneableImageData imageData)"},
	 { (char *)"ComplexData_imageData_get", _wrap_ComplexData_imageData_get, METH_VARARGS, (char *)"ComplexData_imageData_get(ComplexData self) -> ScopedCloneableImageData"},
	 { (char *)"ComplexData_geoData_set", _wrap_ComplexData_geoData_set, METH_VARARGS, (char *)"ComplexData_geoData_set(ComplexData self, ScopedCloneableGeoData geoData)"},
	 { (char *)"ComplexData_geoData_get", _wrap_ComplexData_geoData_get, METH_VARARGS, (char *)"ComplexData_geoData_get(ComplexData self) -> ScopedCloneableGeoData"},
	 { (char *)"ComplexData_grid_set", _wrap_ComplexData_grid_set, METH_VARARGS, (char *)"ComplexData_grid_set(ComplexData self, ScopedCloneableGrid grid)"},
	 { (char *)"ComplexData_grid_get", _wrap_ComplexData_grid_get, METH_VARARGS, (char *)"ComplexData_grid_get(ComplexData self) -> ScopedCloneableGrid"},
	 { (char *)"ComplexData_timeline_set", _wrap_ComplexData_timeline_set, METH_VARARGS, (char *)"ComplexData_timeline_set(ComplexData self, ScopedCloneableTimeline timeline)"},
	 { (char *)"ComplexData_timeline_get", _wrap_ComplexData_timeline_get, METH_VARARGS, (char *)"ComplexData_timeline_get(ComplexData self) -> ScopedCloneableTimeline"},
	 { (char *)"ComplexData_position_set", _wrap_ComplexData_position_set, METH_VARARGS, (char *)"ComplexData_position_set(ComplexData self, ScopedCloneablePosition position)"},
	 { (char *)"ComplexData_position_get", _wrap_ComplexData_position_get, METH_VARARGS, (char *)"ComplexData_position_get(ComplexData self) -> ScopedCloneablePosition"},
	 { (char *)"ComplexData_radarCollection_set", _wrap_ComplexData_radarCollection_set, METH_VARARGS, (char *)"ComplexData_radarCollection_set(ComplexData self, ScopedCloneableRadarCollection radarCollection)"},
	 { (char *)"ComplexData_radarCollection_get", _wrap_ComplexData_radarCollection_get, METH_VARARGS, (char *)"ComplexData_radarCollection_get(ComplexData self) -> ScopedCloneableRadarCollection"},
	 { (char *)"ComplexData_imageFormation_set", _wrap_ComplexData_imageFormation_set, METH_VARARGS, (char *)"ComplexData_imageFormation_set(ComplexData self, ScopedCopyableImageFormation imageFormation)"},
	 { (char *)"ComplexData_imageFormation_get", _wrap_ComplexData_imageFormation_get, METH_VARARGS, (char *)"ComplexData_imageFormation_get(ComplexData self) -> ScopedCopyableImageFormation"},
	 { (char *)"ComplexData_scpcoa_set", _wrap_ComplexData_scpcoa_set, METH_VARARGS, (char *)"ComplexData_scpcoa_set(ComplexData self, ScopedCopyableSCPCOA scpcoa)"},
	 { (char *)"ComplexData_scpcoa_get", _wrap_ComplexData_scpcoa_get, METH_VARARGS, (char *)"ComplexData_scpcoa_get(ComplexData self) -> ScopedCopyableSCPCOA"},
	 { (char *)"ComplexData_radiometric_set", _wrap_ComplexData_radiometric_set, METH_VARARGS, (char *)"ComplexData_radiometric_set(ComplexData self, ScopedCopyableRadiometric radiometric)"},
	 { (char *)"ComplexData_radiometric_get", _wrap_ComplexData_radiometric_get, METH_VARARGS, (char *)"ComplexData_radiometric_get(ComplexData self) -> ScopedCopyableRadiometric"},
	 { (char *)"ComplexData_antenna_set", _wrap_ComplexData_antenna_set, METH_VARARGS, (char *)"ComplexData_antenna_set(ComplexData self, ScopedCopyableAntenna antenna)"},
	 { (char *)"ComplexData_antenna_get", _wrap_ComplexData_antenna_get, METH_VARARGS, (char *)"ComplexData_antenna_get(ComplexData self) -> ScopedCopyableAntenna"},
	 { (char *)"ComplexData_errorStatistics_set", _wrap_ComplexData_errorStatistics_set, METH_VARARGS, (char *)"ComplexData_errorStatistics_set(ComplexData self, ScopedCopyableErrorStatistics errorStatistics)"},
	 { (char *)"ComplexData_errorStatistics_get", _wrap_ComplexData_errorStatistics_get, METH_VARARGS, (char *)"ComplexData_errorStatistics_get(ComplexData self) -> ScopedCopyableErrorStatistics"},
	 { (char *)"ComplexData_matchInformation_set", _wrap_ComplexData_matchInformation_set, METH_VARARGS, (char *)"ComplexData_matchInformation_set(ComplexData self, ScopedCopyableMatchInformation matchInformation)"},
	 { (char *)"ComplexData_matchInformation_get", _wrap_ComplexData_matchInformation_get, METH_VARARGS, (char *)"ComplexData_matchInformation_get(ComplexData self) -> ScopedCopyableMatchInformation"},
	 { (char *)"ComplexData_pfa_set", _wrap_ComplexData_pfa_set, METH_VARARGS, (char *)"ComplexData_pfa_set(ComplexData self, ScopedCloneablePFA pfa)"},
	 { (char *)"ComplexData_pfa_get", _wrap_ComplexData_pfa_get, METH_VARARGS, (char *)"ComplexData_pfa_get(ComplexData self) -> ScopedCloneablePFA"},
	 { (char *)"ComplexData_rma_set", _wrap_ComplexData_rma_set, METH_VARARGS, (char *)"ComplexData_rma_set(ComplexData self, ScopedCopyableRMA rma)"},
	 { (char *)"ComplexData_rma_get", _wrap_ComplexData_rma_get, METH_VARARGS, (char *)"ComplexData_rma_get(ComplexData self) -> ScopedCopyableRMA"},
	 { (char *)"ComplexData_rgAzComp_set", _wrap_ComplexData_rgAzComp_set, METH_VARARGS, (char *)"ComplexData_rgAzComp_set(ComplexData self, ScopedCopyableRgAzComp rgAzComp)"},
	 { (char *)"ComplexData_rgAzComp_get", _wrap_ComplexData_rgAzComp_get, METH_VARARGS, (char *)"ComplexData_rgAzComp_get(ComplexData self) -> ScopedCopyableRgAzComp"},
	 { (char *)"new_ComplexData", _wrap_new_ComplexData, METH_VARARGS, (char *)"new_ComplexData() -> ComplexData"},
	 { (char *)"delete_ComplexData", _wrap_delete_ComplexData, METH_VARARGS, (char *)"delete_ComplexData(ComplexData self)"},
	 { (char *)"ComplexData_getDataType", _wrap_ComplexData_getDataType, METH_VARARGS, (char *)"ComplexData_getDataType(ComplexData self) -> DataType"},
	 { (char *)"ComplexData_clone", _wrap_ComplexData_clone, METH_VARARGS, (char *)"ComplexData_clone(ComplexData self) -> Data"},
	 { (char *)"ComplexData_getPixelType", _wrap_ComplexData_getPixelType, METH_VARARGS, (char *)"ComplexData_getPixelType(ComplexData self) -> PixelType"},
	 { (char *)"ComplexData_setPixelType", _wrap_ComplexData_setPixelType, METH_VARARGS, (char *)"ComplexData_setPixelType(ComplexData self, PixelType pixelType)"},
	 { (char *)"ComplexData_getNumRows", _wrap_ComplexData_getNumRows, METH_VARARGS, (char *)"ComplexData_getNumRows(ComplexData self) -> size_t"},
	 { (char *)"ComplexData_setNumRows", _wrap_ComplexData_setNumRows, METH_VARARGS, (char *)"ComplexData_setNumRows(ComplexData self, size_t numRows)"},
	 { (char *)"ComplexData_getNumCols", _wrap_ComplexData_getNumCols, METH_VARARGS, (char *)"ComplexData_getNumCols(ComplexData self) -> size_t"},
	 { (char *)"ComplexData_setNumCols", _wrap_ComplexData_setNumCols, METH_VARARGS, (char *)"ComplexData_setNumCols(ComplexData self, size_t numCols)"},
	 { (char *)"ComplexData_getImageCorners", _wrap_ComplexData_getImageCorners, METH_VARARGS, (char *)"ComplexData_getImageCorners(ComplexData self) -> LatLonCorners"},
	 { (char *)"ComplexData_setImageCorners", _wrap_ComplexData_setImageCorners, METH_VARARGS, (char *)"ComplexData_setImageCorners(ComplexData self, LatLonCorners imageCorners)"},
	 { (char *)"ComplexData_getName", _wrap_ComplexData_getName, METH_VARARGS, (char *)"ComplexData_getName(ComplexData self) -> string"},
	 { (char *)"ComplexData_setName", _wrap_ComplexData_setName, METH_VARARGS, (char *)"ComplexData_setName(ComplexData self, string name)"},
	 { (char *)"ComplexData_getSource", _wrap_ComplexData_getSource, METH_VARARGS, (char *)"ComplexData_getSource(ComplexData self) -> string"},
	 { (char *)"ComplexData_setSource", _wrap_ComplexData_setSource, METH_VARARGS, (char *)"ComplexData_setSource(ComplexData self, string name)"},
	 { (char *)"ComplexData_getCreationTime", _wrap_ComplexData_getCreationTime, METH_VARARGS, (char *)"ComplexData_getCreationTime(ComplexData self) -> DateTime"},
	 { (char *)"ComplexData_setCreationTime", _wrap_ComplexData_setCreationTime, METH_VARARGS, (char *)"ComplexData_setCreationTime(ComplexData self, DateTime creationTime)"},
	 { (char *)"ComplexData_getCollectionStartDateTime", _wrap_ComplexData_getCollectionStartDateTime, METH_VARARGS, (char *)"ComplexData_getCollectionStartDateTime(ComplexData self) -> DateTime"},
	 { (char *)"ComplexData_getClassification", _wrap_ComplexData_getClassification, METH_VARARGS, (char *)"\n"
		"getClassification() -> Classification\n"
		"ComplexData_getClassification(ComplexData self) -> Classification\n"
		""},
	 { (char *)"ComplexData_getDisplayLUT", _wrap_ComplexData_getDisplayLUT, METH_VARARGS, (char *)"ComplexData_getDisplayLUT(ComplexData self)"},
	 { (char *)"ComplexData_getVendorID", _wrap_ComplexData_getVendorID, METH_VARARGS, (char *)"ComplexData_getVendorID(ComplexData self) -> string"},
	 { (char *)"ComplexData_getVersion", _wrap_ComplexData_getVersion, METH_VARARGS, (char *)"ComplexData_getVersion(ComplexData self) -> string"},
	 { (char *)"ComplexData_setVersion", _wrap_ComplexData_setVersion, METH_VARARGS, (char *)"ComplexData_setVersion(ComplexData self, string version)"},
	 { (char *)"ComplexData_swigregister", ComplexData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ComplexXMLControl", _wrap_new_ComplexXMLControl, METH_VARARGS, (char *)"\n"
		"ComplexXMLControl(logging::Logger log=None, bool ownLog=False)\n"
		"ComplexXMLControl(logging::Logger log=None)\n"
		"new_ComplexXMLControl() -> ComplexXMLControl\n"
		""},
	 { (char *)"delete_ComplexXMLControl", _wrap_delete_ComplexXMLControl, METH_VARARGS, (char *)"delete_ComplexXMLControl(ComplexXMLControl self)"},
	 { (char *)"ComplexXMLControl_swigregister", ComplexXMLControl_swigregister, METH_VARARGS, NULL},
	 { (char *)"SixSicdUtilities_getSceneGeometry", _wrap_SixSicdUtilities_getSceneGeometry, METH_VARARGS, (char *)"SixSicdUtilities_getSceneGeometry(ComplexData data) -> SceneGeometry"},
	 { (char *)"SixSicdUtilities_getProjectionModel", _wrap_SixSicdUtilities_getProjectionModel, METH_VARARGS, (char *)"SixSicdUtilities_getProjectionModel(ComplexData data, SceneGeometry geom) -> ProjectionModel"},
	 { (char *)"new_SixSicdUtilities", _wrap_new_SixSicdUtilities, METH_VARARGS, (char *)"new_SixSicdUtilities() -> SixSicdUtilities"},
	 { (char *)"delete_SixSicdUtilities", _wrap_delete_SixSicdUtilities, METH_VARARGS, (char *)"delete_SixSicdUtilities(SixSicdUtilities self)"},
	 { (char *)"SixSicdUtilities_swigregister", SixSicdUtilities_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableCollectionInformation", _wrap_new_ScopedCloneableCollectionInformation, METH_VARARGS, (char *)"\n"
		"ScopedCloneableCollectionInformation(CollectionInformation ptr=None)\n"
		"ScopedCloneableCollectionInformation()\n"
		"new_ScopedCloneableCollectionInformation(ScopedCloneableCollectionInformation rhs) -> ScopedCloneableCollectionInformation\n"
		""},
	 { (char *)"ScopedCloneableCollectionInformation_get", _wrap_ScopedCloneableCollectionInformation_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_get(ScopedCloneableCollectionInformation self) -> CollectionInformation"},
	 { (char *)"ScopedCloneableCollectionInformation___ref__", _wrap_ScopedCloneableCollectionInformation___ref__, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation___ref__(ScopedCloneableCollectionInformation self) -> CollectionInformation"},
	 { (char *)"ScopedCloneableCollectionInformation___deref__", _wrap_ScopedCloneableCollectionInformation___deref__, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation___deref__(ScopedCloneableCollectionInformation self) -> CollectionInformation"},
	 { (char *)"ScopedCloneableCollectionInformation_reset", _wrap_ScopedCloneableCollectionInformation_reset, METH_VARARGS, (char *)"\n"
		"reset(CollectionInformation ptr=None)\n"
		"ScopedCloneableCollectionInformation_reset(ScopedCloneableCollectionInformation self)\n"
		""},
	 { (char *)"delete_ScopedCloneableCollectionInformation", _wrap_delete_ScopedCloneableCollectionInformation, METH_VARARGS, (char *)"delete_ScopedCloneableCollectionInformation(ScopedCloneableCollectionInformation self)"},
	 { (char *)"ScopedCloneableCollectionInformation_collectorName_set", _wrap_ScopedCloneableCollectionInformation_collectorName_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_collectorName_set(ScopedCloneableCollectionInformation self, string collectorName)"},
	 { (char *)"ScopedCloneableCollectionInformation_collectorName_get", _wrap_ScopedCloneableCollectionInformation_collectorName_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_collectorName_get(ScopedCloneableCollectionInformation self) -> string"},
	 { (char *)"ScopedCloneableCollectionInformation_illuminatorName_set", _wrap_ScopedCloneableCollectionInformation_illuminatorName_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_illuminatorName_set(ScopedCloneableCollectionInformation self, string illuminatorName)"},
	 { (char *)"ScopedCloneableCollectionInformation_illuminatorName_get", _wrap_ScopedCloneableCollectionInformation_illuminatorName_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_illuminatorName_get(ScopedCloneableCollectionInformation self) -> string"},
	 { (char *)"ScopedCloneableCollectionInformation_coreName_set", _wrap_ScopedCloneableCollectionInformation_coreName_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_coreName_set(ScopedCloneableCollectionInformation self, string coreName)"},
	 { (char *)"ScopedCloneableCollectionInformation_coreName_get", _wrap_ScopedCloneableCollectionInformation_coreName_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_coreName_get(ScopedCloneableCollectionInformation self) -> string"},
	 { (char *)"ScopedCloneableCollectionInformation_collectType_set", _wrap_ScopedCloneableCollectionInformation_collectType_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_collectType_set(ScopedCloneableCollectionInformation self, CollectType collectType)"},
	 { (char *)"ScopedCloneableCollectionInformation_collectType_get", _wrap_ScopedCloneableCollectionInformation_collectType_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_collectType_get(ScopedCloneableCollectionInformation self) -> CollectType"},
	 { (char *)"ScopedCloneableCollectionInformation_radarMode_set", _wrap_ScopedCloneableCollectionInformation_radarMode_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_radarMode_set(ScopedCloneableCollectionInformation self, RadarModeType radarMode)"},
	 { (char *)"ScopedCloneableCollectionInformation_radarMode_get", _wrap_ScopedCloneableCollectionInformation_radarMode_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_radarMode_get(ScopedCloneableCollectionInformation self) -> RadarModeType"},
	 { (char *)"ScopedCloneableCollectionInformation_radarModeID_set", _wrap_ScopedCloneableCollectionInformation_radarModeID_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_radarModeID_set(ScopedCloneableCollectionInformation self, string radarModeID)"},
	 { (char *)"ScopedCloneableCollectionInformation_radarModeID_get", _wrap_ScopedCloneableCollectionInformation_radarModeID_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_radarModeID_get(ScopedCloneableCollectionInformation self) -> string"},
	 { (char *)"ScopedCloneableCollectionInformation_classification_set", _wrap_ScopedCloneableCollectionInformation_classification_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_classification_set(ScopedCloneableCollectionInformation self, ComplexClassification classification)"},
	 { (char *)"ScopedCloneableCollectionInformation_classification_get", _wrap_ScopedCloneableCollectionInformation_classification_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_classification_get(ScopedCloneableCollectionInformation self) -> ComplexClassification"},
	 { (char *)"ScopedCloneableCollectionInformation_countryCodes_set", _wrap_ScopedCloneableCollectionInformation_countryCodes_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_countryCodes_set(ScopedCloneableCollectionInformation self, VectorString countryCodes)"},
	 { (char *)"ScopedCloneableCollectionInformation_countryCodes_get", _wrap_ScopedCloneableCollectionInformation_countryCodes_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_countryCodes_get(ScopedCloneableCollectionInformation self) -> VectorString"},
	 { (char *)"ScopedCloneableCollectionInformation_parameters_set", _wrap_ScopedCloneableCollectionInformation_parameters_set, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_parameters_set(ScopedCloneableCollectionInformation self, std::vector<(Parameter,std::allocator<(Parameter)>)> parameters)"},
	 { (char *)"ScopedCloneableCollectionInformation_parameters_get", _wrap_ScopedCloneableCollectionInformation_parameters_get, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_parameters_get(ScopedCloneableCollectionInformation self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"ScopedCloneableCollectionInformation_clone", _wrap_ScopedCloneableCollectionInformation_clone, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation_clone(ScopedCloneableCollectionInformation self) -> CollectionInformation"},
	 { (char *)"ScopedCloneableCollectionInformation___eq__", _wrap_ScopedCloneableCollectionInformation___eq__, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation___eq__(ScopedCloneableCollectionInformation self, CollectionInformation other) -> bool"},
	 { (char *)"ScopedCloneableCollectionInformation___ne__", _wrap_ScopedCloneableCollectionInformation___ne__, METH_VARARGS, (char *)"ScopedCloneableCollectionInformation___ne__(ScopedCloneableCollectionInformation self, CollectionInformation other) -> bool"},
	 { (char *)"ScopedCloneableCollectionInformation_swigregister", ScopedCloneableCollectionInformation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableImageCreation", _wrap_new_ScopedCloneableImageCreation, METH_VARARGS, (char *)"\n"
		"ScopedCloneableImageCreation(ImageCreation ptr=None)\n"
		"ScopedCloneableImageCreation()\n"
		"new_ScopedCloneableImageCreation(ScopedCloneableImageCreation rhs) -> ScopedCloneableImageCreation\n"
		""},
	 { (char *)"ScopedCloneableImageCreation_get", _wrap_ScopedCloneableImageCreation_get, METH_VARARGS, (char *)"ScopedCloneableImageCreation_get(ScopedCloneableImageCreation self) -> ImageCreation"},
	 { (char *)"ScopedCloneableImageCreation___ref__", _wrap_ScopedCloneableImageCreation___ref__, METH_VARARGS, (char *)"ScopedCloneableImageCreation___ref__(ScopedCloneableImageCreation self) -> ImageCreation"},
	 { (char *)"ScopedCloneableImageCreation___deref__", _wrap_ScopedCloneableImageCreation___deref__, METH_VARARGS, (char *)"ScopedCloneableImageCreation___deref__(ScopedCloneableImageCreation self) -> ImageCreation"},
	 { (char *)"ScopedCloneableImageCreation_reset", _wrap_ScopedCloneableImageCreation_reset, METH_VARARGS, (char *)"\n"
		"reset(ImageCreation ptr=None)\n"
		"ScopedCloneableImageCreation_reset(ScopedCloneableImageCreation self)\n"
		""},
	 { (char *)"delete_ScopedCloneableImageCreation", _wrap_delete_ScopedCloneableImageCreation, METH_VARARGS, (char *)"delete_ScopedCloneableImageCreation(ScopedCloneableImageCreation self)"},
	 { (char *)"ScopedCloneableImageCreation_application_set", _wrap_ScopedCloneableImageCreation_application_set, METH_VARARGS, (char *)"ScopedCloneableImageCreation_application_set(ScopedCloneableImageCreation self, string application)"},
	 { (char *)"ScopedCloneableImageCreation_application_get", _wrap_ScopedCloneableImageCreation_application_get, METH_VARARGS, (char *)"ScopedCloneableImageCreation_application_get(ScopedCloneableImageCreation self) -> string"},
	 { (char *)"ScopedCloneableImageCreation_dateTime_set", _wrap_ScopedCloneableImageCreation_dateTime_set, METH_VARARGS, (char *)"ScopedCloneableImageCreation_dateTime_set(ScopedCloneableImageCreation self, DateTime dateTime)"},
	 { (char *)"ScopedCloneableImageCreation_dateTime_get", _wrap_ScopedCloneableImageCreation_dateTime_get, METH_VARARGS, (char *)"ScopedCloneableImageCreation_dateTime_get(ScopedCloneableImageCreation self) -> DateTime"},
	 { (char *)"ScopedCloneableImageCreation_site_set", _wrap_ScopedCloneableImageCreation_site_set, METH_VARARGS, (char *)"ScopedCloneableImageCreation_site_set(ScopedCloneableImageCreation self, string site)"},
	 { (char *)"ScopedCloneableImageCreation_site_get", _wrap_ScopedCloneableImageCreation_site_get, METH_VARARGS, (char *)"ScopedCloneableImageCreation_site_get(ScopedCloneableImageCreation self) -> string"},
	 { (char *)"ScopedCloneableImageCreation_profile_set", _wrap_ScopedCloneableImageCreation_profile_set, METH_VARARGS, (char *)"ScopedCloneableImageCreation_profile_set(ScopedCloneableImageCreation self, string profile)"},
	 { (char *)"ScopedCloneableImageCreation_profile_get", _wrap_ScopedCloneableImageCreation_profile_get, METH_VARARGS, (char *)"ScopedCloneableImageCreation_profile_get(ScopedCloneableImageCreation self) -> string"},
	 { (char *)"ScopedCloneableImageCreation_clone", _wrap_ScopedCloneableImageCreation_clone, METH_VARARGS, (char *)"ScopedCloneableImageCreation_clone(ScopedCloneableImageCreation self) -> ImageCreation"},
	 { (char *)"ScopedCloneableImageCreation_swigregister", ScopedCloneableImageCreation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableImageData", _wrap_new_ScopedCloneableImageData, METH_VARARGS, (char *)"\n"
		"ScopedCloneableImageData(ImageData ptr=None)\n"
		"ScopedCloneableImageData()\n"
		"new_ScopedCloneableImageData(ScopedCloneableImageData rhs) -> ScopedCloneableImageData\n"
		""},
	 { (char *)"ScopedCloneableImageData_get", _wrap_ScopedCloneableImageData_get, METH_VARARGS, (char *)"ScopedCloneableImageData_get(ScopedCloneableImageData self) -> ImageData"},
	 { (char *)"ScopedCloneableImageData___ref__", _wrap_ScopedCloneableImageData___ref__, METH_VARARGS, (char *)"ScopedCloneableImageData___ref__(ScopedCloneableImageData self) -> ImageData"},
	 { (char *)"ScopedCloneableImageData___deref__", _wrap_ScopedCloneableImageData___deref__, METH_VARARGS, (char *)"ScopedCloneableImageData___deref__(ScopedCloneableImageData self) -> ImageData"},
	 { (char *)"ScopedCloneableImageData_reset", _wrap_ScopedCloneableImageData_reset, METH_VARARGS, (char *)"\n"
		"reset(ImageData ptr=None)\n"
		"ScopedCloneableImageData_reset(ScopedCloneableImageData self)\n"
		""},
	 { (char *)"delete_ScopedCloneableImageData", _wrap_delete_ScopedCloneableImageData, METH_VARARGS, (char *)"delete_ScopedCloneableImageData(ScopedCloneableImageData self)"},
	 { (char *)"ScopedCloneableImageData_clone", _wrap_ScopedCloneableImageData_clone, METH_VARARGS, (char *)"ScopedCloneableImageData_clone(ScopedCloneableImageData self) -> ImageData"},
	 { (char *)"ScopedCloneableImageData_pixelType_set", _wrap_ScopedCloneableImageData_pixelType_set, METH_VARARGS, (char *)"ScopedCloneableImageData_pixelType_set(ScopedCloneableImageData self, PixelType pixelType)"},
	 { (char *)"ScopedCloneableImageData_pixelType_get", _wrap_ScopedCloneableImageData_pixelType_get, METH_VARARGS, (char *)"ScopedCloneableImageData_pixelType_get(ScopedCloneableImageData self) -> PixelType"},
	 { (char *)"ScopedCloneableImageData_amplitudeTable_set", _wrap_ScopedCloneableImageData_amplitudeTable_set, METH_VARARGS, (char *)"ScopedCloneableImageData_amplitudeTable_set(ScopedCloneableImageData self, AmplitudeTable amplitudeTable)"},
	 { (char *)"ScopedCloneableImageData_amplitudeTable_get", _wrap_ScopedCloneableImageData_amplitudeTable_get, METH_VARARGS, (char *)"ScopedCloneableImageData_amplitudeTable_get(ScopedCloneableImageData self) -> AmplitudeTable"},
	 { (char *)"ScopedCloneableImageData_numRows_set", _wrap_ScopedCloneableImageData_numRows_set, METH_VARARGS, (char *)"ScopedCloneableImageData_numRows_set(ScopedCloneableImageData self, size_t numRows)"},
	 { (char *)"ScopedCloneableImageData_numRows_get", _wrap_ScopedCloneableImageData_numRows_get, METH_VARARGS, (char *)"ScopedCloneableImageData_numRows_get(ScopedCloneableImageData self) -> size_t"},
	 { (char *)"ScopedCloneableImageData_numCols_set", _wrap_ScopedCloneableImageData_numCols_set, METH_VARARGS, (char *)"ScopedCloneableImageData_numCols_set(ScopedCloneableImageData self, size_t numCols)"},
	 { (char *)"ScopedCloneableImageData_numCols_get", _wrap_ScopedCloneableImageData_numCols_get, METH_VARARGS, (char *)"ScopedCloneableImageData_numCols_get(ScopedCloneableImageData self) -> size_t"},
	 { (char *)"ScopedCloneableImageData_firstRow_set", _wrap_ScopedCloneableImageData_firstRow_set, METH_VARARGS, (char *)"ScopedCloneableImageData_firstRow_set(ScopedCloneableImageData self, size_t firstRow)"},
	 { (char *)"ScopedCloneableImageData_firstRow_get", _wrap_ScopedCloneableImageData_firstRow_get, METH_VARARGS, (char *)"ScopedCloneableImageData_firstRow_get(ScopedCloneableImageData self) -> size_t"},
	 { (char *)"ScopedCloneableImageData_firstCol_set", _wrap_ScopedCloneableImageData_firstCol_set, METH_VARARGS, (char *)"ScopedCloneableImageData_firstCol_set(ScopedCloneableImageData self, size_t firstCol)"},
	 { (char *)"ScopedCloneableImageData_firstCol_get", _wrap_ScopedCloneableImageData_firstCol_get, METH_VARARGS, (char *)"ScopedCloneableImageData_firstCol_get(ScopedCloneableImageData self) -> size_t"},
	 { (char *)"ScopedCloneableImageData_fullImage_set", _wrap_ScopedCloneableImageData_fullImage_set, METH_VARARGS, (char *)"ScopedCloneableImageData_fullImage_set(ScopedCloneableImageData self, RowColInt fullImage)"},
	 { (char *)"ScopedCloneableImageData_fullImage_get", _wrap_ScopedCloneableImageData_fullImage_get, METH_VARARGS, (char *)"ScopedCloneableImageData_fullImage_get(ScopedCloneableImageData self) -> RowColInt"},
	 { (char *)"ScopedCloneableImageData_scpPixel_set", _wrap_ScopedCloneableImageData_scpPixel_set, METH_VARARGS, (char *)"ScopedCloneableImageData_scpPixel_set(ScopedCloneableImageData self, RowColInt scpPixel)"},
	 { (char *)"ScopedCloneableImageData_scpPixel_get", _wrap_ScopedCloneableImageData_scpPixel_get, METH_VARARGS, (char *)"ScopedCloneableImageData_scpPixel_get(ScopedCloneableImageData self) -> RowColInt"},
	 { (char *)"ScopedCloneableImageData_validData_set", _wrap_ScopedCloneableImageData_validData_set, METH_VARARGS, (char *)"ScopedCloneableImageData_validData_set(ScopedCloneableImageData self, std::vector<(six::RowColInt,std::allocator<(six::RowColInt)>)> validData)"},
	 { (char *)"ScopedCloneableImageData_validData_get", _wrap_ScopedCloneableImageData_validData_get, METH_VARARGS, (char *)"ScopedCloneableImageData_validData_get(ScopedCloneableImageData self) -> std::vector<(six::RowColInt,std::allocator<(six::RowColInt)>)>"},
	 { (char *)"ScopedCloneableImageData_swigregister", ScopedCloneableImageData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableGeoData", _wrap_new_ScopedCloneableGeoData, METH_VARARGS, (char *)"\n"
		"ScopedCloneableGeoData(GeoData ptr=None)\n"
		"ScopedCloneableGeoData()\n"
		"new_ScopedCloneableGeoData(ScopedCloneableGeoData rhs) -> ScopedCloneableGeoData\n"
		""},
	 { (char *)"ScopedCloneableGeoData_get", _wrap_ScopedCloneableGeoData_get, METH_VARARGS, (char *)"ScopedCloneableGeoData_get(ScopedCloneableGeoData self) -> GeoData"},
	 { (char *)"ScopedCloneableGeoData___ref__", _wrap_ScopedCloneableGeoData___ref__, METH_VARARGS, (char *)"ScopedCloneableGeoData___ref__(ScopedCloneableGeoData self) -> GeoData"},
	 { (char *)"ScopedCloneableGeoData___deref__", _wrap_ScopedCloneableGeoData___deref__, METH_VARARGS, (char *)"ScopedCloneableGeoData___deref__(ScopedCloneableGeoData self) -> GeoData"},
	 { (char *)"ScopedCloneableGeoData_reset", _wrap_ScopedCloneableGeoData_reset, METH_VARARGS, (char *)"\n"
		"reset(GeoData ptr=None)\n"
		"ScopedCloneableGeoData_reset(ScopedCloneableGeoData self)\n"
		""},
	 { (char *)"delete_ScopedCloneableGeoData", _wrap_delete_ScopedCloneableGeoData, METH_VARARGS, (char *)"delete_ScopedCloneableGeoData(ScopedCloneableGeoData self)"},
	 { (char *)"ScopedCloneableGeoData_clone", _wrap_ScopedCloneableGeoData_clone, METH_VARARGS, (char *)"ScopedCloneableGeoData_clone(ScopedCloneableGeoData self) -> GeoData"},
	 { (char *)"ScopedCloneableGeoData_earthModel_set", _wrap_ScopedCloneableGeoData_earthModel_set, METH_VARARGS, (char *)"ScopedCloneableGeoData_earthModel_set(ScopedCloneableGeoData self, EarthModelType earthModel)"},
	 { (char *)"ScopedCloneableGeoData_earthModel_get", _wrap_ScopedCloneableGeoData_earthModel_get, METH_VARARGS, (char *)"ScopedCloneableGeoData_earthModel_get(ScopedCloneableGeoData self) -> EarthModelType"},
	 { (char *)"ScopedCloneableGeoData_scp_set", _wrap_ScopedCloneableGeoData_scp_set, METH_VARARGS, (char *)"ScopedCloneableGeoData_scp_set(ScopedCloneableGeoData self, SCP scp)"},
	 { (char *)"ScopedCloneableGeoData_scp_get", _wrap_ScopedCloneableGeoData_scp_get, METH_VARARGS, (char *)"ScopedCloneableGeoData_scp_get(ScopedCloneableGeoData self) -> SCP"},
	 { (char *)"ScopedCloneableGeoData_imageCorners_set", _wrap_ScopedCloneableGeoData_imageCorners_set, METH_VARARGS, (char *)"ScopedCloneableGeoData_imageCorners_set(ScopedCloneableGeoData self, LatLonCorners imageCorners)"},
	 { (char *)"ScopedCloneableGeoData_imageCorners_get", _wrap_ScopedCloneableGeoData_imageCorners_get, METH_VARARGS, (char *)"ScopedCloneableGeoData_imageCorners_get(ScopedCloneableGeoData self) -> LatLonCorners"},
	 { (char *)"ScopedCloneableGeoData_validData_set", _wrap_ScopedCloneableGeoData_validData_set, METH_VARARGS, (char *)"ScopedCloneableGeoData_validData_set(ScopedCloneableGeoData self, std::vector<(six::LatLon,std::allocator<(six::LatLon)>)> validData)"},
	 { (char *)"ScopedCloneableGeoData_validData_get", _wrap_ScopedCloneableGeoData_validData_get, METH_VARARGS, (char *)"ScopedCloneableGeoData_validData_get(ScopedCloneableGeoData self) -> std::vector<(six::LatLon,std::allocator<(six::LatLon)>)>"},
	 { (char *)"ScopedCloneableGeoData_geoInfos_set", _wrap_ScopedCloneableGeoData_geoInfos_set, METH_VARARGS, (char *)"ScopedCloneableGeoData_geoInfos_set(ScopedCloneableGeoData self, VectorScopedCloneableGeoInfo geoInfos)"},
	 { (char *)"ScopedCloneableGeoData_geoInfos_get", _wrap_ScopedCloneableGeoData_geoInfos_get, METH_VARARGS, (char *)"ScopedCloneableGeoData_geoInfos_get(ScopedCloneableGeoData self) -> VectorScopedCloneableGeoInfo"},
	 { (char *)"ScopedCloneableGeoData_swigregister", ScopedCloneableGeoData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableGrid", _wrap_new_ScopedCloneableGrid, METH_VARARGS, (char *)"\n"
		"ScopedCloneableGrid(Grid ptr=None)\n"
		"ScopedCloneableGrid()\n"
		"new_ScopedCloneableGrid(ScopedCloneableGrid rhs) -> ScopedCloneableGrid\n"
		""},
	 { (char *)"ScopedCloneableGrid_get", _wrap_ScopedCloneableGrid_get, METH_VARARGS, (char *)"ScopedCloneableGrid_get(ScopedCloneableGrid self) -> Grid"},
	 { (char *)"ScopedCloneableGrid___ref__", _wrap_ScopedCloneableGrid___ref__, METH_VARARGS, (char *)"ScopedCloneableGrid___ref__(ScopedCloneableGrid self) -> Grid"},
	 { (char *)"ScopedCloneableGrid___deref__", _wrap_ScopedCloneableGrid___deref__, METH_VARARGS, (char *)"ScopedCloneableGrid___deref__(ScopedCloneableGrid self) -> Grid"},
	 { (char *)"ScopedCloneableGrid_reset", _wrap_ScopedCloneableGrid_reset, METH_VARARGS, (char *)"\n"
		"reset(Grid ptr=None)\n"
		"ScopedCloneableGrid_reset(ScopedCloneableGrid self)\n"
		""},
	 { (char *)"delete_ScopedCloneableGrid", _wrap_delete_ScopedCloneableGrid, METH_VARARGS, (char *)"delete_ScopedCloneableGrid(ScopedCloneableGrid self)"},
	 { (char *)"ScopedCloneableGrid_clone", _wrap_ScopedCloneableGrid_clone, METH_VARARGS, (char *)"ScopedCloneableGrid_clone(ScopedCloneableGrid self) -> Grid"},
	 { (char *)"ScopedCloneableGrid_imagePlane_set", _wrap_ScopedCloneableGrid_imagePlane_set, METH_VARARGS, (char *)"ScopedCloneableGrid_imagePlane_set(ScopedCloneableGrid self, ComplexImagePlaneType imagePlane)"},
	 { (char *)"ScopedCloneableGrid_imagePlane_get", _wrap_ScopedCloneableGrid_imagePlane_get, METH_VARARGS, (char *)"ScopedCloneableGrid_imagePlane_get(ScopedCloneableGrid self) -> ComplexImagePlaneType"},
	 { (char *)"ScopedCloneableGrid_type_set", _wrap_ScopedCloneableGrid_type_set, METH_VARARGS, (char *)"ScopedCloneableGrid_type_set(ScopedCloneableGrid self, ComplexImageGridType type)"},
	 { (char *)"ScopedCloneableGrid_type_get", _wrap_ScopedCloneableGrid_type_get, METH_VARARGS, (char *)"ScopedCloneableGrid_type_get(ScopedCloneableGrid self) -> ComplexImageGridType"},
	 { (char *)"ScopedCloneableGrid_timeCOAPoly_set", _wrap_ScopedCloneableGrid_timeCOAPoly_set, METH_VARARGS, (char *)"ScopedCloneableGrid_timeCOAPoly_set(ScopedCloneableGrid self, Poly2D timeCOAPoly)"},
	 { (char *)"ScopedCloneableGrid_timeCOAPoly_get", _wrap_ScopedCloneableGrid_timeCOAPoly_get, METH_VARARGS, (char *)"ScopedCloneableGrid_timeCOAPoly_get(ScopedCloneableGrid self) -> Poly2D"},
	 { (char *)"ScopedCloneableGrid_row_set", _wrap_ScopedCloneableGrid_row_set, METH_VARARGS, (char *)"ScopedCloneableGrid_row_set(ScopedCloneableGrid self, mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)> row)"},
	 { (char *)"ScopedCloneableGrid_row_get", _wrap_ScopedCloneableGrid_row_get, METH_VARARGS, (char *)"ScopedCloneableGrid_row_get(ScopedCloneableGrid self) -> mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)>"},
	 { (char *)"ScopedCloneableGrid_col_set", _wrap_ScopedCloneableGrid_col_set, METH_VARARGS, (char *)"ScopedCloneableGrid_col_set(ScopedCloneableGrid self, mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)> col)"},
	 { (char *)"ScopedCloneableGrid_col_get", _wrap_ScopedCloneableGrid_col_get, METH_VARARGS, (char *)"ScopedCloneableGrid_col_get(ScopedCloneableGrid self) -> mem::ScopedCloneablePtr<(six::sicd::DirectionParameters)>"},
	 { (char *)"ScopedCloneableGrid_swigregister", ScopedCloneableGrid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableTimeline", _wrap_new_ScopedCloneableTimeline, METH_VARARGS, (char *)"\n"
		"ScopedCloneableTimeline(Timeline ptr=None)\n"
		"ScopedCloneableTimeline()\n"
		"new_ScopedCloneableTimeline(ScopedCloneableTimeline rhs) -> ScopedCloneableTimeline\n"
		""},
	 { (char *)"ScopedCloneableTimeline_get", _wrap_ScopedCloneableTimeline_get, METH_VARARGS, (char *)"ScopedCloneableTimeline_get(ScopedCloneableTimeline self) -> Timeline"},
	 { (char *)"ScopedCloneableTimeline___ref__", _wrap_ScopedCloneableTimeline___ref__, METH_VARARGS, (char *)"ScopedCloneableTimeline___ref__(ScopedCloneableTimeline self) -> Timeline"},
	 { (char *)"ScopedCloneableTimeline___deref__", _wrap_ScopedCloneableTimeline___deref__, METH_VARARGS, (char *)"ScopedCloneableTimeline___deref__(ScopedCloneableTimeline self) -> Timeline"},
	 { (char *)"ScopedCloneableTimeline_reset", _wrap_ScopedCloneableTimeline_reset, METH_VARARGS, (char *)"\n"
		"reset(Timeline ptr=None)\n"
		"ScopedCloneableTimeline_reset(ScopedCloneableTimeline self)\n"
		""},
	 { (char *)"delete_ScopedCloneableTimeline", _wrap_delete_ScopedCloneableTimeline, METH_VARARGS, (char *)"delete_ScopedCloneableTimeline(ScopedCloneableTimeline self)"},
	 { (char *)"ScopedCloneableTimeline_collectStart_set", _wrap_ScopedCloneableTimeline_collectStart_set, METH_VARARGS, (char *)"ScopedCloneableTimeline_collectStart_set(ScopedCloneableTimeline self, DateTime collectStart)"},
	 { (char *)"ScopedCloneableTimeline_collectStart_get", _wrap_ScopedCloneableTimeline_collectStart_get, METH_VARARGS, (char *)"ScopedCloneableTimeline_collectStart_get(ScopedCloneableTimeline self) -> DateTime"},
	 { (char *)"ScopedCloneableTimeline_collectDuration_set", _wrap_ScopedCloneableTimeline_collectDuration_set, METH_VARARGS, (char *)"ScopedCloneableTimeline_collectDuration_set(ScopedCloneableTimeline self, double collectDuration)"},
	 { (char *)"ScopedCloneableTimeline_collectDuration_get", _wrap_ScopedCloneableTimeline_collectDuration_get, METH_VARARGS, (char *)"ScopedCloneableTimeline_collectDuration_get(ScopedCloneableTimeline self) -> double"},
	 { (char *)"ScopedCloneableTimeline_interPulsePeriod_set", _wrap_ScopedCloneableTimeline_interPulsePeriod_set, METH_VARARGS, (char *)"ScopedCloneableTimeline_interPulsePeriod_set(ScopedCloneableTimeline self, InterPulsePeriod interPulsePeriod)"},
	 { (char *)"ScopedCloneableTimeline_interPulsePeriod_get", _wrap_ScopedCloneableTimeline_interPulsePeriod_get, METH_VARARGS, (char *)"ScopedCloneableTimeline_interPulsePeriod_get(ScopedCloneableTimeline self) -> InterPulsePeriod"},
	 { (char *)"ScopedCloneableTimeline_clone", _wrap_ScopedCloneableTimeline_clone, METH_VARARGS, (char *)"ScopedCloneableTimeline_clone(ScopedCloneableTimeline self) -> Timeline"},
	 { (char *)"ScopedCloneableTimeline_swigregister", ScopedCloneableTimeline_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneablePosition", _wrap_new_ScopedCloneablePosition, METH_VARARGS, (char *)"\n"
		"ScopedCloneablePosition(Position ptr=None)\n"
		"ScopedCloneablePosition()\n"
		"new_ScopedCloneablePosition(ScopedCloneablePosition rhs) -> ScopedCloneablePosition\n"
		""},
	 { (char *)"ScopedCloneablePosition_get", _wrap_ScopedCloneablePosition_get, METH_VARARGS, (char *)"ScopedCloneablePosition_get(ScopedCloneablePosition self) -> Position"},
	 { (char *)"ScopedCloneablePosition___ref__", _wrap_ScopedCloneablePosition___ref__, METH_VARARGS, (char *)"ScopedCloneablePosition___ref__(ScopedCloneablePosition self) -> Position"},
	 { (char *)"ScopedCloneablePosition___deref__", _wrap_ScopedCloneablePosition___deref__, METH_VARARGS, (char *)"ScopedCloneablePosition___deref__(ScopedCloneablePosition self) -> Position"},
	 { (char *)"ScopedCloneablePosition_reset", _wrap_ScopedCloneablePosition_reset, METH_VARARGS, (char *)"\n"
		"reset(Position ptr=None)\n"
		"ScopedCloneablePosition_reset(ScopedCloneablePosition self)\n"
		""},
	 { (char *)"delete_ScopedCloneablePosition", _wrap_delete_ScopedCloneablePosition, METH_VARARGS, (char *)"delete_ScopedCloneablePosition(ScopedCloneablePosition self)"},
	 { (char *)"ScopedCloneablePosition_arpPoly_set", _wrap_ScopedCloneablePosition_arpPoly_set, METH_VARARGS, (char *)"ScopedCloneablePosition_arpPoly_set(ScopedCloneablePosition self, PolyXYZ arpPoly)"},
	 { (char *)"ScopedCloneablePosition_arpPoly_get", _wrap_ScopedCloneablePosition_arpPoly_get, METH_VARARGS, (char *)"ScopedCloneablePosition_arpPoly_get(ScopedCloneablePosition self) -> PolyXYZ"},
	 { (char *)"ScopedCloneablePosition_grpPoly_set", _wrap_ScopedCloneablePosition_grpPoly_set, METH_VARARGS, (char *)"ScopedCloneablePosition_grpPoly_set(ScopedCloneablePosition self, PolyXYZ grpPoly)"},
	 { (char *)"ScopedCloneablePosition_grpPoly_get", _wrap_ScopedCloneablePosition_grpPoly_get, METH_VARARGS, (char *)"ScopedCloneablePosition_grpPoly_get(ScopedCloneablePosition self) -> PolyXYZ"},
	 { (char *)"ScopedCloneablePosition_txAPCPoly_set", _wrap_ScopedCloneablePosition_txAPCPoly_set, METH_VARARGS, (char *)"ScopedCloneablePosition_txAPCPoly_set(ScopedCloneablePosition self, PolyXYZ txAPCPoly)"},
	 { (char *)"ScopedCloneablePosition_txAPCPoly_get", _wrap_ScopedCloneablePosition_txAPCPoly_get, METH_VARARGS, (char *)"ScopedCloneablePosition_txAPCPoly_get(ScopedCloneablePosition self) -> PolyXYZ"},
	 { (char *)"ScopedCloneablePosition_rcvAPC_set", _wrap_ScopedCloneablePosition_rcvAPC_set, METH_VARARGS, (char *)"ScopedCloneablePosition_rcvAPC_set(ScopedCloneablePosition self, RcvAPC rcvAPC)"},
	 { (char *)"ScopedCloneablePosition_rcvAPC_get", _wrap_ScopedCloneablePosition_rcvAPC_get, METH_VARARGS, (char *)"ScopedCloneablePosition_rcvAPC_get(ScopedCloneablePosition self) -> RcvAPC"},
	 { (char *)"ScopedCloneablePosition_clone", _wrap_ScopedCloneablePosition_clone, METH_VARARGS, (char *)"ScopedCloneablePosition_clone(ScopedCloneablePosition self) -> Position"},
	 { (char *)"ScopedCloneablePosition_swigregister", ScopedCloneablePosition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableRadarCollection", _wrap_new_ScopedCloneableRadarCollection, METH_VARARGS, (char *)"\n"
		"ScopedCloneableRadarCollection(RadarCollection ptr=None)\n"
		"ScopedCloneableRadarCollection()\n"
		"new_ScopedCloneableRadarCollection(ScopedCloneableRadarCollection rhs) -> ScopedCloneableRadarCollection\n"
		""},
	 { (char *)"ScopedCloneableRadarCollection_get", _wrap_ScopedCloneableRadarCollection_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_get(ScopedCloneableRadarCollection self) -> RadarCollection"},
	 { (char *)"ScopedCloneableRadarCollection___ref__", _wrap_ScopedCloneableRadarCollection___ref__, METH_VARARGS, (char *)"ScopedCloneableRadarCollection___ref__(ScopedCloneableRadarCollection self) -> RadarCollection"},
	 { (char *)"ScopedCloneableRadarCollection___deref__", _wrap_ScopedCloneableRadarCollection___deref__, METH_VARARGS, (char *)"ScopedCloneableRadarCollection___deref__(ScopedCloneableRadarCollection self) -> RadarCollection"},
	 { (char *)"ScopedCloneableRadarCollection_reset", _wrap_ScopedCloneableRadarCollection_reset, METH_VARARGS, (char *)"\n"
		"reset(RadarCollection ptr=None)\n"
		"ScopedCloneableRadarCollection_reset(ScopedCloneableRadarCollection self)\n"
		""},
	 { (char *)"delete_ScopedCloneableRadarCollection", _wrap_delete_ScopedCloneableRadarCollection, METH_VARARGS, (char *)"delete_ScopedCloneableRadarCollection(ScopedCloneableRadarCollection self)"},
	 { (char *)"ScopedCloneableRadarCollection_clone", _wrap_ScopedCloneableRadarCollection_clone, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_clone(ScopedCloneableRadarCollection self) -> RadarCollection"},
	 { (char *)"ScopedCloneableRadarCollection_refFrequencyIndex_set", _wrap_ScopedCloneableRadarCollection_refFrequencyIndex_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_refFrequencyIndex_set(ScopedCloneableRadarCollection self, int refFrequencyIndex)"},
	 { (char *)"ScopedCloneableRadarCollection_refFrequencyIndex_get", _wrap_ScopedCloneableRadarCollection_refFrequencyIndex_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_refFrequencyIndex_get(ScopedCloneableRadarCollection self) -> int"},
	 { (char *)"ScopedCloneableRadarCollection_txFrequencyMin_set", _wrap_ScopedCloneableRadarCollection_txFrequencyMin_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_txFrequencyMin_set(ScopedCloneableRadarCollection self, double txFrequencyMin)"},
	 { (char *)"ScopedCloneableRadarCollection_txFrequencyMin_get", _wrap_ScopedCloneableRadarCollection_txFrequencyMin_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_txFrequencyMin_get(ScopedCloneableRadarCollection self) -> double"},
	 { (char *)"ScopedCloneableRadarCollection_txFrequencyMax_set", _wrap_ScopedCloneableRadarCollection_txFrequencyMax_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_txFrequencyMax_set(ScopedCloneableRadarCollection self, double txFrequencyMax)"},
	 { (char *)"ScopedCloneableRadarCollection_txFrequencyMax_get", _wrap_ScopedCloneableRadarCollection_txFrequencyMax_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_txFrequencyMax_get(ScopedCloneableRadarCollection self) -> double"},
	 { (char *)"ScopedCloneableRadarCollection_txPolarization_set", _wrap_ScopedCloneableRadarCollection_txPolarization_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_txPolarization_set(ScopedCloneableRadarCollection self, PolarizationSequenceType txPolarization)"},
	 { (char *)"ScopedCloneableRadarCollection_txPolarization_get", _wrap_ScopedCloneableRadarCollection_txPolarization_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_txPolarization_get(ScopedCloneableRadarCollection self) -> PolarizationSequenceType"},
	 { (char *)"ScopedCloneableRadarCollection_polarizationHVAnglePoly_set", _wrap_ScopedCloneableRadarCollection_polarizationHVAnglePoly_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_polarizationHVAnglePoly_set(ScopedCloneableRadarCollection self, Poly1D polarizationHVAnglePoly)"},
	 { (char *)"ScopedCloneableRadarCollection_polarizationHVAnglePoly_get", _wrap_ScopedCloneableRadarCollection_polarizationHVAnglePoly_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_polarizationHVAnglePoly_get(ScopedCloneableRadarCollection self) -> Poly1D"},
	 { (char *)"ScopedCloneableRadarCollection_txSequence_set", _wrap_ScopedCloneableRadarCollection_txSequence_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_txSequence_set(ScopedCloneableRadarCollection self, VectorScopedCloneableTxStep txSequence)"},
	 { (char *)"ScopedCloneableRadarCollection_txSequence_get", _wrap_ScopedCloneableRadarCollection_txSequence_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_txSequence_get(ScopedCloneableRadarCollection self) -> VectorScopedCloneableTxStep"},
	 { (char *)"ScopedCloneableRadarCollection_waveform_set", _wrap_ScopedCloneableRadarCollection_waveform_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_waveform_set(ScopedCloneableRadarCollection self, VectorScopedCloneableWaveformParameters waveform)"},
	 { (char *)"ScopedCloneableRadarCollection_waveform_get", _wrap_ScopedCloneableRadarCollection_waveform_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_waveform_get(ScopedCloneableRadarCollection self) -> VectorScopedCloneableWaveformParameters"},
	 { (char *)"ScopedCloneableRadarCollection_rcvChannels_set", _wrap_ScopedCloneableRadarCollection_rcvChannels_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_rcvChannels_set(ScopedCloneableRadarCollection self, VectorScopedCloneableChannelParameters rcvChannels)"},
	 { (char *)"ScopedCloneableRadarCollection_rcvChannels_get", _wrap_ScopedCloneableRadarCollection_rcvChannels_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_rcvChannels_get(ScopedCloneableRadarCollection self) -> VectorScopedCloneableChannelParameters"},
	 { (char *)"ScopedCloneableRadarCollection_area_set", _wrap_ScopedCloneableRadarCollection_area_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_area_set(ScopedCloneableRadarCollection self, ScopedCloneableArea area)"},
	 { (char *)"ScopedCloneableRadarCollection_area_get", _wrap_ScopedCloneableRadarCollection_area_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_area_get(ScopedCloneableRadarCollection self) -> ScopedCloneableArea"},
	 { (char *)"ScopedCloneableRadarCollection_parameters_set", _wrap_ScopedCloneableRadarCollection_parameters_set, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_parameters_set(ScopedCloneableRadarCollection self, std::vector<(Parameter,std::allocator<(Parameter)>)> parameters)"},
	 { (char *)"ScopedCloneableRadarCollection_parameters_get", _wrap_ScopedCloneableRadarCollection_parameters_get, METH_VARARGS, (char *)"ScopedCloneableRadarCollection_parameters_get(ScopedCloneableRadarCollection self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"ScopedCloneableRadarCollection_swigregister", ScopedCloneableRadarCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableImageFormation", _wrap_new_ScopedCopyableImageFormation, METH_VARARGS, (char *)"\n"
		"ScopedCopyableImageFormation(ImageFormation ptr=None)\n"
		"ScopedCopyableImageFormation()\n"
		"new_ScopedCopyableImageFormation(ScopedCopyableImageFormation rhs) -> ScopedCopyableImageFormation\n"
		""},
	 { (char *)"ScopedCopyableImageFormation_get", _wrap_ScopedCopyableImageFormation_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_get(ScopedCopyableImageFormation self) -> ImageFormation"},
	 { (char *)"ScopedCopyableImageFormation___ref__", _wrap_ScopedCopyableImageFormation___ref__, METH_VARARGS, (char *)"ScopedCopyableImageFormation___ref__(ScopedCopyableImageFormation self) -> ImageFormation"},
	 { (char *)"ScopedCopyableImageFormation___deref__", _wrap_ScopedCopyableImageFormation___deref__, METH_VARARGS, (char *)"ScopedCopyableImageFormation___deref__(ScopedCopyableImageFormation self) -> ImageFormation"},
	 { (char *)"ScopedCopyableImageFormation_reset", _wrap_ScopedCopyableImageFormation_reset, METH_VARARGS, (char *)"\n"
		"reset(ImageFormation ptr=None)\n"
		"ScopedCopyableImageFormation_reset(ScopedCopyableImageFormation self)\n"
		""},
	 { (char *)"delete_ScopedCopyableImageFormation", _wrap_delete_ScopedCopyableImageFormation, METH_VARARGS, (char *)"delete_ScopedCopyableImageFormation(ScopedCopyableImageFormation self)"},
	 { (char *)"ScopedCopyableImageFormation_segmentIdentifier_set", _wrap_ScopedCopyableImageFormation_segmentIdentifier_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_segmentIdentifier_set(ScopedCopyableImageFormation self, string segmentIdentifier)"},
	 { (char *)"ScopedCopyableImageFormation_segmentIdentifier_get", _wrap_ScopedCopyableImageFormation_segmentIdentifier_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_segmentIdentifier_get(ScopedCopyableImageFormation self) -> string"},
	 { (char *)"ScopedCopyableImageFormation_rcvChannelProcessed_set", _wrap_ScopedCopyableImageFormation_rcvChannelProcessed_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_rcvChannelProcessed_set(ScopedCopyableImageFormation self, ScopedCopyableRcvChannelProcessed rcvChannelProcessed)"},
	 { (char *)"ScopedCopyableImageFormation_rcvChannelProcessed_get", _wrap_ScopedCopyableImageFormation_rcvChannelProcessed_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_rcvChannelProcessed_get(ScopedCopyableImageFormation self) -> ScopedCopyableRcvChannelProcessed"},
	 { (char *)"ScopedCopyableImageFormation_txRcvPolarizationProc_set", _wrap_ScopedCopyableImageFormation_txRcvPolarizationProc_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_txRcvPolarizationProc_set(ScopedCopyableImageFormation self, DualPolarizationType txRcvPolarizationProc)"},
	 { (char *)"ScopedCopyableImageFormation_txRcvPolarizationProc_get", _wrap_ScopedCopyableImageFormation_txRcvPolarizationProc_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_txRcvPolarizationProc_get(ScopedCopyableImageFormation self) -> DualPolarizationType"},
	 { (char *)"ScopedCopyableImageFormation_imageFormationAlgorithm_set", _wrap_ScopedCopyableImageFormation_imageFormationAlgorithm_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_imageFormationAlgorithm_set(ScopedCopyableImageFormation self, ImageFormationType imageFormationAlgorithm)"},
	 { (char *)"ScopedCopyableImageFormation_imageFormationAlgorithm_get", _wrap_ScopedCopyableImageFormation_imageFormationAlgorithm_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_imageFormationAlgorithm_get(ScopedCopyableImageFormation self) -> ImageFormationType"},
	 { (char *)"ScopedCopyableImageFormation_tStartProc_set", _wrap_ScopedCopyableImageFormation_tStartProc_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_tStartProc_set(ScopedCopyableImageFormation self, double tStartProc)"},
	 { (char *)"ScopedCopyableImageFormation_tStartProc_get", _wrap_ScopedCopyableImageFormation_tStartProc_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_tStartProc_get(ScopedCopyableImageFormation self) -> double"},
	 { (char *)"ScopedCopyableImageFormation_tEndProc_set", _wrap_ScopedCopyableImageFormation_tEndProc_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_tEndProc_set(ScopedCopyableImageFormation self, double tEndProc)"},
	 { (char *)"ScopedCopyableImageFormation_tEndProc_get", _wrap_ScopedCopyableImageFormation_tEndProc_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_tEndProc_get(ScopedCopyableImageFormation self) -> double"},
	 { (char *)"ScopedCopyableImageFormation_txFrequencyProcMin_set", _wrap_ScopedCopyableImageFormation_txFrequencyProcMin_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_txFrequencyProcMin_set(ScopedCopyableImageFormation self, double txFrequencyProcMin)"},
	 { (char *)"ScopedCopyableImageFormation_txFrequencyProcMin_get", _wrap_ScopedCopyableImageFormation_txFrequencyProcMin_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_txFrequencyProcMin_get(ScopedCopyableImageFormation self) -> double"},
	 { (char *)"ScopedCopyableImageFormation_txFrequencyProcMax_set", _wrap_ScopedCopyableImageFormation_txFrequencyProcMax_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_txFrequencyProcMax_set(ScopedCopyableImageFormation self, double txFrequencyProcMax)"},
	 { (char *)"ScopedCopyableImageFormation_txFrequencyProcMax_get", _wrap_ScopedCopyableImageFormation_txFrequencyProcMax_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_txFrequencyProcMax_get(ScopedCopyableImageFormation self) -> double"},
	 { (char *)"ScopedCopyableImageFormation_slowTimeBeamCompensation_set", _wrap_ScopedCopyableImageFormation_slowTimeBeamCompensation_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_slowTimeBeamCompensation_set(ScopedCopyableImageFormation self, SlowTimeBeamCompensationType slowTimeBeamCompensation)"},
	 { (char *)"ScopedCopyableImageFormation_slowTimeBeamCompensation_get", _wrap_ScopedCopyableImageFormation_slowTimeBeamCompensation_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_slowTimeBeamCompensation_get(ScopedCopyableImageFormation self) -> SlowTimeBeamCompensationType"},
	 { (char *)"ScopedCopyableImageFormation_imageBeamCompensation_set", _wrap_ScopedCopyableImageFormation_imageBeamCompensation_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_imageBeamCompensation_set(ScopedCopyableImageFormation self, ImageBeamCompensationType imageBeamCompensation)"},
	 { (char *)"ScopedCopyableImageFormation_imageBeamCompensation_get", _wrap_ScopedCopyableImageFormation_imageBeamCompensation_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_imageBeamCompensation_get(ScopedCopyableImageFormation self) -> ImageBeamCompensationType"},
	 { (char *)"ScopedCopyableImageFormation_azimuthAutofocus_set", _wrap_ScopedCopyableImageFormation_azimuthAutofocus_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_azimuthAutofocus_set(ScopedCopyableImageFormation self, AutofocusType azimuthAutofocus)"},
	 { (char *)"ScopedCopyableImageFormation_azimuthAutofocus_get", _wrap_ScopedCopyableImageFormation_azimuthAutofocus_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_azimuthAutofocus_get(ScopedCopyableImageFormation self) -> AutofocusType"},
	 { (char *)"ScopedCopyableImageFormation_rangeAutofocus_set", _wrap_ScopedCopyableImageFormation_rangeAutofocus_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_rangeAutofocus_set(ScopedCopyableImageFormation self, AutofocusType rangeAutofocus)"},
	 { (char *)"ScopedCopyableImageFormation_rangeAutofocus_get", _wrap_ScopedCopyableImageFormation_rangeAutofocus_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_rangeAutofocus_get(ScopedCopyableImageFormation self) -> AutofocusType"},
	 { (char *)"ScopedCopyableImageFormation_processing_set", _wrap_ScopedCopyableImageFormation_processing_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_processing_set(ScopedCopyableImageFormation self, VectorProcessing processing)"},
	 { (char *)"ScopedCopyableImageFormation_processing_get", _wrap_ScopedCopyableImageFormation_processing_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_processing_get(ScopedCopyableImageFormation self) -> VectorProcessing"},
	 { (char *)"ScopedCopyableImageFormation_polarizationCalibration_set", _wrap_ScopedCopyableImageFormation_polarizationCalibration_set, METH_VARARGS, (char *)"ScopedCopyableImageFormation_polarizationCalibration_set(ScopedCopyableImageFormation self, ScopedCopyablePolarizationCalibration polarizationCalibration)"},
	 { (char *)"ScopedCopyableImageFormation_polarizationCalibration_get", _wrap_ScopedCopyableImageFormation_polarizationCalibration_get, METH_VARARGS, (char *)"ScopedCopyableImageFormation_polarizationCalibration_get(ScopedCopyableImageFormation self) -> ScopedCopyablePolarizationCalibration"},
	 { (char *)"ScopedCopyableImageFormation_swigregister", ScopedCopyableImageFormation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableSCPCOA", _wrap_new_ScopedCopyableSCPCOA, METH_VARARGS, (char *)"\n"
		"ScopedCopyableSCPCOA(SCPCOA ptr=None)\n"
		"ScopedCopyableSCPCOA()\n"
		"new_ScopedCopyableSCPCOA(ScopedCopyableSCPCOA rhs) -> ScopedCopyableSCPCOA\n"
		""},
	 { (char *)"ScopedCopyableSCPCOA_get", _wrap_ScopedCopyableSCPCOA_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_get(ScopedCopyableSCPCOA self) -> SCPCOA"},
	 { (char *)"ScopedCopyableSCPCOA___ref__", _wrap_ScopedCopyableSCPCOA___ref__, METH_VARARGS, (char *)"ScopedCopyableSCPCOA___ref__(ScopedCopyableSCPCOA self) -> SCPCOA"},
	 { (char *)"ScopedCopyableSCPCOA___deref__", _wrap_ScopedCopyableSCPCOA___deref__, METH_VARARGS, (char *)"ScopedCopyableSCPCOA___deref__(ScopedCopyableSCPCOA self) -> SCPCOA"},
	 { (char *)"ScopedCopyableSCPCOA_reset", _wrap_ScopedCopyableSCPCOA_reset, METH_VARARGS, (char *)"\n"
		"reset(SCPCOA ptr=None)\n"
		"ScopedCopyableSCPCOA_reset(ScopedCopyableSCPCOA self)\n"
		""},
	 { (char *)"delete_ScopedCopyableSCPCOA", _wrap_delete_ScopedCopyableSCPCOA, METH_VARARGS, (char *)"delete_ScopedCopyableSCPCOA(ScopedCopyableSCPCOA self)"},
	 { (char *)"ScopedCopyableSCPCOA_scpTime_set", _wrap_ScopedCopyableSCPCOA_scpTime_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_scpTime_set(ScopedCopyableSCPCOA self, double scpTime)"},
	 { (char *)"ScopedCopyableSCPCOA_scpTime_get", _wrap_ScopedCopyableSCPCOA_scpTime_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_scpTime_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_arpPos_set", _wrap_ScopedCopyableSCPCOA_arpPos_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_arpPos_set(ScopedCopyableSCPCOA self, Vector3 arpPos)"},
	 { (char *)"ScopedCopyableSCPCOA_arpPos_get", _wrap_ScopedCopyableSCPCOA_arpPos_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_arpPos_get(ScopedCopyableSCPCOA self) -> Vector3"},
	 { (char *)"ScopedCopyableSCPCOA_arpVel_set", _wrap_ScopedCopyableSCPCOA_arpVel_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_arpVel_set(ScopedCopyableSCPCOA self, Vector3 arpVel)"},
	 { (char *)"ScopedCopyableSCPCOA_arpVel_get", _wrap_ScopedCopyableSCPCOA_arpVel_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_arpVel_get(ScopedCopyableSCPCOA self) -> Vector3"},
	 { (char *)"ScopedCopyableSCPCOA_arpAcc_set", _wrap_ScopedCopyableSCPCOA_arpAcc_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_arpAcc_set(ScopedCopyableSCPCOA self, Vector3 arpAcc)"},
	 { (char *)"ScopedCopyableSCPCOA_arpAcc_get", _wrap_ScopedCopyableSCPCOA_arpAcc_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_arpAcc_get(ScopedCopyableSCPCOA self) -> Vector3"},
	 { (char *)"ScopedCopyableSCPCOA_sideOfTrack_set", _wrap_ScopedCopyableSCPCOA_sideOfTrack_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_sideOfTrack_set(ScopedCopyableSCPCOA self, SideOfTrackType sideOfTrack)"},
	 { (char *)"ScopedCopyableSCPCOA_sideOfTrack_get", _wrap_ScopedCopyableSCPCOA_sideOfTrack_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_sideOfTrack_get(ScopedCopyableSCPCOA self) -> SideOfTrackType"},
	 { (char *)"ScopedCopyableSCPCOA_slantRange_set", _wrap_ScopedCopyableSCPCOA_slantRange_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_slantRange_set(ScopedCopyableSCPCOA self, double slantRange)"},
	 { (char *)"ScopedCopyableSCPCOA_slantRange_get", _wrap_ScopedCopyableSCPCOA_slantRange_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_slantRange_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_groundRange_set", _wrap_ScopedCopyableSCPCOA_groundRange_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_groundRange_set(ScopedCopyableSCPCOA self, double groundRange)"},
	 { (char *)"ScopedCopyableSCPCOA_groundRange_get", _wrap_ScopedCopyableSCPCOA_groundRange_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_groundRange_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_dopplerConeAngle_set", _wrap_ScopedCopyableSCPCOA_dopplerConeAngle_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_dopplerConeAngle_set(ScopedCopyableSCPCOA self, double dopplerConeAngle)"},
	 { (char *)"ScopedCopyableSCPCOA_dopplerConeAngle_get", _wrap_ScopedCopyableSCPCOA_dopplerConeAngle_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_dopplerConeAngle_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_grazeAngle_set", _wrap_ScopedCopyableSCPCOA_grazeAngle_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_grazeAngle_set(ScopedCopyableSCPCOA self, double grazeAngle)"},
	 { (char *)"ScopedCopyableSCPCOA_grazeAngle_get", _wrap_ScopedCopyableSCPCOA_grazeAngle_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_grazeAngle_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_incidenceAngle_set", _wrap_ScopedCopyableSCPCOA_incidenceAngle_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_incidenceAngle_set(ScopedCopyableSCPCOA self, double incidenceAngle)"},
	 { (char *)"ScopedCopyableSCPCOA_incidenceAngle_get", _wrap_ScopedCopyableSCPCOA_incidenceAngle_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_incidenceAngle_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_twistAngle_set", _wrap_ScopedCopyableSCPCOA_twistAngle_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_twistAngle_set(ScopedCopyableSCPCOA self, double twistAngle)"},
	 { (char *)"ScopedCopyableSCPCOA_twistAngle_get", _wrap_ScopedCopyableSCPCOA_twistAngle_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_twistAngle_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_slopeAngle_set", _wrap_ScopedCopyableSCPCOA_slopeAngle_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_slopeAngle_set(ScopedCopyableSCPCOA self, double slopeAngle)"},
	 { (char *)"ScopedCopyableSCPCOA_slopeAngle_get", _wrap_ScopedCopyableSCPCOA_slopeAngle_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_slopeAngle_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_azimAngle_set", _wrap_ScopedCopyableSCPCOA_azimAngle_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_azimAngle_set(ScopedCopyableSCPCOA self, double azimAngle)"},
	 { (char *)"ScopedCopyableSCPCOA_azimAngle_get", _wrap_ScopedCopyableSCPCOA_azimAngle_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_azimAngle_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_layoverAngle_set", _wrap_ScopedCopyableSCPCOA_layoverAngle_set, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_layoverAngle_set(ScopedCopyableSCPCOA self, double layoverAngle)"},
	 { (char *)"ScopedCopyableSCPCOA_layoverAngle_get", _wrap_ScopedCopyableSCPCOA_layoverAngle_get, METH_VARARGS, (char *)"ScopedCopyableSCPCOA_layoverAngle_get(ScopedCopyableSCPCOA self) -> double"},
	 { (char *)"ScopedCopyableSCPCOA_swigregister", ScopedCopyableSCPCOA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableRadiometric", _wrap_new_ScopedCopyableRadiometric, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRadiometric(Radiometric ptr=None)\n"
		"ScopedCopyableRadiometric()\n"
		"new_ScopedCopyableRadiometric(ScopedCopyableRadiometric rhs) -> ScopedCopyableRadiometric\n"
		""},
	 { (char *)"ScopedCopyableRadiometric_get", _wrap_ScopedCopyableRadiometric_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_get(ScopedCopyableRadiometric self) -> Radiometric"},
	 { (char *)"ScopedCopyableRadiometric___ref__", _wrap_ScopedCopyableRadiometric___ref__, METH_VARARGS, (char *)"ScopedCopyableRadiometric___ref__(ScopedCopyableRadiometric self) -> Radiometric"},
	 { (char *)"ScopedCopyableRadiometric___deref__", _wrap_ScopedCopyableRadiometric___deref__, METH_VARARGS, (char *)"ScopedCopyableRadiometric___deref__(ScopedCopyableRadiometric self) -> Radiometric"},
	 { (char *)"ScopedCopyableRadiometric_reset", _wrap_ScopedCopyableRadiometric_reset, METH_VARARGS, (char *)"\n"
		"reset(Radiometric ptr=None)\n"
		"ScopedCopyableRadiometric_reset(ScopedCopyableRadiometric self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRadiometric", _wrap_delete_ScopedCopyableRadiometric, METH_VARARGS, (char *)"delete_ScopedCopyableRadiometric(ScopedCopyableRadiometric self)"},
	 { (char *)"ScopedCopyableRadiometric_NL_ABSOLUTE_get", _wrap_ScopedCopyableRadiometric_NL_ABSOLUTE_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_NL_ABSOLUTE_get(ScopedCopyableRadiometric self) -> char"},
	 { (char *)"ScopedCopyableRadiometric_NL_RELATIVE_get", _wrap_ScopedCopyableRadiometric_NL_RELATIVE_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_NL_RELATIVE_get(ScopedCopyableRadiometric self) -> char"},
	 { (char *)"ScopedCopyableRadiometric_noiseLevel_set", _wrap_ScopedCopyableRadiometric_noiseLevel_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_noiseLevel_set(ScopedCopyableRadiometric self, NoiseLevel noiseLevel)"},
	 { (char *)"ScopedCopyableRadiometric_noiseLevel_get", _wrap_ScopedCopyableRadiometric_noiseLevel_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_noiseLevel_get(ScopedCopyableRadiometric self) -> NoiseLevel"},
	 { (char *)"ScopedCopyableRadiometric_rcsSFPoly_set", _wrap_ScopedCopyableRadiometric_rcsSFPoly_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_rcsSFPoly_set(ScopedCopyableRadiometric self, Poly2D rcsSFPoly)"},
	 { (char *)"ScopedCopyableRadiometric_rcsSFPoly_get", _wrap_ScopedCopyableRadiometric_rcsSFPoly_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_rcsSFPoly_get(ScopedCopyableRadiometric self) -> Poly2D"},
	 { (char *)"ScopedCopyableRadiometric_betaZeroSFPoly_set", _wrap_ScopedCopyableRadiometric_betaZeroSFPoly_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_betaZeroSFPoly_set(ScopedCopyableRadiometric self, Poly2D betaZeroSFPoly)"},
	 { (char *)"ScopedCopyableRadiometric_betaZeroSFPoly_get", _wrap_ScopedCopyableRadiometric_betaZeroSFPoly_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_betaZeroSFPoly_get(ScopedCopyableRadiometric self) -> Poly2D"},
	 { (char *)"ScopedCopyableRadiometric_sigmaZeroSFPoly_set", _wrap_ScopedCopyableRadiometric_sigmaZeroSFPoly_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_sigmaZeroSFPoly_set(ScopedCopyableRadiometric self, Poly2D sigmaZeroSFPoly)"},
	 { (char *)"ScopedCopyableRadiometric_sigmaZeroSFPoly_get", _wrap_ScopedCopyableRadiometric_sigmaZeroSFPoly_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_sigmaZeroSFPoly_get(ScopedCopyableRadiometric self) -> Poly2D"},
	 { (char *)"ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set", _wrap_ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set(ScopedCopyableRadiometric self, AppliedType sigmaZeroSFIncidenceMap)"},
	 { (char *)"ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get", _wrap_ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get(ScopedCopyableRadiometric self) -> AppliedType"},
	 { (char *)"ScopedCopyableRadiometric_gammaZeroSFPoly_set", _wrap_ScopedCopyableRadiometric_gammaZeroSFPoly_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_gammaZeroSFPoly_set(ScopedCopyableRadiometric self, Poly2D gammaZeroSFPoly)"},
	 { (char *)"ScopedCopyableRadiometric_gammaZeroSFPoly_get", _wrap_ScopedCopyableRadiometric_gammaZeroSFPoly_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_gammaZeroSFPoly_get(ScopedCopyableRadiometric self) -> Poly2D"},
	 { (char *)"ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set", _wrap_ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set, METH_VARARGS, (char *)"ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set(ScopedCopyableRadiometric self, AppliedType gammaZeroSFIncidenceMap)"},
	 { (char *)"ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get", _wrap_ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get, METH_VARARGS, (char *)"ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get(ScopedCopyableRadiometric self) -> AppliedType"},
	 { (char *)"ScopedCopyableRadiometric_swigregister", ScopedCopyableRadiometric_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableAntenna", _wrap_new_ScopedCopyableAntenna, METH_VARARGS, (char *)"\n"
		"ScopedCopyableAntenna(Antenna ptr=None)\n"
		"ScopedCopyableAntenna()\n"
		"new_ScopedCopyableAntenna(ScopedCopyableAntenna rhs) -> ScopedCopyableAntenna\n"
		""},
	 { (char *)"ScopedCopyableAntenna_get", _wrap_ScopedCopyableAntenna_get, METH_VARARGS, (char *)"ScopedCopyableAntenna_get(ScopedCopyableAntenna self) -> Antenna"},
	 { (char *)"ScopedCopyableAntenna___ref__", _wrap_ScopedCopyableAntenna___ref__, METH_VARARGS, (char *)"ScopedCopyableAntenna___ref__(ScopedCopyableAntenna self) -> Antenna"},
	 { (char *)"ScopedCopyableAntenna___deref__", _wrap_ScopedCopyableAntenna___deref__, METH_VARARGS, (char *)"ScopedCopyableAntenna___deref__(ScopedCopyableAntenna self) -> Antenna"},
	 { (char *)"ScopedCopyableAntenna_reset", _wrap_ScopedCopyableAntenna_reset, METH_VARARGS, (char *)"\n"
		"reset(Antenna ptr=None)\n"
		"ScopedCopyableAntenna_reset(ScopedCopyableAntenna self)\n"
		""},
	 { (char *)"delete_ScopedCopyableAntenna", _wrap_delete_ScopedCopyableAntenna, METH_VARARGS, (char *)"delete_ScopedCopyableAntenna(ScopedCopyableAntenna self)"},
	 { (char *)"ScopedCopyableAntenna_tx_set", _wrap_ScopedCopyableAntenna_tx_set, METH_VARARGS, (char *)"ScopedCopyableAntenna_tx_set(ScopedCopyableAntenna self, ScopedCopyableAntennaParameters tx)"},
	 { (char *)"ScopedCopyableAntenna_tx_get", _wrap_ScopedCopyableAntenna_tx_get, METH_VARARGS, (char *)"ScopedCopyableAntenna_tx_get(ScopedCopyableAntenna self) -> ScopedCopyableAntennaParameters"},
	 { (char *)"ScopedCopyableAntenna_rcv_set", _wrap_ScopedCopyableAntenna_rcv_set, METH_VARARGS, (char *)"ScopedCopyableAntenna_rcv_set(ScopedCopyableAntenna self, ScopedCopyableAntennaParameters rcv)"},
	 { (char *)"ScopedCopyableAntenna_rcv_get", _wrap_ScopedCopyableAntenna_rcv_get, METH_VARARGS, (char *)"ScopedCopyableAntenna_rcv_get(ScopedCopyableAntenna self) -> ScopedCopyableAntennaParameters"},
	 { (char *)"ScopedCopyableAntenna_twoWay_set", _wrap_ScopedCopyableAntenna_twoWay_set, METH_VARARGS, (char *)"ScopedCopyableAntenna_twoWay_set(ScopedCopyableAntenna self, ScopedCopyableAntennaParameters twoWay)"},
	 { (char *)"ScopedCopyableAntenna_twoWay_get", _wrap_ScopedCopyableAntenna_twoWay_get, METH_VARARGS, (char *)"ScopedCopyableAntenna_twoWay_get(ScopedCopyableAntenna self) -> ScopedCopyableAntennaParameters"},
	 { (char *)"ScopedCopyableAntenna_swigregister", ScopedCopyableAntenna_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableErrorStatistics", _wrap_new_ScopedCopyableErrorStatistics, METH_VARARGS, (char *)"\n"
		"ScopedCopyableErrorStatistics(ErrorStatistics ptr=None)\n"
		"ScopedCopyableErrorStatistics()\n"
		"new_ScopedCopyableErrorStatistics(ScopedCopyableErrorStatistics rhs) -> ScopedCopyableErrorStatistics\n"
		""},
	 { (char *)"ScopedCopyableErrorStatistics_get", _wrap_ScopedCopyableErrorStatistics_get, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_get(ScopedCopyableErrorStatistics self) -> ErrorStatistics"},
	 { (char *)"ScopedCopyableErrorStatistics___ref__", _wrap_ScopedCopyableErrorStatistics___ref__, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics___ref__(ScopedCopyableErrorStatistics self) -> ErrorStatistics"},
	 { (char *)"ScopedCopyableErrorStatistics___deref__", _wrap_ScopedCopyableErrorStatistics___deref__, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics___deref__(ScopedCopyableErrorStatistics self) -> ErrorStatistics"},
	 { (char *)"ScopedCopyableErrorStatistics_reset", _wrap_ScopedCopyableErrorStatistics_reset, METH_VARARGS, (char *)"\n"
		"reset(ErrorStatistics ptr=None)\n"
		"ScopedCopyableErrorStatistics_reset(ScopedCopyableErrorStatistics self)\n"
		""},
	 { (char *)"delete_ScopedCopyableErrorStatistics", _wrap_delete_ScopedCopyableErrorStatistics, METH_VARARGS, (char *)"delete_ScopedCopyableErrorStatistics(ScopedCopyableErrorStatistics self)"},
	 { (char *)"ScopedCopyableErrorStatistics_compositeSCP_set", _wrap_ScopedCopyableErrorStatistics_compositeSCP_set, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_compositeSCP_set(ScopedCopyableErrorStatistics self, ScopedCopyableCompositeSCP compositeSCP)"},
	 { (char *)"ScopedCopyableErrorStatistics_compositeSCP_get", _wrap_ScopedCopyableErrorStatistics_compositeSCP_get, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_compositeSCP_get(ScopedCopyableErrorStatistics self) -> ScopedCopyableCompositeSCP"},
	 { (char *)"ScopedCopyableErrorStatistics_components_set", _wrap_ScopedCopyableErrorStatistics_components_set, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_components_set(ScopedCopyableErrorStatistics self, ScopedCopyableComponents components)"},
	 { (char *)"ScopedCopyableErrorStatistics_components_get", _wrap_ScopedCopyableErrorStatistics_components_get, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_components_get(ScopedCopyableErrorStatistics self) -> ScopedCopyableComponents"},
	 { (char *)"ScopedCopyableErrorStatistics_additionalParameters_set", _wrap_ScopedCopyableErrorStatistics_additionalParameters_set, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_additionalParameters_set(ScopedCopyableErrorStatistics self, std::vector<(Parameter,std::allocator<(Parameter)>)> additionalParameters)"},
	 { (char *)"ScopedCopyableErrorStatistics_additionalParameters_get", _wrap_ScopedCopyableErrorStatistics_additionalParameters_get, METH_VARARGS, (char *)"ScopedCopyableErrorStatistics_additionalParameters_get(ScopedCopyableErrorStatistics self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"ScopedCopyableErrorStatistics_swigregister", ScopedCopyableErrorStatistics_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableMatchInformation", _wrap_new_ScopedCopyableMatchInformation, METH_VARARGS, (char *)"\n"
		"ScopedCopyableMatchInformation(MatchInformation ptr=None)\n"
		"ScopedCopyableMatchInformation()\n"
		"new_ScopedCopyableMatchInformation(ScopedCopyableMatchInformation rhs) -> ScopedCopyableMatchInformation\n"
		""},
	 { (char *)"ScopedCopyableMatchInformation_get", _wrap_ScopedCopyableMatchInformation_get, METH_VARARGS, (char *)"ScopedCopyableMatchInformation_get(ScopedCopyableMatchInformation self) -> MatchInformation"},
	 { (char *)"ScopedCopyableMatchInformation___ref__", _wrap_ScopedCopyableMatchInformation___ref__, METH_VARARGS, (char *)"ScopedCopyableMatchInformation___ref__(ScopedCopyableMatchInformation self) -> MatchInformation"},
	 { (char *)"ScopedCopyableMatchInformation___deref__", _wrap_ScopedCopyableMatchInformation___deref__, METH_VARARGS, (char *)"ScopedCopyableMatchInformation___deref__(ScopedCopyableMatchInformation self) -> MatchInformation"},
	 { (char *)"ScopedCopyableMatchInformation_reset", _wrap_ScopedCopyableMatchInformation_reset, METH_VARARGS, (char *)"\n"
		"reset(MatchInformation ptr=None)\n"
		"ScopedCopyableMatchInformation_reset(ScopedCopyableMatchInformation self)\n"
		""},
	 { (char *)"delete_ScopedCopyableMatchInformation", _wrap_delete_ScopedCopyableMatchInformation, METH_VARARGS, (char *)"delete_ScopedCopyableMatchInformation(ScopedCopyableMatchInformation self)"},
	 { (char *)"ScopedCopyableMatchInformation_types_set", _wrap_ScopedCopyableMatchInformation_types_set, METH_VARARGS, (char *)"ScopedCopyableMatchInformation_types_set(ScopedCopyableMatchInformation self, VectorScopedCopyableMatchType types)"},
	 { (char *)"ScopedCopyableMatchInformation_types_get", _wrap_ScopedCopyableMatchInformation_types_get, METH_VARARGS, (char *)"ScopedCopyableMatchInformation_types_get(ScopedCopyableMatchInformation self) -> VectorScopedCopyableMatchType"},
	 { (char *)"ScopedCopyableMatchInformation_swigregister", ScopedCopyableMatchInformation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneablePFA", _wrap_new_ScopedCloneablePFA, METH_VARARGS, (char *)"\n"
		"ScopedCloneablePFA(PFA ptr=None)\n"
		"ScopedCloneablePFA()\n"
		"new_ScopedCloneablePFA(ScopedCloneablePFA rhs) -> ScopedCloneablePFA\n"
		""},
	 { (char *)"ScopedCloneablePFA_get", _wrap_ScopedCloneablePFA_get, METH_VARARGS, (char *)"ScopedCloneablePFA_get(ScopedCloneablePFA self) -> PFA"},
	 { (char *)"ScopedCloneablePFA___ref__", _wrap_ScopedCloneablePFA___ref__, METH_VARARGS, (char *)"ScopedCloneablePFA___ref__(ScopedCloneablePFA self) -> PFA"},
	 { (char *)"ScopedCloneablePFA___deref__", _wrap_ScopedCloneablePFA___deref__, METH_VARARGS, (char *)"ScopedCloneablePFA___deref__(ScopedCloneablePFA self) -> PFA"},
	 { (char *)"ScopedCloneablePFA_reset", _wrap_ScopedCloneablePFA_reset, METH_VARARGS, (char *)"\n"
		"reset(PFA ptr=None)\n"
		"ScopedCloneablePFA_reset(ScopedCloneablePFA self)\n"
		""},
	 { (char *)"delete_ScopedCloneablePFA", _wrap_delete_ScopedCloneablePFA, METH_VARARGS, (char *)"delete_ScopedCloneablePFA(ScopedCloneablePFA self)"},
	 { (char *)"ScopedCloneablePFA_clone", _wrap_ScopedCloneablePFA_clone, METH_VARARGS, (char *)"ScopedCloneablePFA_clone(ScopedCloneablePFA self) -> PFA"},
	 { (char *)"ScopedCloneablePFA_focusPlaneNormal_set", _wrap_ScopedCloneablePFA_focusPlaneNormal_set, METH_VARARGS, (char *)"ScopedCloneablePFA_focusPlaneNormal_set(ScopedCloneablePFA self, Vector3 focusPlaneNormal)"},
	 { (char *)"ScopedCloneablePFA_focusPlaneNormal_get", _wrap_ScopedCloneablePFA_focusPlaneNormal_get, METH_VARARGS, (char *)"ScopedCloneablePFA_focusPlaneNormal_get(ScopedCloneablePFA self) -> Vector3"},
	 { (char *)"ScopedCloneablePFA_imagePlaneNormal_set", _wrap_ScopedCloneablePFA_imagePlaneNormal_set, METH_VARARGS, (char *)"ScopedCloneablePFA_imagePlaneNormal_set(ScopedCloneablePFA self, Vector3 imagePlaneNormal)"},
	 { (char *)"ScopedCloneablePFA_imagePlaneNormal_get", _wrap_ScopedCloneablePFA_imagePlaneNormal_get, METH_VARARGS, (char *)"ScopedCloneablePFA_imagePlaneNormal_get(ScopedCloneablePFA self) -> Vector3"},
	 { (char *)"ScopedCloneablePFA_polarAngleRefTime_set", _wrap_ScopedCloneablePFA_polarAngleRefTime_set, METH_VARARGS, (char *)"ScopedCloneablePFA_polarAngleRefTime_set(ScopedCloneablePFA self, double polarAngleRefTime)"},
	 { (char *)"ScopedCloneablePFA_polarAngleRefTime_get", _wrap_ScopedCloneablePFA_polarAngleRefTime_get, METH_VARARGS, (char *)"ScopedCloneablePFA_polarAngleRefTime_get(ScopedCloneablePFA self) -> double"},
	 { (char *)"ScopedCloneablePFA_polarAnglePoly_set", _wrap_ScopedCloneablePFA_polarAnglePoly_set, METH_VARARGS, (char *)"ScopedCloneablePFA_polarAnglePoly_set(ScopedCloneablePFA self, Poly1D polarAnglePoly)"},
	 { (char *)"ScopedCloneablePFA_polarAnglePoly_get", _wrap_ScopedCloneablePFA_polarAnglePoly_get, METH_VARARGS, (char *)"ScopedCloneablePFA_polarAnglePoly_get(ScopedCloneablePFA self) -> Poly1D"},
	 { (char *)"ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set", _wrap_ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set, METH_VARARGS, (char *)"ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set(ScopedCloneablePFA self, Poly1D spatialFrequencyScaleFactorPoly)"},
	 { (char *)"ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get", _wrap_ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get, METH_VARARGS, (char *)"ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get(ScopedCloneablePFA self) -> Poly1D"},
	 { (char *)"ScopedCloneablePFA_krg1_set", _wrap_ScopedCloneablePFA_krg1_set, METH_VARARGS, (char *)"ScopedCloneablePFA_krg1_set(ScopedCloneablePFA self, double krg1)"},
	 { (char *)"ScopedCloneablePFA_krg1_get", _wrap_ScopedCloneablePFA_krg1_get, METH_VARARGS, (char *)"ScopedCloneablePFA_krg1_get(ScopedCloneablePFA self) -> double"},
	 { (char *)"ScopedCloneablePFA_krg2_set", _wrap_ScopedCloneablePFA_krg2_set, METH_VARARGS, (char *)"ScopedCloneablePFA_krg2_set(ScopedCloneablePFA self, double krg2)"},
	 { (char *)"ScopedCloneablePFA_krg2_get", _wrap_ScopedCloneablePFA_krg2_get, METH_VARARGS, (char *)"ScopedCloneablePFA_krg2_get(ScopedCloneablePFA self) -> double"},
	 { (char *)"ScopedCloneablePFA_kaz1_set", _wrap_ScopedCloneablePFA_kaz1_set, METH_VARARGS, (char *)"ScopedCloneablePFA_kaz1_set(ScopedCloneablePFA self, double kaz1)"},
	 { (char *)"ScopedCloneablePFA_kaz1_get", _wrap_ScopedCloneablePFA_kaz1_get, METH_VARARGS, (char *)"ScopedCloneablePFA_kaz1_get(ScopedCloneablePFA self) -> double"},
	 { (char *)"ScopedCloneablePFA_kaz2_set", _wrap_ScopedCloneablePFA_kaz2_set, METH_VARARGS, (char *)"ScopedCloneablePFA_kaz2_set(ScopedCloneablePFA self, double kaz2)"},
	 { (char *)"ScopedCloneablePFA_kaz2_get", _wrap_ScopedCloneablePFA_kaz2_get, METH_VARARGS, (char *)"ScopedCloneablePFA_kaz2_get(ScopedCloneablePFA self) -> double"},
	 { (char *)"ScopedCloneablePFA_slowTimeDeskew_set", _wrap_ScopedCloneablePFA_slowTimeDeskew_set, METH_VARARGS, (char *)"ScopedCloneablePFA_slowTimeDeskew_set(ScopedCloneablePFA self, SlowTimeDeskew slowTimeDeskew)"},
	 { (char *)"ScopedCloneablePFA_slowTimeDeskew_get", _wrap_ScopedCloneablePFA_slowTimeDeskew_get, METH_VARARGS, (char *)"ScopedCloneablePFA_slowTimeDeskew_get(ScopedCloneablePFA self) -> SlowTimeDeskew"},
	 { (char *)"ScopedCloneablePFA_swigregister", ScopedCloneablePFA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableRMA", _wrap_new_ScopedCopyableRMA, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRMA(RMA ptr=None)\n"
		"ScopedCopyableRMA()\n"
		"new_ScopedCopyableRMA(ScopedCopyableRMA rhs) -> ScopedCopyableRMA\n"
		""},
	 { (char *)"ScopedCopyableRMA_get", _wrap_ScopedCopyableRMA_get, METH_VARARGS, (char *)"ScopedCopyableRMA_get(ScopedCopyableRMA self) -> RMA"},
	 { (char *)"ScopedCopyableRMA___ref__", _wrap_ScopedCopyableRMA___ref__, METH_VARARGS, (char *)"ScopedCopyableRMA___ref__(ScopedCopyableRMA self) -> RMA"},
	 { (char *)"ScopedCopyableRMA___deref__", _wrap_ScopedCopyableRMA___deref__, METH_VARARGS, (char *)"ScopedCopyableRMA___deref__(ScopedCopyableRMA self) -> RMA"},
	 { (char *)"ScopedCopyableRMA_reset", _wrap_ScopedCopyableRMA_reset, METH_VARARGS, (char *)"\n"
		"reset(RMA ptr=None)\n"
		"ScopedCopyableRMA_reset(ScopedCopyableRMA self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRMA", _wrap_delete_ScopedCopyableRMA, METH_VARARGS, (char *)"delete_ScopedCopyableRMA(ScopedCopyableRMA self)"},
	 { (char *)"ScopedCopyableRMA_algoType_set", _wrap_ScopedCopyableRMA_algoType_set, METH_VARARGS, (char *)"ScopedCopyableRMA_algoType_set(ScopedCopyableRMA self, RMAlgoType algoType)"},
	 { (char *)"ScopedCopyableRMA_algoType_get", _wrap_ScopedCopyableRMA_algoType_get, METH_VARARGS, (char *)"ScopedCopyableRMA_algoType_get(ScopedCopyableRMA self) -> RMAlgoType"},
	 { (char *)"ScopedCopyableRMA_rmat_set", _wrap_ScopedCopyableRMA_rmat_set, METH_VARARGS, (char *)"ScopedCopyableRMA_rmat_set(ScopedCopyableRMA self, ScopedCopyableRMAT rmat)"},
	 { (char *)"ScopedCopyableRMA_rmat_get", _wrap_ScopedCopyableRMA_rmat_get, METH_VARARGS, (char *)"ScopedCopyableRMA_rmat_get(ScopedCopyableRMA self) -> ScopedCopyableRMAT"},
	 { (char *)"ScopedCopyableRMA_rmcr_set", _wrap_ScopedCopyableRMA_rmcr_set, METH_VARARGS, (char *)"ScopedCopyableRMA_rmcr_set(ScopedCopyableRMA self, ScopedCopyableRMCR rmcr)"},
	 { (char *)"ScopedCopyableRMA_rmcr_get", _wrap_ScopedCopyableRMA_rmcr_get, METH_VARARGS, (char *)"ScopedCopyableRMA_rmcr_get(ScopedCopyableRMA self) -> ScopedCopyableRMCR"},
	 { (char *)"ScopedCopyableRMA_inca_set", _wrap_ScopedCopyableRMA_inca_set, METH_VARARGS, (char *)"ScopedCopyableRMA_inca_set(ScopedCopyableRMA self, ScopedCopyableINCA inca)"},
	 { (char *)"ScopedCopyableRMA_inca_get", _wrap_ScopedCopyableRMA_inca_get, METH_VARARGS, (char *)"ScopedCopyableRMA_inca_get(ScopedCopyableRMA self) -> ScopedCopyableINCA"},
	 { (char *)"ScopedCopyableRMA_swigregister", ScopedCopyableRMA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableRgAzComp", _wrap_new_ScopedCopyableRgAzComp, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRgAzComp(RgAzComp ptr=None)\n"
		"ScopedCopyableRgAzComp()\n"
		"new_ScopedCopyableRgAzComp(ScopedCopyableRgAzComp rhs) -> ScopedCopyableRgAzComp\n"
		""},
	 { (char *)"ScopedCopyableRgAzComp_get", _wrap_ScopedCopyableRgAzComp_get, METH_VARARGS, (char *)"ScopedCopyableRgAzComp_get(ScopedCopyableRgAzComp self) -> RgAzComp"},
	 { (char *)"ScopedCopyableRgAzComp___ref__", _wrap_ScopedCopyableRgAzComp___ref__, METH_VARARGS, (char *)"ScopedCopyableRgAzComp___ref__(ScopedCopyableRgAzComp self) -> RgAzComp"},
	 { (char *)"ScopedCopyableRgAzComp___deref__", _wrap_ScopedCopyableRgAzComp___deref__, METH_VARARGS, (char *)"ScopedCopyableRgAzComp___deref__(ScopedCopyableRgAzComp self) -> RgAzComp"},
	 { (char *)"ScopedCopyableRgAzComp_reset", _wrap_ScopedCopyableRgAzComp_reset, METH_VARARGS, (char *)"\n"
		"reset(RgAzComp ptr=None)\n"
		"ScopedCopyableRgAzComp_reset(ScopedCopyableRgAzComp self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRgAzComp", _wrap_delete_ScopedCopyableRgAzComp, METH_VARARGS, (char *)"delete_ScopedCopyableRgAzComp(ScopedCopyableRgAzComp self)"},
	 { (char *)"ScopedCopyableRgAzComp_azSF_set", _wrap_ScopedCopyableRgAzComp_azSF_set, METH_VARARGS, (char *)"ScopedCopyableRgAzComp_azSF_set(ScopedCopyableRgAzComp self, double azSF)"},
	 { (char *)"ScopedCopyableRgAzComp_azSF_get", _wrap_ScopedCopyableRgAzComp_azSF_get, METH_VARARGS, (char *)"ScopedCopyableRgAzComp_azSF_get(ScopedCopyableRgAzComp self) -> double"},
	 { (char *)"ScopedCopyableRgAzComp_kazPoly_set", _wrap_ScopedCopyableRgAzComp_kazPoly_set, METH_VARARGS, (char *)"ScopedCopyableRgAzComp_kazPoly_set(ScopedCopyableRgAzComp self, Poly1D kazPoly)"},
	 { (char *)"ScopedCopyableRgAzComp_kazPoly_get", _wrap_ScopedCopyableRgAzComp_kazPoly_get, METH_VARARGS, (char *)"ScopedCopyableRgAzComp_kazPoly_get(ScopedCopyableRgAzComp self) -> Poly1D"},
	 { (char *)"ScopedCopyableRgAzComp_swigregister", ScopedCopyableRgAzComp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableGeoInfo", _wrap_new_ScopedCloneableGeoInfo, METH_VARARGS, (char *)"\n"
		"ScopedCloneableGeoInfo(GeoInfo ptr=None)\n"
		"ScopedCloneableGeoInfo()\n"
		"new_ScopedCloneableGeoInfo(ScopedCloneableGeoInfo rhs) -> ScopedCloneableGeoInfo\n"
		""},
	 { (char *)"ScopedCloneableGeoInfo_get", _wrap_ScopedCloneableGeoInfo_get, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_get(ScopedCloneableGeoInfo self) -> GeoInfo"},
	 { (char *)"ScopedCloneableGeoInfo___ref__", _wrap_ScopedCloneableGeoInfo___ref__, METH_VARARGS, (char *)"ScopedCloneableGeoInfo___ref__(ScopedCloneableGeoInfo self) -> GeoInfo"},
	 { (char *)"ScopedCloneableGeoInfo___deref__", _wrap_ScopedCloneableGeoInfo___deref__, METH_VARARGS, (char *)"ScopedCloneableGeoInfo___deref__(ScopedCloneableGeoInfo self) -> GeoInfo"},
	 { (char *)"ScopedCloneableGeoInfo_reset", _wrap_ScopedCloneableGeoInfo_reset, METH_VARARGS, (char *)"\n"
		"reset(GeoInfo ptr=None)\n"
		"ScopedCloneableGeoInfo_reset(ScopedCloneableGeoInfo self)\n"
		""},
	 { (char *)"delete_ScopedCloneableGeoInfo", _wrap_delete_ScopedCloneableGeoInfo, METH_VARARGS, (char *)"delete_ScopedCloneableGeoInfo(ScopedCloneableGeoInfo self)"},
	 { (char *)"ScopedCloneableGeoInfo_clone", _wrap_ScopedCloneableGeoInfo_clone, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_clone(ScopedCloneableGeoInfo self) -> GeoInfo"},
	 { (char *)"ScopedCloneableGeoInfo_name_set", _wrap_ScopedCloneableGeoInfo_name_set, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_name_set(ScopedCloneableGeoInfo self, string name)"},
	 { (char *)"ScopedCloneableGeoInfo_name_get", _wrap_ScopedCloneableGeoInfo_name_get, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_name_get(ScopedCloneableGeoInfo self) -> string"},
	 { (char *)"ScopedCloneableGeoInfo_geoInfos_set", _wrap_ScopedCloneableGeoInfo_geoInfos_set, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_geoInfos_set(ScopedCloneableGeoInfo self, VectorScopedCloneableGeoInfo geoInfos)"},
	 { (char *)"ScopedCloneableGeoInfo_geoInfos_get", _wrap_ScopedCloneableGeoInfo_geoInfos_get, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_geoInfos_get(ScopedCloneableGeoInfo self) -> VectorScopedCloneableGeoInfo"},
	 { (char *)"ScopedCloneableGeoInfo_desc_set", _wrap_ScopedCloneableGeoInfo_desc_set, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_desc_set(ScopedCloneableGeoInfo self, std::vector<(Parameter,std::allocator<(Parameter)>)> desc)"},
	 { (char *)"ScopedCloneableGeoInfo_desc_get", _wrap_ScopedCloneableGeoInfo_desc_get, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_desc_get(ScopedCloneableGeoInfo self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"ScopedCloneableGeoInfo_geometryLatLon_set", _wrap_ScopedCloneableGeoInfo_geometryLatLon_set, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_geometryLatLon_set(ScopedCloneableGeoInfo self, std::vector<(six::LatLon,std::allocator<(six::LatLon)>)> geometryLatLon)"},
	 { (char *)"ScopedCloneableGeoInfo_geometryLatLon_get", _wrap_ScopedCloneableGeoInfo_geometryLatLon_get, METH_VARARGS, (char *)"ScopedCloneableGeoInfo_geometryLatLon_get(ScopedCloneableGeoInfo self) -> std::vector<(six::LatLon,std::allocator<(six::LatLon)>)>"},
	 { (char *)"ScopedCloneableGeoInfo_swigregister", ScopedCloneableGeoInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorScopedCloneableGeoInfo_iterator", _wrap_VectorScopedCloneableGeoInfo_iterator, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_iterator(VectorScopedCloneableGeoInfo self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorScopedCloneableGeoInfo___nonzero__", _wrap_VectorScopedCloneableGeoInfo___nonzero__, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo___nonzero__(VectorScopedCloneableGeoInfo self) -> bool"},
	 { (char *)"VectorScopedCloneableGeoInfo___len__", _wrap_VectorScopedCloneableGeoInfo___len__, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo___len__(VectorScopedCloneableGeoInfo self) -> size_type"},
	 { (char *)"VectorScopedCloneableGeoInfo_pop", _wrap_VectorScopedCloneableGeoInfo_pop, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_pop(VectorScopedCloneableGeoInfo self) -> value_type"},
	 { (char *)"VectorScopedCloneableGeoInfo___getslice__", _wrap_VectorScopedCloneableGeoInfo___getslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableGeoInfo___getslice__(VectorScopedCloneableGeoInfo self, difference_type i, \n"
		"    difference_type j) -> VectorScopedCloneableGeoInfo\n"
		""},
	 { (char *)"VectorScopedCloneableGeoInfo___setslice__", _wrap_VectorScopedCloneableGeoInfo___setslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableGeoInfo___setslice__(VectorScopedCloneableGeoInfo self, difference_type i, \n"
		"    difference_type j, VectorScopedCloneableGeoInfo v)\n"
		""},
	 { (char *)"VectorScopedCloneableGeoInfo___delslice__", _wrap_VectorScopedCloneableGeoInfo___delslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableGeoInfo___delslice__(VectorScopedCloneableGeoInfo self, difference_type i, \n"
		"    difference_type j)\n"
		""},
	 { (char *)"VectorScopedCloneableGeoInfo___delitem__", _wrap_VectorScopedCloneableGeoInfo___delitem__, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo___delitem__(VectorScopedCloneableGeoInfo self, difference_type i)"},
	 { (char *)"VectorScopedCloneableGeoInfo___getitem__", _wrap_VectorScopedCloneableGeoInfo___getitem__, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo___getitem__(VectorScopedCloneableGeoInfo self, difference_type i) -> value_type"},
	 { (char *)"VectorScopedCloneableGeoInfo___setitem__", _wrap_VectorScopedCloneableGeoInfo___setitem__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableGeoInfo___setitem__(VectorScopedCloneableGeoInfo self, difference_type i, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableGeoInfo_append", _wrap_VectorScopedCloneableGeoInfo_append, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_append(VectorScopedCloneableGeoInfo self, value_type x)"},
	 { (char *)"VectorScopedCloneableGeoInfo_empty", _wrap_VectorScopedCloneableGeoInfo_empty, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_empty(VectorScopedCloneableGeoInfo self) -> bool"},
	 { (char *)"VectorScopedCloneableGeoInfo_size", _wrap_VectorScopedCloneableGeoInfo_size, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_size(VectorScopedCloneableGeoInfo self) -> size_type"},
	 { (char *)"VectorScopedCloneableGeoInfo_clear", _wrap_VectorScopedCloneableGeoInfo_clear, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_clear(VectorScopedCloneableGeoInfo self)"},
	 { (char *)"VectorScopedCloneableGeoInfo_swap", _wrap_VectorScopedCloneableGeoInfo_swap, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_swap(VectorScopedCloneableGeoInfo self, VectorScopedCloneableGeoInfo v)"},
	 { (char *)"VectorScopedCloneableGeoInfo_get_allocator", _wrap_VectorScopedCloneableGeoInfo_get_allocator, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_get_allocator(VectorScopedCloneableGeoInfo self) -> allocator_type"},
	 { (char *)"VectorScopedCloneableGeoInfo_begin", _wrap_VectorScopedCloneableGeoInfo_begin, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_begin(VectorScopedCloneableGeoInfo self) -> const_iterator"},
	 { (char *)"VectorScopedCloneableGeoInfo_end", _wrap_VectorScopedCloneableGeoInfo_end, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_end(VectorScopedCloneableGeoInfo self) -> const_iterator"},
	 { (char *)"VectorScopedCloneableGeoInfo_rbegin", _wrap_VectorScopedCloneableGeoInfo_rbegin, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_rbegin(VectorScopedCloneableGeoInfo self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCloneableGeoInfo_rend", _wrap_VectorScopedCloneableGeoInfo_rend, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_rend(VectorScopedCloneableGeoInfo self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCloneableGeoInfo_pop_back", _wrap_VectorScopedCloneableGeoInfo_pop_back, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_pop_back(VectorScopedCloneableGeoInfo self)"},
	 { (char *)"VectorScopedCloneableGeoInfo_erase", _wrap_VectorScopedCloneableGeoInfo_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorScopedCloneableGeoInfo_erase(VectorScopedCloneableGeoInfo self, iterator first, \n"
		"    iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorScopedCloneableGeoInfo", _wrap_new_VectorScopedCloneableGeoInfo, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableGeoInfo()\n"
		"VectorScopedCloneableGeoInfo(VectorScopedCloneableGeoInfo ?)\n"
		"VectorScopedCloneableGeoInfo(size_type size)\n"
		"new_VectorScopedCloneableGeoInfo(size_type size, value_type value) -> VectorScopedCloneableGeoInfo\n"
		""},
	 { (char *)"VectorScopedCloneableGeoInfo_push_back", _wrap_VectorScopedCloneableGeoInfo_push_back, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_push_back(VectorScopedCloneableGeoInfo self, value_type x)"},
	 { (char *)"VectorScopedCloneableGeoInfo_front", _wrap_VectorScopedCloneableGeoInfo_front, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_front(VectorScopedCloneableGeoInfo self) -> value_type"},
	 { (char *)"VectorScopedCloneableGeoInfo_back", _wrap_VectorScopedCloneableGeoInfo_back, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_back(VectorScopedCloneableGeoInfo self) -> value_type"},
	 { (char *)"VectorScopedCloneableGeoInfo_assign", _wrap_VectorScopedCloneableGeoInfo_assign, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_assign(VectorScopedCloneableGeoInfo self, size_type n, value_type x)"},
	 { (char *)"VectorScopedCloneableGeoInfo_resize", _wrap_VectorScopedCloneableGeoInfo_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorScopedCloneableGeoInfo_resize(VectorScopedCloneableGeoInfo self, size_type new_size, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableGeoInfo_insert", _wrap_VectorScopedCloneableGeoInfo_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorScopedCloneableGeoInfo_insert(VectorScopedCloneableGeoInfo self, iterator pos, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableGeoInfo_reserve", _wrap_VectorScopedCloneableGeoInfo_reserve, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_reserve(VectorScopedCloneableGeoInfo self, size_type n)"},
	 { (char *)"VectorScopedCloneableGeoInfo_capacity", _wrap_VectorScopedCloneableGeoInfo_capacity, METH_VARARGS, (char *)"VectorScopedCloneableGeoInfo_capacity(VectorScopedCloneableGeoInfo self) -> size_type"},
	 { (char *)"delete_VectorScopedCloneableGeoInfo", _wrap_delete_VectorScopedCloneableGeoInfo, METH_VARARGS, (char *)"delete_VectorScopedCloneableGeoInfo(VectorScopedCloneableGeoInfo self)"},
	 { (char *)"VectorScopedCloneableGeoInfo_swigregister", VectorScopedCloneableGeoInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorLatLon_iterator", _wrap_VectorLatLon_iterator, METH_VARARGS, (char *)"VectorLatLon_iterator(VectorLatLon self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorLatLon___nonzero__", _wrap_VectorLatLon___nonzero__, METH_VARARGS, (char *)"VectorLatLon___nonzero__(VectorLatLon self) -> bool"},
	 { (char *)"VectorLatLon___len__", _wrap_VectorLatLon___len__, METH_VARARGS, (char *)"VectorLatLon___len__(VectorLatLon self) -> size_type"},
	 { (char *)"VectorLatLon_pop", _wrap_VectorLatLon_pop, METH_VARARGS, (char *)"VectorLatLon_pop(VectorLatLon self) -> value_type"},
	 { (char *)"VectorLatLon___getslice__", _wrap_VectorLatLon___getslice__, METH_VARARGS, (char *)"VectorLatLon___getslice__(VectorLatLon self, difference_type i, difference_type j) -> VectorLatLon"},
	 { (char *)"VectorLatLon___setslice__", _wrap_VectorLatLon___setslice__, METH_VARARGS, (char *)"\n"
		"VectorLatLon___setslice__(VectorLatLon self, difference_type i, difference_type j, \n"
		"    VectorLatLon v)\n"
		""},
	 { (char *)"VectorLatLon___delslice__", _wrap_VectorLatLon___delslice__, METH_VARARGS, (char *)"VectorLatLon___delslice__(VectorLatLon self, difference_type i, difference_type j)"},
	 { (char *)"VectorLatLon___delitem__", _wrap_VectorLatLon___delitem__, METH_VARARGS, (char *)"VectorLatLon___delitem__(VectorLatLon self, difference_type i)"},
	 { (char *)"VectorLatLon___getitem__", _wrap_VectorLatLon___getitem__, METH_VARARGS, (char *)"VectorLatLon___getitem__(VectorLatLon self, difference_type i) -> value_type"},
	 { (char *)"VectorLatLon___setitem__", _wrap_VectorLatLon___setitem__, METH_VARARGS, (char *)"VectorLatLon___setitem__(VectorLatLon self, difference_type i, value_type x)"},
	 { (char *)"VectorLatLon_append", _wrap_VectorLatLon_append, METH_VARARGS, (char *)"VectorLatLon_append(VectorLatLon self, value_type x)"},
	 { (char *)"VectorLatLon_empty", _wrap_VectorLatLon_empty, METH_VARARGS, (char *)"VectorLatLon_empty(VectorLatLon self) -> bool"},
	 { (char *)"VectorLatLon_size", _wrap_VectorLatLon_size, METH_VARARGS, (char *)"VectorLatLon_size(VectorLatLon self) -> size_type"},
	 { (char *)"VectorLatLon_clear", _wrap_VectorLatLon_clear, METH_VARARGS, (char *)"VectorLatLon_clear(VectorLatLon self)"},
	 { (char *)"VectorLatLon_swap", _wrap_VectorLatLon_swap, METH_VARARGS, (char *)"VectorLatLon_swap(VectorLatLon self, VectorLatLon v)"},
	 { (char *)"VectorLatLon_get_allocator", _wrap_VectorLatLon_get_allocator, METH_VARARGS, (char *)"VectorLatLon_get_allocator(VectorLatLon self) -> allocator_type"},
	 { (char *)"VectorLatLon_begin", _wrap_VectorLatLon_begin, METH_VARARGS, (char *)"VectorLatLon_begin(VectorLatLon self) -> const_iterator"},
	 { (char *)"VectorLatLon_end", _wrap_VectorLatLon_end, METH_VARARGS, (char *)"VectorLatLon_end(VectorLatLon self) -> const_iterator"},
	 { (char *)"VectorLatLon_rbegin", _wrap_VectorLatLon_rbegin, METH_VARARGS, (char *)"VectorLatLon_rbegin(VectorLatLon self) -> const_reverse_iterator"},
	 { (char *)"VectorLatLon_rend", _wrap_VectorLatLon_rend, METH_VARARGS, (char *)"VectorLatLon_rend(VectorLatLon self) -> const_reverse_iterator"},
	 { (char *)"VectorLatLon_pop_back", _wrap_VectorLatLon_pop_back, METH_VARARGS, (char *)"VectorLatLon_pop_back(VectorLatLon self)"},
	 { (char *)"VectorLatLon_erase", _wrap_VectorLatLon_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorLatLon_erase(VectorLatLon self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorLatLon", _wrap_new_VectorLatLon, METH_VARARGS, (char *)"\n"
		"VectorLatLon()\n"
		"VectorLatLon(VectorLatLon ?)\n"
		"VectorLatLon(size_type size)\n"
		"new_VectorLatLon(size_type size, value_type value) -> VectorLatLon\n"
		""},
	 { (char *)"VectorLatLon_push_back", _wrap_VectorLatLon_push_back, METH_VARARGS, (char *)"VectorLatLon_push_back(VectorLatLon self, value_type x)"},
	 { (char *)"VectorLatLon_front", _wrap_VectorLatLon_front, METH_VARARGS, (char *)"VectorLatLon_front(VectorLatLon self) -> value_type"},
	 { (char *)"VectorLatLon_back", _wrap_VectorLatLon_back, METH_VARARGS, (char *)"VectorLatLon_back(VectorLatLon self) -> value_type"},
	 { (char *)"VectorLatLon_assign", _wrap_VectorLatLon_assign, METH_VARARGS, (char *)"VectorLatLon_assign(VectorLatLon self, size_type n, value_type x)"},
	 { (char *)"VectorLatLon_resize", _wrap_VectorLatLon_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorLatLon_resize(VectorLatLon self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"VectorLatLon_insert", _wrap_VectorLatLon_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorLatLon_insert(VectorLatLon self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"VectorLatLon_reserve", _wrap_VectorLatLon_reserve, METH_VARARGS, (char *)"VectorLatLon_reserve(VectorLatLon self, size_type n)"},
	 { (char *)"VectorLatLon_capacity", _wrap_VectorLatLon_capacity, METH_VARARGS, (char *)"VectorLatLon_capacity(VectorLatLon self) -> size_type"},
	 { (char *)"delete_VectorLatLon", _wrap_delete_VectorLatLon, METH_VARARGS, (char *)"delete_VectorLatLon(VectorLatLon self)"},
	 { (char *)"VectorLatLon_swigregister", VectorLatLon_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableAntennaParameters", _wrap_new_ScopedCopyableAntennaParameters, METH_VARARGS, (char *)"\n"
		"ScopedCopyableAntennaParameters(AntennaParameters ptr=None)\n"
		"ScopedCopyableAntennaParameters()\n"
		"new_ScopedCopyableAntennaParameters(ScopedCopyableAntennaParameters rhs) -> ScopedCopyableAntennaParameters\n"
		""},
	 { (char *)"ScopedCopyableAntennaParameters_get", _wrap_ScopedCopyableAntennaParameters_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_get(ScopedCopyableAntennaParameters self) -> AntennaParameters"},
	 { (char *)"ScopedCopyableAntennaParameters___ref__", _wrap_ScopedCopyableAntennaParameters___ref__, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters___ref__(ScopedCopyableAntennaParameters self) -> AntennaParameters"},
	 { (char *)"ScopedCopyableAntennaParameters___deref__", _wrap_ScopedCopyableAntennaParameters___deref__, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters___deref__(ScopedCopyableAntennaParameters self) -> AntennaParameters"},
	 { (char *)"ScopedCopyableAntennaParameters_reset", _wrap_ScopedCopyableAntennaParameters_reset, METH_VARARGS, (char *)"\n"
		"reset(AntennaParameters ptr=None)\n"
		"ScopedCopyableAntennaParameters_reset(ScopedCopyableAntennaParameters self)\n"
		""},
	 { (char *)"delete_ScopedCopyableAntennaParameters", _wrap_delete_ScopedCopyableAntennaParameters, METH_VARARGS, (char *)"delete_ScopedCopyableAntennaParameters(ScopedCopyableAntennaParameters self)"},
	 { (char *)"ScopedCopyableAntennaParameters___eq__", _wrap_ScopedCopyableAntennaParameters___eq__, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters___eq__(ScopedCopyableAntennaParameters self, AntennaParameters other) -> bool"},
	 { (char *)"ScopedCopyableAntennaParameters___ne__", _wrap_ScopedCopyableAntennaParameters___ne__, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters___ne__(ScopedCopyableAntennaParameters self, AntennaParameters other) -> bool"},
	 { (char *)"ScopedCopyableAntennaParameters_xAxisPoly_set", _wrap_ScopedCopyableAntennaParameters_xAxisPoly_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_xAxisPoly_set(ScopedCopyableAntennaParameters self, PolyXYZ xAxisPoly)"},
	 { (char *)"ScopedCopyableAntennaParameters_xAxisPoly_get", _wrap_ScopedCopyableAntennaParameters_xAxisPoly_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_xAxisPoly_get(ScopedCopyableAntennaParameters self) -> PolyXYZ"},
	 { (char *)"ScopedCopyableAntennaParameters_yAxisPoly_set", _wrap_ScopedCopyableAntennaParameters_yAxisPoly_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_yAxisPoly_set(ScopedCopyableAntennaParameters self, PolyXYZ yAxisPoly)"},
	 { (char *)"ScopedCopyableAntennaParameters_yAxisPoly_get", _wrap_ScopedCopyableAntennaParameters_yAxisPoly_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_yAxisPoly_get(ScopedCopyableAntennaParameters self) -> PolyXYZ"},
	 { (char *)"ScopedCopyableAntennaParameters_frequencyZero_set", _wrap_ScopedCopyableAntennaParameters_frequencyZero_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_frequencyZero_set(ScopedCopyableAntennaParameters self, double frequencyZero)"},
	 { (char *)"ScopedCopyableAntennaParameters_frequencyZero_get", _wrap_ScopedCopyableAntennaParameters_frequencyZero_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_frequencyZero_get(ScopedCopyableAntennaParameters self) -> double"},
	 { (char *)"ScopedCopyableAntennaParameters_electricalBoresight_set", _wrap_ScopedCopyableAntennaParameters_electricalBoresight_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_electricalBoresight_set(ScopedCopyableAntennaParameters self, ScopedCopyableElectricalBoresight electricalBoresight)"},
	 { (char *)"ScopedCopyableAntennaParameters_electricalBoresight_get", _wrap_ScopedCopyableAntennaParameters_electricalBoresight_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_electricalBoresight_get(ScopedCopyableAntennaParameters self) -> ScopedCopyableElectricalBoresight"},
	 { (char *)"ScopedCopyableAntennaParameters_halfPowerBeamwidths_set", _wrap_ScopedCopyableAntennaParameters_halfPowerBeamwidths_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_halfPowerBeamwidths_set(ScopedCopyableAntennaParameters self, ScopedCopyableHalfPowerBeamwidths halfPowerBeamwidths)"},
	 { (char *)"ScopedCopyableAntennaParameters_halfPowerBeamwidths_get", _wrap_ScopedCopyableAntennaParameters_halfPowerBeamwidths_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_halfPowerBeamwidths_get(ScopedCopyableAntennaParameters self) -> ScopedCopyableHalfPowerBeamwidths"},
	 { (char *)"ScopedCopyableAntennaParameters_array_set", _wrap_ScopedCopyableAntennaParameters_array_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_array_set(ScopedCopyableAntennaParameters self, ScopedCopyableGainAndPhasePolys array)"},
	 { (char *)"ScopedCopyableAntennaParameters_array_get", _wrap_ScopedCopyableAntennaParameters_array_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_array_get(ScopedCopyableAntennaParameters self) -> ScopedCopyableGainAndPhasePolys"},
	 { (char *)"ScopedCopyableAntennaParameters_element_set", _wrap_ScopedCopyableAntennaParameters_element_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_element_set(ScopedCopyableAntennaParameters self, ScopedCopyableGainAndPhasePolys element)"},
	 { (char *)"ScopedCopyableAntennaParameters_element_get", _wrap_ScopedCopyableAntennaParameters_element_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_element_get(ScopedCopyableAntennaParameters self) -> ScopedCopyableGainAndPhasePolys"},
	 { (char *)"ScopedCopyableAntennaParameters_gainBSPoly_set", _wrap_ScopedCopyableAntennaParameters_gainBSPoly_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_gainBSPoly_set(ScopedCopyableAntennaParameters self, Poly1D gainBSPoly)"},
	 { (char *)"ScopedCopyableAntennaParameters_gainBSPoly_get", _wrap_ScopedCopyableAntennaParameters_gainBSPoly_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_gainBSPoly_get(ScopedCopyableAntennaParameters self) -> Poly1D"},
	 { (char *)"ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set", _wrap_ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set(ScopedCopyableAntennaParameters self, BooleanType electricalBoresightFrequencyShift)"},
	 { (char *)"ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get", _wrap_ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get(ScopedCopyableAntennaParameters self) -> BooleanType"},
	 { (char *)"ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set", _wrap_ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set(ScopedCopyableAntennaParameters self, BooleanType mainlobeFrequencyDilation)"},
	 { (char *)"ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get", _wrap_ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get, METH_VARARGS, (char *)"ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get(ScopedCopyableAntennaParameters self) -> BooleanType"},
	 { (char *)"ScopedCopyableAntennaParameters_swigregister", ScopedCopyableAntennaParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableElectricalBoresight", _wrap_new_ScopedCopyableElectricalBoresight, METH_VARARGS, (char *)"\n"
		"ScopedCopyableElectricalBoresight(ElectricalBoresight ptr=None)\n"
		"ScopedCopyableElectricalBoresight()\n"
		"new_ScopedCopyableElectricalBoresight(ScopedCopyableElectricalBoresight rhs) -> ScopedCopyableElectricalBoresight\n"
		""},
	 { (char *)"ScopedCopyableElectricalBoresight_get", _wrap_ScopedCopyableElectricalBoresight_get, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight_get(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"},
	 { (char *)"ScopedCopyableElectricalBoresight___ref__", _wrap_ScopedCopyableElectricalBoresight___ref__, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight___ref__(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"},
	 { (char *)"ScopedCopyableElectricalBoresight___deref__", _wrap_ScopedCopyableElectricalBoresight___deref__, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight___deref__(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"},
	 { (char *)"ScopedCopyableElectricalBoresight_reset", _wrap_ScopedCopyableElectricalBoresight_reset, METH_VARARGS, (char *)"\n"
		"reset(ElectricalBoresight ptr=None)\n"
		"ScopedCopyableElectricalBoresight_reset(ScopedCopyableElectricalBoresight self)\n"
		""},
	 { (char *)"delete_ScopedCopyableElectricalBoresight", _wrap_delete_ScopedCopyableElectricalBoresight, METH_VARARGS, (char *)"delete_ScopedCopyableElectricalBoresight(ScopedCopyableElectricalBoresight self)"},
	 { (char *)"ScopedCopyableElectricalBoresight___eq__", _wrap_ScopedCopyableElectricalBoresight___eq__, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight___eq__(ScopedCopyableElectricalBoresight self, ElectricalBoresight other) -> bool"},
	 { (char *)"ScopedCopyableElectricalBoresight___ne__", _wrap_ScopedCopyableElectricalBoresight___ne__, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight___ne__(ScopedCopyableElectricalBoresight self, ElectricalBoresight other) -> bool"},
	 { (char *)"ScopedCopyableElectricalBoresight_dcxPoly_set", _wrap_ScopedCopyableElectricalBoresight_dcxPoly_set, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight_dcxPoly_set(ScopedCopyableElectricalBoresight self, Poly1D dcxPoly)"},
	 { (char *)"ScopedCopyableElectricalBoresight_dcxPoly_get", _wrap_ScopedCopyableElectricalBoresight_dcxPoly_get, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight_dcxPoly_get(ScopedCopyableElectricalBoresight self) -> Poly1D"},
	 { (char *)"ScopedCopyableElectricalBoresight_dcyPoly_set", _wrap_ScopedCopyableElectricalBoresight_dcyPoly_set, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight_dcyPoly_set(ScopedCopyableElectricalBoresight self, Poly1D dcyPoly)"},
	 { (char *)"ScopedCopyableElectricalBoresight_dcyPoly_get", _wrap_ScopedCopyableElectricalBoresight_dcyPoly_get, METH_VARARGS, (char *)"ScopedCopyableElectricalBoresight_dcyPoly_get(ScopedCopyableElectricalBoresight self) -> Poly1D"},
	 { (char *)"ScopedCopyableElectricalBoresight_swigregister", ScopedCopyableElectricalBoresight_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableHalfPowerBeamwidths", _wrap_new_ScopedCopyableHalfPowerBeamwidths, METH_VARARGS, (char *)"\n"
		"ScopedCopyableHalfPowerBeamwidths(HalfPowerBeamwidths ptr=None)\n"
		"ScopedCopyableHalfPowerBeamwidths()\n"
		"new_ScopedCopyableHalfPowerBeamwidths(ScopedCopyableHalfPowerBeamwidths rhs) -> ScopedCopyableHalfPowerBeamwidths\n"
		""},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths_get", _wrap_ScopedCopyableHalfPowerBeamwidths_get, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths_get(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths___ref__", _wrap_ScopedCopyableHalfPowerBeamwidths___ref__, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths___ref__(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths___deref__", _wrap_ScopedCopyableHalfPowerBeamwidths___deref__, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths___deref__(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths_reset", _wrap_ScopedCopyableHalfPowerBeamwidths_reset, METH_VARARGS, (char *)"\n"
		"reset(HalfPowerBeamwidths ptr=None)\n"
		"ScopedCopyableHalfPowerBeamwidths_reset(ScopedCopyableHalfPowerBeamwidths self)\n"
		""},
	 { (char *)"delete_ScopedCopyableHalfPowerBeamwidths", _wrap_delete_ScopedCopyableHalfPowerBeamwidths, METH_VARARGS, (char *)"delete_ScopedCopyableHalfPowerBeamwidths(ScopedCopyableHalfPowerBeamwidths self)"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths___eq__", _wrap_ScopedCopyableHalfPowerBeamwidths___eq__, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths___eq__(ScopedCopyableHalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths___ne__", _wrap_ScopedCopyableHalfPowerBeamwidths___ne__, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths___ne__(ScopedCopyableHalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths_dcx_set", _wrap_ScopedCopyableHalfPowerBeamwidths_dcx_set, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths_dcx_set(ScopedCopyableHalfPowerBeamwidths self, double dcx)"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths_dcx_get", _wrap_ScopedCopyableHalfPowerBeamwidths_dcx_get, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths_dcx_get(ScopedCopyableHalfPowerBeamwidths self) -> double"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths_dcy_set", _wrap_ScopedCopyableHalfPowerBeamwidths_dcy_set, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths_dcy_set(ScopedCopyableHalfPowerBeamwidths self, double dcy)"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths_dcy_get", _wrap_ScopedCopyableHalfPowerBeamwidths_dcy_get, METH_VARARGS, (char *)"ScopedCopyableHalfPowerBeamwidths_dcy_get(ScopedCopyableHalfPowerBeamwidths self) -> double"},
	 { (char *)"ScopedCopyableHalfPowerBeamwidths_swigregister", ScopedCopyableHalfPowerBeamwidths_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableGainAndPhasePolys", _wrap_new_ScopedCopyableGainAndPhasePolys, METH_VARARGS, (char *)"\n"
		"ScopedCopyableGainAndPhasePolys(GainAndPhasePolys ptr=None)\n"
		"ScopedCopyableGainAndPhasePolys()\n"
		"new_ScopedCopyableGainAndPhasePolys(ScopedCopyableGainAndPhasePolys rhs) -> ScopedCopyableGainAndPhasePolys\n"
		""},
	 { (char *)"ScopedCopyableGainAndPhasePolys_get", _wrap_ScopedCopyableGainAndPhasePolys_get, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys_get(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"},
	 { (char *)"ScopedCopyableGainAndPhasePolys___ref__", _wrap_ScopedCopyableGainAndPhasePolys___ref__, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys___ref__(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"},
	 { (char *)"ScopedCopyableGainAndPhasePolys___deref__", _wrap_ScopedCopyableGainAndPhasePolys___deref__, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys___deref__(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"},
	 { (char *)"ScopedCopyableGainAndPhasePolys_reset", _wrap_ScopedCopyableGainAndPhasePolys_reset, METH_VARARGS, (char *)"\n"
		"reset(GainAndPhasePolys ptr=None)\n"
		"ScopedCopyableGainAndPhasePolys_reset(ScopedCopyableGainAndPhasePolys self)\n"
		""},
	 { (char *)"delete_ScopedCopyableGainAndPhasePolys", _wrap_delete_ScopedCopyableGainAndPhasePolys, METH_VARARGS, (char *)"delete_ScopedCopyableGainAndPhasePolys(ScopedCopyableGainAndPhasePolys self)"},
	 { (char *)"ScopedCopyableGainAndPhasePolys___eq__", _wrap_ScopedCopyableGainAndPhasePolys___eq__, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys___eq__(ScopedCopyableGainAndPhasePolys self, GainAndPhasePolys other) -> bool"},
	 { (char *)"ScopedCopyableGainAndPhasePolys___ne__", _wrap_ScopedCopyableGainAndPhasePolys___ne__, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys___ne__(ScopedCopyableGainAndPhasePolys self, GainAndPhasePolys other) -> bool"},
	 { (char *)"ScopedCopyableGainAndPhasePolys_gainPoly_set", _wrap_ScopedCopyableGainAndPhasePolys_gainPoly_set, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys_gainPoly_set(ScopedCopyableGainAndPhasePolys self, Poly2D gainPoly)"},
	 { (char *)"ScopedCopyableGainAndPhasePolys_gainPoly_get", _wrap_ScopedCopyableGainAndPhasePolys_gainPoly_get, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys_gainPoly_get(ScopedCopyableGainAndPhasePolys self) -> Poly2D"},
	 { (char *)"ScopedCopyableGainAndPhasePolys_phasePoly_set", _wrap_ScopedCopyableGainAndPhasePolys_phasePoly_set, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys_phasePoly_set(ScopedCopyableGainAndPhasePolys self, Poly2D phasePoly)"},
	 { (char *)"ScopedCopyableGainAndPhasePolys_phasePoly_get", _wrap_ScopedCopyableGainAndPhasePolys_phasePoly_get, METH_VARARGS, (char *)"ScopedCopyableGainAndPhasePolys_phasePoly_get(ScopedCopyableGainAndPhasePolys self) -> Poly2D"},
	 { (char *)"ScopedCopyableGainAndPhasePolys_swigregister", ScopedCopyableGainAndPhasePolys_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableWeightType", _wrap_new_ScopedCopyableWeightType, METH_VARARGS, (char *)"\n"
		"ScopedCopyableWeightType(WeightType ptr=None)\n"
		"ScopedCopyableWeightType()\n"
		"new_ScopedCopyableWeightType(ScopedCopyableWeightType rhs) -> ScopedCopyableWeightType\n"
		""},
	 { (char *)"ScopedCopyableWeightType_get", _wrap_ScopedCopyableWeightType_get, METH_VARARGS, (char *)"ScopedCopyableWeightType_get(ScopedCopyableWeightType self) -> WeightType"},
	 { (char *)"ScopedCopyableWeightType___ref__", _wrap_ScopedCopyableWeightType___ref__, METH_VARARGS, (char *)"ScopedCopyableWeightType___ref__(ScopedCopyableWeightType self) -> WeightType"},
	 { (char *)"ScopedCopyableWeightType___deref__", _wrap_ScopedCopyableWeightType___deref__, METH_VARARGS, (char *)"ScopedCopyableWeightType___deref__(ScopedCopyableWeightType self) -> WeightType"},
	 { (char *)"ScopedCopyableWeightType_reset", _wrap_ScopedCopyableWeightType_reset, METH_VARARGS, (char *)"\n"
		"reset(WeightType ptr=None)\n"
		"ScopedCopyableWeightType_reset(ScopedCopyableWeightType self)\n"
		""},
	 { (char *)"delete_ScopedCopyableWeightType", _wrap_delete_ScopedCopyableWeightType, METH_VARARGS, (char *)"delete_ScopedCopyableWeightType(ScopedCopyableWeightType self)"},
	 { (char *)"ScopedCopyableWeightType_windowName_set", _wrap_ScopedCopyableWeightType_windowName_set, METH_VARARGS, (char *)"ScopedCopyableWeightType_windowName_set(ScopedCopyableWeightType self, string windowName)"},
	 { (char *)"ScopedCopyableWeightType_windowName_get", _wrap_ScopedCopyableWeightType_windowName_get, METH_VARARGS, (char *)"ScopedCopyableWeightType_windowName_get(ScopedCopyableWeightType self) -> string"},
	 { (char *)"ScopedCopyableWeightType_parameters_set", _wrap_ScopedCopyableWeightType_parameters_set, METH_VARARGS, (char *)"ScopedCopyableWeightType_parameters_set(ScopedCopyableWeightType self, std::vector<(Parameter,std::allocator<(Parameter)>)> parameters)"},
	 { (char *)"ScopedCopyableWeightType_parameters_get", _wrap_ScopedCopyableWeightType_parameters_get, METH_VARARGS, (char *)"ScopedCopyableWeightType_parameters_get(ScopedCopyableWeightType self) -> std::vector<(Parameter,std::allocator<(Parameter)>)>"},
	 { (char *)"ScopedCopyableWeightType_swigregister", ScopedCopyableWeightType_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorPolyXYZ_iterator", _wrap_VectorPolyXYZ_iterator, METH_VARARGS, (char *)"VectorPolyXYZ_iterator(VectorPolyXYZ self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorPolyXYZ___nonzero__", _wrap_VectorPolyXYZ___nonzero__, METH_VARARGS, (char *)"VectorPolyXYZ___nonzero__(VectorPolyXYZ self) -> bool"},
	 { (char *)"VectorPolyXYZ___len__", _wrap_VectorPolyXYZ___len__, METH_VARARGS, (char *)"VectorPolyXYZ___len__(VectorPolyXYZ self) -> size_type"},
	 { (char *)"VectorPolyXYZ_pop", _wrap_VectorPolyXYZ_pop, METH_VARARGS, (char *)"VectorPolyXYZ_pop(VectorPolyXYZ self) -> value_type"},
	 { (char *)"VectorPolyXYZ___getslice__", _wrap_VectorPolyXYZ___getslice__, METH_VARARGS, (char *)"VectorPolyXYZ___getslice__(VectorPolyXYZ self, difference_type i, difference_type j) -> VectorPolyXYZ"},
	 { (char *)"VectorPolyXYZ___setslice__", _wrap_VectorPolyXYZ___setslice__, METH_VARARGS, (char *)"\n"
		"VectorPolyXYZ___setslice__(VectorPolyXYZ self, difference_type i, difference_type j, \n"
		"    VectorPolyXYZ v)\n"
		""},
	 { (char *)"VectorPolyXYZ___delslice__", _wrap_VectorPolyXYZ___delslice__, METH_VARARGS, (char *)"VectorPolyXYZ___delslice__(VectorPolyXYZ self, difference_type i, difference_type j)"},
	 { (char *)"VectorPolyXYZ___delitem__", _wrap_VectorPolyXYZ___delitem__, METH_VARARGS, (char *)"VectorPolyXYZ___delitem__(VectorPolyXYZ self, difference_type i)"},
	 { (char *)"VectorPolyXYZ___getitem__", _wrap_VectorPolyXYZ___getitem__, METH_VARARGS, (char *)"VectorPolyXYZ___getitem__(VectorPolyXYZ self, difference_type i) -> value_type"},
	 { (char *)"VectorPolyXYZ___setitem__", _wrap_VectorPolyXYZ___setitem__, METH_VARARGS, (char *)"VectorPolyXYZ___setitem__(VectorPolyXYZ self, difference_type i, value_type x)"},
	 { (char *)"VectorPolyXYZ_append", _wrap_VectorPolyXYZ_append, METH_VARARGS, (char *)"VectorPolyXYZ_append(VectorPolyXYZ self, value_type x)"},
	 { (char *)"VectorPolyXYZ_empty", _wrap_VectorPolyXYZ_empty, METH_VARARGS, (char *)"VectorPolyXYZ_empty(VectorPolyXYZ self) -> bool"},
	 { (char *)"VectorPolyXYZ_size", _wrap_VectorPolyXYZ_size, METH_VARARGS, (char *)"VectorPolyXYZ_size(VectorPolyXYZ self) -> size_type"},
	 { (char *)"VectorPolyXYZ_clear", _wrap_VectorPolyXYZ_clear, METH_VARARGS, (char *)"VectorPolyXYZ_clear(VectorPolyXYZ self)"},
	 { (char *)"VectorPolyXYZ_swap", _wrap_VectorPolyXYZ_swap, METH_VARARGS, (char *)"VectorPolyXYZ_swap(VectorPolyXYZ self, VectorPolyXYZ v)"},
	 { (char *)"VectorPolyXYZ_get_allocator", _wrap_VectorPolyXYZ_get_allocator, METH_VARARGS, (char *)"VectorPolyXYZ_get_allocator(VectorPolyXYZ self) -> allocator_type"},
	 { (char *)"VectorPolyXYZ_begin", _wrap_VectorPolyXYZ_begin, METH_VARARGS, (char *)"VectorPolyXYZ_begin(VectorPolyXYZ self) -> const_iterator"},
	 { (char *)"VectorPolyXYZ_end", _wrap_VectorPolyXYZ_end, METH_VARARGS, (char *)"VectorPolyXYZ_end(VectorPolyXYZ self) -> const_iterator"},
	 { (char *)"VectorPolyXYZ_rbegin", _wrap_VectorPolyXYZ_rbegin, METH_VARARGS, (char *)"VectorPolyXYZ_rbegin(VectorPolyXYZ self) -> const_reverse_iterator"},
	 { (char *)"VectorPolyXYZ_rend", _wrap_VectorPolyXYZ_rend, METH_VARARGS, (char *)"VectorPolyXYZ_rend(VectorPolyXYZ self) -> const_reverse_iterator"},
	 { (char *)"VectorPolyXYZ_pop_back", _wrap_VectorPolyXYZ_pop_back, METH_VARARGS, (char *)"VectorPolyXYZ_pop_back(VectorPolyXYZ self)"},
	 { (char *)"VectorPolyXYZ_erase", _wrap_VectorPolyXYZ_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorPolyXYZ_erase(VectorPolyXYZ self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorPolyXYZ", _wrap_new_VectorPolyXYZ, METH_VARARGS, (char *)"\n"
		"VectorPolyXYZ()\n"
		"VectorPolyXYZ(VectorPolyXYZ ?)\n"
		"VectorPolyXYZ(size_type size)\n"
		"new_VectorPolyXYZ(size_type size, value_type value) -> VectorPolyXYZ\n"
		""},
	 { (char *)"VectorPolyXYZ_push_back", _wrap_VectorPolyXYZ_push_back, METH_VARARGS, (char *)"VectorPolyXYZ_push_back(VectorPolyXYZ self, value_type x)"},
	 { (char *)"VectorPolyXYZ_front", _wrap_VectorPolyXYZ_front, METH_VARARGS, (char *)"VectorPolyXYZ_front(VectorPolyXYZ self) -> value_type"},
	 { (char *)"VectorPolyXYZ_back", _wrap_VectorPolyXYZ_back, METH_VARARGS, (char *)"VectorPolyXYZ_back(VectorPolyXYZ self) -> value_type"},
	 { (char *)"VectorPolyXYZ_assign", _wrap_VectorPolyXYZ_assign, METH_VARARGS, (char *)"VectorPolyXYZ_assign(VectorPolyXYZ self, size_type n, value_type x)"},
	 { (char *)"VectorPolyXYZ_resize", _wrap_VectorPolyXYZ_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorPolyXYZ_resize(VectorPolyXYZ self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"VectorPolyXYZ_insert", _wrap_VectorPolyXYZ_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorPolyXYZ_insert(VectorPolyXYZ self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"VectorPolyXYZ_reserve", _wrap_VectorPolyXYZ_reserve, METH_VARARGS, (char *)"VectorPolyXYZ_reserve(VectorPolyXYZ self, size_type n)"},
	 { (char *)"VectorPolyXYZ_capacity", _wrap_VectorPolyXYZ_capacity, METH_VARARGS, (char *)"VectorPolyXYZ_capacity(VectorPolyXYZ self) -> size_type"},
	 { (char *)"delete_VectorPolyXYZ", _wrap_delete_VectorPolyXYZ, METH_VARARGS, (char *)"delete_VectorPolyXYZ(VectorPolyXYZ self)"},
	 { (char *)"VectorPolyXYZ_swigregister", VectorPolyXYZ_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableAreaDirectionParameters", _wrap_new_ScopedCloneableAreaDirectionParameters, METH_VARARGS, (char *)"\n"
		"ScopedCloneableAreaDirectionParameters(AreaDirectionParameters ptr=None)\n"
		"ScopedCloneableAreaDirectionParameters()\n"
		"new_ScopedCloneableAreaDirectionParameters(ScopedCloneableAreaDirectionParameters rhs) -> ScopedCloneableAreaDirectionParameters\n"
		""},
	 { (char *)"ScopedCloneableAreaDirectionParameters_get", _wrap_ScopedCloneableAreaDirectionParameters_get, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_get(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"},
	 { (char *)"ScopedCloneableAreaDirectionParameters___ref__", _wrap_ScopedCloneableAreaDirectionParameters___ref__, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters___ref__(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"},
	 { (char *)"ScopedCloneableAreaDirectionParameters___deref__", _wrap_ScopedCloneableAreaDirectionParameters___deref__, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters___deref__(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_reset", _wrap_ScopedCloneableAreaDirectionParameters_reset, METH_VARARGS, (char *)"\n"
		"reset(AreaDirectionParameters ptr=None)\n"
		"ScopedCloneableAreaDirectionParameters_reset(ScopedCloneableAreaDirectionParameters self)\n"
		""},
	 { (char *)"delete_ScopedCloneableAreaDirectionParameters", _wrap_delete_ScopedCloneableAreaDirectionParameters, METH_VARARGS, (char *)"delete_ScopedCloneableAreaDirectionParameters(ScopedCloneableAreaDirectionParameters self)"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_clone", _wrap_ScopedCloneableAreaDirectionParameters_clone, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_clone(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_unitVector_set", _wrap_ScopedCloneableAreaDirectionParameters_unitVector_set, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_unitVector_set(ScopedCloneableAreaDirectionParameters self, Vector3 unitVector)"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_unitVector_get", _wrap_ScopedCloneableAreaDirectionParameters_unitVector_get, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_unitVector_get(ScopedCloneableAreaDirectionParameters self) -> Vector3"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_spacing_set", _wrap_ScopedCloneableAreaDirectionParameters_spacing_set, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_spacing_set(ScopedCloneableAreaDirectionParameters self, double spacing)"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_spacing_get", _wrap_ScopedCloneableAreaDirectionParameters_spacing_get, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_spacing_get(ScopedCloneableAreaDirectionParameters self) -> double"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_elements_set", _wrap_ScopedCloneableAreaDirectionParameters_elements_set, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_elements_set(ScopedCloneableAreaDirectionParameters self, size_t elements)"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_elements_get", _wrap_ScopedCloneableAreaDirectionParameters_elements_get, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_elements_get(ScopedCloneableAreaDirectionParameters self) -> size_t"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_first_set", _wrap_ScopedCloneableAreaDirectionParameters_first_set, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_first_set(ScopedCloneableAreaDirectionParameters self, size_t first)"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_first_get", _wrap_ScopedCloneableAreaDirectionParameters_first_get, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters_first_get(ScopedCloneableAreaDirectionParameters self) -> size_t"},
	 { (char *)"ScopedCloneableAreaDirectionParameters___eq__", _wrap_ScopedCloneableAreaDirectionParameters___eq__, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters___eq__(ScopedCloneableAreaDirectionParameters self, AreaDirectionParameters other) -> bool"},
	 { (char *)"ScopedCloneableAreaDirectionParameters___ne__", _wrap_ScopedCloneableAreaDirectionParameters___ne__, METH_VARARGS, (char *)"ScopedCloneableAreaDirectionParameters___ne__(ScopedCloneableAreaDirectionParameters self, AreaDirectionParameters other) -> bool"},
	 { (char *)"ScopedCloneableAreaDirectionParameters_swigregister", ScopedCloneableAreaDirectionParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableSegment", _wrap_new_ScopedCloneableSegment, METH_VARARGS, (char *)"\n"
		"ScopedCloneableSegment(Segment ptr=None)\n"
		"ScopedCloneableSegment()\n"
		"new_ScopedCloneableSegment(ScopedCloneableSegment rhs) -> ScopedCloneableSegment\n"
		""},
	 { (char *)"ScopedCloneableSegment_get", _wrap_ScopedCloneableSegment_get, METH_VARARGS, (char *)"ScopedCloneableSegment_get(ScopedCloneableSegment self) -> Segment"},
	 { (char *)"ScopedCloneableSegment___ref__", _wrap_ScopedCloneableSegment___ref__, METH_VARARGS, (char *)"ScopedCloneableSegment___ref__(ScopedCloneableSegment self) -> Segment"},
	 { (char *)"ScopedCloneableSegment___deref__", _wrap_ScopedCloneableSegment___deref__, METH_VARARGS, (char *)"ScopedCloneableSegment___deref__(ScopedCloneableSegment self) -> Segment"},
	 { (char *)"ScopedCloneableSegment_reset", _wrap_ScopedCloneableSegment_reset, METH_VARARGS, (char *)"\n"
		"reset(Segment ptr=None)\n"
		"ScopedCloneableSegment_reset(ScopedCloneableSegment self)\n"
		""},
	 { (char *)"delete_ScopedCloneableSegment", _wrap_delete_ScopedCloneableSegment, METH_VARARGS, (char *)"delete_ScopedCloneableSegment(ScopedCloneableSegment self)"},
	 { (char *)"ScopedCloneableSegment_clone", _wrap_ScopedCloneableSegment_clone, METH_VARARGS, (char *)"ScopedCloneableSegment_clone(ScopedCloneableSegment self) -> Segment"},
	 { (char *)"ScopedCloneableSegment_getNumLines", _wrap_ScopedCloneableSegment_getNumLines, METH_VARARGS, (char *)"ScopedCloneableSegment_getNumLines(ScopedCloneableSegment self) -> int"},
	 { (char *)"ScopedCloneableSegment_getNumSamples", _wrap_ScopedCloneableSegment_getNumSamples, METH_VARARGS, (char *)"ScopedCloneableSegment_getNumSamples(ScopedCloneableSegment self) -> int"},
	 { (char *)"ScopedCloneableSegment_startLine_set", _wrap_ScopedCloneableSegment_startLine_set, METH_VARARGS, (char *)"ScopedCloneableSegment_startLine_set(ScopedCloneableSegment self, int startLine)"},
	 { (char *)"ScopedCloneableSegment_startLine_get", _wrap_ScopedCloneableSegment_startLine_get, METH_VARARGS, (char *)"ScopedCloneableSegment_startLine_get(ScopedCloneableSegment self) -> int"},
	 { (char *)"ScopedCloneableSegment_startSample_set", _wrap_ScopedCloneableSegment_startSample_set, METH_VARARGS, (char *)"ScopedCloneableSegment_startSample_set(ScopedCloneableSegment self, int startSample)"},
	 { (char *)"ScopedCloneableSegment_startSample_get", _wrap_ScopedCloneableSegment_startSample_get, METH_VARARGS, (char *)"ScopedCloneableSegment_startSample_get(ScopedCloneableSegment self) -> int"},
	 { (char *)"ScopedCloneableSegment_endLine_set", _wrap_ScopedCloneableSegment_endLine_set, METH_VARARGS, (char *)"ScopedCloneableSegment_endLine_set(ScopedCloneableSegment self, int endLine)"},
	 { (char *)"ScopedCloneableSegment_endLine_get", _wrap_ScopedCloneableSegment_endLine_get, METH_VARARGS, (char *)"ScopedCloneableSegment_endLine_get(ScopedCloneableSegment self) -> int"},
	 { (char *)"ScopedCloneableSegment_endSample_set", _wrap_ScopedCloneableSegment_endSample_set, METH_VARARGS, (char *)"ScopedCloneableSegment_endSample_set(ScopedCloneableSegment self, int endSample)"},
	 { (char *)"ScopedCloneableSegment_endSample_get", _wrap_ScopedCloneableSegment_endSample_get, METH_VARARGS, (char *)"ScopedCloneableSegment_endSample_get(ScopedCloneableSegment self) -> int"},
	 { (char *)"ScopedCloneableSegment_identifier_set", _wrap_ScopedCloneableSegment_identifier_set, METH_VARARGS, (char *)"ScopedCloneableSegment_identifier_set(ScopedCloneableSegment self, string identifier)"},
	 { (char *)"ScopedCloneableSegment_identifier_get", _wrap_ScopedCloneableSegment_identifier_get, METH_VARARGS, (char *)"ScopedCloneableSegment_identifier_get(ScopedCloneableSegment self) -> string"},
	 { (char *)"ScopedCloneableSegment_swigregister", ScopedCloneableSegment_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableTxStep", _wrap_new_ScopedCloneableTxStep, METH_VARARGS, (char *)"\n"
		"ScopedCloneableTxStep(TxStep ptr=None)\n"
		"ScopedCloneableTxStep()\n"
		"new_ScopedCloneableTxStep(ScopedCloneableTxStep rhs) -> ScopedCloneableTxStep\n"
		""},
	 { (char *)"ScopedCloneableTxStep_get", _wrap_ScopedCloneableTxStep_get, METH_VARARGS, (char *)"ScopedCloneableTxStep_get(ScopedCloneableTxStep self) -> TxStep"},
	 { (char *)"ScopedCloneableTxStep___ref__", _wrap_ScopedCloneableTxStep___ref__, METH_VARARGS, (char *)"ScopedCloneableTxStep___ref__(ScopedCloneableTxStep self) -> TxStep"},
	 { (char *)"ScopedCloneableTxStep___deref__", _wrap_ScopedCloneableTxStep___deref__, METH_VARARGS, (char *)"ScopedCloneableTxStep___deref__(ScopedCloneableTxStep self) -> TxStep"},
	 { (char *)"ScopedCloneableTxStep_reset", _wrap_ScopedCloneableTxStep_reset, METH_VARARGS, (char *)"\n"
		"reset(TxStep ptr=None)\n"
		"ScopedCloneableTxStep_reset(ScopedCloneableTxStep self)\n"
		""},
	 { (char *)"delete_ScopedCloneableTxStep", _wrap_delete_ScopedCloneableTxStep, METH_VARARGS, (char *)"delete_ScopedCloneableTxStep(ScopedCloneableTxStep self)"},
	 { (char *)"ScopedCloneableTxStep_clone", _wrap_ScopedCloneableTxStep_clone, METH_VARARGS, (char *)"ScopedCloneableTxStep_clone(ScopedCloneableTxStep self) -> TxStep"},
	 { (char *)"ScopedCloneableTxStep_waveformIndex_set", _wrap_ScopedCloneableTxStep_waveformIndex_set, METH_VARARGS, (char *)"ScopedCloneableTxStep_waveformIndex_set(ScopedCloneableTxStep self, int waveformIndex)"},
	 { (char *)"ScopedCloneableTxStep_waveformIndex_get", _wrap_ScopedCloneableTxStep_waveformIndex_get, METH_VARARGS, (char *)"ScopedCloneableTxStep_waveformIndex_get(ScopedCloneableTxStep self) -> int"},
	 { (char *)"ScopedCloneableTxStep_txPolarization_set", _wrap_ScopedCloneableTxStep_txPolarization_set, METH_VARARGS, (char *)"ScopedCloneableTxStep_txPolarization_set(ScopedCloneableTxStep self, PolarizationType txPolarization)"},
	 { (char *)"ScopedCloneableTxStep_txPolarization_get", _wrap_ScopedCloneableTxStep_txPolarization_get, METH_VARARGS, (char *)"ScopedCloneableTxStep_txPolarization_get(ScopedCloneableTxStep self) -> PolarizationType"},
	 { (char *)"ScopedCloneableTxStep_swigregister", ScopedCloneableTxStep_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableWaveformParameters", _wrap_new_ScopedCloneableWaveformParameters, METH_VARARGS, (char *)"\n"
		"ScopedCloneableWaveformParameters(WaveformParameters ptr=None)\n"
		"ScopedCloneableWaveformParameters()\n"
		"new_ScopedCloneableWaveformParameters(ScopedCloneableWaveformParameters rhs) -> ScopedCloneableWaveformParameters\n"
		""},
	 { (char *)"ScopedCloneableWaveformParameters_get", _wrap_ScopedCloneableWaveformParameters_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_get(ScopedCloneableWaveformParameters self) -> WaveformParameters"},
	 { (char *)"ScopedCloneableWaveformParameters___ref__", _wrap_ScopedCloneableWaveformParameters___ref__, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters___ref__(ScopedCloneableWaveformParameters self) -> WaveformParameters"},
	 { (char *)"ScopedCloneableWaveformParameters___deref__", _wrap_ScopedCloneableWaveformParameters___deref__, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters___deref__(ScopedCloneableWaveformParameters self) -> WaveformParameters"},
	 { (char *)"ScopedCloneableWaveformParameters_reset", _wrap_ScopedCloneableWaveformParameters_reset, METH_VARARGS, (char *)"\n"
		"reset(WaveformParameters ptr=None)\n"
		"ScopedCloneableWaveformParameters_reset(ScopedCloneableWaveformParameters self)\n"
		""},
	 { (char *)"delete_ScopedCloneableWaveformParameters", _wrap_delete_ScopedCloneableWaveformParameters, METH_VARARGS, (char *)"delete_ScopedCloneableWaveformParameters(ScopedCloneableWaveformParameters self)"},
	 { (char *)"ScopedCloneableWaveformParameters_clone", _wrap_ScopedCloneableWaveformParameters_clone, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_clone(ScopedCloneableWaveformParameters self) -> WaveformParameters"},
	 { (char *)"ScopedCloneableWaveformParameters_txPulseLength_set", _wrap_ScopedCloneableWaveformParameters_txPulseLength_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_txPulseLength_set(ScopedCloneableWaveformParameters self, double txPulseLength)"},
	 { (char *)"ScopedCloneableWaveformParameters_txPulseLength_get", _wrap_ScopedCloneableWaveformParameters_txPulseLength_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_txPulseLength_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_txRFBandwidth_set", _wrap_ScopedCloneableWaveformParameters_txRFBandwidth_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_txRFBandwidth_set(ScopedCloneableWaveformParameters self, double txRFBandwidth)"},
	 { (char *)"ScopedCloneableWaveformParameters_txRFBandwidth_get", _wrap_ScopedCloneableWaveformParameters_txRFBandwidth_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_txRFBandwidth_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_txFrequencyStart_set", _wrap_ScopedCloneableWaveformParameters_txFrequencyStart_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_txFrequencyStart_set(ScopedCloneableWaveformParameters self, double txFrequencyStart)"},
	 { (char *)"ScopedCloneableWaveformParameters_txFrequencyStart_get", _wrap_ScopedCloneableWaveformParameters_txFrequencyStart_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_txFrequencyStart_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_txFMRate_set", _wrap_ScopedCloneableWaveformParameters_txFMRate_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_txFMRate_set(ScopedCloneableWaveformParameters self, double txFMRate)"},
	 { (char *)"ScopedCloneableWaveformParameters_txFMRate_get", _wrap_ScopedCloneableWaveformParameters_txFMRate_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_txFMRate_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvDemodType_set", _wrap_ScopedCloneableWaveformParameters_rcvDemodType_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvDemodType_set(ScopedCloneableWaveformParameters self, DemodType rcvDemodType)"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvDemodType_get", _wrap_ScopedCloneableWaveformParameters_rcvDemodType_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvDemodType_get(ScopedCloneableWaveformParameters self) -> DemodType"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvWindowLength_set", _wrap_ScopedCloneableWaveformParameters_rcvWindowLength_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvWindowLength_set(ScopedCloneableWaveformParameters self, double rcvWindowLength)"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvWindowLength_get", _wrap_ScopedCloneableWaveformParameters_rcvWindowLength_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvWindowLength_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_adcSampleRate_set", _wrap_ScopedCloneableWaveformParameters_adcSampleRate_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_adcSampleRate_set(ScopedCloneableWaveformParameters self, double adcSampleRate)"},
	 { (char *)"ScopedCloneableWaveformParameters_adcSampleRate_get", _wrap_ScopedCloneableWaveformParameters_adcSampleRate_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_adcSampleRate_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvIFBandwidth_set", _wrap_ScopedCloneableWaveformParameters_rcvIFBandwidth_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvIFBandwidth_set(ScopedCloneableWaveformParameters self, double rcvIFBandwidth)"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvIFBandwidth_get", _wrap_ScopedCloneableWaveformParameters_rcvIFBandwidth_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvIFBandwidth_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvFrequencyStart_set", _wrap_ScopedCloneableWaveformParameters_rcvFrequencyStart_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvFrequencyStart_set(ScopedCloneableWaveformParameters self, double rcvFrequencyStart)"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvFrequencyStart_get", _wrap_ScopedCloneableWaveformParameters_rcvFrequencyStart_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvFrequencyStart_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvFMRate_set", _wrap_ScopedCloneableWaveformParameters_rcvFMRate_set, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvFMRate_set(ScopedCloneableWaveformParameters self, double rcvFMRate)"},
	 { (char *)"ScopedCloneableWaveformParameters_rcvFMRate_get", _wrap_ScopedCloneableWaveformParameters_rcvFMRate_get, METH_VARARGS, (char *)"ScopedCloneableWaveformParameters_rcvFMRate_get(ScopedCloneableWaveformParameters self) -> double"},
	 { (char *)"ScopedCloneableWaveformParameters_swigregister", ScopedCloneableWaveformParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableArea", _wrap_new_ScopedCloneableArea, METH_VARARGS, (char *)"\n"
		"ScopedCloneableArea(Area ptr=None)\n"
		"ScopedCloneableArea()\n"
		"new_ScopedCloneableArea(ScopedCloneableArea rhs) -> ScopedCloneableArea\n"
		""},
	 { (char *)"ScopedCloneableArea_get", _wrap_ScopedCloneableArea_get, METH_VARARGS, (char *)"ScopedCloneableArea_get(ScopedCloneableArea self) -> Area"},
	 { (char *)"ScopedCloneableArea___ref__", _wrap_ScopedCloneableArea___ref__, METH_VARARGS, (char *)"ScopedCloneableArea___ref__(ScopedCloneableArea self) -> Area"},
	 { (char *)"ScopedCloneableArea___deref__", _wrap_ScopedCloneableArea___deref__, METH_VARARGS, (char *)"ScopedCloneableArea___deref__(ScopedCloneableArea self) -> Area"},
	 { (char *)"ScopedCloneableArea_reset", _wrap_ScopedCloneableArea_reset, METH_VARARGS, (char *)"\n"
		"reset(Area ptr=None)\n"
		"ScopedCloneableArea_reset(ScopedCloneableArea self)\n"
		""},
	 { (char *)"delete_ScopedCloneableArea", _wrap_delete_ScopedCloneableArea, METH_VARARGS, (char *)"delete_ScopedCloneableArea(ScopedCloneableArea self)"},
	 { (char *)"ScopedCloneableArea_clone", _wrap_ScopedCloneableArea_clone, METH_VARARGS, (char *)"ScopedCloneableArea_clone(ScopedCloneableArea self) -> Area"},
	 { (char *)"ScopedCloneableArea_acpCorners_set", _wrap_ScopedCloneableArea_acpCorners_set, METH_VARARGS, (char *)"ScopedCloneableArea_acpCorners_set(ScopedCloneableArea self, LatLonAltCorners acpCorners)"},
	 { (char *)"ScopedCloneableArea_acpCorners_get", _wrap_ScopedCloneableArea_acpCorners_get, METH_VARARGS, (char *)"ScopedCloneableArea_acpCorners_get(ScopedCloneableArea self) -> LatLonAltCorners"},
	 { (char *)"ScopedCloneableArea_plane_set", _wrap_ScopedCloneableArea_plane_set, METH_VARARGS, (char *)"ScopedCloneableArea_plane_set(ScopedCloneableArea self, mem::ScopedCloneablePtr<(six::sicd::AreaPlane)> plane)"},
	 { (char *)"ScopedCloneableArea_plane_get", _wrap_ScopedCloneableArea_plane_get, METH_VARARGS, (char *)"ScopedCloneableArea_plane_get(ScopedCloneableArea self) -> mem::ScopedCloneablePtr<(six::sicd::AreaPlane)>"},
	 { (char *)"ScopedCloneableArea_swigregister", ScopedCloneableArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCloneableChannelParameters", _wrap_new_ScopedCloneableChannelParameters, METH_VARARGS, (char *)"\n"
		"ScopedCloneableChannelParameters(ChannelParameters ptr=None)\n"
		"ScopedCloneableChannelParameters()\n"
		"new_ScopedCloneableChannelParameters(ScopedCloneableChannelParameters rhs) -> ScopedCloneableChannelParameters\n"
		""},
	 { (char *)"ScopedCloneableChannelParameters_get", _wrap_ScopedCloneableChannelParameters_get, METH_VARARGS, (char *)"ScopedCloneableChannelParameters_get(ScopedCloneableChannelParameters self) -> ChannelParameters"},
	 { (char *)"ScopedCloneableChannelParameters___ref__", _wrap_ScopedCloneableChannelParameters___ref__, METH_VARARGS, (char *)"ScopedCloneableChannelParameters___ref__(ScopedCloneableChannelParameters self) -> ChannelParameters"},
	 { (char *)"ScopedCloneableChannelParameters___deref__", _wrap_ScopedCloneableChannelParameters___deref__, METH_VARARGS, (char *)"ScopedCloneableChannelParameters___deref__(ScopedCloneableChannelParameters self) -> ChannelParameters"},
	 { (char *)"ScopedCloneableChannelParameters_reset", _wrap_ScopedCloneableChannelParameters_reset, METH_VARARGS, (char *)"\n"
		"reset(ChannelParameters ptr=None)\n"
		"ScopedCloneableChannelParameters_reset(ScopedCloneableChannelParameters self)\n"
		""},
	 { (char *)"delete_ScopedCloneableChannelParameters", _wrap_delete_ScopedCloneableChannelParameters, METH_VARARGS, (char *)"delete_ScopedCloneableChannelParameters(ScopedCloneableChannelParameters self)"},
	 { (char *)"ScopedCloneableChannelParameters_clone", _wrap_ScopedCloneableChannelParameters_clone, METH_VARARGS, (char *)"ScopedCloneableChannelParameters_clone(ScopedCloneableChannelParameters self) -> ChannelParameters"},
	 { (char *)"ScopedCloneableChannelParameters_txRcvPolarization_set", _wrap_ScopedCloneableChannelParameters_txRcvPolarization_set, METH_VARARGS, (char *)"ScopedCloneableChannelParameters_txRcvPolarization_set(ScopedCloneableChannelParameters self, DualPolarizationType txRcvPolarization)"},
	 { (char *)"ScopedCloneableChannelParameters_txRcvPolarization_get", _wrap_ScopedCloneableChannelParameters_txRcvPolarization_get, METH_VARARGS, (char *)"ScopedCloneableChannelParameters_txRcvPolarization_get(ScopedCloneableChannelParameters self) -> DualPolarizationType"},
	 { (char *)"ScopedCloneableChannelParameters_rcvAPCIndex_set", _wrap_ScopedCloneableChannelParameters_rcvAPCIndex_set, METH_VARARGS, (char *)"ScopedCloneableChannelParameters_rcvAPCIndex_set(ScopedCloneableChannelParameters self, int rcvAPCIndex)"},
	 { (char *)"ScopedCloneableChannelParameters_rcvAPCIndex_get", _wrap_ScopedCloneableChannelParameters_rcvAPCIndex_get, METH_VARARGS, (char *)"ScopedCloneableChannelParameters_rcvAPCIndex_get(ScopedCloneableChannelParameters self) -> int"},
	 { (char *)"ScopedCloneableChannelParameters_swigregister", ScopedCloneableChannelParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorScopedCloneableWaveformParameters_iterator", _wrap_VectorScopedCloneableWaveformParameters_iterator, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_iterator(VectorScopedCloneableWaveformParameters self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorScopedCloneableWaveformParameters___nonzero__", _wrap_VectorScopedCloneableWaveformParameters___nonzero__, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters___nonzero__(VectorScopedCloneableWaveformParameters self) -> bool"},
	 { (char *)"VectorScopedCloneableWaveformParameters___len__", _wrap_VectorScopedCloneableWaveformParameters___len__, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters___len__(VectorScopedCloneableWaveformParameters self) -> size_type"},
	 { (char *)"VectorScopedCloneableWaveformParameters_pop", _wrap_VectorScopedCloneableWaveformParameters_pop, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_pop(VectorScopedCloneableWaveformParameters self) -> value_type"},
	 { (char *)"VectorScopedCloneableWaveformParameters___getslice__", _wrap_VectorScopedCloneableWaveformParameters___getslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableWaveformParameters___getslice__(VectorScopedCloneableWaveformParameters self, difference_type i, \n"
		"    difference_type j) -> VectorScopedCloneableWaveformParameters\n"
		""},
	 { (char *)"VectorScopedCloneableWaveformParameters___setslice__", _wrap_VectorScopedCloneableWaveformParameters___setslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableWaveformParameters___setslice__(VectorScopedCloneableWaveformParameters self, difference_type i, \n"
		"    difference_type j, VectorScopedCloneableWaveformParameters v)\n"
		""},
	 { (char *)"VectorScopedCloneableWaveformParameters___delslice__", _wrap_VectorScopedCloneableWaveformParameters___delslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableWaveformParameters___delslice__(VectorScopedCloneableWaveformParameters self, difference_type i, \n"
		"    difference_type j)\n"
		""},
	 { (char *)"VectorScopedCloneableWaveformParameters___delitem__", _wrap_VectorScopedCloneableWaveformParameters___delitem__, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters___delitem__(VectorScopedCloneableWaveformParameters self, difference_type i)"},
	 { (char *)"VectorScopedCloneableWaveformParameters___getitem__", _wrap_VectorScopedCloneableWaveformParameters___getitem__, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters___getitem__(VectorScopedCloneableWaveformParameters self, difference_type i) -> value_type"},
	 { (char *)"VectorScopedCloneableWaveformParameters___setitem__", _wrap_VectorScopedCloneableWaveformParameters___setitem__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableWaveformParameters___setitem__(VectorScopedCloneableWaveformParameters self, difference_type i, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableWaveformParameters_append", _wrap_VectorScopedCloneableWaveformParameters_append, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_append(VectorScopedCloneableWaveformParameters self, value_type x)"},
	 { (char *)"VectorScopedCloneableWaveformParameters_empty", _wrap_VectorScopedCloneableWaveformParameters_empty, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_empty(VectorScopedCloneableWaveformParameters self) -> bool"},
	 { (char *)"VectorScopedCloneableWaveformParameters_size", _wrap_VectorScopedCloneableWaveformParameters_size, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_size(VectorScopedCloneableWaveformParameters self) -> size_type"},
	 { (char *)"VectorScopedCloneableWaveformParameters_clear", _wrap_VectorScopedCloneableWaveformParameters_clear, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_clear(VectorScopedCloneableWaveformParameters self)"},
	 { (char *)"VectorScopedCloneableWaveformParameters_swap", _wrap_VectorScopedCloneableWaveformParameters_swap, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_swap(VectorScopedCloneableWaveformParameters self, VectorScopedCloneableWaveformParameters v)"},
	 { (char *)"VectorScopedCloneableWaveformParameters_get_allocator", _wrap_VectorScopedCloneableWaveformParameters_get_allocator, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_get_allocator(VectorScopedCloneableWaveformParameters self) -> allocator_type"},
	 { (char *)"VectorScopedCloneableWaveformParameters_begin", _wrap_VectorScopedCloneableWaveformParameters_begin, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_begin(VectorScopedCloneableWaveformParameters self) -> const_iterator"},
	 { (char *)"VectorScopedCloneableWaveformParameters_end", _wrap_VectorScopedCloneableWaveformParameters_end, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_end(VectorScopedCloneableWaveformParameters self) -> const_iterator"},
	 { (char *)"VectorScopedCloneableWaveformParameters_rbegin", _wrap_VectorScopedCloneableWaveformParameters_rbegin, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_rbegin(VectorScopedCloneableWaveformParameters self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCloneableWaveformParameters_rend", _wrap_VectorScopedCloneableWaveformParameters_rend, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_rend(VectorScopedCloneableWaveformParameters self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCloneableWaveformParameters_pop_back", _wrap_VectorScopedCloneableWaveformParameters_pop_back, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_pop_back(VectorScopedCloneableWaveformParameters self)"},
	 { (char *)"VectorScopedCloneableWaveformParameters_erase", _wrap_VectorScopedCloneableWaveformParameters_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorScopedCloneableWaveformParameters_erase(VectorScopedCloneableWaveformParameters self, iterator first, \n"
		"    iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorScopedCloneableWaveformParameters", _wrap_new_VectorScopedCloneableWaveformParameters, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableWaveformParameters()\n"
		"VectorScopedCloneableWaveformParameters(VectorScopedCloneableWaveformParameters ?)\n"
		"VectorScopedCloneableWaveformParameters(size_type size)\n"
		"new_VectorScopedCloneableWaveformParameters(size_type size, value_type value) -> VectorScopedCloneableWaveformParameters\n"
		""},
	 { (char *)"VectorScopedCloneableWaveformParameters_push_back", _wrap_VectorScopedCloneableWaveformParameters_push_back, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_push_back(VectorScopedCloneableWaveformParameters self, value_type x)"},
	 { (char *)"VectorScopedCloneableWaveformParameters_front", _wrap_VectorScopedCloneableWaveformParameters_front, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_front(VectorScopedCloneableWaveformParameters self) -> value_type"},
	 { (char *)"VectorScopedCloneableWaveformParameters_back", _wrap_VectorScopedCloneableWaveformParameters_back, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_back(VectorScopedCloneableWaveformParameters self) -> value_type"},
	 { (char *)"VectorScopedCloneableWaveformParameters_assign", _wrap_VectorScopedCloneableWaveformParameters_assign, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableWaveformParameters_assign(VectorScopedCloneableWaveformParameters self, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableWaveformParameters_resize", _wrap_VectorScopedCloneableWaveformParameters_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorScopedCloneableWaveformParameters_resize(VectorScopedCloneableWaveformParameters self, size_type new_size, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableWaveformParameters_insert", _wrap_VectorScopedCloneableWaveformParameters_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorScopedCloneableWaveformParameters_insert(VectorScopedCloneableWaveformParameters self, iterator pos, \n"
		"    size_type n, value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableWaveformParameters_reserve", _wrap_VectorScopedCloneableWaveformParameters_reserve, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_reserve(VectorScopedCloneableWaveformParameters self, size_type n)"},
	 { (char *)"VectorScopedCloneableWaveformParameters_capacity", _wrap_VectorScopedCloneableWaveformParameters_capacity, METH_VARARGS, (char *)"VectorScopedCloneableWaveformParameters_capacity(VectorScopedCloneableWaveformParameters self) -> size_type"},
	 { (char *)"delete_VectorScopedCloneableWaveformParameters", _wrap_delete_VectorScopedCloneableWaveformParameters, METH_VARARGS, (char *)"delete_VectorScopedCloneableWaveformParameters(VectorScopedCloneableWaveformParameters self)"},
	 { (char *)"VectorScopedCloneableWaveformParameters_swigregister", VectorScopedCloneableWaveformParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorScopedCloneableTxStep_iterator", _wrap_VectorScopedCloneableTxStep_iterator, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_iterator(VectorScopedCloneableTxStep self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorScopedCloneableTxStep___nonzero__", _wrap_VectorScopedCloneableTxStep___nonzero__, METH_VARARGS, (char *)"VectorScopedCloneableTxStep___nonzero__(VectorScopedCloneableTxStep self) -> bool"},
	 { (char *)"VectorScopedCloneableTxStep___len__", _wrap_VectorScopedCloneableTxStep___len__, METH_VARARGS, (char *)"VectorScopedCloneableTxStep___len__(VectorScopedCloneableTxStep self) -> size_type"},
	 { (char *)"VectorScopedCloneableTxStep_pop", _wrap_VectorScopedCloneableTxStep_pop, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_pop(VectorScopedCloneableTxStep self) -> value_type"},
	 { (char *)"VectorScopedCloneableTxStep___getslice__", _wrap_VectorScopedCloneableTxStep___getslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableTxStep___getslice__(VectorScopedCloneableTxStep self, difference_type i, \n"
		"    difference_type j) -> VectorScopedCloneableTxStep\n"
		""},
	 { (char *)"VectorScopedCloneableTxStep___setslice__", _wrap_VectorScopedCloneableTxStep___setslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableTxStep___setslice__(VectorScopedCloneableTxStep self, difference_type i, \n"
		"    difference_type j, VectorScopedCloneableTxStep v)\n"
		""},
	 { (char *)"VectorScopedCloneableTxStep___delslice__", _wrap_VectorScopedCloneableTxStep___delslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableTxStep___delslice__(VectorScopedCloneableTxStep self, difference_type i, \n"
		"    difference_type j)\n"
		""},
	 { (char *)"VectorScopedCloneableTxStep___delitem__", _wrap_VectorScopedCloneableTxStep___delitem__, METH_VARARGS, (char *)"VectorScopedCloneableTxStep___delitem__(VectorScopedCloneableTxStep self, difference_type i)"},
	 { (char *)"VectorScopedCloneableTxStep___getitem__", _wrap_VectorScopedCloneableTxStep___getitem__, METH_VARARGS, (char *)"VectorScopedCloneableTxStep___getitem__(VectorScopedCloneableTxStep self, difference_type i) -> value_type"},
	 { (char *)"VectorScopedCloneableTxStep___setitem__", _wrap_VectorScopedCloneableTxStep___setitem__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableTxStep___setitem__(VectorScopedCloneableTxStep self, difference_type i, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableTxStep_append", _wrap_VectorScopedCloneableTxStep_append, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_append(VectorScopedCloneableTxStep self, value_type x)"},
	 { (char *)"VectorScopedCloneableTxStep_empty", _wrap_VectorScopedCloneableTxStep_empty, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_empty(VectorScopedCloneableTxStep self) -> bool"},
	 { (char *)"VectorScopedCloneableTxStep_size", _wrap_VectorScopedCloneableTxStep_size, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_size(VectorScopedCloneableTxStep self) -> size_type"},
	 { (char *)"VectorScopedCloneableTxStep_clear", _wrap_VectorScopedCloneableTxStep_clear, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_clear(VectorScopedCloneableTxStep self)"},
	 { (char *)"VectorScopedCloneableTxStep_swap", _wrap_VectorScopedCloneableTxStep_swap, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_swap(VectorScopedCloneableTxStep self, VectorScopedCloneableTxStep v)"},
	 { (char *)"VectorScopedCloneableTxStep_get_allocator", _wrap_VectorScopedCloneableTxStep_get_allocator, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_get_allocator(VectorScopedCloneableTxStep self) -> allocator_type"},
	 { (char *)"VectorScopedCloneableTxStep_begin", _wrap_VectorScopedCloneableTxStep_begin, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_begin(VectorScopedCloneableTxStep self) -> const_iterator"},
	 { (char *)"VectorScopedCloneableTxStep_end", _wrap_VectorScopedCloneableTxStep_end, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_end(VectorScopedCloneableTxStep self) -> const_iterator"},
	 { (char *)"VectorScopedCloneableTxStep_rbegin", _wrap_VectorScopedCloneableTxStep_rbegin, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_rbegin(VectorScopedCloneableTxStep self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCloneableTxStep_rend", _wrap_VectorScopedCloneableTxStep_rend, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_rend(VectorScopedCloneableTxStep self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCloneableTxStep_pop_back", _wrap_VectorScopedCloneableTxStep_pop_back, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_pop_back(VectorScopedCloneableTxStep self)"},
	 { (char *)"VectorScopedCloneableTxStep_erase", _wrap_VectorScopedCloneableTxStep_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorScopedCloneableTxStep_erase(VectorScopedCloneableTxStep self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorScopedCloneableTxStep", _wrap_new_VectorScopedCloneableTxStep, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableTxStep()\n"
		"VectorScopedCloneableTxStep(VectorScopedCloneableTxStep ?)\n"
		"VectorScopedCloneableTxStep(size_type size)\n"
		"new_VectorScopedCloneableTxStep(size_type size, value_type value) -> VectorScopedCloneableTxStep\n"
		""},
	 { (char *)"VectorScopedCloneableTxStep_push_back", _wrap_VectorScopedCloneableTxStep_push_back, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_push_back(VectorScopedCloneableTxStep self, value_type x)"},
	 { (char *)"VectorScopedCloneableTxStep_front", _wrap_VectorScopedCloneableTxStep_front, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_front(VectorScopedCloneableTxStep self) -> value_type"},
	 { (char *)"VectorScopedCloneableTxStep_back", _wrap_VectorScopedCloneableTxStep_back, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_back(VectorScopedCloneableTxStep self) -> value_type"},
	 { (char *)"VectorScopedCloneableTxStep_assign", _wrap_VectorScopedCloneableTxStep_assign, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_assign(VectorScopedCloneableTxStep self, size_type n, value_type x)"},
	 { (char *)"VectorScopedCloneableTxStep_resize", _wrap_VectorScopedCloneableTxStep_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorScopedCloneableTxStep_resize(VectorScopedCloneableTxStep self, size_type new_size, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableTxStep_insert", _wrap_VectorScopedCloneableTxStep_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorScopedCloneableTxStep_insert(VectorScopedCloneableTxStep self, iterator pos, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableTxStep_reserve", _wrap_VectorScopedCloneableTxStep_reserve, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_reserve(VectorScopedCloneableTxStep self, size_type n)"},
	 { (char *)"VectorScopedCloneableTxStep_capacity", _wrap_VectorScopedCloneableTxStep_capacity, METH_VARARGS, (char *)"VectorScopedCloneableTxStep_capacity(VectorScopedCloneableTxStep self) -> size_type"},
	 { (char *)"delete_VectorScopedCloneableTxStep", _wrap_delete_VectorScopedCloneableTxStep, METH_VARARGS, (char *)"delete_VectorScopedCloneableTxStep(VectorScopedCloneableTxStep self)"},
	 { (char *)"VectorScopedCloneableTxStep_swigregister", VectorScopedCloneableTxStep_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorScopedClonableSegment_iterator", _wrap_vectorScopedClonableSegment_iterator, METH_VARARGS, (char *)"vectorScopedClonableSegment_iterator(vectorScopedClonableSegment self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"vectorScopedClonableSegment___nonzero__", _wrap_vectorScopedClonableSegment___nonzero__, METH_VARARGS, (char *)"vectorScopedClonableSegment___nonzero__(vectorScopedClonableSegment self) -> bool"},
	 { (char *)"vectorScopedClonableSegment___len__", _wrap_vectorScopedClonableSegment___len__, METH_VARARGS, (char *)"vectorScopedClonableSegment___len__(vectorScopedClonableSegment self) -> size_type"},
	 { (char *)"vectorScopedClonableSegment_pop", _wrap_vectorScopedClonableSegment_pop, METH_VARARGS, (char *)"vectorScopedClonableSegment_pop(vectorScopedClonableSegment self) -> value_type"},
	 { (char *)"vectorScopedClonableSegment___getslice__", _wrap_vectorScopedClonableSegment___getslice__, METH_VARARGS, (char *)"\n"
		"vectorScopedClonableSegment___getslice__(vectorScopedClonableSegment self, difference_type i, \n"
		"    difference_type j) -> vectorScopedClonableSegment\n"
		""},
	 { (char *)"vectorScopedClonableSegment___setslice__", _wrap_vectorScopedClonableSegment___setslice__, METH_VARARGS, (char *)"\n"
		"vectorScopedClonableSegment___setslice__(vectorScopedClonableSegment self, difference_type i, \n"
		"    difference_type j, vectorScopedClonableSegment v)\n"
		""},
	 { (char *)"vectorScopedClonableSegment___delslice__", _wrap_vectorScopedClonableSegment___delslice__, METH_VARARGS, (char *)"\n"
		"vectorScopedClonableSegment___delslice__(vectorScopedClonableSegment self, difference_type i, \n"
		"    difference_type j)\n"
		""},
	 { (char *)"vectorScopedClonableSegment___delitem__", _wrap_vectorScopedClonableSegment___delitem__, METH_VARARGS, (char *)"vectorScopedClonableSegment___delitem__(vectorScopedClonableSegment self, difference_type i)"},
	 { (char *)"vectorScopedClonableSegment___getitem__", _wrap_vectorScopedClonableSegment___getitem__, METH_VARARGS, (char *)"vectorScopedClonableSegment___getitem__(vectorScopedClonableSegment self, difference_type i) -> value_type"},
	 { (char *)"vectorScopedClonableSegment___setitem__", _wrap_vectorScopedClonableSegment___setitem__, METH_VARARGS, (char *)"\n"
		"vectorScopedClonableSegment___setitem__(vectorScopedClonableSegment self, difference_type i, \n"
		"    value_type x)\n"
		""},
	 { (char *)"vectorScopedClonableSegment_append", _wrap_vectorScopedClonableSegment_append, METH_VARARGS, (char *)"vectorScopedClonableSegment_append(vectorScopedClonableSegment self, value_type x)"},
	 { (char *)"vectorScopedClonableSegment_empty", _wrap_vectorScopedClonableSegment_empty, METH_VARARGS, (char *)"vectorScopedClonableSegment_empty(vectorScopedClonableSegment self) -> bool"},
	 { (char *)"vectorScopedClonableSegment_size", _wrap_vectorScopedClonableSegment_size, METH_VARARGS, (char *)"vectorScopedClonableSegment_size(vectorScopedClonableSegment self) -> size_type"},
	 { (char *)"vectorScopedClonableSegment_clear", _wrap_vectorScopedClonableSegment_clear, METH_VARARGS, (char *)"vectorScopedClonableSegment_clear(vectorScopedClonableSegment self)"},
	 { (char *)"vectorScopedClonableSegment_swap", _wrap_vectorScopedClonableSegment_swap, METH_VARARGS, (char *)"vectorScopedClonableSegment_swap(vectorScopedClonableSegment self, vectorScopedClonableSegment v)"},
	 { (char *)"vectorScopedClonableSegment_get_allocator", _wrap_vectorScopedClonableSegment_get_allocator, METH_VARARGS, (char *)"vectorScopedClonableSegment_get_allocator(vectorScopedClonableSegment self) -> allocator_type"},
	 { (char *)"vectorScopedClonableSegment_begin", _wrap_vectorScopedClonableSegment_begin, METH_VARARGS, (char *)"vectorScopedClonableSegment_begin(vectorScopedClonableSegment self) -> const_iterator"},
	 { (char *)"vectorScopedClonableSegment_end", _wrap_vectorScopedClonableSegment_end, METH_VARARGS, (char *)"vectorScopedClonableSegment_end(vectorScopedClonableSegment self) -> const_iterator"},
	 { (char *)"vectorScopedClonableSegment_rbegin", _wrap_vectorScopedClonableSegment_rbegin, METH_VARARGS, (char *)"vectorScopedClonableSegment_rbegin(vectorScopedClonableSegment self) -> const_reverse_iterator"},
	 { (char *)"vectorScopedClonableSegment_rend", _wrap_vectorScopedClonableSegment_rend, METH_VARARGS, (char *)"vectorScopedClonableSegment_rend(vectorScopedClonableSegment self) -> const_reverse_iterator"},
	 { (char *)"vectorScopedClonableSegment_pop_back", _wrap_vectorScopedClonableSegment_pop_back, METH_VARARGS, (char *)"vectorScopedClonableSegment_pop_back(vectorScopedClonableSegment self)"},
	 { (char *)"vectorScopedClonableSegment_erase", _wrap_vectorScopedClonableSegment_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"vectorScopedClonableSegment_erase(vectorScopedClonableSegment self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_vectorScopedClonableSegment", _wrap_new_vectorScopedClonableSegment, METH_VARARGS, (char *)"\n"
		"vectorScopedClonableSegment()\n"
		"vectorScopedClonableSegment(vectorScopedClonableSegment ?)\n"
		"vectorScopedClonableSegment(size_type size)\n"
		"new_vectorScopedClonableSegment(size_type size, value_type value) -> vectorScopedClonableSegment\n"
		""},
	 { (char *)"vectorScopedClonableSegment_push_back", _wrap_vectorScopedClonableSegment_push_back, METH_VARARGS, (char *)"vectorScopedClonableSegment_push_back(vectorScopedClonableSegment self, value_type x)"},
	 { (char *)"vectorScopedClonableSegment_front", _wrap_vectorScopedClonableSegment_front, METH_VARARGS, (char *)"vectorScopedClonableSegment_front(vectorScopedClonableSegment self) -> value_type"},
	 { (char *)"vectorScopedClonableSegment_back", _wrap_vectorScopedClonableSegment_back, METH_VARARGS, (char *)"vectorScopedClonableSegment_back(vectorScopedClonableSegment self) -> value_type"},
	 { (char *)"vectorScopedClonableSegment_assign", _wrap_vectorScopedClonableSegment_assign, METH_VARARGS, (char *)"vectorScopedClonableSegment_assign(vectorScopedClonableSegment self, size_type n, value_type x)"},
	 { (char *)"vectorScopedClonableSegment_resize", _wrap_vectorScopedClonableSegment_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"vectorScopedClonableSegment_resize(vectorScopedClonableSegment self, size_type new_size, \n"
		"    value_type x)\n"
		""},
	 { (char *)"vectorScopedClonableSegment_insert", _wrap_vectorScopedClonableSegment_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"vectorScopedClonableSegment_insert(vectorScopedClonableSegment self, iterator pos, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"vectorScopedClonableSegment_reserve", _wrap_vectorScopedClonableSegment_reserve, METH_VARARGS, (char *)"vectorScopedClonableSegment_reserve(vectorScopedClonableSegment self, size_type n)"},
	 { (char *)"vectorScopedClonableSegment_capacity", _wrap_vectorScopedClonableSegment_capacity, METH_VARARGS, (char *)"vectorScopedClonableSegment_capacity(vectorScopedClonableSegment self) -> size_type"},
	 { (char *)"delete_vectorScopedClonableSegment", _wrap_delete_vectorScopedClonableSegment, METH_VARARGS, (char *)"delete_vectorScopedClonableSegment(vectorScopedClonableSegment self)"},
	 { (char *)"vectorScopedClonableSegment_swigregister", vectorScopedClonableSegment_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorScopedCloneableChannelParameters_iterator", _wrap_VectorScopedCloneableChannelParameters_iterator, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_iterator(VectorScopedCloneableChannelParameters self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorScopedCloneableChannelParameters___nonzero__", _wrap_VectorScopedCloneableChannelParameters___nonzero__, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters___nonzero__(VectorScopedCloneableChannelParameters self) -> bool"},
	 { (char *)"VectorScopedCloneableChannelParameters___len__", _wrap_VectorScopedCloneableChannelParameters___len__, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters___len__(VectorScopedCloneableChannelParameters self) -> size_type"},
	 { (char *)"VectorScopedCloneableChannelParameters_pop", _wrap_VectorScopedCloneableChannelParameters_pop, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_pop(VectorScopedCloneableChannelParameters self) -> value_type"},
	 { (char *)"VectorScopedCloneableChannelParameters___getslice__", _wrap_VectorScopedCloneableChannelParameters___getslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableChannelParameters___getslice__(VectorScopedCloneableChannelParameters self, difference_type i, \n"
		"    difference_type j) -> VectorScopedCloneableChannelParameters\n"
		""},
	 { (char *)"VectorScopedCloneableChannelParameters___setslice__", _wrap_VectorScopedCloneableChannelParameters___setslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableChannelParameters___setslice__(VectorScopedCloneableChannelParameters self, difference_type i, \n"
		"    difference_type j, VectorScopedCloneableChannelParameters v)\n"
		""},
	 { (char *)"VectorScopedCloneableChannelParameters___delslice__", _wrap_VectorScopedCloneableChannelParameters___delslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableChannelParameters___delslice__(VectorScopedCloneableChannelParameters self, difference_type i, \n"
		"    difference_type j)\n"
		""},
	 { (char *)"VectorScopedCloneableChannelParameters___delitem__", _wrap_VectorScopedCloneableChannelParameters___delitem__, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters___delitem__(VectorScopedCloneableChannelParameters self, difference_type i)"},
	 { (char *)"VectorScopedCloneableChannelParameters___getitem__", _wrap_VectorScopedCloneableChannelParameters___getitem__, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters___getitem__(VectorScopedCloneableChannelParameters self, difference_type i) -> value_type"},
	 { (char *)"VectorScopedCloneableChannelParameters___setitem__", _wrap_VectorScopedCloneableChannelParameters___setitem__, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableChannelParameters___setitem__(VectorScopedCloneableChannelParameters self, difference_type i, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableChannelParameters_append", _wrap_VectorScopedCloneableChannelParameters_append, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_append(VectorScopedCloneableChannelParameters self, value_type x)"},
	 { (char *)"VectorScopedCloneableChannelParameters_empty", _wrap_VectorScopedCloneableChannelParameters_empty, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_empty(VectorScopedCloneableChannelParameters self) -> bool"},
	 { (char *)"VectorScopedCloneableChannelParameters_size", _wrap_VectorScopedCloneableChannelParameters_size, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_size(VectorScopedCloneableChannelParameters self) -> size_type"},
	 { (char *)"VectorScopedCloneableChannelParameters_clear", _wrap_VectorScopedCloneableChannelParameters_clear, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_clear(VectorScopedCloneableChannelParameters self)"},
	 { (char *)"VectorScopedCloneableChannelParameters_swap", _wrap_VectorScopedCloneableChannelParameters_swap, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_swap(VectorScopedCloneableChannelParameters self, VectorScopedCloneableChannelParameters v)"},
	 { (char *)"VectorScopedCloneableChannelParameters_get_allocator", _wrap_VectorScopedCloneableChannelParameters_get_allocator, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_get_allocator(VectorScopedCloneableChannelParameters self) -> allocator_type"},
	 { (char *)"VectorScopedCloneableChannelParameters_begin", _wrap_VectorScopedCloneableChannelParameters_begin, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_begin(VectorScopedCloneableChannelParameters self) -> const_iterator"},
	 { (char *)"VectorScopedCloneableChannelParameters_end", _wrap_VectorScopedCloneableChannelParameters_end, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_end(VectorScopedCloneableChannelParameters self) -> const_iterator"},
	 { (char *)"VectorScopedCloneableChannelParameters_rbegin", _wrap_VectorScopedCloneableChannelParameters_rbegin, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_rbegin(VectorScopedCloneableChannelParameters self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCloneableChannelParameters_rend", _wrap_VectorScopedCloneableChannelParameters_rend, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_rend(VectorScopedCloneableChannelParameters self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCloneableChannelParameters_pop_back", _wrap_VectorScopedCloneableChannelParameters_pop_back, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_pop_back(VectorScopedCloneableChannelParameters self)"},
	 { (char *)"VectorScopedCloneableChannelParameters_erase", _wrap_VectorScopedCloneableChannelParameters_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorScopedCloneableChannelParameters_erase(VectorScopedCloneableChannelParameters self, iterator first, \n"
		"    iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorScopedCloneableChannelParameters", _wrap_new_VectorScopedCloneableChannelParameters, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableChannelParameters()\n"
		"VectorScopedCloneableChannelParameters(VectorScopedCloneableChannelParameters ?)\n"
		"VectorScopedCloneableChannelParameters(size_type size)\n"
		"new_VectorScopedCloneableChannelParameters(size_type size, value_type value) -> VectorScopedCloneableChannelParameters\n"
		""},
	 { (char *)"VectorScopedCloneableChannelParameters_push_back", _wrap_VectorScopedCloneableChannelParameters_push_back, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_push_back(VectorScopedCloneableChannelParameters self, value_type x)"},
	 { (char *)"VectorScopedCloneableChannelParameters_front", _wrap_VectorScopedCloneableChannelParameters_front, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_front(VectorScopedCloneableChannelParameters self) -> value_type"},
	 { (char *)"VectorScopedCloneableChannelParameters_back", _wrap_VectorScopedCloneableChannelParameters_back, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_back(VectorScopedCloneableChannelParameters self) -> value_type"},
	 { (char *)"VectorScopedCloneableChannelParameters_assign", _wrap_VectorScopedCloneableChannelParameters_assign, METH_VARARGS, (char *)"\n"
		"VectorScopedCloneableChannelParameters_assign(VectorScopedCloneableChannelParameters self, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableChannelParameters_resize", _wrap_VectorScopedCloneableChannelParameters_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorScopedCloneableChannelParameters_resize(VectorScopedCloneableChannelParameters self, size_type new_size, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableChannelParameters_insert", _wrap_VectorScopedCloneableChannelParameters_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorScopedCloneableChannelParameters_insert(VectorScopedCloneableChannelParameters self, iterator pos, \n"
		"    size_type n, value_type x)\n"
		""},
	 { (char *)"VectorScopedCloneableChannelParameters_reserve", _wrap_VectorScopedCloneableChannelParameters_reserve, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_reserve(VectorScopedCloneableChannelParameters self, size_type n)"},
	 { (char *)"VectorScopedCloneableChannelParameters_capacity", _wrap_VectorScopedCloneableChannelParameters_capacity, METH_VARARGS, (char *)"VectorScopedCloneableChannelParameters_capacity(VectorScopedCloneableChannelParameters self) -> size_type"},
	 { (char *)"delete_VectorScopedCloneableChannelParameters", _wrap_delete_VectorScopedCloneableChannelParameters, METH_VARARGS, (char *)"delete_VectorScopedCloneableChannelParameters(VectorScopedCloneableChannelParameters self)"},
	 { (char *)"VectorScopedCloneableChannelParameters_swigregister", VectorScopedCloneableChannelParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorInt_iterator", _wrap_VectorInt_iterator, METH_VARARGS, (char *)"VectorInt_iterator(VectorInt self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorInt___nonzero__", _wrap_VectorInt___nonzero__, METH_VARARGS, (char *)"VectorInt___nonzero__(VectorInt self) -> bool"},
	 { (char *)"VectorInt___len__", _wrap_VectorInt___len__, METH_VARARGS, (char *)"VectorInt___len__(VectorInt self) -> size_type"},
	 { (char *)"VectorInt_pop", _wrap_VectorInt_pop, METH_VARARGS, (char *)"VectorInt_pop(VectorInt self) -> value_type"},
	 { (char *)"VectorInt___getslice__", _wrap_VectorInt___getslice__, METH_VARARGS, (char *)"VectorInt___getslice__(VectorInt self, difference_type i, difference_type j) -> VectorInt"},
	 { (char *)"VectorInt___setslice__", _wrap_VectorInt___setslice__, METH_VARARGS, (char *)"\n"
		"VectorInt___setslice__(VectorInt self, difference_type i, difference_type j, \n"
		"    VectorInt v)\n"
		""},
	 { (char *)"VectorInt___delslice__", _wrap_VectorInt___delslice__, METH_VARARGS, (char *)"VectorInt___delslice__(VectorInt self, difference_type i, difference_type j)"},
	 { (char *)"VectorInt___delitem__", _wrap_VectorInt___delitem__, METH_VARARGS, (char *)"VectorInt___delitem__(VectorInt self, difference_type i)"},
	 { (char *)"VectorInt___getitem__", _wrap_VectorInt___getitem__, METH_VARARGS, (char *)"VectorInt___getitem__(VectorInt self, difference_type i) -> value_type"},
	 { (char *)"VectorInt___setitem__", _wrap_VectorInt___setitem__, METH_VARARGS, (char *)"VectorInt___setitem__(VectorInt self, difference_type i, value_type x)"},
	 { (char *)"VectorInt_append", _wrap_VectorInt_append, METH_VARARGS, (char *)"VectorInt_append(VectorInt self, value_type x)"},
	 { (char *)"VectorInt_empty", _wrap_VectorInt_empty, METH_VARARGS, (char *)"VectorInt_empty(VectorInt self) -> bool"},
	 { (char *)"VectorInt_size", _wrap_VectorInt_size, METH_VARARGS, (char *)"VectorInt_size(VectorInt self) -> size_type"},
	 { (char *)"VectorInt_clear", _wrap_VectorInt_clear, METH_VARARGS, (char *)"VectorInt_clear(VectorInt self)"},
	 { (char *)"VectorInt_swap", _wrap_VectorInt_swap, METH_VARARGS, (char *)"VectorInt_swap(VectorInt self, VectorInt v)"},
	 { (char *)"VectorInt_get_allocator", _wrap_VectorInt_get_allocator, METH_VARARGS, (char *)"VectorInt_get_allocator(VectorInt self) -> allocator_type"},
	 { (char *)"VectorInt_begin", _wrap_VectorInt_begin, METH_VARARGS, (char *)"VectorInt_begin(VectorInt self) -> const_iterator"},
	 { (char *)"VectorInt_end", _wrap_VectorInt_end, METH_VARARGS, (char *)"VectorInt_end(VectorInt self) -> const_iterator"},
	 { (char *)"VectorInt_rbegin", _wrap_VectorInt_rbegin, METH_VARARGS, (char *)"VectorInt_rbegin(VectorInt self) -> const_reverse_iterator"},
	 { (char *)"VectorInt_rend", _wrap_VectorInt_rend, METH_VARARGS, (char *)"VectorInt_rend(VectorInt self) -> const_reverse_iterator"},
	 { (char *)"VectorInt_pop_back", _wrap_VectorInt_pop_back, METH_VARARGS, (char *)"VectorInt_pop_back(VectorInt self)"},
	 { (char *)"VectorInt_erase", _wrap_VectorInt_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorInt_erase(VectorInt self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorInt", _wrap_new_VectorInt, METH_VARARGS, (char *)"\n"
		"VectorInt()\n"
		"VectorInt(VectorInt ?)\n"
		"VectorInt(size_type size)\n"
		"new_VectorInt(size_type size, value_type value) -> VectorInt\n"
		""},
	 { (char *)"VectorInt_push_back", _wrap_VectorInt_push_back, METH_VARARGS, (char *)"VectorInt_push_back(VectorInt self, value_type x)"},
	 { (char *)"VectorInt_front", _wrap_VectorInt_front, METH_VARARGS, (char *)"VectorInt_front(VectorInt self) -> value_type"},
	 { (char *)"VectorInt_back", _wrap_VectorInt_back, METH_VARARGS, (char *)"VectorInt_back(VectorInt self) -> value_type"},
	 { (char *)"VectorInt_assign", _wrap_VectorInt_assign, METH_VARARGS, (char *)"VectorInt_assign(VectorInt self, size_type n, value_type x)"},
	 { (char *)"VectorInt_resize", _wrap_VectorInt_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorInt_resize(VectorInt self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"VectorInt_insert", _wrap_VectorInt_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorInt_insert(VectorInt self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"VectorInt_reserve", _wrap_VectorInt_reserve, METH_VARARGS, (char *)"VectorInt_reserve(VectorInt self, size_type n)"},
	 { (char *)"VectorInt_capacity", _wrap_VectorInt_capacity, METH_VARARGS, (char *)"VectorInt_capacity(VectorInt self) -> size_type"},
	 { (char *)"delete_VectorInt", _wrap_delete_VectorInt, METH_VARARGS, (char *)"delete_VectorInt(VectorInt self)"},
	 { (char *)"VectorInt_swigregister", VectorInt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableRcvChannelProcessed", _wrap_new_ScopedCopyableRcvChannelProcessed, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRcvChannelProcessed(RcvChannelProcessed ptr=None)\n"
		"ScopedCopyableRcvChannelProcessed()\n"
		"new_ScopedCopyableRcvChannelProcessed(ScopedCopyableRcvChannelProcessed rhs) -> ScopedCopyableRcvChannelProcessed\n"
		""},
	 { (char *)"ScopedCopyableRcvChannelProcessed_get", _wrap_ScopedCopyableRcvChannelProcessed_get, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed_get(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"},
	 { (char *)"ScopedCopyableRcvChannelProcessed___ref__", _wrap_ScopedCopyableRcvChannelProcessed___ref__, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed___ref__(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"},
	 { (char *)"ScopedCopyableRcvChannelProcessed___deref__", _wrap_ScopedCopyableRcvChannelProcessed___deref__, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed___deref__(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"},
	 { (char *)"ScopedCopyableRcvChannelProcessed_reset", _wrap_ScopedCopyableRcvChannelProcessed_reset, METH_VARARGS, (char *)"\n"
		"reset(RcvChannelProcessed ptr=None)\n"
		"ScopedCopyableRcvChannelProcessed_reset(ScopedCopyableRcvChannelProcessed self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRcvChannelProcessed", _wrap_delete_ScopedCopyableRcvChannelProcessed, METH_VARARGS, (char *)"delete_ScopedCopyableRcvChannelProcessed(ScopedCopyableRcvChannelProcessed self)"},
	 { (char *)"ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set", _wrap_ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set(ScopedCopyableRcvChannelProcessed self, unsigned int numChannelsProcessed)"},
	 { (char *)"ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get", _wrap_ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get(ScopedCopyableRcvChannelProcessed self) -> unsigned int"},
	 { (char *)"ScopedCopyableRcvChannelProcessed_prfScaleFactor_set", _wrap_ScopedCopyableRcvChannelProcessed_prfScaleFactor_set, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed_prfScaleFactor_set(ScopedCopyableRcvChannelProcessed self, double prfScaleFactor)"},
	 { (char *)"ScopedCopyableRcvChannelProcessed_prfScaleFactor_get", _wrap_ScopedCopyableRcvChannelProcessed_prfScaleFactor_get, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed_prfScaleFactor_get(ScopedCopyableRcvChannelProcessed self) -> double"},
	 { (char *)"ScopedCopyableRcvChannelProcessed_channelIndex_set", _wrap_ScopedCopyableRcvChannelProcessed_channelIndex_set, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed_channelIndex_set(ScopedCopyableRcvChannelProcessed self, VectorInt channelIndex)"},
	 { (char *)"ScopedCopyableRcvChannelProcessed_channelIndex_get", _wrap_ScopedCopyableRcvChannelProcessed_channelIndex_get, METH_VARARGS, (char *)"ScopedCopyableRcvChannelProcessed_channelIndex_get(ScopedCopyableRcvChannelProcessed self) -> VectorInt"},
	 { (char *)"ScopedCopyableRcvChannelProcessed_swigregister", ScopedCopyableRcvChannelProcessed_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorProcessing_iterator", _wrap_VectorProcessing_iterator, METH_VARARGS, (char *)"VectorProcessing_iterator(VectorProcessing self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorProcessing___nonzero__", _wrap_VectorProcessing___nonzero__, METH_VARARGS, (char *)"VectorProcessing___nonzero__(VectorProcessing self) -> bool"},
	 { (char *)"VectorProcessing___len__", _wrap_VectorProcessing___len__, METH_VARARGS, (char *)"VectorProcessing___len__(VectorProcessing self) -> size_type"},
	 { (char *)"VectorProcessing_pop", _wrap_VectorProcessing_pop, METH_VARARGS, (char *)"VectorProcessing_pop(VectorProcessing self) -> value_type"},
	 { (char *)"VectorProcessing___getslice__", _wrap_VectorProcessing___getslice__, METH_VARARGS, (char *)"VectorProcessing___getslice__(VectorProcessing self, difference_type i, difference_type j) -> VectorProcessing"},
	 { (char *)"VectorProcessing___setslice__", _wrap_VectorProcessing___setslice__, METH_VARARGS, (char *)"\n"
		"VectorProcessing___setslice__(VectorProcessing self, difference_type i, difference_type j, \n"
		"    VectorProcessing v)\n"
		""},
	 { (char *)"VectorProcessing___delslice__", _wrap_VectorProcessing___delslice__, METH_VARARGS, (char *)"VectorProcessing___delslice__(VectorProcessing self, difference_type i, difference_type j)"},
	 { (char *)"VectorProcessing___delitem__", _wrap_VectorProcessing___delitem__, METH_VARARGS, (char *)"VectorProcessing___delitem__(VectorProcessing self, difference_type i)"},
	 { (char *)"VectorProcessing___getitem__", _wrap_VectorProcessing___getitem__, METH_VARARGS, (char *)"VectorProcessing___getitem__(VectorProcessing self, difference_type i) -> value_type"},
	 { (char *)"VectorProcessing___setitem__", _wrap_VectorProcessing___setitem__, METH_VARARGS, (char *)"VectorProcessing___setitem__(VectorProcessing self, difference_type i, value_type x)"},
	 { (char *)"VectorProcessing_append", _wrap_VectorProcessing_append, METH_VARARGS, (char *)"VectorProcessing_append(VectorProcessing self, value_type x)"},
	 { (char *)"VectorProcessing_empty", _wrap_VectorProcessing_empty, METH_VARARGS, (char *)"VectorProcessing_empty(VectorProcessing self) -> bool"},
	 { (char *)"VectorProcessing_size", _wrap_VectorProcessing_size, METH_VARARGS, (char *)"VectorProcessing_size(VectorProcessing self) -> size_type"},
	 { (char *)"VectorProcessing_clear", _wrap_VectorProcessing_clear, METH_VARARGS, (char *)"VectorProcessing_clear(VectorProcessing self)"},
	 { (char *)"VectorProcessing_swap", _wrap_VectorProcessing_swap, METH_VARARGS, (char *)"VectorProcessing_swap(VectorProcessing self, VectorProcessing v)"},
	 { (char *)"VectorProcessing_get_allocator", _wrap_VectorProcessing_get_allocator, METH_VARARGS, (char *)"VectorProcessing_get_allocator(VectorProcessing self) -> allocator_type"},
	 { (char *)"VectorProcessing_begin", _wrap_VectorProcessing_begin, METH_VARARGS, (char *)"VectorProcessing_begin(VectorProcessing self) -> const_iterator"},
	 { (char *)"VectorProcessing_end", _wrap_VectorProcessing_end, METH_VARARGS, (char *)"VectorProcessing_end(VectorProcessing self) -> const_iterator"},
	 { (char *)"VectorProcessing_rbegin", _wrap_VectorProcessing_rbegin, METH_VARARGS, (char *)"VectorProcessing_rbegin(VectorProcessing self) -> const_reverse_iterator"},
	 { (char *)"VectorProcessing_rend", _wrap_VectorProcessing_rend, METH_VARARGS, (char *)"VectorProcessing_rend(VectorProcessing self) -> const_reverse_iterator"},
	 { (char *)"VectorProcessing_pop_back", _wrap_VectorProcessing_pop_back, METH_VARARGS, (char *)"VectorProcessing_pop_back(VectorProcessing self)"},
	 { (char *)"VectorProcessing_erase", _wrap_VectorProcessing_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorProcessing_erase(VectorProcessing self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorProcessing", _wrap_new_VectorProcessing, METH_VARARGS, (char *)"\n"
		"VectorProcessing()\n"
		"VectorProcessing(VectorProcessing ?)\n"
		"VectorProcessing(size_type size)\n"
		"new_VectorProcessing(size_type size, value_type value) -> VectorProcessing\n"
		""},
	 { (char *)"VectorProcessing_push_back", _wrap_VectorProcessing_push_back, METH_VARARGS, (char *)"VectorProcessing_push_back(VectorProcessing self, value_type x)"},
	 { (char *)"VectorProcessing_front", _wrap_VectorProcessing_front, METH_VARARGS, (char *)"VectorProcessing_front(VectorProcessing self) -> value_type"},
	 { (char *)"VectorProcessing_back", _wrap_VectorProcessing_back, METH_VARARGS, (char *)"VectorProcessing_back(VectorProcessing self) -> value_type"},
	 { (char *)"VectorProcessing_assign", _wrap_VectorProcessing_assign, METH_VARARGS, (char *)"VectorProcessing_assign(VectorProcessing self, size_type n, value_type x)"},
	 { (char *)"VectorProcessing_resize", _wrap_VectorProcessing_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorProcessing_resize(VectorProcessing self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"VectorProcessing_insert", _wrap_VectorProcessing_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorProcessing_insert(VectorProcessing self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"VectorProcessing_reserve", _wrap_VectorProcessing_reserve, METH_VARARGS, (char *)"VectorProcessing_reserve(VectorProcessing self, size_type n)"},
	 { (char *)"VectorProcessing_capacity", _wrap_VectorProcessing_capacity, METH_VARARGS, (char *)"VectorProcessing_capacity(VectorProcessing self) -> size_type"},
	 { (char *)"delete_VectorProcessing", _wrap_delete_VectorProcessing, METH_VARARGS, (char *)"delete_VectorProcessing(VectorProcessing self)"},
	 { (char *)"VectorProcessing_swigregister", VectorProcessing_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyablePolarizationCalibration", _wrap_new_ScopedCopyablePolarizationCalibration, METH_VARARGS, (char *)"\n"
		"ScopedCopyablePolarizationCalibration(PolarizationCalibration ptr=None)\n"
		"ScopedCopyablePolarizationCalibration()\n"
		"new_ScopedCopyablePolarizationCalibration(ScopedCopyablePolarizationCalibration rhs) -> ScopedCopyablePolarizationCalibration\n"
		""},
	 { (char *)"ScopedCopyablePolarizationCalibration_get", _wrap_ScopedCopyablePolarizationCalibration_get, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration_get(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"},
	 { (char *)"ScopedCopyablePolarizationCalibration___ref__", _wrap_ScopedCopyablePolarizationCalibration___ref__, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration___ref__(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"},
	 { (char *)"ScopedCopyablePolarizationCalibration___deref__", _wrap_ScopedCopyablePolarizationCalibration___deref__, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration___deref__(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"},
	 { (char *)"ScopedCopyablePolarizationCalibration_reset", _wrap_ScopedCopyablePolarizationCalibration_reset, METH_VARARGS, (char *)"\n"
		"reset(PolarizationCalibration ptr=None)\n"
		"ScopedCopyablePolarizationCalibration_reset(ScopedCopyablePolarizationCalibration self)\n"
		""},
	 { (char *)"delete_ScopedCopyablePolarizationCalibration", _wrap_delete_ScopedCopyablePolarizationCalibration, METH_VARARGS, (char *)"delete_ScopedCopyablePolarizationCalibration(ScopedCopyablePolarizationCalibration self)"},
	 { (char *)"ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set", _wrap_ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set(ScopedCopyablePolarizationCalibration self, BooleanType hvAngleCompensationApplied)"},
	 { (char *)"ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get", _wrap_ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get(ScopedCopyablePolarizationCalibration self) -> BooleanType"},
	 { (char *)"ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set", _wrap_ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set(ScopedCopyablePolarizationCalibration self, BooleanType distortionCorrectionApplied)"},
	 { (char *)"ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get", _wrap_ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get(ScopedCopyablePolarizationCalibration self) -> BooleanType"},
	 { (char *)"ScopedCopyablePolarizationCalibration_distortion_set", _wrap_ScopedCopyablePolarizationCalibration_distortion_set, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration_distortion_set(ScopedCopyablePolarizationCalibration self, mem::ScopedCopyablePtr<(six::sicd::Distortion)> distortion)"},
	 { (char *)"ScopedCopyablePolarizationCalibration_distortion_get", _wrap_ScopedCopyablePolarizationCalibration_distortion_get, METH_VARARGS, (char *)"ScopedCopyablePolarizationCalibration_distortion_get(ScopedCopyablePolarizationCalibration self) -> mem::ScopedCopyablePtr<(six::sicd::Distortion)>"},
	 { (char *)"ScopedCopyablePolarizationCalibration_swigregister", ScopedCopyablePolarizationCalibration_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyablePosVelError", _wrap_new_ScopedCopyablePosVelError, METH_VARARGS, (char *)"\n"
		"ScopedCopyablePosVelError(PosVelError ptr=None)\n"
		"ScopedCopyablePosVelError()\n"
		"new_ScopedCopyablePosVelError(ScopedCopyablePosVelError rhs) -> ScopedCopyablePosVelError\n"
		""},
	 { (char *)"ScopedCopyablePosVelError_get", _wrap_ScopedCopyablePosVelError_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_get(ScopedCopyablePosVelError self) -> PosVelError"},
	 { (char *)"ScopedCopyablePosVelError___ref__", _wrap_ScopedCopyablePosVelError___ref__, METH_VARARGS, (char *)"ScopedCopyablePosVelError___ref__(ScopedCopyablePosVelError self) -> PosVelError"},
	 { (char *)"ScopedCopyablePosVelError___deref__", _wrap_ScopedCopyablePosVelError___deref__, METH_VARARGS, (char *)"ScopedCopyablePosVelError___deref__(ScopedCopyablePosVelError self) -> PosVelError"},
	 { (char *)"ScopedCopyablePosVelError_reset", _wrap_ScopedCopyablePosVelError_reset, METH_VARARGS, (char *)"\n"
		"reset(PosVelError ptr=None)\n"
		"ScopedCopyablePosVelError_reset(ScopedCopyablePosVelError self)\n"
		""},
	 { (char *)"delete_ScopedCopyablePosVelError", _wrap_delete_ScopedCopyablePosVelError, METH_VARARGS, (char *)"delete_ScopedCopyablePosVelError(ScopedCopyablePosVelError self)"},
	 { (char *)"ScopedCopyablePosVelError_frame_set", _wrap_ScopedCopyablePosVelError_frame_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_frame_set(ScopedCopyablePosVelError self, FrameType frame)"},
	 { (char *)"ScopedCopyablePosVelError_frame_get", _wrap_ScopedCopyablePosVelError_frame_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_frame_get(ScopedCopyablePosVelError self) -> FrameType"},
	 { (char *)"ScopedCopyablePosVelError_p1_set", _wrap_ScopedCopyablePosVelError_p1_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p1_set(ScopedCopyablePosVelError self, double p1)"},
	 { (char *)"ScopedCopyablePosVelError_p1_get", _wrap_ScopedCopyablePosVelError_p1_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p1_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_p2_set", _wrap_ScopedCopyablePosVelError_p2_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p2_set(ScopedCopyablePosVelError self, double p2)"},
	 { (char *)"ScopedCopyablePosVelError_p2_get", _wrap_ScopedCopyablePosVelError_p2_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p2_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_p3_set", _wrap_ScopedCopyablePosVelError_p3_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p3_set(ScopedCopyablePosVelError self, double p3)"},
	 { (char *)"ScopedCopyablePosVelError_p3_get", _wrap_ScopedCopyablePosVelError_p3_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_p3_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_v1_set", _wrap_ScopedCopyablePosVelError_v1_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v1_set(ScopedCopyablePosVelError self, double v1)"},
	 { (char *)"ScopedCopyablePosVelError_v1_get", _wrap_ScopedCopyablePosVelError_v1_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v1_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_v2_set", _wrap_ScopedCopyablePosVelError_v2_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v2_set(ScopedCopyablePosVelError self, double v2)"},
	 { (char *)"ScopedCopyablePosVelError_v2_get", _wrap_ScopedCopyablePosVelError_v2_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v2_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_v3_set", _wrap_ScopedCopyablePosVelError_v3_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v3_set(ScopedCopyablePosVelError self, double v3)"},
	 { (char *)"ScopedCopyablePosVelError_v3_get", _wrap_ScopedCopyablePosVelError_v3_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_v3_get(ScopedCopyablePosVelError self) -> double"},
	 { (char *)"ScopedCopyablePosVelError_corrCoefs_set", _wrap_ScopedCopyablePosVelError_corrCoefs_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_corrCoefs_set(ScopedCopyablePosVelError self, mem::ScopedCopyablePtr<(six::CorrCoefs)> corrCoefs)"},
	 { (char *)"ScopedCopyablePosVelError_corrCoefs_get", _wrap_ScopedCopyablePosVelError_corrCoefs_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_corrCoefs_get(ScopedCopyablePosVelError self) -> mem::ScopedCopyablePtr<(six::CorrCoefs)>"},
	 { (char *)"ScopedCopyablePosVelError_positionDecorr_set", _wrap_ScopedCopyablePosVelError_positionDecorr_set, METH_VARARGS, (char *)"ScopedCopyablePosVelError_positionDecorr_set(ScopedCopyablePosVelError self, DecorrType positionDecorr)"},
	 { (char *)"ScopedCopyablePosVelError_positionDecorr_get", _wrap_ScopedCopyablePosVelError_positionDecorr_get, METH_VARARGS, (char *)"ScopedCopyablePosVelError_positionDecorr_get(ScopedCopyablePosVelError self) -> DecorrType"},
	 { (char *)"ScopedCopyablePosVelError_swigregister", ScopedCopyablePosVelError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableRadarSensor", _wrap_new_ScopedCopyableRadarSensor, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRadarSensor(RadarSensor ptr=None)\n"
		"ScopedCopyableRadarSensor()\n"
		"new_ScopedCopyableRadarSensor(ScopedCopyableRadarSensor rhs) -> ScopedCopyableRadarSensor\n"
		""},
	 { (char *)"ScopedCopyableRadarSensor_get", _wrap_ScopedCopyableRadarSensor_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_get(ScopedCopyableRadarSensor self) -> RadarSensor"},
	 { (char *)"ScopedCopyableRadarSensor___ref__", _wrap_ScopedCopyableRadarSensor___ref__, METH_VARARGS, (char *)"ScopedCopyableRadarSensor___ref__(ScopedCopyableRadarSensor self) -> RadarSensor"},
	 { (char *)"ScopedCopyableRadarSensor___deref__", _wrap_ScopedCopyableRadarSensor___deref__, METH_VARARGS, (char *)"ScopedCopyableRadarSensor___deref__(ScopedCopyableRadarSensor self) -> RadarSensor"},
	 { (char *)"ScopedCopyableRadarSensor_reset", _wrap_ScopedCopyableRadarSensor_reset, METH_VARARGS, (char *)"\n"
		"reset(RadarSensor ptr=None)\n"
		"ScopedCopyableRadarSensor_reset(ScopedCopyableRadarSensor self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRadarSensor", _wrap_delete_ScopedCopyableRadarSensor, METH_VARARGS, (char *)"delete_ScopedCopyableRadarSensor(ScopedCopyableRadarSensor self)"},
	 { (char *)"ScopedCopyableRadarSensor_rangeBias_set", _wrap_ScopedCopyableRadarSensor_rangeBias_set, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_rangeBias_set(ScopedCopyableRadarSensor self, double rangeBias)"},
	 { (char *)"ScopedCopyableRadarSensor_rangeBias_get", _wrap_ScopedCopyableRadarSensor_rangeBias_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_rangeBias_get(ScopedCopyableRadarSensor self) -> double"},
	 { (char *)"ScopedCopyableRadarSensor_clockFreqSF_set", _wrap_ScopedCopyableRadarSensor_clockFreqSF_set, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_clockFreqSF_set(ScopedCopyableRadarSensor self, double clockFreqSF)"},
	 { (char *)"ScopedCopyableRadarSensor_clockFreqSF_get", _wrap_ScopedCopyableRadarSensor_clockFreqSF_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_clockFreqSF_get(ScopedCopyableRadarSensor self) -> double"},
	 { (char *)"ScopedCopyableRadarSensor_transmitFreqSF_set", _wrap_ScopedCopyableRadarSensor_transmitFreqSF_set, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_transmitFreqSF_set(ScopedCopyableRadarSensor self, double transmitFreqSF)"},
	 { (char *)"ScopedCopyableRadarSensor_transmitFreqSF_get", _wrap_ScopedCopyableRadarSensor_transmitFreqSF_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_transmitFreqSF_get(ScopedCopyableRadarSensor self) -> double"},
	 { (char *)"ScopedCopyableRadarSensor_rangeBiasDecorr_set", _wrap_ScopedCopyableRadarSensor_rangeBiasDecorr_set, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_rangeBiasDecorr_set(ScopedCopyableRadarSensor self, DecorrType rangeBiasDecorr)"},
	 { (char *)"ScopedCopyableRadarSensor_rangeBiasDecorr_get", _wrap_ScopedCopyableRadarSensor_rangeBiasDecorr_get, METH_VARARGS, (char *)"ScopedCopyableRadarSensor_rangeBiasDecorr_get(ScopedCopyableRadarSensor self) -> DecorrType"},
	 { (char *)"ScopedCopyableRadarSensor_swigregister", ScopedCopyableRadarSensor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableTropoError", _wrap_new_ScopedCopyableTropoError, METH_VARARGS, (char *)"\n"
		"ScopedCopyableTropoError(TropoError ptr=None)\n"
		"ScopedCopyableTropoError()\n"
		"new_ScopedCopyableTropoError(ScopedCopyableTropoError rhs) -> ScopedCopyableTropoError\n"
		""},
	 { (char *)"ScopedCopyableTropoError_get", _wrap_ScopedCopyableTropoError_get, METH_VARARGS, (char *)"ScopedCopyableTropoError_get(ScopedCopyableTropoError self) -> TropoError"},
	 { (char *)"ScopedCopyableTropoError___ref__", _wrap_ScopedCopyableTropoError___ref__, METH_VARARGS, (char *)"ScopedCopyableTropoError___ref__(ScopedCopyableTropoError self) -> TropoError"},
	 { (char *)"ScopedCopyableTropoError___deref__", _wrap_ScopedCopyableTropoError___deref__, METH_VARARGS, (char *)"ScopedCopyableTropoError___deref__(ScopedCopyableTropoError self) -> TropoError"},
	 { (char *)"ScopedCopyableTropoError_reset", _wrap_ScopedCopyableTropoError_reset, METH_VARARGS, (char *)"\n"
		"reset(TropoError ptr=None)\n"
		"ScopedCopyableTropoError_reset(ScopedCopyableTropoError self)\n"
		""},
	 { (char *)"delete_ScopedCopyableTropoError", _wrap_delete_ScopedCopyableTropoError, METH_VARARGS, (char *)"delete_ScopedCopyableTropoError(ScopedCopyableTropoError self)"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeVertical_set", _wrap_ScopedCopyableTropoError_tropoRangeVertical_set, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeVertical_set(ScopedCopyableTropoError self, double tropoRangeVertical)"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeVertical_get", _wrap_ScopedCopyableTropoError_tropoRangeVertical_get, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeVertical_get(ScopedCopyableTropoError self) -> double"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeSlant_set", _wrap_ScopedCopyableTropoError_tropoRangeSlant_set, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeSlant_set(ScopedCopyableTropoError self, double tropoRangeSlant)"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeSlant_get", _wrap_ScopedCopyableTropoError_tropoRangeSlant_get, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeSlant_get(ScopedCopyableTropoError self) -> double"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeDecorr_set", _wrap_ScopedCopyableTropoError_tropoRangeDecorr_set, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeDecorr_set(ScopedCopyableTropoError self, DecorrType tropoRangeDecorr)"},
	 { (char *)"ScopedCopyableTropoError_tropoRangeDecorr_get", _wrap_ScopedCopyableTropoError_tropoRangeDecorr_get, METH_VARARGS, (char *)"ScopedCopyableTropoError_tropoRangeDecorr_get(ScopedCopyableTropoError self) -> DecorrType"},
	 { (char *)"ScopedCopyableTropoError_swigregister", ScopedCopyableTropoError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableIonoError", _wrap_new_ScopedCopyableIonoError, METH_VARARGS, (char *)"\n"
		"ScopedCopyableIonoError(IonoError ptr=None)\n"
		"ScopedCopyableIonoError()\n"
		"new_ScopedCopyableIonoError(ScopedCopyableIonoError rhs) -> ScopedCopyableIonoError\n"
		""},
	 { (char *)"ScopedCopyableIonoError_get", _wrap_ScopedCopyableIonoError_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_get(ScopedCopyableIonoError self) -> IonoError"},
	 { (char *)"ScopedCopyableIonoError___ref__", _wrap_ScopedCopyableIonoError___ref__, METH_VARARGS, (char *)"ScopedCopyableIonoError___ref__(ScopedCopyableIonoError self) -> IonoError"},
	 { (char *)"ScopedCopyableIonoError___deref__", _wrap_ScopedCopyableIonoError___deref__, METH_VARARGS, (char *)"ScopedCopyableIonoError___deref__(ScopedCopyableIonoError self) -> IonoError"},
	 { (char *)"ScopedCopyableIonoError_reset", _wrap_ScopedCopyableIonoError_reset, METH_VARARGS, (char *)"\n"
		"reset(IonoError ptr=None)\n"
		"ScopedCopyableIonoError_reset(ScopedCopyableIonoError self)\n"
		""},
	 { (char *)"delete_ScopedCopyableIonoError", _wrap_delete_ScopedCopyableIonoError, METH_VARARGS, (char *)"delete_ScopedCopyableIonoError(ScopedCopyableIonoError self)"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeVertical_set", _wrap_ScopedCopyableIonoError_ionoRangeVertical_set, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeVertical_set(ScopedCopyableIonoError self, double ionoRangeVertical)"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeVertical_get", _wrap_ScopedCopyableIonoError_ionoRangeVertical_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeVertical_get(ScopedCopyableIonoError self) -> double"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeRateVertical_set", _wrap_ScopedCopyableIonoError_ionoRangeRateVertical_set, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeRateVertical_set(ScopedCopyableIonoError self, double ionoRangeRateVertical)"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeRateVertical_get", _wrap_ScopedCopyableIonoError_ionoRangeRateVertical_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeRateVertical_get(ScopedCopyableIonoError self) -> double"},
	 { (char *)"ScopedCopyableIonoError_ionoRgRgRateCC_set", _wrap_ScopedCopyableIonoError_ionoRgRgRateCC_set, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRgRgRateCC_set(ScopedCopyableIonoError self, double ionoRgRgRateCC)"},
	 { (char *)"ScopedCopyableIonoError_ionoRgRgRateCC_get", _wrap_ScopedCopyableIonoError_ionoRgRgRateCC_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRgRgRateCC_get(ScopedCopyableIonoError self) -> double"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeVertDecorr_set", _wrap_ScopedCopyableIonoError_ionoRangeVertDecorr_set, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeVertDecorr_set(ScopedCopyableIonoError self, DecorrType ionoRangeVertDecorr)"},
	 { (char *)"ScopedCopyableIonoError_ionoRangeVertDecorr_get", _wrap_ScopedCopyableIonoError_ionoRangeVertDecorr_get, METH_VARARGS, (char *)"ScopedCopyableIonoError_ionoRangeVertDecorr_get(ScopedCopyableIonoError self) -> DecorrType"},
	 { (char *)"ScopedCopyableIonoError_swigregister", ScopedCopyableIonoError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableCompositeSCP", _wrap_new_ScopedCopyableCompositeSCP, METH_VARARGS, (char *)"\n"
		"ScopedCopyableCompositeSCP(CompositeSCP ptr=None)\n"
		"ScopedCopyableCompositeSCP()\n"
		"new_ScopedCopyableCompositeSCP(ScopedCopyableCompositeSCP rhs) -> ScopedCopyableCompositeSCP\n"
		""},
	 { (char *)"ScopedCopyableCompositeSCP_get", _wrap_ScopedCopyableCompositeSCP_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_get(ScopedCopyableCompositeSCP self) -> CompositeSCP"},
	 { (char *)"ScopedCopyableCompositeSCP___ref__", _wrap_ScopedCopyableCompositeSCP___ref__, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP___ref__(ScopedCopyableCompositeSCP self) -> CompositeSCP"},
	 { (char *)"ScopedCopyableCompositeSCP___deref__", _wrap_ScopedCopyableCompositeSCP___deref__, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP___deref__(ScopedCopyableCompositeSCP self) -> CompositeSCP"},
	 { (char *)"ScopedCopyableCompositeSCP_reset", _wrap_ScopedCopyableCompositeSCP_reset, METH_VARARGS, (char *)"\n"
		"reset(CompositeSCP ptr=None)\n"
		"ScopedCopyableCompositeSCP_reset(ScopedCopyableCompositeSCP self)\n"
		""},
	 { (char *)"delete_ScopedCopyableCompositeSCP", _wrap_delete_ScopedCopyableCompositeSCP, METH_VARARGS, (char *)"delete_ScopedCopyableCompositeSCP(ScopedCopyableCompositeSCP self)"},
	 { (char *)"ScopedCopyableCompositeSCP_scpType_set", _wrap_ScopedCopyableCompositeSCP_scpType_set, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_scpType_set(ScopedCopyableCompositeSCP self, SCPType scpType)"},
	 { (char *)"ScopedCopyableCompositeSCP_scpType_get", _wrap_ScopedCopyableCompositeSCP_scpType_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_scpType_get(ScopedCopyableCompositeSCP self) -> SCPType"},
	 { (char *)"ScopedCopyableCompositeSCP_xErr_set", _wrap_ScopedCopyableCompositeSCP_xErr_set, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_xErr_set(ScopedCopyableCompositeSCP self, double xErr)"},
	 { (char *)"ScopedCopyableCompositeSCP_xErr_get", _wrap_ScopedCopyableCompositeSCP_xErr_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_xErr_get(ScopedCopyableCompositeSCP self) -> double"},
	 { (char *)"ScopedCopyableCompositeSCP_yErr_set", _wrap_ScopedCopyableCompositeSCP_yErr_set, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_yErr_set(ScopedCopyableCompositeSCP self, double yErr)"},
	 { (char *)"ScopedCopyableCompositeSCP_yErr_get", _wrap_ScopedCopyableCompositeSCP_yErr_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_yErr_get(ScopedCopyableCompositeSCP self) -> double"},
	 { (char *)"ScopedCopyableCompositeSCP_xyErr_set", _wrap_ScopedCopyableCompositeSCP_xyErr_set, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_xyErr_set(ScopedCopyableCompositeSCP self, double xyErr)"},
	 { (char *)"ScopedCopyableCompositeSCP_xyErr_get", _wrap_ScopedCopyableCompositeSCP_xyErr_get, METH_VARARGS, (char *)"ScopedCopyableCompositeSCP_xyErr_get(ScopedCopyableCompositeSCP self) -> double"},
	 { (char *)"ScopedCopyableCompositeSCP_swigregister", ScopedCopyableCompositeSCP_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableComponents", _wrap_new_ScopedCopyableComponents, METH_VARARGS, (char *)"\n"
		"ScopedCopyableComponents(Components ptr=None)\n"
		"ScopedCopyableComponents()\n"
		"new_ScopedCopyableComponents(ScopedCopyableComponents rhs) -> ScopedCopyableComponents\n"
		""},
	 { (char *)"ScopedCopyableComponents_get", _wrap_ScopedCopyableComponents_get, METH_VARARGS, (char *)"ScopedCopyableComponents_get(ScopedCopyableComponents self) -> Components"},
	 { (char *)"ScopedCopyableComponents___ref__", _wrap_ScopedCopyableComponents___ref__, METH_VARARGS, (char *)"ScopedCopyableComponents___ref__(ScopedCopyableComponents self) -> Components"},
	 { (char *)"ScopedCopyableComponents___deref__", _wrap_ScopedCopyableComponents___deref__, METH_VARARGS, (char *)"ScopedCopyableComponents___deref__(ScopedCopyableComponents self) -> Components"},
	 { (char *)"ScopedCopyableComponents_reset", _wrap_ScopedCopyableComponents_reset, METH_VARARGS, (char *)"\n"
		"reset(Components ptr=None)\n"
		"ScopedCopyableComponents_reset(ScopedCopyableComponents self)\n"
		""},
	 { (char *)"delete_ScopedCopyableComponents", _wrap_delete_ScopedCopyableComponents, METH_VARARGS, (char *)"delete_ScopedCopyableComponents(ScopedCopyableComponents self)"},
	 { (char *)"ScopedCopyableComponents_posVelError_set", _wrap_ScopedCopyableComponents_posVelError_set, METH_VARARGS, (char *)"ScopedCopyableComponents_posVelError_set(ScopedCopyableComponents self, ScopedCopyablePosVelError posVelError)"},
	 { (char *)"ScopedCopyableComponents_posVelError_get", _wrap_ScopedCopyableComponents_posVelError_get, METH_VARARGS, (char *)"ScopedCopyableComponents_posVelError_get(ScopedCopyableComponents self) -> ScopedCopyablePosVelError"},
	 { (char *)"ScopedCopyableComponents_radarSensor_set", _wrap_ScopedCopyableComponents_radarSensor_set, METH_VARARGS, (char *)"ScopedCopyableComponents_radarSensor_set(ScopedCopyableComponents self, ScopedCopyableRadarSensor radarSensor)"},
	 { (char *)"ScopedCopyableComponents_radarSensor_get", _wrap_ScopedCopyableComponents_radarSensor_get, METH_VARARGS, (char *)"ScopedCopyableComponents_radarSensor_get(ScopedCopyableComponents self) -> ScopedCopyableRadarSensor"},
	 { (char *)"ScopedCopyableComponents_tropoError_set", _wrap_ScopedCopyableComponents_tropoError_set, METH_VARARGS, (char *)"ScopedCopyableComponents_tropoError_set(ScopedCopyableComponents self, ScopedCopyableTropoError tropoError)"},
	 { (char *)"ScopedCopyableComponents_tropoError_get", _wrap_ScopedCopyableComponents_tropoError_get, METH_VARARGS, (char *)"ScopedCopyableComponents_tropoError_get(ScopedCopyableComponents self) -> ScopedCopyableTropoError"},
	 { (char *)"ScopedCopyableComponents_ionoError_set", _wrap_ScopedCopyableComponents_ionoError_set, METH_VARARGS, (char *)"ScopedCopyableComponents_ionoError_set(ScopedCopyableComponents self, ScopedCopyableIonoError ionoError)"},
	 { (char *)"ScopedCopyableComponents_ionoError_get", _wrap_ScopedCopyableComponents_ionoError_get, METH_VARARGS, (char *)"ScopedCopyableComponents_ionoError_get(ScopedCopyableComponents self) -> ScopedCopyableIonoError"},
	 { (char *)"ScopedCopyableComponents_swigregister", ScopedCopyableComponents_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorMatchCollect_iterator", _wrap_VectorMatchCollect_iterator, METH_VARARGS, (char *)"VectorMatchCollect_iterator(VectorMatchCollect self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorMatchCollect___nonzero__", _wrap_VectorMatchCollect___nonzero__, METH_VARARGS, (char *)"VectorMatchCollect___nonzero__(VectorMatchCollect self) -> bool"},
	 { (char *)"VectorMatchCollect___len__", _wrap_VectorMatchCollect___len__, METH_VARARGS, (char *)"VectorMatchCollect___len__(VectorMatchCollect self) -> size_type"},
	 { (char *)"VectorMatchCollect_pop", _wrap_VectorMatchCollect_pop, METH_VARARGS, (char *)"VectorMatchCollect_pop(VectorMatchCollect self) -> value_type"},
	 { (char *)"VectorMatchCollect___getslice__", _wrap_VectorMatchCollect___getslice__, METH_VARARGS, (char *)"VectorMatchCollect___getslice__(VectorMatchCollect self, difference_type i, difference_type j) -> VectorMatchCollect"},
	 { (char *)"VectorMatchCollect___setslice__", _wrap_VectorMatchCollect___setslice__, METH_VARARGS, (char *)"\n"
		"VectorMatchCollect___setslice__(VectorMatchCollect self, difference_type i, difference_type j, \n"
		"    VectorMatchCollect v)\n"
		""},
	 { (char *)"VectorMatchCollect___delslice__", _wrap_VectorMatchCollect___delslice__, METH_VARARGS, (char *)"VectorMatchCollect___delslice__(VectorMatchCollect self, difference_type i, difference_type j)"},
	 { (char *)"VectorMatchCollect___delitem__", _wrap_VectorMatchCollect___delitem__, METH_VARARGS, (char *)"VectorMatchCollect___delitem__(VectorMatchCollect self, difference_type i)"},
	 { (char *)"VectorMatchCollect___getitem__", _wrap_VectorMatchCollect___getitem__, METH_VARARGS, (char *)"VectorMatchCollect___getitem__(VectorMatchCollect self, difference_type i) -> value_type"},
	 { (char *)"VectorMatchCollect___setitem__", _wrap_VectorMatchCollect___setitem__, METH_VARARGS, (char *)"VectorMatchCollect___setitem__(VectorMatchCollect self, difference_type i, value_type x)"},
	 { (char *)"VectorMatchCollect_append", _wrap_VectorMatchCollect_append, METH_VARARGS, (char *)"VectorMatchCollect_append(VectorMatchCollect self, value_type x)"},
	 { (char *)"VectorMatchCollect_empty", _wrap_VectorMatchCollect_empty, METH_VARARGS, (char *)"VectorMatchCollect_empty(VectorMatchCollect self) -> bool"},
	 { (char *)"VectorMatchCollect_size", _wrap_VectorMatchCollect_size, METH_VARARGS, (char *)"VectorMatchCollect_size(VectorMatchCollect self) -> size_type"},
	 { (char *)"VectorMatchCollect_clear", _wrap_VectorMatchCollect_clear, METH_VARARGS, (char *)"VectorMatchCollect_clear(VectorMatchCollect self)"},
	 { (char *)"VectorMatchCollect_swap", _wrap_VectorMatchCollect_swap, METH_VARARGS, (char *)"VectorMatchCollect_swap(VectorMatchCollect self, VectorMatchCollect v)"},
	 { (char *)"VectorMatchCollect_get_allocator", _wrap_VectorMatchCollect_get_allocator, METH_VARARGS, (char *)"VectorMatchCollect_get_allocator(VectorMatchCollect self) -> allocator_type"},
	 { (char *)"VectorMatchCollect_begin", _wrap_VectorMatchCollect_begin, METH_VARARGS, (char *)"VectorMatchCollect_begin(VectorMatchCollect self) -> const_iterator"},
	 { (char *)"VectorMatchCollect_end", _wrap_VectorMatchCollect_end, METH_VARARGS, (char *)"VectorMatchCollect_end(VectorMatchCollect self) -> const_iterator"},
	 { (char *)"VectorMatchCollect_rbegin", _wrap_VectorMatchCollect_rbegin, METH_VARARGS, (char *)"VectorMatchCollect_rbegin(VectorMatchCollect self) -> const_reverse_iterator"},
	 { (char *)"VectorMatchCollect_rend", _wrap_VectorMatchCollect_rend, METH_VARARGS, (char *)"VectorMatchCollect_rend(VectorMatchCollect self) -> const_reverse_iterator"},
	 { (char *)"VectorMatchCollect_pop_back", _wrap_VectorMatchCollect_pop_back, METH_VARARGS, (char *)"VectorMatchCollect_pop_back(VectorMatchCollect self)"},
	 { (char *)"VectorMatchCollect_erase", _wrap_VectorMatchCollect_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorMatchCollect_erase(VectorMatchCollect self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorMatchCollect", _wrap_new_VectorMatchCollect, METH_VARARGS, (char *)"\n"
		"VectorMatchCollect()\n"
		"VectorMatchCollect(VectorMatchCollect ?)\n"
		"VectorMatchCollect(size_type size)\n"
		"new_VectorMatchCollect(size_type size, value_type value) -> VectorMatchCollect\n"
		""},
	 { (char *)"VectorMatchCollect_push_back", _wrap_VectorMatchCollect_push_back, METH_VARARGS, (char *)"VectorMatchCollect_push_back(VectorMatchCollect self, value_type x)"},
	 { (char *)"VectorMatchCollect_front", _wrap_VectorMatchCollect_front, METH_VARARGS, (char *)"VectorMatchCollect_front(VectorMatchCollect self) -> value_type"},
	 { (char *)"VectorMatchCollect_back", _wrap_VectorMatchCollect_back, METH_VARARGS, (char *)"VectorMatchCollect_back(VectorMatchCollect self) -> value_type"},
	 { (char *)"VectorMatchCollect_assign", _wrap_VectorMatchCollect_assign, METH_VARARGS, (char *)"VectorMatchCollect_assign(VectorMatchCollect self, size_type n, value_type x)"},
	 { (char *)"VectorMatchCollect_resize", _wrap_VectorMatchCollect_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorMatchCollect_resize(VectorMatchCollect self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"VectorMatchCollect_insert", _wrap_VectorMatchCollect_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorMatchCollect_insert(VectorMatchCollect self, iterator pos, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorMatchCollect_reserve", _wrap_VectorMatchCollect_reserve, METH_VARARGS, (char *)"VectorMatchCollect_reserve(VectorMatchCollect self, size_type n)"},
	 { (char *)"VectorMatchCollect_capacity", _wrap_VectorMatchCollect_capacity, METH_VARARGS, (char *)"VectorMatchCollect_capacity(VectorMatchCollect self) -> size_type"},
	 { (char *)"delete_VectorMatchCollect", _wrap_delete_VectorMatchCollect, METH_VARARGS, (char *)"delete_VectorMatchCollect(VectorMatchCollect self)"},
	 { (char *)"VectorMatchCollect_swigregister", VectorMatchCollect_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorScopedCopyableMatchType_iterator", _wrap_VectorScopedCopyableMatchType_iterator, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_iterator(VectorScopedCopyableMatchType self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorScopedCopyableMatchType___nonzero__", _wrap_VectorScopedCopyableMatchType___nonzero__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___nonzero__(VectorScopedCopyableMatchType self) -> bool"},
	 { (char *)"VectorScopedCopyableMatchType___len__", _wrap_VectorScopedCopyableMatchType___len__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___len__(VectorScopedCopyableMatchType self) -> size_type"},
	 { (char *)"VectorScopedCopyableMatchType_pop", _wrap_VectorScopedCopyableMatchType_pop, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_pop(VectorScopedCopyableMatchType self) -> value_type"},
	 { (char *)"VectorScopedCopyableMatchType___getslice__", _wrap_VectorScopedCopyableMatchType___getslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCopyableMatchType___getslice__(VectorScopedCopyableMatchType self, difference_type i, \n"
		"    difference_type j) -> VectorScopedCopyableMatchType\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType___setslice__", _wrap_VectorScopedCopyableMatchType___setslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCopyableMatchType___setslice__(VectorScopedCopyableMatchType self, difference_type i, \n"
		"    difference_type j, VectorScopedCopyableMatchType v)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType___delslice__", _wrap_VectorScopedCopyableMatchType___delslice__, METH_VARARGS, (char *)"\n"
		"VectorScopedCopyableMatchType___delslice__(VectorScopedCopyableMatchType self, difference_type i, \n"
		"    difference_type j)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType___delitem__", _wrap_VectorScopedCopyableMatchType___delitem__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___delitem__(VectorScopedCopyableMatchType self, difference_type i)"},
	 { (char *)"VectorScopedCopyableMatchType___getitem__", _wrap_VectorScopedCopyableMatchType___getitem__, METH_VARARGS, (char *)"VectorScopedCopyableMatchType___getitem__(VectorScopedCopyableMatchType self, difference_type i) -> value_type"},
	 { (char *)"VectorScopedCopyableMatchType___setitem__", _wrap_VectorScopedCopyableMatchType___setitem__, METH_VARARGS, (char *)"\n"
		"VectorScopedCopyableMatchType___setitem__(VectorScopedCopyableMatchType self, difference_type i, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType_append", _wrap_VectorScopedCopyableMatchType_append, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_append(VectorScopedCopyableMatchType self, value_type x)"},
	 { (char *)"VectorScopedCopyableMatchType_empty", _wrap_VectorScopedCopyableMatchType_empty, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_empty(VectorScopedCopyableMatchType self) -> bool"},
	 { (char *)"VectorScopedCopyableMatchType_size", _wrap_VectorScopedCopyableMatchType_size, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_size(VectorScopedCopyableMatchType self) -> size_type"},
	 { (char *)"VectorScopedCopyableMatchType_clear", _wrap_VectorScopedCopyableMatchType_clear, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_clear(VectorScopedCopyableMatchType self)"},
	 { (char *)"VectorScopedCopyableMatchType_swap", _wrap_VectorScopedCopyableMatchType_swap, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_swap(VectorScopedCopyableMatchType self, VectorScopedCopyableMatchType v)"},
	 { (char *)"VectorScopedCopyableMatchType_get_allocator", _wrap_VectorScopedCopyableMatchType_get_allocator, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_get_allocator(VectorScopedCopyableMatchType self) -> allocator_type"},
	 { (char *)"VectorScopedCopyableMatchType_begin", _wrap_VectorScopedCopyableMatchType_begin, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_begin(VectorScopedCopyableMatchType self) -> const_iterator"},
	 { (char *)"VectorScopedCopyableMatchType_end", _wrap_VectorScopedCopyableMatchType_end, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_end(VectorScopedCopyableMatchType self) -> const_iterator"},
	 { (char *)"VectorScopedCopyableMatchType_rbegin", _wrap_VectorScopedCopyableMatchType_rbegin, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_rbegin(VectorScopedCopyableMatchType self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCopyableMatchType_rend", _wrap_VectorScopedCopyableMatchType_rend, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_rend(VectorScopedCopyableMatchType self) -> const_reverse_iterator"},
	 { (char *)"VectorScopedCopyableMatchType_pop_back", _wrap_VectorScopedCopyableMatchType_pop_back, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_pop_back(VectorScopedCopyableMatchType self)"},
	 { (char *)"VectorScopedCopyableMatchType_erase", _wrap_VectorScopedCopyableMatchType_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorScopedCopyableMatchType_erase(VectorScopedCopyableMatchType self, iterator first, \n"
		"    iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorScopedCopyableMatchType", _wrap_new_VectorScopedCopyableMatchType, METH_VARARGS, (char *)"\n"
		"VectorScopedCopyableMatchType()\n"
		"VectorScopedCopyableMatchType(VectorScopedCopyableMatchType ?)\n"
		"VectorScopedCopyableMatchType(size_type size)\n"
		"new_VectorScopedCopyableMatchType(size_type size, value_type value) -> VectorScopedCopyableMatchType\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType_push_back", _wrap_VectorScopedCopyableMatchType_push_back, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_push_back(VectorScopedCopyableMatchType self, value_type x)"},
	 { (char *)"VectorScopedCopyableMatchType_front", _wrap_VectorScopedCopyableMatchType_front, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_front(VectorScopedCopyableMatchType self) -> value_type"},
	 { (char *)"VectorScopedCopyableMatchType_back", _wrap_VectorScopedCopyableMatchType_back, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_back(VectorScopedCopyableMatchType self) -> value_type"},
	 { (char *)"VectorScopedCopyableMatchType_assign", _wrap_VectorScopedCopyableMatchType_assign, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_assign(VectorScopedCopyableMatchType self, size_type n, value_type x)"},
	 { (char *)"VectorScopedCopyableMatchType_resize", _wrap_VectorScopedCopyableMatchType_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorScopedCopyableMatchType_resize(VectorScopedCopyableMatchType self, size_type new_size, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType_insert", _wrap_VectorScopedCopyableMatchType_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorScopedCopyableMatchType_insert(VectorScopedCopyableMatchType self, iterator pos, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorScopedCopyableMatchType_reserve", _wrap_VectorScopedCopyableMatchType_reserve, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_reserve(VectorScopedCopyableMatchType self, size_type n)"},
	 { (char *)"VectorScopedCopyableMatchType_capacity", _wrap_VectorScopedCopyableMatchType_capacity, METH_VARARGS, (char *)"VectorScopedCopyableMatchType_capacity(VectorScopedCopyableMatchType self) -> size_type"},
	 { (char *)"delete_VectorScopedCopyableMatchType", _wrap_delete_VectorScopedCopyableMatchType, METH_VARARGS, (char *)"delete_VectorScopedCopyableMatchType(VectorScopedCopyableMatchType self)"},
	 { (char *)"VectorScopedCopyableMatchType_swigregister", VectorScopedCopyableMatchType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableRMAT", _wrap_new_ScopedCopyableRMAT, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRMAT(RMAT ptr=None)\n"
		"ScopedCopyableRMAT()\n"
		"new_ScopedCopyableRMAT(ScopedCopyableRMAT rhs) -> ScopedCopyableRMAT\n"
		""},
	 { (char *)"ScopedCopyableRMAT_get", _wrap_ScopedCopyableRMAT_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_get(ScopedCopyableRMAT self) -> RMAT"},
	 { (char *)"ScopedCopyableRMAT___ref__", _wrap_ScopedCopyableRMAT___ref__, METH_VARARGS, (char *)"ScopedCopyableRMAT___ref__(ScopedCopyableRMAT self) -> RMAT"},
	 { (char *)"ScopedCopyableRMAT___deref__", _wrap_ScopedCopyableRMAT___deref__, METH_VARARGS, (char *)"ScopedCopyableRMAT___deref__(ScopedCopyableRMAT self) -> RMAT"},
	 { (char *)"ScopedCopyableRMAT_reset", _wrap_ScopedCopyableRMAT_reset, METH_VARARGS, (char *)"\n"
		"reset(RMAT ptr=None)\n"
		"ScopedCopyableRMAT_reset(ScopedCopyableRMAT self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRMAT", _wrap_delete_ScopedCopyableRMAT, METH_VARARGS, (char *)"delete_ScopedCopyableRMAT(ScopedCopyableRMAT self)"},
	 { (char *)"ScopedCopyableRMAT_refTime_set", _wrap_ScopedCopyableRMAT_refTime_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_refTime_set(ScopedCopyableRMAT self, double refTime)"},
	 { (char *)"ScopedCopyableRMAT_refTime_get", _wrap_ScopedCopyableRMAT_refTime_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_refTime_get(ScopedCopyableRMAT self) -> double"},
	 { (char *)"ScopedCopyableRMAT_refPos_set", _wrap_ScopedCopyableRMAT_refPos_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_refPos_set(ScopedCopyableRMAT self, Vector3 refPos)"},
	 { (char *)"ScopedCopyableRMAT_refPos_get", _wrap_ScopedCopyableRMAT_refPos_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_refPos_get(ScopedCopyableRMAT self) -> Vector3"},
	 { (char *)"ScopedCopyableRMAT_refVel_set", _wrap_ScopedCopyableRMAT_refVel_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_refVel_set(ScopedCopyableRMAT self, Vector3 refVel)"},
	 { (char *)"ScopedCopyableRMAT_refVel_get", _wrap_ScopedCopyableRMAT_refVel_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_refVel_get(ScopedCopyableRMAT self) -> Vector3"},
	 { (char *)"ScopedCopyableRMAT_distRefLinePoly_set", _wrap_ScopedCopyableRMAT_distRefLinePoly_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_distRefLinePoly_set(ScopedCopyableRMAT self, Poly1D distRefLinePoly)"},
	 { (char *)"ScopedCopyableRMAT_distRefLinePoly_get", _wrap_ScopedCopyableRMAT_distRefLinePoly_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_distRefLinePoly_get(ScopedCopyableRMAT self) -> Poly1D"},
	 { (char *)"ScopedCopyableRMAT_cosDCACOAPoly_set", _wrap_ScopedCopyableRMAT_cosDCACOAPoly_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_cosDCACOAPoly_set(ScopedCopyableRMAT self, Poly2D cosDCACOAPoly)"},
	 { (char *)"ScopedCopyableRMAT_cosDCACOAPoly_get", _wrap_ScopedCopyableRMAT_cosDCACOAPoly_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_cosDCACOAPoly_get(ScopedCopyableRMAT self) -> Poly2D"},
	 { (char *)"ScopedCopyableRMAT_kx1_set", _wrap_ScopedCopyableRMAT_kx1_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_kx1_set(ScopedCopyableRMAT self, double kx1)"},
	 { (char *)"ScopedCopyableRMAT_kx1_get", _wrap_ScopedCopyableRMAT_kx1_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_kx1_get(ScopedCopyableRMAT self) -> double"},
	 { (char *)"ScopedCopyableRMAT_kx2_set", _wrap_ScopedCopyableRMAT_kx2_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_kx2_set(ScopedCopyableRMAT self, double kx2)"},
	 { (char *)"ScopedCopyableRMAT_kx2_get", _wrap_ScopedCopyableRMAT_kx2_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_kx2_get(ScopedCopyableRMAT self) -> double"},
	 { (char *)"ScopedCopyableRMAT_ky1_set", _wrap_ScopedCopyableRMAT_ky1_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_ky1_set(ScopedCopyableRMAT self, double ky1)"},
	 { (char *)"ScopedCopyableRMAT_ky1_get", _wrap_ScopedCopyableRMAT_ky1_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_ky1_get(ScopedCopyableRMAT self) -> double"},
	 { (char *)"ScopedCopyableRMAT_ky2_set", _wrap_ScopedCopyableRMAT_ky2_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_ky2_set(ScopedCopyableRMAT self, double ky2)"},
	 { (char *)"ScopedCopyableRMAT_ky2_get", _wrap_ScopedCopyableRMAT_ky2_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_ky2_get(ScopedCopyableRMAT self) -> double"},
	 { (char *)"ScopedCopyableRMAT_dopConeAngleRef_set", _wrap_ScopedCopyableRMAT_dopConeAngleRef_set, METH_VARARGS, (char *)"ScopedCopyableRMAT_dopConeAngleRef_set(ScopedCopyableRMAT self, double dopConeAngleRef)"},
	 { (char *)"ScopedCopyableRMAT_dopConeAngleRef_get", _wrap_ScopedCopyableRMAT_dopConeAngleRef_get, METH_VARARGS, (char *)"ScopedCopyableRMAT_dopConeAngleRef_get(ScopedCopyableRMAT self) -> double"},
	 { (char *)"ScopedCopyableRMAT_swigregister", ScopedCopyableRMAT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableRMCR", _wrap_new_ScopedCopyableRMCR, METH_VARARGS, (char *)"\n"
		"ScopedCopyableRMCR(RMCR ptr=None)\n"
		"ScopedCopyableRMCR()\n"
		"new_ScopedCopyableRMCR(ScopedCopyableRMCR rhs) -> ScopedCopyableRMCR\n"
		""},
	 { (char *)"ScopedCopyableRMCR_get", _wrap_ScopedCopyableRMCR_get, METH_VARARGS, (char *)"ScopedCopyableRMCR_get(ScopedCopyableRMCR self) -> RMCR"},
	 { (char *)"ScopedCopyableRMCR___ref__", _wrap_ScopedCopyableRMCR___ref__, METH_VARARGS, (char *)"ScopedCopyableRMCR___ref__(ScopedCopyableRMCR self) -> RMCR"},
	 { (char *)"ScopedCopyableRMCR___deref__", _wrap_ScopedCopyableRMCR___deref__, METH_VARARGS, (char *)"ScopedCopyableRMCR___deref__(ScopedCopyableRMCR self) -> RMCR"},
	 { (char *)"ScopedCopyableRMCR_reset", _wrap_ScopedCopyableRMCR_reset, METH_VARARGS, (char *)"\n"
		"reset(RMCR ptr=None)\n"
		"ScopedCopyableRMCR_reset(ScopedCopyableRMCR self)\n"
		""},
	 { (char *)"delete_ScopedCopyableRMCR", _wrap_delete_ScopedCopyableRMCR, METH_VARARGS, (char *)"delete_ScopedCopyableRMCR(ScopedCopyableRMCR self)"},
	 { (char *)"ScopedCopyableRMCR_refPos_set", _wrap_ScopedCopyableRMCR_refPos_set, METH_VARARGS, (char *)"ScopedCopyableRMCR_refPos_set(ScopedCopyableRMCR self, Vector3 refPos)"},
	 { (char *)"ScopedCopyableRMCR_refPos_get", _wrap_ScopedCopyableRMCR_refPos_get, METH_VARARGS, (char *)"ScopedCopyableRMCR_refPos_get(ScopedCopyableRMCR self) -> Vector3"},
	 { (char *)"ScopedCopyableRMCR_refVel_set", _wrap_ScopedCopyableRMCR_refVel_set, METH_VARARGS, (char *)"ScopedCopyableRMCR_refVel_set(ScopedCopyableRMCR self, Vector3 refVel)"},
	 { (char *)"ScopedCopyableRMCR_refVel_get", _wrap_ScopedCopyableRMCR_refVel_get, METH_VARARGS, (char *)"ScopedCopyableRMCR_refVel_get(ScopedCopyableRMCR self) -> Vector3"},
	 { (char *)"ScopedCopyableRMCR_dopConeAngleRef_set", _wrap_ScopedCopyableRMCR_dopConeAngleRef_set, METH_VARARGS, (char *)"ScopedCopyableRMCR_dopConeAngleRef_set(ScopedCopyableRMCR self, double dopConeAngleRef)"},
	 { (char *)"ScopedCopyableRMCR_dopConeAngleRef_get", _wrap_ScopedCopyableRMCR_dopConeAngleRef_get, METH_VARARGS, (char *)"ScopedCopyableRMCR_dopConeAngleRef_get(ScopedCopyableRMCR self) -> double"},
	 { (char *)"ScopedCopyableRMCR_swigregister", ScopedCopyableRMCR_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScopedCopyableINCA", _wrap_new_ScopedCopyableINCA, METH_VARARGS, (char *)"\n"
		"ScopedCopyableINCA(INCA ptr=None)\n"
		"ScopedCopyableINCA()\n"
		"new_ScopedCopyableINCA(ScopedCopyableINCA rhs) -> ScopedCopyableINCA\n"
		""},
	 { (char *)"ScopedCopyableINCA_get", _wrap_ScopedCopyableINCA_get, METH_VARARGS, (char *)"ScopedCopyableINCA_get(ScopedCopyableINCA self) -> INCA"},
	 { (char *)"ScopedCopyableINCA___ref__", _wrap_ScopedCopyableINCA___ref__, METH_VARARGS, (char *)"ScopedCopyableINCA___ref__(ScopedCopyableINCA self) -> INCA"},
	 { (char *)"ScopedCopyableINCA___deref__", _wrap_ScopedCopyableINCA___deref__, METH_VARARGS, (char *)"ScopedCopyableINCA___deref__(ScopedCopyableINCA self) -> INCA"},
	 { (char *)"ScopedCopyableINCA_reset", _wrap_ScopedCopyableINCA_reset, METH_VARARGS, (char *)"\n"
		"reset(INCA ptr=None)\n"
		"ScopedCopyableINCA_reset(ScopedCopyableINCA self)\n"
		""},
	 { (char *)"delete_ScopedCopyableINCA", _wrap_delete_ScopedCopyableINCA, METH_VARARGS, (char *)"delete_ScopedCopyableINCA(ScopedCopyableINCA self)"},
	 { (char *)"ScopedCopyableINCA_timeCAPoly_set", _wrap_ScopedCopyableINCA_timeCAPoly_set, METH_VARARGS, (char *)"ScopedCopyableINCA_timeCAPoly_set(ScopedCopyableINCA self, Poly1D timeCAPoly)"},
	 { (char *)"ScopedCopyableINCA_timeCAPoly_get", _wrap_ScopedCopyableINCA_timeCAPoly_get, METH_VARARGS, (char *)"ScopedCopyableINCA_timeCAPoly_get(ScopedCopyableINCA self) -> Poly1D"},
	 { (char *)"ScopedCopyableINCA_rangeCA_set", _wrap_ScopedCopyableINCA_rangeCA_set, METH_VARARGS, (char *)"ScopedCopyableINCA_rangeCA_set(ScopedCopyableINCA self, double rangeCA)"},
	 { (char *)"ScopedCopyableINCA_rangeCA_get", _wrap_ScopedCopyableINCA_rangeCA_get, METH_VARARGS, (char *)"ScopedCopyableINCA_rangeCA_get(ScopedCopyableINCA self) -> double"},
	 { (char *)"ScopedCopyableINCA_freqZero_set", _wrap_ScopedCopyableINCA_freqZero_set, METH_VARARGS, (char *)"ScopedCopyableINCA_freqZero_set(ScopedCopyableINCA self, double freqZero)"},
	 { (char *)"ScopedCopyableINCA_freqZero_get", _wrap_ScopedCopyableINCA_freqZero_get, METH_VARARGS, (char *)"ScopedCopyableINCA_freqZero_get(ScopedCopyableINCA self) -> double"},
	 { (char *)"ScopedCopyableINCA_dopplerRateScaleFactorPoly_set", _wrap_ScopedCopyableINCA_dopplerRateScaleFactorPoly_set, METH_VARARGS, (char *)"ScopedCopyableINCA_dopplerRateScaleFactorPoly_set(ScopedCopyableINCA self, Poly2D dopplerRateScaleFactorPoly)"},
	 { (char *)"ScopedCopyableINCA_dopplerRateScaleFactorPoly_get", _wrap_ScopedCopyableINCA_dopplerRateScaleFactorPoly_get, METH_VARARGS, (char *)"ScopedCopyableINCA_dopplerRateScaleFactorPoly_get(ScopedCopyableINCA self) -> Poly2D"},
	 { (char *)"ScopedCopyableINCA_dopplerCentroidPoly_set", _wrap_ScopedCopyableINCA_dopplerCentroidPoly_set, METH_VARARGS, (char *)"ScopedCopyableINCA_dopplerCentroidPoly_set(ScopedCopyableINCA self, Poly2D dopplerCentroidPoly)"},
	 { (char *)"ScopedCopyableINCA_dopplerCentroidPoly_get", _wrap_ScopedCopyableINCA_dopplerCentroidPoly_get, METH_VARARGS, (char *)"ScopedCopyableINCA_dopplerCentroidPoly_get(ScopedCopyableINCA self) -> Poly2D"},
	 { (char *)"ScopedCopyableINCA_dopplerCentroidCOA_set", _wrap_ScopedCopyableINCA_dopplerCentroidCOA_set, METH_VARARGS, (char *)"ScopedCopyableINCA_dopplerCentroidCOA_set(ScopedCopyableINCA self, BooleanType dopplerCentroidCOA)"},
	 { (char *)"ScopedCopyableINCA_dopplerCentroidCOA_get", _wrap_ScopedCopyableINCA_dopplerCentroidCOA_get, METH_VARARGS, (char *)"ScopedCopyableINCA_dopplerCentroidCOA_get(ScopedCopyableINCA self) -> BooleanType"},
	 { (char *)"ScopedCopyableINCA_swigregister", ScopedCopyableINCA_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorTimelineSet_iterator", _wrap_VectorTimelineSet_iterator, METH_VARARGS, (char *)"VectorTimelineSet_iterator(VectorTimelineSet self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"VectorTimelineSet___nonzero__", _wrap_VectorTimelineSet___nonzero__, METH_VARARGS, (char *)"VectorTimelineSet___nonzero__(VectorTimelineSet self) -> bool"},
	 { (char *)"VectorTimelineSet___len__", _wrap_VectorTimelineSet___len__, METH_VARARGS, (char *)"VectorTimelineSet___len__(VectorTimelineSet self) -> size_type"},
	 { (char *)"VectorTimelineSet_pop", _wrap_VectorTimelineSet_pop, METH_VARARGS, (char *)"VectorTimelineSet_pop(VectorTimelineSet self) -> value_type"},
	 { (char *)"VectorTimelineSet___getslice__", _wrap_VectorTimelineSet___getslice__, METH_VARARGS, (char *)"VectorTimelineSet___getslice__(VectorTimelineSet self, difference_type i, difference_type j) -> VectorTimelineSet"},
	 { (char *)"VectorTimelineSet___setslice__", _wrap_VectorTimelineSet___setslice__, METH_VARARGS, (char *)"\n"
		"VectorTimelineSet___setslice__(VectorTimelineSet self, difference_type i, difference_type j, \n"
		"    VectorTimelineSet v)\n"
		""},
	 { (char *)"VectorTimelineSet___delslice__", _wrap_VectorTimelineSet___delslice__, METH_VARARGS, (char *)"VectorTimelineSet___delslice__(VectorTimelineSet self, difference_type i, difference_type j)"},
	 { (char *)"VectorTimelineSet___delitem__", _wrap_VectorTimelineSet___delitem__, METH_VARARGS, (char *)"VectorTimelineSet___delitem__(VectorTimelineSet self, difference_type i)"},
	 { (char *)"VectorTimelineSet___getitem__", _wrap_VectorTimelineSet___getitem__, METH_VARARGS, (char *)"VectorTimelineSet___getitem__(VectorTimelineSet self, difference_type i) -> value_type"},
	 { (char *)"VectorTimelineSet___setitem__", _wrap_VectorTimelineSet___setitem__, METH_VARARGS, (char *)"VectorTimelineSet___setitem__(VectorTimelineSet self, difference_type i, value_type x)"},
	 { (char *)"VectorTimelineSet_append", _wrap_VectorTimelineSet_append, METH_VARARGS, (char *)"VectorTimelineSet_append(VectorTimelineSet self, value_type x)"},
	 { (char *)"VectorTimelineSet_empty", _wrap_VectorTimelineSet_empty, METH_VARARGS, (char *)"VectorTimelineSet_empty(VectorTimelineSet self) -> bool"},
	 { (char *)"VectorTimelineSet_size", _wrap_VectorTimelineSet_size, METH_VARARGS, (char *)"VectorTimelineSet_size(VectorTimelineSet self) -> size_type"},
	 { (char *)"VectorTimelineSet_clear", _wrap_VectorTimelineSet_clear, METH_VARARGS, (char *)"VectorTimelineSet_clear(VectorTimelineSet self)"},
	 { (char *)"VectorTimelineSet_swap", _wrap_VectorTimelineSet_swap, METH_VARARGS, (char *)"VectorTimelineSet_swap(VectorTimelineSet self, VectorTimelineSet v)"},
	 { (char *)"VectorTimelineSet_get_allocator", _wrap_VectorTimelineSet_get_allocator, METH_VARARGS, (char *)"VectorTimelineSet_get_allocator(VectorTimelineSet self) -> allocator_type"},
	 { (char *)"VectorTimelineSet_begin", _wrap_VectorTimelineSet_begin, METH_VARARGS, (char *)"VectorTimelineSet_begin(VectorTimelineSet self) -> const_iterator"},
	 { (char *)"VectorTimelineSet_end", _wrap_VectorTimelineSet_end, METH_VARARGS, (char *)"VectorTimelineSet_end(VectorTimelineSet self) -> const_iterator"},
	 { (char *)"VectorTimelineSet_rbegin", _wrap_VectorTimelineSet_rbegin, METH_VARARGS, (char *)"VectorTimelineSet_rbegin(VectorTimelineSet self) -> const_reverse_iterator"},
	 { (char *)"VectorTimelineSet_rend", _wrap_VectorTimelineSet_rend, METH_VARARGS, (char *)"VectorTimelineSet_rend(VectorTimelineSet self) -> const_reverse_iterator"},
	 { (char *)"VectorTimelineSet_pop_back", _wrap_VectorTimelineSet_pop_back, METH_VARARGS, (char *)"VectorTimelineSet_pop_back(VectorTimelineSet self)"},
	 { (char *)"VectorTimelineSet_erase", _wrap_VectorTimelineSet_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"VectorTimelineSet_erase(VectorTimelineSet self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_VectorTimelineSet", _wrap_new_VectorTimelineSet, METH_VARARGS, (char *)"\n"
		"VectorTimelineSet()\n"
		"VectorTimelineSet(VectorTimelineSet ?)\n"
		"VectorTimelineSet(size_type size)\n"
		"new_VectorTimelineSet(size_type size, value_type value) -> VectorTimelineSet\n"
		""},
	 { (char *)"VectorTimelineSet_push_back", _wrap_VectorTimelineSet_push_back, METH_VARARGS, (char *)"VectorTimelineSet_push_back(VectorTimelineSet self, value_type x)"},
	 { (char *)"VectorTimelineSet_front", _wrap_VectorTimelineSet_front, METH_VARARGS, (char *)"VectorTimelineSet_front(VectorTimelineSet self) -> value_type"},
	 { (char *)"VectorTimelineSet_back", _wrap_VectorTimelineSet_back, METH_VARARGS, (char *)"VectorTimelineSet_back(VectorTimelineSet self) -> value_type"},
	 { (char *)"VectorTimelineSet_assign", _wrap_VectorTimelineSet_assign, METH_VARARGS, (char *)"VectorTimelineSet_assign(VectorTimelineSet self, size_type n, value_type x)"},
	 { (char *)"VectorTimelineSet_resize", _wrap_VectorTimelineSet_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"VectorTimelineSet_resize(VectorTimelineSet self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"VectorTimelineSet_insert", _wrap_VectorTimelineSet_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"VectorTimelineSet_insert(VectorTimelineSet self, iterator pos, size_type n, \n"
		"    value_type x)\n"
		""},
	 { (char *)"VectorTimelineSet_reserve", _wrap_VectorTimelineSet_reserve, METH_VARARGS, (char *)"VectorTimelineSet_reserve(VectorTimelineSet self, size_type n)"},
	 { (char *)"VectorTimelineSet_capacity", _wrap_VectorTimelineSet_capacity, METH_VARARGS, (char *)"VectorTimelineSet_capacity(VectorTimelineSet self) -> size_type"},
	 { (char *)"delete_VectorTimelineSet", _wrap_delete_VectorTimelineSet, METH_VARARGS, (char *)"delete_VectorTimelineSet(VectorTimelineSet self)"},
	 { (char *)"VectorTimelineSet_swigregister", VectorTimelineSet_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_six__sicd__ComplexClassificationTo_p_six__Classification(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((six::Classification *)  ((six::sicd::ComplexClassification *) x));
}
static void *_p_six__AmplitudeTableTo_p_six__LUT(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((six::LUT *)  ((six::AmplitudeTable *) x));
}
static void *_p_six__sicd__ComplexXMLControlTo_p_six__XMLControl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((six::XMLControl *)  ((six::sicd::ComplexXMLControl *) x));
}
static void *_p_scene__ProjectionModelWithImageVectorsTo_p_scene__ProjectionModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((scene::ProjectionModel *)  ((scene::ProjectionModelWithImageVectors *) x));
}
static void *_p_scene__RangeAzimProjectionModelTo_p_scene__ProjectionModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((scene::ProjectionModel *) (scene::ProjectionModelWithImageVectors *) ((scene::RangeAzimProjectionModel *) x));
}
static void *_p_scene__RangeZeroProjectionModelTo_p_scene__ProjectionModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((scene::ProjectionModel *) (scene::ProjectionModelWithImageVectors *) ((scene::RangeZeroProjectionModel *) x));
}
static void *_p_scene__PlaneProjectionModelTo_p_scene__ProjectionModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((scene::ProjectionModel *) (scene::ProjectionModelWithImageVectors *) ((scene::PlaneProjectionModel *) x));
}
static void *_p_scene__GeodeticProjectionModelTo_p_scene__ProjectionModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((scene::ProjectionModel *)  ((scene::GeodeticProjectionModel *) x));
}
static void *_p_six__sicd__ComplexDataTo_p_six__Data(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((six::Data *)  ((six::sicd::ComplexData *) x));
}
static void *_p_scene__LatLonAltTo_p_scene__LatLon(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((scene::LatLon *)  ((scene::LatLonAlt *) x));
}
static swig_type_info _swigt__p_Like_T = {"_p_Like_T", "Like_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterIter = {"_p_ParameterIter", "ParameterIter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterMap = {"_p_ParameterMap", "ParameterMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_except__Context = {"_p_except__Context", "except::Context *|six::ValidationContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_except__NullPointerReferenceException = {"_p_except__NullPointerReferenceException", "except::NullPointerReferenceException *|except::NullPointerReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_logging__Logger = {"_p_logging__Logger", "logging::Logger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__linear__VectorNT_2_double_t = {"_p_math__linear__VectorNT_2_double_t", "scene::Vector2 *|math::linear::VectorN< 2,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__linear__VectorNT_3_double_t = {"_p_math__linear__VectorNT_3_double_t", "Vector3 *|scene::Vector3 *|six::Vector3 *|math::linear::VectorN< 3,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__poly__OneDT_double_t = {"_p_math__poly__OneDT_double_t", "six::Poly1D *|math::poly::OneD< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t = {"_p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t", "six::PolyXYZ *|math::poly::OneD< math::linear::VectorN< 3,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__poly__TwoDT_double_t = {"_p_math__poly__TwoDT_double_t", "six::Poly2D *|math::poly::TwoD< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t", "mem::ScopedCloneablePtr< six::sicd::AreaDirectionParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t", "mem::ScopedCloneablePtr< six::sicd::AreaPlane > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__Area_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__Area_t", "mem::ScopedCloneablePtr< six::sicd::Area > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t", "mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t", "mem::ScopedCloneablePtr< six::sicd::CollectionInformation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t", "mem::ScopedCloneablePtr< six::sicd::DirectionParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t", "mem::ScopedCloneablePtr< six::sicd::GeoData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t", "mem::ScopedCloneablePtr< six::sicd::GeoInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__Grid_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__Grid_t", "mem::ScopedCloneablePtr< six::sicd::Grid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t", "mem::ScopedCloneablePtr< six::sicd::ImageCreation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t", "mem::ScopedCloneablePtr< six::sicd::ImageData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__PFA_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__PFA_t", "mem::ScopedCloneablePtr< six::sicd::PFA > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__Position_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__Position_t", "mem::ScopedCloneablePtr< six::sicd::Position > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t", "mem::ScopedCloneablePtr< six::sicd::RadarCollection > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__Segment_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__Segment_t", "mem::ScopedCloneablePtr< six::sicd::Segment > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t", "mem::ScopedCloneablePtr< six::sicd::Timeline > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t", "mem::ScopedCloneablePtr< six::sicd::TxStep > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t = {"_p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t", "mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__Components_t = {"_p_mem__ScopedCopyablePtrT_six__Components_t", "mem::ScopedCopyablePtr< six::Components > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t = {"_p_mem__ScopedCopyablePtrT_six__CompositeSCP_t", "mem::ScopedCopyablePtr< six::CompositeSCP > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t = {"_p_mem__ScopedCopyablePtrT_six__CorrCoefs_t", "mem::ScopedCopyablePtr< six::CorrCoefs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t = {"_p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t", "mem::ScopedCopyablePtr< six::ErrorStatistics > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__IonoError_t = {"_p_mem__ScopedCopyablePtrT_six__IonoError_t", "mem::ScopedCopyablePtr< six::IonoError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__PosVelError_t = {"_p_mem__ScopedCopyablePtrT_six__PosVelError_t", "mem::ScopedCopyablePtr< six::PosVelError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__RadarSensor_t = {"_p_mem__ScopedCopyablePtrT_six__RadarSensor_t", "mem::ScopedCopyablePtr< six::RadarSensor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__Radiometric_t = {"_p_mem__ScopedCopyablePtrT_six__Radiometric_t", "mem::ScopedCopyablePtr< six::Radiometric > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__TropoError_t = {"_p_mem__ScopedCopyablePtrT_six__TropoError_t", "mem::ScopedCopyablePtr< six::TropoError > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t", "mem::ScopedCopyablePtr< six::sicd::AntennaParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t", "mem::ScopedCopyablePtr< six::sicd::Antenna > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t", "mem::ScopedCopyablePtr< six::sicd::AreaDirectionParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t", "mem::ScopedCopyablePtr< six::sicd::Distortion > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t", "mem::ScopedCopyablePtr< six::sicd::ElectricalBoresight > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t", "mem::ScopedCopyablePtr< six::sicd::GainAndPhasePolys > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t", "mem::ScopedCopyablePtr< six::sicd::HalfPowerBeamwidths > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__INCA_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__INCA_t", "mem::ScopedCopyablePtr< six::sicd::INCA > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t", "mem::ScopedCopyablePtr< six::sicd::ImageFormation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t", "mem::ScopedCopyablePtr< six::sicd::MatchInformation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t", "mem::ScopedCopyablePtr< six::sicd::PolarizationCalibration > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t", "mem::ScopedCopyablePtr< six::sicd::RMAT > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMA_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__RMA_t", "mem::ScopedCopyablePtr< six::sicd::RMA > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t", "mem::ScopedCopyablePtr< six::sicd::RMCR > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t", "mem::ScopedCopyablePtr< six::sicd::RcvChannelProcessed > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t", "mem::ScopedCopyablePtr< six::sicd::RgAzComp > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t", "mem::ScopedCopyablePtr< six::sicd::SCPCOA > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t = {"_p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t", "mem::ScopedCopyablePtr< six::sicd::WeightType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nitf__DateTime = {"_p_nitf__DateTime", "nitf::DateTime *|six::DateTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__AngleMagnitude = {"_p_scene__AngleMagnitude", "scene::AngleMagnitude *|six::AngleMagnitude *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__FrameType = {"_p_scene__FrameType", "scene::FrameType *|six::FrameType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__LatLon = {"_p_scene__LatLon", "scene::LatLon *|six::LatLon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__LatLonAlt = {"_p_scene__LatLonAlt", "scene::LatLonAlt *|six::LatLonAlt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__PlaneProjectionModel = {"_p_scene__PlaneProjectionModel", "scene::PlaneProjectionModel *|scene::XRGYCRProjectionModel *|scene::XCTYATProjectionModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__ProjectionModel = {"_p_scene__ProjectionModel", "scene::ProjectionModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scene__ProjectionModelWithImageVectors = {"_p_scene__ProjectionModelWithImageVectors", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_scene__RangeAzimProjectionModel = {"_p_scene__RangeAzimProjectionModel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_scene__RangeZeroProjectionModel = {"_p_scene__RangeZeroProjectionModel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_scene__GeodeticProjectionModel = {"_p_scene__GeodeticProjectionModel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_scene__SceneGeometry = {"_p_scene__SceneGeometry", "scene::SceneGeometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__AmplitudeTable = {"_p_six__AmplitudeTable", "six::AmplitudeTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__AppliedType = {"_p_six__AppliedType", "six::AppliedType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__AutofocusType = {"_p_six__AutofocusType", "six::AutofocusType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__BooleanType = {"_p_six__BooleanType", "six::BooleanType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Classification = {"_p_six__Classification", "six::Classification *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CollectType = {"_p_six__CollectType", "six::CollectType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ComplexImageGridType = {"_p_six__ComplexImageGridType", "six::ComplexImageGridType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ComplexImagePlaneType = {"_p_six__ComplexImagePlaneType", "six::ComplexImagePlaneType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Components = {"_p_six__Components", "six::Components *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CompositeSCP = {"_p_six__CompositeSCP", "six::CompositeSCP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CornersT_scene__LatLonAlt_t = {"_p_six__CornersT_scene__LatLonAlt_t", "six::Corners< scene::LatLonAlt > *|six::LatLonAltCorners *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__CornersT_scene__LatLon_t = {"_p_six__CornersT_scene__LatLon_t", "six::LatLonCorners *|six::Corners< scene::LatLon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Data = {"_p_six__Data", "six::Data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DataType = {"_p_six__DataType", "six::DataType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DecorrType = {"_p_six__DecorrType", "six::DecorrType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DemodType = {"_p_six__DemodType", "six::DemodType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__DualPolarizationType = {"_p_six__DualPolarizationType", "six::DualPolarizationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__EarthModelType = {"_p_six__EarthModelType", "six::EarthModelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ErrorStatistics = {"_p_six__ErrorStatistics", "six::ErrorStatistics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__FFTSign = {"_p_six__FFTSign", "six::FFTSign *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ImageBeamCompensationType = {"_p_six__ImageBeamCompensationType", "six::ImageBeamCompensationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ImageFormationType = {"_p_six__ImageFormationType", "six::ImageFormationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__IonoError = {"_p_six__IonoError", "six::IonoError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__LUT = {"_p_six__LUT", "six::LUT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__NoiseLevel = {"_p_six__NoiseLevel", "six::NoiseLevel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__OrientationType = {"_p_six__OrientationType", "six::OrientationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__PixelType = {"_p_six__PixelType", "six::PixelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__PolarizationSequenceType = {"_p_six__PolarizationSequenceType", "six::PolarizationSequenceType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__PolarizationType = {"_p_six__PolarizationType", "six::PolarizationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__PosVelError = {"_p_six__PosVelError", "six::PosVelError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__RMAlgoType = {"_p_six__RMAlgoType", "six::RMAlgoType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__RadarModeType = {"_p_six__RadarModeType", "six::RadarModeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__RadarSensor = {"_p_six__RadarSensor", "six::RadarSensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__Radiometric = {"_p_six__Radiometric", "six::Radiometric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__ReferencePoint = {"_p_six__ReferencePoint", "six::ReferencePoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__SCP = {"_p_six__SCP", "six::SCP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__SideOfTrackType = {"_p_six__SideOfTrackType", "six::SideOfTrackType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__SlowTimeBeamCompensationType = {"_p_six__SlowTimeBeamCompensationType", "six::SlowTimeBeamCompensationType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__TropoError = {"_p_six__TropoError", "six::TropoError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__XMLControl = {"_p_six__XMLControl", "six::XMLControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Antenna = {"_p_six__sicd__Antenna", "six::sicd::Antenna *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__AntennaParameters = {"_p_six__sicd__AntennaParameters", "six::sicd::AntennaParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Area = {"_p_six__sicd__Area", "six::sicd::Area *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__AreaDirectionParameters = {"_p_six__sicd__AreaDirectionParameters", "six::sicd::AreaDirectionParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__AreaPlane = {"_p_six__sicd__AreaPlane", "six::sicd::AreaPlane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__ChannelParameters = {"_p_six__sicd__ChannelParameters", "six::sicd::ChannelParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__CollectionInformation = {"_p_six__sicd__CollectionInformation", "six::sicd::CollectionInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__ComplexClassification = {"_p_six__sicd__ComplexClassification", "six::sicd::ComplexClassification *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__ComplexData = {"_p_six__sicd__ComplexData", "six::sicd::ComplexData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__ComplexXMLControl = {"_p_six__sicd__ComplexXMLControl", "six::sicd::ComplexXMLControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__DirectionParameters = {"_p_six__sicd__DirectionParameters", "six::sicd::DirectionParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Distortion = {"_p_six__sicd__Distortion", "six::sicd::Distortion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__ElectricalBoresight = {"_p_six__sicd__ElectricalBoresight", "six::sicd::ElectricalBoresight *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__GainAndPhasePolys = {"_p_six__sicd__GainAndPhasePolys", "six::sicd::GainAndPhasePolys *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__GeoData = {"_p_six__sicd__GeoData", "six::sicd::GeoData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__GeoInfo = {"_p_six__sicd__GeoInfo", "six::sicd::GeoInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Grid = {"_p_six__sicd__Grid", "six::sicd::Grid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__HalfPowerBeamwidths = {"_p_six__sicd__HalfPowerBeamwidths", "six::sicd::HalfPowerBeamwidths *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__INCA = {"_p_six__sicd__INCA", "six::sicd::INCA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__ImageCreation = {"_p_six__sicd__ImageCreation", "six::sicd::ImageCreation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__ImageData = {"_p_six__sicd__ImageData", "six::sicd::ImageData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__ImageFormation = {"_p_six__sicd__ImageFormation", "six::sicd::ImageFormation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__InterPulsePeriod = {"_p_six__sicd__InterPulsePeriod", "six::sicd::InterPulsePeriod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__MatchCollect = {"_p_six__sicd__MatchCollect", "six::sicd::MatchCollect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__MatchInformation = {"_p_six__sicd__MatchInformation", "six::sicd::MatchInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__MatchType = {"_p_six__sicd__MatchType", "six::sicd::MatchType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__PFA = {"_p_six__sicd__PFA", "six::sicd::PFA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__PolarizationCalibration = {"_p_six__sicd__PolarizationCalibration", "six::sicd::PolarizationCalibration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Position = {"_p_six__sicd__Position", "six::sicd::Position *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Processing = {"_p_six__sicd__Processing", "six::sicd::Processing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__RMA = {"_p_six__sicd__RMA", "six::sicd::RMA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__RMAT = {"_p_six__sicd__RMAT", "six::sicd::RMAT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__RMCR = {"_p_six__sicd__RMCR", "six::sicd::RMCR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__RadarCollection = {"_p_six__sicd__RadarCollection", "six::sicd::RadarCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__RcvAPC = {"_p_six__sicd__RcvAPC", "six::sicd::RcvAPC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__RcvChannelProcessed = {"_p_six__sicd__RcvChannelProcessed", "six::sicd::RcvChannelProcessed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__RgAzComp = {"_p_six__sicd__RgAzComp", "six::sicd::RgAzComp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__SCPCOA = {"_p_six__sicd__SCPCOA", "six::sicd::SCPCOA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Segment = {"_p_six__sicd__Segment", "six::sicd::Segment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__SlowTimeDeskew = {"_p_six__sicd__SlowTimeDeskew", "six::sicd::SlowTimeDeskew *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Timeline = {"_p_six__sicd__Timeline", "six::sicd::Timeline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__TimelineSet = {"_p_six__sicd__TimelineSet", "six::sicd::TimelineSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__TxStep = {"_p_six__sicd__TxStep", "six::sicd::TxStep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__Utilities = {"_p_six__sicd__Utilities", "six::sicd::Utilities *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__WaveformParameters = {"_p_six__sicd__WaveformParameters", "six::sicd::WaveformParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_six__sicd__WeightType = {"_p_six__sicd__WeightType", "six::sicd::WeightType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t = {"_p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t", "std::vector< Parameter,std::allocator< Parameter > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t = {"_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t", "std::vector< PolyXYZ > *|std::vector< PolyXYZ,std::allocator< PolyXYZ > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__allocator_type = {"_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__allocator_type", "std::vector< PolyXYZ >::allocator_type *|std::allocator< PolyXYZ > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type = {"_p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type", "std::vector< PolyXYZ >::value_type *|PolyXYZ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type = {"_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t = {"_p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t", "std::vector< six::PolyXYZ,std::allocator< six::PolyXYZ > > *|std::vector< math::poly::OneD< Vector3 >,std::allocator< math::poly::OneD< Vector3 > > > *|std::vector< math::poly::OneD< math::linear::VectorN< 3,double > >,std::allocator< math::poly::OneD< math::linear::VectorN< 3,double > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t", "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__allocator_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__allocator_type", "std::allocator< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type", "std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::value_type *|mem::ScopedCloneablePtr< six::sicd::ChannelParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t", "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo >,std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__allocator_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__allocator_type", "std::allocator< mem::ScopedCloneablePtr< six::sicd::GeoInfo > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type", "std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::value_type *|mem::ScopedCloneablePtr< six::sicd::GeoInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t", "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment >,std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__allocator_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__allocator_type", "std::allocator< mem::ScopedCloneablePtr< six::sicd::Segment > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type", "std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::value_type *|mem::ScopedCloneablePtr< six::sicd::Segment > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t", "std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep >,std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__allocator_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__allocator_type", "std::allocator< mem::ScopedCloneablePtr< six::sicd::TxStep > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type", "mem::ScopedCloneablePtr< six::sicd::TxStep > *|std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t", "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters >,std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__allocator_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__allocator_type", "std::allocator< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > > *|std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type = {"_p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type", "std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::value_type *|mem::ScopedCloneablePtr< six::sicd::WaveformParameters > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t = {"_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t", "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType >,std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > > *|std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__allocator_type = {"_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__allocator_type", "std::allocator< mem::ScopedCopyablePtr< six::sicd::MatchType > > *|std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type = {"_p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type", "std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type *|mem::ScopedCopyablePtr< six::sicd::MatchType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t = {"_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t", "std::vector< six::LatLon,std::allocator< six::LatLon > > *|std::vector< scene::LatLon,std::allocator< scene::LatLon > > *|std::vector< scene::LatLon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__allocator_type = {"_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__allocator_type", "std::vector< scene::LatLon >::allocator_type *|std::allocator< scene::LatLon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type = {"_p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type", "std::vector< scene::LatLon >::value_type *|scene::LatLon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t = {"_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t", "std::vector< six::sicd::MatchCollect,std::allocator< six::sicd::MatchCollect > > *|std::vector< six::sicd::MatchCollect > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__allocator_type = {"_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__allocator_type", "std::vector< six::sicd::MatchCollect >::allocator_type *|std::allocator< six::sicd::MatchCollect > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type = {"_p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type", "std::vector< six::sicd::MatchCollect >::value_type *|six::sicd::MatchCollect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t = {"_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t", "std::vector< six::sicd::Processing,std::allocator< six::sicd::Processing > > *|std::vector< six::sicd::Processing > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__allocator_type = {"_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__allocator_type", "std::vector< six::sicd::Processing >::allocator_type *|std::allocator< six::sicd::Processing > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type = {"_p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type", "std::vector< six::sicd::Processing >::value_type *|six::sicd::Processing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t = {"_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t", "std::vector< six::sicd::TimelineSet *,std::allocator< six::sicd::TimelineSet * > > *|std::vector< six::sicd::TimelineSet * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__allocator_type = {"_p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__allocator_type", "std::allocator< six::sicd::TimelineSet * > *|std::vector< six::sicd::TimelineSet * >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t = {"_p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t", "std::vector< six::RowColInt,std::allocator< six::RowColInt > > *|std::vector< types::RowCol< sys::SSize_T >,std::allocator< types::RowCol< sys::SSize_T > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__PySwigIterator = {"_p_swig__PySwigIterator", "swig::PySwigIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RowColT_double_t = {"_p_types__RowColT_double_t", "six::RowColDouble *|types::RowCol< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RowColT_math__poly__TwoDT_double_t_t = {"_p_types__RowColT_math__poly__TwoDT_double_t_t", "types::RowCol< math::poly::TwoD< double > > *|six::RowColPoly2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RowColT_scene__LatLon_t = {"_p_types__RowColT_scene__LatLon_t", "six::RowColLatLon *|types::RowCol< scene::LatLon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_types__RowColT_sys__SSize_T_t = {"_p_types__RowColT_sys__SSize_T_t", "types::RowCol< sys::SSize_T > *|six::RowColInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|six::UByte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type = {"_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type", "std::vector< six::sicd::TimelineSet * >::value_type|six::sicd::TimelineSet *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Like_T,
  &_swigt__p_ParameterIter,
  &_swigt__p_ParameterMap,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_except__Context,
  &_swigt__p_except__NullPointerReferenceException,
  &_swigt__p_logging__Logger,
  &_swigt__p_math__linear__VectorNT_2_double_t,
  &_swigt__p_math__linear__VectorNT_3_double_t,
  &_swigt__p_math__poly__OneDT_double_t,
  &_swigt__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t,
  &_swigt__p_math__poly__TwoDT_double_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Area_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Grid_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__PFA_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Position_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Segment_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t,
  &_swigt__p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__Components_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__IonoError_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__PosVelError_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__RadarSensor_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__Radiometric_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__TropoError_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__INCA_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMA_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t,
  &_swigt__p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t,
  &_swigt__p_nitf__DateTime,
  &_swigt__p_p_PyObject,
  &_swigt__p_reference,
  &_swigt__p_scene__AngleMagnitude,
  &_swigt__p_scene__FrameType,
  &_swigt__p_scene__GeodeticProjectionModel,
  &_swigt__p_scene__LatLon,
  &_swigt__p_scene__LatLonAlt,
  &_swigt__p_scene__PlaneProjectionModel,
  &_swigt__p_scene__ProjectionModel,
  &_swigt__p_scene__ProjectionModelWithImageVectors,
  &_swigt__p_scene__RangeAzimProjectionModel,
  &_swigt__p_scene__RangeZeroProjectionModel,
  &_swigt__p_scene__SceneGeometry,
  &_swigt__p_six__AmplitudeTable,
  &_swigt__p_six__AppliedType,
  &_swigt__p_six__AutofocusType,
  &_swigt__p_six__BooleanType,
  &_swigt__p_six__Classification,
  &_swigt__p_six__CollectType,
  &_swigt__p_six__ComplexImageGridType,
  &_swigt__p_six__ComplexImagePlaneType,
  &_swigt__p_six__Components,
  &_swigt__p_six__CompositeSCP,
  &_swigt__p_six__CornersT_scene__LatLonAlt_t,
  &_swigt__p_six__CornersT_scene__LatLon_t,
  &_swigt__p_six__Data,
  &_swigt__p_six__DataType,
  &_swigt__p_six__DecorrType,
  &_swigt__p_six__DemodType,
  &_swigt__p_six__DualPolarizationType,
  &_swigt__p_six__EarthModelType,
  &_swigt__p_six__ErrorStatistics,
  &_swigt__p_six__FFTSign,
  &_swigt__p_six__ImageBeamCompensationType,
  &_swigt__p_six__ImageFormationType,
  &_swigt__p_six__IonoError,
  &_swigt__p_six__LUT,
  &_swigt__p_six__NoiseLevel,
  &_swigt__p_six__OrientationType,
  &_swigt__p_six__PixelType,
  &_swigt__p_six__PolarizationSequenceType,
  &_swigt__p_six__PolarizationType,
  &_swigt__p_six__PosVelError,
  &_swigt__p_six__RMAlgoType,
  &_swigt__p_six__RadarModeType,
  &_swigt__p_six__RadarSensor,
  &_swigt__p_six__Radiometric,
  &_swigt__p_six__ReferencePoint,
  &_swigt__p_six__SCP,
  &_swigt__p_six__SideOfTrackType,
  &_swigt__p_six__SlowTimeBeamCompensationType,
  &_swigt__p_six__TropoError,
  &_swigt__p_six__XMLControl,
  &_swigt__p_six__sicd__Antenna,
  &_swigt__p_six__sicd__AntennaParameters,
  &_swigt__p_six__sicd__Area,
  &_swigt__p_six__sicd__AreaDirectionParameters,
  &_swigt__p_six__sicd__AreaPlane,
  &_swigt__p_six__sicd__ChannelParameters,
  &_swigt__p_six__sicd__CollectionInformation,
  &_swigt__p_six__sicd__ComplexClassification,
  &_swigt__p_six__sicd__ComplexData,
  &_swigt__p_six__sicd__ComplexXMLControl,
  &_swigt__p_six__sicd__DirectionParameters,
  &_swigt__p_six__sicd__Distortion,
  &_swigt__p_six__sicd__ElectricalBoresight,
  &_swigt__p_six__sicd__GainAndPhasePolys,
  &_swigt__p_six__sicd__GeoData,
  &_swigt__p_six__sicd__GeoInfo,
  &_swigt__p_six__sicd__Grid,
  &_swigt__p_six__sicd__HalfPowerBeamwidths,
  &_swigt__p_six__sicd__INCA,
  &_swigt__p_six__sicd__ImageCreation,
  &_swigt__p_six__sicd__ImageData,
  &_swigt__p_six__sicd__ImageFormation,
  &_swigt__p_six__sicd__InterPulsePeriod,
  &_swigt__p_six__sicd__MatchCollect,
  &_swigt__p_six__sicd__MatchInformation,
  &_swigt__p_six__sicd__MatchType,
  &_swigt__p_six__sicd__PFA,
  &_swigt__p_six__sicd__PolarizationCalibration,
  &_swigt__p_six__sicd__Position,
  &_swigt__p_six__sicd__Processing,
  &_swigt__p_six__sicd__RMA,
  &_swigt__p_six__sicd__RMAT,
  &_swigt__p_six__sicd__RMCR,
  &_swigt__p_six__sicd__RadarCollection,
  &_swigt__p_six__sicd__RcvAPC,
  &_swigt__p_six__sicd__RcvChannelProcessed,
  &_swigt__p_six__sicd__RgAzComp,
  &_swigt__p_six__sicd__SCPCOA,
  &_swigt__p_six__sicd__Segment,
  &_swigt__p_six__sicd__SlowTimeDeskew,
  &_swigt__p_six__sicd__Timeline,
  &_swigt__p_six__sicd__TimelineSet,
  &_swigt__p_six__sicd__TxStep,
  &_swigt__p_six__sicd__Utilities,
  &_swigt__p_six__sicd__WaveformParameters,
  &_swigt__p_six__sicd__WeightType,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ostream,
  &_swigt__p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t,
  &_swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t,
  &_swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__allocator_type,
  &_swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type,
  &_swigt__p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,
  &_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t,
  &_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,
  &_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t,
  &_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__allocator_type,
  &_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,
  &_swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t,
  &_swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__allocator_type,
  &_swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,
  &_swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t,
  &_swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__allocator_type,
  &_swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,
  &_swigt__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t,
  &_swigt__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t,
  &_swigt__p_swig__PySwigIterator,
  &_swigt__p_types__RowColT_double_t,
  &_swigt__p_types__RowColT_math__poly__TwoDT_double_t_t,
  &_swigt__p_types__RowColT_scene__LatLon_t,
  &_swigt__p_types__RowColT_sys__SSize_T_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_value_type,
  &_swigt__std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type,
};

static swig_cast_info _swigc__p_Like_T[] = {  {&_swigt__p_Like_T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterIter[] = {  {&_swigt__p_ParameterIter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterMap[] = {  {&_swigt__p_ParameterMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__Context[] = {  {&_swigt__p_except__Context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_except__NullPointerReferenceException[] = {  {&_swigt__p_except__NullPointerReferenceException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_logging__Logger[] = {  {&_swigt__p_logging__Logger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__linear__VectorNT_2_double_t[] = {  {&_swigt__p_math__linear__VectorNT_2_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__linear__VectorNT_3_double_t[] = {  {&_swigt__p_math__linear__VectorNT_3_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__poly__OneDT_double_t[] = {  {&_swigt__p_math__poly__OneDT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t[] = {  {&_swigt__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__poly__TwoDT_double_t[] = {  {&_swigt__p_math__poly__TwoDT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Area_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Area_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0, 0, 0},  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Grid_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Grid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__PFA_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__PFA_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Position_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Position_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Segment_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0, 0, 0},  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0, 0, 0},  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__Components_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__Components_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__IonoError_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__IonoError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__PosVelError_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__PosVelError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__RadarSensor_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__RadarSensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__Radiometric_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__Radiometric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__TropoError_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__TropoError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__INCA_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__INCA_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RMA_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMA_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t[] = {  {&_swigt__p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nitf__DateTime[] = {  {&_swigt__p_nitf__DateTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__AngleMagnitude[] = {  {&_swigt__p_scene__AngleMagnitude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__FrameType[] = {  {&_swigt__p_scene__FrameType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__LatLon[] = {  {&_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0, 0, 0},  {&_swigt__p_scene__LatLon, 0, 0, 0},  {&_swigt__p_scene__LatLonAlt, _p_scene__LatLonAltTo_p_scene__LatLon, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__LatLonAlt[] = {  {&_swigt__p_scene__LatLonAlt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__PlaneProjectionModel[] = {  {&_swigt__p_scene__PlaneProjectionModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__ProjectionModelWithImageVectors[] = {{&_swigt__p_scene__ProjectionModelWithImageVectors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__RangeAzimProjectionModel[] = {{&_swigt__p_scene__RangeAzimProjectionModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__RangeZeroProjectionModel[] = {{&_swigt__p_scene__RangeZeroProjectionModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__GeodeticProjectionModel[] = {{&_swigt__p_scene__GeodeticProjectionModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__ProjectionModel[] = {  {&_swigt__p_scene__ProjectionModelWithImageVectors, _p_scene__ProjectionModelWithImageVectorsTo_p_scene__ProjectionModel, 0, 0},  {&_swigt__p_scene__ProjectionModel, 0, 0, 0},  {&_swigt__p_scene__RangeAzimProjectionModel, _p_scene__RangeAzimProjectionModelTo_p_scene__ProjectionModel, 0, 0},  {&_swigt__p_scene__RangeZeroProjectionModel, _p_scene__RangeZeroProjectionModelTo_p_scene__ProjectionModel, 0, 0},  {&_swigt__p_scene__PlaneProjectionModel, _p_scene__PlaneProjectionModelTo_p_scene__ProjectionModel, 0, 0},  {&_swigt__p_scene__GeodeticProjectionModel, _p_scene__GeodeticProjectionModelTo_p_scene__ProjectionModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scene__SceneGeometry[] = {  {&_swigt__p_scene__SceneGeometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__AmplitudeTable[] = {  {&_swigt__p_six__AmplitudeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__AppliedType[] = {  {&_swigt__p_six__AppliedType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__AutofocusType[] = {  {&_swigt__p_six__AutofocusType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__BooleanType[] = {  {&_swigt__p_six__BooleanType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Classification[] = {  {&_swigt__p_six__Classification, 0, 0, 0},  {&_swigt__p_six__sicd__ComplexClassification, _p_six__sicd__ComplexClassificationTo_p_six__Classification, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CollectType[] = {  {&_swigt__p_six__CollectType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ComplexImageGridType[] = {  {&_swigt__p_six__ComplexImageGridType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ComplexImagePlaneType[] = {  {&_swigt__p_six__ComplexImagePlaneType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Components[] = {  {&_swigt__p_six__Components, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CompositeSCP[] = {  {&_swigt__p_six__CompositeSCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CornersT_scene__LatLonAlt_t[] = {  {&_swigt__p_six__CornersT_scene__LatLonAlt_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__CornersT_scene__LatLon_t[] = {  {&_swigt__p_six__CornersT_scene__LatLon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Data[] = {  {&_swigt__p_six__Data, 0, 0, 0},  {&_swigt__p_six__sicd__ComplexData, _p_six__sicd__ComplexDataTo_p_six__Data, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DataType[] = {  {&_swigt__p_six__DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DecorrType[] = {  {&_swigt__p_six__DecorrType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DemodType[] = {  {&_swigt__p_six__DemodType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__DualPolarizationType[] = {  {&_swigt__p_six__DualPolarizationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__EarthModelType[] = {  {&_swigt__p_six__EarthModelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ErrorStatistics[] = {  {&_swigt__p_six__ErrorStatistics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__FFTSign[] = {  {&_swigt__p_six__FFTSign, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ImageBeamCompensationType[] = {  {&_swigt__p_six__ImageBeamCompensationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ImageFormationType[] = {  {&_swigt__p_six__ImageFormationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__IonoError[] = {  {&_swigt__p_six__IonoError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__LUT[] = {  {&_swigt__p_six__LUT, 0, 0, 0},  {&_swigt__p_six__AmplitudeTable, _p_six__AmplitudeTableTo_p_six__LUT, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__NoiseLevel[] = {  {&_swigt__p_six__NoiseLevel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__OrientationType[] = {  {&_swigt__p_six__OrientationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__PixelType[] = {  {&_swigt__p_six__PixelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__PolarizationSequenceType[] = {  {&_swigt__p_six__PolarizationSequenceType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__PolarizationType[] = {  {&_swigt__p_six__PolarizationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__PosVelError[] = {  {&_swigt__p_six__PosVelError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__RMAlgoType[] = {  {&_swigt__p_six__RMAlgoType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__RadarModeType[] = {  {&_swigt__p_six__RadarModeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__RadarSensor[] = {  {&_swigt__p_six__RadarSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__Radiometric[] = {  {&_swigt__p_six__Radiometric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__ReferencePoint[] = {  {&_swigt__p_six__ReferencePoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__SCP[] = {  {&_swigt__p_six__SCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__SideOfTrackType[] = {  {&_swigt__p_six__SideOfTrackType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__SlowTimeBeamCompensationType[] = {  {&_swigt__p_six__SlowTimeBeamCompensationType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__TropoError[] = {  {&_swigt__p_six__TropoError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__XMLControl[] = {  {&_swigt__p_six__XMLControl, 0, 0, 0},  {&_swigt__p_six__sicd__ComplexXMLControl, _p_six__sicd__ComplexXMLControlTo_p_six__XMLControl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Antenna[] = {  {&_swigt__p_six__sicd__Antenna, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__AntennaParameters[] = {  {&_swigt__p_six__sicd__AntennaParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Area[] = {  {&_swigt__p_six__sicd__Area, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__AreaDirectionParameters[] = {  {&_swigt__p_six__sicd__AreaDirectionParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__AreaPlane[] = {  {&_swigt__p_six__sicd__AreaPlane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__ChannelParameters[] = {  {&_swigt__p_six__sicd__ChannelParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__CollectionInformation[] = {  {&_swigt__p_six__sicd__CollectionInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__ComplexClassification[] = {  {&_swigt__p_six__sicd__ComplexClassification, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__ComplexData[] = {  {&_swigt__p_six__sicd__ComplexData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__ComplexXMLControl[] = {  {&_swigt__p_six__sicd__ComplexXMLControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__DirectionParameters[] = {  {&_swigt__p_six__sicd__DirectionParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Distortion[] = {  {&_swigt__p_six__sicd__Distortion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__ElectricalBoresight[] = {  {&_swigt__p_six__sicd__ElectricalBoresight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__GainAndPhasePolys[] = {  {&_swigt__p_six__sicd__GainAndPhasePolys, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__GeoData[] = {  {&_swigt__p_six__sicd__GeoData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__GeoInfo[] = {  {&_swigt__p_six__sicd__GeoInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Grid[] = {  {&_swigt__p_six__sicd__Grid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__HalfPowerBeamwidths[] = {  {&_swigt__p_six__sicd__HalfPowerBeamwidths, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__INCA[] = {  {&_swigt__p_six__sicd__INCA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__ImageCreation[] = {  {&_swigt__p_six__sicd__ImageCreation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__ImageData[] = {  {&_swigt__p_six__sicd__ImageData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__ImageFormation[] = {  {&_swigt__p_six__sicd__ImageFormation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__InterPulsePeriod[] = {  {&_swigt__p_six__sicd__InterPulsePeriod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__MatchCollect[] = {  {&_swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0, 0, 0},  {&_swigt__p_six__sicd__MatchCollect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__MatchInformation[] = {  {&_swigt__p_six__sicd__MatchInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__MatchType[] = {  {&_swigt__p_six__sicd__MatchType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__PFA[] = {  {&_swigt__p_six__sicd__PFA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__PolarizationCalibration[] = {  {&_swigt__p_six__sicd__PolarizationCalibration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Position[] = {  {&_swigt__p_six__sicd__Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Processing[] = {  {&_swigt__p_six__sicd__Processing, 0, 0, 0},  {&_swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__RMA[] = {  {&_swigt__p_six__sicd__RMA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__RMAT[] = {  {&_swigt__p_six__sicd__RMAT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__RMCR[] = {  {&_swigt__p_six__sicd__RMCR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__RadarCollection[] = {  {&_swigt__p_six__sicd__RadarCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__RcvAPC[] = {  {&_swigt__p_six__sicd__RcvAPC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__RcvChannelProcessed[] = {  {&_swigt__p_six__sicd__RcvChannelProcessed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__RgAzComp[] = {  {&_swigt__p_six__sicd__RgAzComp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__SCPCOA[] = {  {&_swigt__p_six__sicd__SCPCOA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Segment[] = {  {&_swigt__p_six__sicd__Segment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__SlowTimeDeskew[] = {  {&_swigt__p_six__sicd__SlowTimeDeskew, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Timeline[] = {  {&_swigt__p_six__sicd__Timeline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__TimelineSet[] = {  {&_swigt__p_six__sicd__TimelineSet, 0, 0, 0},  {&_swigt__std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__TxStep[] = {  {&_swigt__p_six__sicd__TxStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__Utilities[] = {  {&_swigt__p_six__sicd__Utilities, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__WaveformParameters[] = {  {&_swigt__p_six__sicd__WaveformParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_six__sicd__WeightType[] = {  {&_swigt__p_six__sicd__WeightType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t[] = {  {&_swigt__p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t[] = {  {&_swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type[] = {  {&_swigt__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t[] = {  {&_swigt__p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__Segment_t, 0, 0, 0},  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type[] = {  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t, 0, 0, 0},  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t[] = {  {&_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type[] = {  {&_swigt__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t[] = {  {&_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type[] = {  {&_swigt__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type, 0, 0, 0},  {&_swigt__p_scene__LatLon, 0, 0, 0},  {&_swigt__p_scene__LatLonAlt, _p_scene__LatLonAltTo_p_scene__LatLon, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t[] = {  {&_swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type[] = {  {&_swigt__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type, 0, 0, 0},  {&_swigt__p_six__sicd__MatchCollect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t[] = {  {&_swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type[] = {  {&_swigt__p_six__sicd__Processing, 0, 0, 0},  {&_swigt__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t[] = {  {&_swigt__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t[] = {  {&_swigt__p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__PySwigIterator[] = {  {&_swigt__p_swig__PySwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RowColT_double_t[] = {  {&_swigt__p_types__RowColT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RowColT_math__poly__TwoDT_double_t_t[] = {  {&_swigt__p_types__RowColT_math__poly__TwoDT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RowColT_scene__LatLon_t[] = {  {&_swigt__p_types__RowColT_scene__LatLon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_types__RowColT_sys__SSize_T_t[] = {  {&_swigt__p_types__RowColT_sys__SSize_T_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type[] = {  {&_swigt__p_six__sicd__TimelineSet, 0, 0, 0},  {&_swigt__std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Like_T,
  _swigc__p_ParameterIter,
  _swigc__p_ParameterMap,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_except__Context,
  _swigc__p_except__NullPointerReferenceException,
  _swigc__p_logging__Logger,
  _swigc__p_math__linear__VectorNT_2_double_t,
  _swigc__p_math__linear__VectorNT_3_double_t,
  _swigc__p_math__poly__OneDT_double_t,
  _swigc__p_math__poly__OneDT_math__linear__VectorNT_3_double_t_t,
  _swigc__p_math__poly__TwoDT_double_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__AreaDirectionParameters_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__AreaPlane_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Area_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__CollectionInformation_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__DirectionParameters_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__GeoData_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Grid_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__ImageCreation_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__ImageData_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__PFA_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Position_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__RadarCollection_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Segment_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__Timeline_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__TxStep_t,
  _swigc__p_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__Components_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__CompositeSCP_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__CorrCoefs_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__ErrorStatistics_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__IonoError_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__PosVelError_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__RadarSensor_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__Radiometric_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__TropoError_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__AntennaParameters_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__Antenna_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__AreaDirectionParameters_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__Distortion_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__ElectricalBoresight_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__GainAndPhasePolys_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__HalfPowerBeamwidths_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__INCA_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__ImageFormation_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__MatchInformation_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__PolarizationCalibration_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RMAT_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RMA_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RMCR_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RcvChannelProcessed_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__RgAzComp_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__SCPCOA_t,
  _swigc__p_mem__ScopedCopyablePtrT_six__sicd__WeightType_t,
  _swigc__p_nitf__DateTime,
  _swigc__p_p_PyObject,
  _swigc__p_reference,
  _swigc__p_scene__AngleMagnitude,
  _swigc__p_scene__FrameType,
  _swigc__p_scene__GeodeticProjectionModel,
  _swigc__p_scene__LatLon,
  _swigc__p_scene__LatLonAlt,
  _swigc__p_scene__PlaneProjectionModel,
  _swigc__p_scene__ProjectionModel,
  _swigc__p_scene__ProjectionModelWithImageVectors,
  _swigc__p_scene__RangeAzimProjectionModel,
  _swigc__p_scene__RangeZeroProjectionModel,
  _swigc__p_scene__SceneGeometry,
  _swigc__p_six__AmplitudeTable,
  _swigc__p_six__AppliedType,
  _swigc__p_six__AutofocusType,
  _swigc__p_six__BooleanType,
  _swigc__p_six__Classification,
  _swigc__p_six__CollectType,
  _swigc__p_six__ComplexImageGridType,
  _swigc__p_six__ComplexImagePlaneType,
  _swigc__p_six__Components,
  _swigc__p_six__CompositeSCP,
  _swigc__p_six__CornersT_scene__LatLonAlt_t,
  _swigc__p_six__CornersT_scene__LatLon_t,
  _swigc__p_six__Data,
  _swigc__p_six__DataType,
  _swigc__p_six__DecorrType,
  _swigc__p_six__DemodType,
  _swigc__p_six__DualPolarizationType,
  _swigc__p_six__EarthModelType,
  _swigc__p_six__ErrorStatistics,
  _swigc__p_six__FFTSign,
  _swigc__p_six__ImageBeamCompensationType,
  _swigc__p_six__ImageFormationType,
  _swigc__p_six__IonoError,
  _swigc__p_six__LUT,
  _swigc__p_six__NoiseLevel,
  _swigc__p_six__OrientationType,
  _swigc__p_six__PixelType,
  _swigc__p_six__PolarizationSequenceType,
  _swigc__p_six__PolarizationType,
  _swigc__p_six__PosVelError,
  _swigc__p_six__RMAlgoType,
  _swigc__p_six__RadarModeType,
  _swigc__p_six__RadarSensor,
  _swigc__p_six__Radiometric,
  _swigc__p_six__ReferencePoint,
  _swigc__p_six__SCP,
  _swigc__p_six__SideOfTrackType,
  _swigc__p_six__SlowTimeBeamCompensationType,
  _swigc__p_six__TropoError,
  _swigc__p_six__XMLControl,
  _swigc__p_six__sicd__Antenna,
  _swigc__p_six__sicd__AntennaParameters,
  _swigc__p_six__sicd__Area,
  _swigc__p_six__sicd__AreaDirectionParameters,
  _swigc__p_six__sicd__AreaPlane,
  _swigc__p_six__sicd__ChannelParameters,
  _swigc__p_six__sicd__CollectionInformation,
  _swigc__p_six__sicd__ComplexClassification,
  _swigc__p_six__sicd__ComplexData,
  _swigc__p_six__sicd__ComplexXMLControl,
  _swigc__p_six__sicd__DirectionParameters,
  _swigc__p_six__sicd__Distortion,
  _swigc__p_six__sicd__ElectricalBoresight,
  _swigc__p_six__sicd__GainAndPhasePolys,
  _swigc__p_six__sicd__GeoData,
  _swigc__p_six__sicd__GeoInfo,
  _swigc__p_six__sicd__Grid,
  _swigc__p_six__sicd__HalfPowerBeamwidths,
  _swigc__p_six__sicd__INCA,
  _swigc__p_six__sicd__ImageCreation,
  _swigc__p_six__sicd__ImageData,
  _swigc__p_six__sicd__ImageFormation,
  _swigc__p_six__sicd__InterPulsePeriod,
  _swigc__p_six__sicd__MatchCollect,
  _swigc__p_six__sicd__MatchInformation,
  _swigc__p_six__sicd__MatchType,
  _swigc__p_six__sicd__PFA,
  _swigc__p_six__sicd__PolarizationCalibration,
  _swigc__p_six__sicd__Position,
  _swigc__p_six__sicd__Processing,
  _swigc__p_six__sicd__RMA,
  _swigc__p_six__sicd__RMAT,
  _swigc__p_six__sicd__RMCR,
  _swigc__p_six__sicd__RadarCollection,
  _swigc__p_six__sicd__RcvAPC,
  _swigc__p_six__sicd__RcvChannelProcessed,
  _swigc__p_six__sicd__RgAzComp,
  _swigc__p_six__sicd__SCPCOA,
  _swigc__p_six__sicd__Segment,
  _swigc__p_six__sicd__SlowTimeDeskew,
  _swigc__p_six__sicd__Timeline,
  _swigc__p_six__sicd__TimelineSet,
  _swigc__p_six__sicd__TxStep,
  _swigc__p_six__sicd__Utilities,
  _swigc__p_six__sicd__WaveformParameters,
  _swigc__p_six__sicd__WeightType,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ostream,
  _swigc__p_std__vectorT_Parameter_std__allocatorT_Parameter_t_t,
  _swigc__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t,
  _swigc__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__allocator_type,
  _swigc__p_std__vectorT_PolyXYZ_std__allocatorT_PolyXYZ_t_t__value_type,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type,
  _swigc__p_std__vectorT_math__poly__OneDT_Vector3_t_std__allocatorT_math__poly__OneDT_Vector3_t_t_t,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__allocator_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__ChannelParameters_t_t_t__value_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__allocator_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__GeoInfo_t_t_t__value_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__allocator_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__Segment_t_t_t__value_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__allocator_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__TxStep_t_t_t__value_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__allocator_type,
  _swigc__p_std__vectorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_std__allocatorT_mem__ScopedCloneablePtrT_six__sicd__WaveformParameters_t_t_t__value_type,
  _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t,
  _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__allocator_type,
  _swigc__p_std__vectorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_std__allocatorT_mem__ScopedCopyablePtrT_six__sicd__MatchType_t_t_t__value_type,
  _swigc__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t,
  _swigc__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__allocator_type,
  _swigc__p_std__vectorT_scene__LatLon_std__allocatorT_scene__LatLon_t_t__value_type,
  _swigc__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t,
  _swigc__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__allocator_type,
  _swigc__p_std__vectorT_six__sicd__MatchCollect_std__allocatorT_six__sicd__MatchCollect_t_t__value_type,
  _swigc__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t,
  _swigc__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__allocator_type,
  _swigc__p_std__vectorT_six__sicd__Processing_std__allocatorT_six__sicd__Processing_t_t__value_type,
  _swigc__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t,
  _swigc__p_std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__allocator_type,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_types__RowColT_sys__SSize_T_t_std__allocatorT_types__RowColT_sys__SSize_T_t_t_t,
  _swigc__p_swig__PySwigIterator,
  _swigc__p_types__RowColT_double_t,
  _swigc__p_types__RowColT_math__poly__TwoDT_double_t_t,
  _swigc__p_types__RowColT_scene__LatLon_t,
  _swigc__p_types__RowColT_sys__SSize_T_t,
  _swigc__p_unsigned_char,
  _swigc__p_value_type,
  _swigc__std__vectorT_six__sicd__TimelineSet_p_std__allocatorT_six__sicd__TimelineSet_p_t_t__value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
}

