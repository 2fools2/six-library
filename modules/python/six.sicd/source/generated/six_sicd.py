# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _six_sicd
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _six_sicd.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _six_sicd.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _six_sicd.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _six_sicd.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _six_sicd.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _six_sicd.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _six_sicd.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _six_sicd.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _six_sicd.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _six_sicd.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _six_sicd.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _six_sicd.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _six_sicd.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _six_sicd.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _six_sicd.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _six_sicd.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import math_poly
import math_linear
import coda_except
import six
import scene
import coda_types
import coda_io
import mem

def getComplexData(*args):
  """getComplexData(string sicdPathname, VectorString schemaPaths) -> ComplexData"""
  return _six_sicd.getComplexData(*args)
class ComplexClassification(six.Classification):
    """Proxy of C++ ComplexClassification class"""
    __swig_setmethods__ = {}
    for _s in [six.Classification]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexClassification, name, value)
    __swig_getmethods__ = {}
    for _s in [six.Classification]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexClassification, name)
    __repr__ = _swig_repr
    def getLevel(*args):
        """getLevel(self) -> string"""
        return _six_sicd.ComplexClassification_getLevel(*args)

    def put(*args):
        """put(self, std::ostream os) -> std::ostream"""
        return _six_sicd.ComplexClassification_put(*args)

    __swig_setmethods__["level"] = _six_sicd.ComplexClassification_level_set
    __swig_getmethods__["level"] = _six_sicd.ComplexClassification_level_get
    if _newclass:level = _swig_property(_six_sicd.ComplexClassification_level_get, _six_sicd.ComplexClassification_level_set)
    def __init__(self, *args): 
        """__init__(self) -> ComplexClassification"""
        this = _six_sicd.new_ComplexClassification(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexClassification
    __del__ = lambda self : None;
ComplexClassification_swigregister = _six_sicd.ComplexClassification_swigregister
ComplexClassification_swigregister(ComplexClassification)

class CollectionInformation(_object):
    """Proxy of C++ CollectionInformation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionInformation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collectorName"] = _six_sicd.CollectionInformation_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.CollectionInformation_collectorName_get
    if _newclass:collectorName = _swig_property(_six_sicd.CollectionInformation_collectorName_get, _six_sicd.CollectionInformation_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.CollectionInformation_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.CollectionInformation_illuminatorName_get
    if _newclass:illuminatorName = _swig_property(_six_sicd.CollectionInformation_illuminatorName_get, _six_sicd.CollectionInformation_illuminatorName_set)
    __swig_setmethods__["coreName"] = _six_sicd.CollectionInformation_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.CollectionInformation_coreName_get
    if _newclass:coreName = _swig_property(_six_sicd.CollectionInformation_coreName_get, _six_sicd.CollectionInformation_coreName_set)
    __swig_setmethods__["collectType"] = _six_sicd.CollectionInformation_collectType_set
    __swig_getmethods__["collectType"] = _six_sicd.CollectionInformation_collectType_get
    if _newclass:collectType = _swig_property(_six_sicd.CollectionInformation_collectType_get, _six_sicd.CollectionInformation_collectType_set)
    __swig_setmethods__["radarMode"] = _six_sicd.CollectionInformation_radarMode_set
    __swig_getmethods__["radarMode"] = _six_sicd.CollectionInformation_radarMode_get
    if _newclass:radarMode = _swig_property(_six_sicd.CollectionInformation_radarMode_get, _six_sicd.CollectionInformation_radarMode_set)
    __swig_setmethods__["radarModeID"] = _six_sicd.CollectionInformation_radarModeID_set
    __swig_getmethods__["radarModeID"] = _six_sicd.CollectionInformation_radarModeID_get
    if _newclass:radarModeID = _swig_property(_six_sicd.CollectionInformation_radarModeID_get, _six_sicd.CollectionInformation_radarModeID_set)
    __swig_setmethods__["classification"] = _six_sicd.CollectionInformation_classification_set
    __swig_getmethods__["classification"] = _six_sicd.CollectionInformation_classification_get
    if _newclass:classification = _swig_property(_six_sicd.CollectionInformation_classification_get, _six_sicd.CollectionInformation_classification_set)
    __swig_setmethods__["countryCodes"] = _six_sicd.CollectionInformation_countryCodes_set
    __swig_getmethods__["countryCodes"] = _six_sicd.CollectionInformation_countryCodes_get
    if _newclass:countryCodes = _swig_property(_six_sicd.CollectionInformation_countryCodes_get, _six_sicd.CollectionInformation_countryCodes_set)
    __swig_setmethods__["parameters"] = _six_sicd.CollectionInformation_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.CollectionInformation_parameters_get
    if _newclass:parameters = _swig_property(_six_sicd.CollectionInformation_parameters_get, _six_sicd.CollectionInformation_parameters_set)
    def __init__(self, *args): 
        """__init__(self) -> CollectionInformation"""
        this = _six_sicd.new_CollectionInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_CollectionInformation
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> CollectionInformation"""
        return _six_sicd.CollectionInformation_clone(*args)

    def __eq__(*args):
        """__eq__(self, CollectionInformation other) -> bool"""
        return _six_sicd.CollectionInformation___eq__(*args)

    def __ne__(*args):
        """__ne__(self, CollectionInformation other) -> bool"""
        return _six_sicd.CollectionInformation___ne__(*args)

CollectionInformation_swigregister = _six_sicd.CollectionInformation_swigregister
CollectionInformation_swigregister(CollectionInformation)

class ImageCreation(_object):
    """Proxy of C++ ImageCreation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageCreation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageCreation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["application"] = _six_sicd.ImageCreation_application_set
    __swig_getmethods__["application"] = _six_sicd.ImageCreation_application_get
    if _newclass:application = _swig_property(_six_sicd.ImageCreation_application_get, _six_sicd.ImageCreation_application_set)
    __swig_setmethods__["dateTime"] = _six_sicd.ImageCreation_dateTime_set
    __swig_getmethods__["dateTime"] = _six_sicd.ImageCreation_dateTime_get
    if _newclass:dateTime = _swig_property(_six_sicd.ImageCreation_dateTime_get, _six_sicd.ImageCreation_dateTime_set)
    __swig_setmethods__["site"] = _six_sicd.ImageCreation_site_set
    __swig_getmethods__["site"] = _six_sicd.ImageCreation_site_get
    if _newclass:site = _swig_property(_six_sicd.ImageCreation_site_get, _six_sicd.ImageCreation_site_set)
    __swig_setmethods__["profile"] = _six_sicd.ImageCreation_profile_set
    __swig_getmethods__["profile"] = _six_sicd.ImageCreation_profile_get
    if _newclass:profile = _swig_property(_six_sicd.ImageCreation_profile_get, _six_sicd.ImageCreation_profile_set)
    def clone(*args):
        """clone(self) -> ImageCreation"""
        return _six_sicd.ImageCreation_clone(*args)

    def __init__(self, *args): 
        """__init__(self) -> ImageCreation"""
        this = _six_sicd.new_ImageCreation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_ImageCreation
    __del__ = lambda self : None;
ImageCreation_swigregister = _six_sicd.ImageCreation_swigregister
ImageCreation_swigregister(ImageCreation)

class ImageData(_object):
    """Proxy of C++ ImageData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ImageData"""
        this = _six_sicd.new_ImageData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_ImageData
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> ImageData"""
        return _six_sicd.ImageData_clone(*args)

    __swig_setmethods__["pixelType"] = _six_sicd.ImageData_pixelType_set
    __swig_getmethods__["pixelType"] = _six_sicd.ImageData_pixelType_get
    if _newclass:pixelType = _swig_property(_six_sicd.ImageData_pixelType_get, _six_sicd.ImageData_pixelType_set)
    __swig_setmethods__["amplitudeTable"] = _six_sicd.ImageData_amplitudeTable_set
    __swig_getmethods__["amplitudeTable"] = _six_sicd.ImageData_amplitudeTable_get
    if _newclass:amplitudeTable = _swig_property(_six_sicd.ImageData_amplitudeTable_get, _six_sicd.ImageData_amplitudeTable_set)
    __swig_setmethods__["numRows"] = _six_sicd.ImageData_numRows_set
    __swig_getmethods__["numRows"] = _six_sicd.ImageData_numRows_get
    if _newclass:numRows = _swig_property(_six_sicd.ImageData_numRows_get, _six_sicd.ImageData_numRows_set)
    __swig_setmethods__["numCols"] = _six_sicd.ImageData_numCols_set
    __swig_getmethods__["numCols"] = _six_sicd.ImageData_numCols_get
    if _newclass:numCols = _swig_property(_six_sicd.ImageData_numCols_get, _six_sicd.ImageData_numCols_set)
    __swig_setmethods__["firstRow"] = _six_sicd.ImageData_firstRow_set
    __swig_getmethods__["firstRow"] = _six_sicd.ImageData_firstRow_get
    if _newclass:firstRow = _swig_property(_six_sicd.ImageData_firstRow_get, _six_sicd.ImageData_firstRow_set)
    __swig_setmethods__["firstCol"] = _six_sicd.ImageData_firstCol_set
    __swig_getmethods__["firstCol"] = _six_sicd.ImageData_firstCol_get
    if _newclass:firstCol = _swig_property(_six_sicd.ImageData_firstCol_get, _six_sicd.ImageData_firstCol_set)
    __swig_setmethods__["fullImage"] = _six_sicd.ImageData_fullImage_set
    __swig_getmethods__["fullImage"] = _six_sicd.ImageData_fullImage_get
    if _newclass:fullImage = _swig_property(_six_sicd.ImageData_fullImage_get, _six_sicd.ImageData_fullImage_set)
    __swig_setmethods__["scpPixel"] = _six_sicd.ImageData_scpPixel_set
    __swig_getmethods__["scpPixel"] = _six_sicd.ImageData_scpPixel_get
    if _newclass:scpPixel = _swig_property(_six_sicd.ImageData_scpPixel_get, _six_sicd.ImageData_scpPixel_set)
    __swig_setmethods__["validData"] = _six_sicd.ImageData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ImageData_validData_get
    if _newclass:validData = _swig_property(_six_sicd.ImageData_validData_get, _six_sicd.ImageData_validData_set)
ImageData_swigregister = _six_sicd.ImageData_swigregister
ImageData_swigregister(ImageData)

class GeoInfo(_object):
    """Proxy of C++ GeoInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> GeoInfo"""
        this = _six_sicd.new_GeoInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_GeoInfo
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> GeoInfo"""
        return _six_sicd.GeoInfo_clone(*args)

    __swig_setmethods__["name"] = _six_sicd.GeoInfo_name_set
    __swig_getmethods__["name"] = _six_sicd.GeoInfo_name_get
    if _newclass:name = _swig_property(_six_sicd.GeoInfo_name_get, _six_sicd.GeoInfo_name_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.GeoInfo_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.GeoInfo_geoInfos_get
    if _newclass:geoInfos = _swig_property(_six_sicd.GeoInfo_geoInfos_get, _six_sicd.GeoInfo_geoInfos_set)
    __swig_setmethods__["desc"] = _six_sicd.GeoInfo_desc_set
    __swig_getmethods__["desc"] = _six_sicd.GeoInfo_desc_get
    if _newclass:desc = _swig_property(_six_sicd.GeoInfo_desc_get, _six_sicd.GeoInfo_desc_set)
    __swig_setmethods__["geometryLatLon"] = _six_sicd.GeoInfo_geometryLatLon_set
    __swig_getmethods__["geometryLatLon"] = _six_sicd.GeoInfo_geometryLatLon_get
    if _newclass:geometryLatLon = _swig_property(_six_sicd.GeoInfo_geometryLatLon_get, _six_sicd.GeoInfo_geometryLatLon_set)
GeoInfo_swigregister = _six_sicd.GeoInfo_swigregister
GeoInfo_swigregister(GeoInfo)

class GeoData(_object):
    """Proxy of C++ GeoData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> GeoData"""
        this = _six_sicd.new_GeoData(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> GeoData"""
        return _six_sicd.GeoData_clone(*args)

    __swig_setmethods__["earthModel"] = _six_sicd.GeoData_earthModel_set
    __swig_getmethods__["earthModel"] = _six_sicd.GeoData_earthModel_get
    if _newclass:earthModel = _swig_property(_six_sicd.GeoData_earthModel_get, _six_sicd.GeoData_earthModel_set)
    __swig_setmethods__["scp"] = _six_sicd.GeoData_scp_set
    __swig_getmethods__["scp"] = _six_sicd.GeoData_scp_get
    if _newclass:scp = _swig_property(_six_sicd.GeoData_scp_get, _six_sicd.GeoData_scp_set)
    __swig_setmethods__["imageCorners"] = _six_sicd.GeoData_imageCorners_set
    __swig_getmethods__["imageCorners"] = _six_sicd.GeoData_imageCorners_get
    if _newclass:imageCorners = _swig_property(_six_sicd.GeoData_imageCorners_get, _six_sicd.GeoData_imageCorners_set)
    __swig_setmethods__["validData"] = _six_sicd.GeoData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.GeoData_validData_get
    if _newclass:validData = _swig_property(_six_sicd.GeoData_validData_get, _six_sicd.GeoData_validData_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.GeoData_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.GeoData_geoInfos_get
    if _newclass:geoInfos = _swig_property(_six_sicd.GeoData_geoInfos_get, _six_sicd.GeoData_geoInfos_set)
    __swig_destroy__ = _six_sicd.delete_GeoData
    __del__ = lambda self : None;
GeoData_swigregister = _six_sicd.GeoData_swigregister
GeoData_swigregister(GeoData)

class WeightType(_object):
    """Proxy of C++ WeightType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeightType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> WeightType"""
        this = _six_sicd.new_WeightType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["windowName"] = _six_sicd.WeightType_windowName_set
    __swig_getmethods__["windowName"] = _six_sicd.WeightType_windowName_get
    if _newclass:windowName = _swig_property(_six_sicd.WeightType_windowName_get, _six_sicd.WeightType_windowName_set)
    __swig_setmethods__["parameters"] = _six_sicd.WeightType_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.WeightType_parameters_get
    if _newclass:parameters = _swig_property(_six_sicd.WeightType_parameters_get, _six_sicd.WeightType_parameters_set)
    __swig_destroy__ = _six_sicd.delete_WeightType
    __del__ = lambda self : None;
WeightType_swigregister = _six_sicd.WeightType_swigregister
WeightType_swigregister(WeightType)

class DirectionParameters(_object):
    """Proxy of C++ DirectionParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectionParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> DirectionParameters"""
        this = _six_sicd.new_DirectionParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> DirectionParameters"""
        return _six_sicd.DirectionParameters_clone(*args)

    __swig_setmethods__["unitVector"] = _six_sicd.DirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.DirectionParameters_unitVector_get
    if _newclass:unitVector = _swig_property(_six_sicd.DirectionParameters_unitVector_get, _six_sicd.DirectionParameters_unitVector_set)
    __swig_setmethods__["sampleSpacing"] = _six_sicd.DirectionParameters_sampleSpacing_set
    __swig_getmethods__["sampleSpacing"] = _six_sicd.DirectionParameters_sampleSpacing_get
    if _newclass:sampleSpacing = _swig_property(_six_sicd.DirectionParameters_sampleSpacing_get, _six_sicd.DirectionParameters_sampleSpacing_set)
    __swig_setmethods__["impulseResponseWidth"] = _six_sicd.DirectionParameters_impulseResponseWidth_set
    __swig_getmethods__["impulseResponseWidth"] = _six_sicd.DirectionParameters_impulseResponseWidth_get
    if _newclass:impulseResponseWidth = _swig_property(_six_sicd.DirectionParameters_impulseResponseWidth_get, _six_sicd.DirectionParameters_impulseResponseWidth_set)
    __swig_setmethods__["sign"] = _six_sicd.DirectionParameters_sign_set
    __swig_getmethods__["sign"] = _six_sicd.DirectionParameters_sign_get
    if _newclass:sign = _swig_property(_six_sicd.DirectionParameters_sign_get, _six_sicd.DirectionParameters_sign_set)
    __swig_setmethods__["impulseResponseBandwidth"] = _six_sicd.DirectionParameters_impulseResponseBandwidth_set
    __swig_getmethods__["impulseResponseBandwidth"] = _six_sicd.DirectionParameters_impulseResponseBandwidth_get
    if _newclass:impulseResponseBandwidth = _swig_property(_six_sicd.DirectionParameters_impulseResponseBandwidth_get, _six_sicd.DirectionParameters_impulseResponseBandwidth_set)
    __swig_setmethods__["kCenter"] = _six_sicd.DirectionParameters_kCenter_set
    __swig_getmethods__["kCenter"] = _six_sicd.DirectionParameters_kCenter_get
    if _newclass:kCenter = _swig_property(_six_sicd.DirectionParameters_kCenter_get, _six_sicd.DirectionParameters_kCenter_set)
    __swig_setmethods__["deltaK1"] = _six_sicd.DirectionParameters_deltaK1_set
    __swig_getmethods__["deltaK1"] = _six_sicd.DirectionParameters_deltaK1_get
    if _newclass:deltaK1 = _swig_property(_six_sicd.DirectionParameters_deltaK1_get, _six_sicd.DirectionParameters_deltaK1_set)
    __swig_setmethods__["deltaK2"] = _six_sicd.DirectionParameters_deltaK2_set
    __swig_getmethods__["deltaK2"] = _six_sicd.DirectionParameters_deltaK2_get
    if _newclass:deltaK2 = _swig_property(_six_sicd.DirectionParameters_deltaK2_get, _six_sicd.DirectionParameters_deltaK2_set)
    __swig_setmethods__["deltaKCOAPoly"] = _six_sicd.DirectionParameters_deltaKCOAPoly_set
    __swig_getmethods__["deltaKCOAPoly"] = _six_sicd.DirectionParameters_deltaKCOAPoly_get
    if _newclass:deltaKCOAPoly = _swig_property(_six_sicd.DirectionParameters_deltaKCOAPoly_get, _six_sicd.DirectionParameters_deltaKCOAPoly_set)
    __swig_setmethods__["weightType"] = _six_sicd.DirectionParameters_weightType_set
    __swig_getmethods__["weightType"] = _six_sicd.DirectionParameters_weightType_get
    if _newclass:weightType = _swig_property(_six_sicd.DirectionParameters_weightType_get, _six_sicd.DirectionParameters_weightType_set)
    __swig_setmethods__["weights"] = _six_sicd.DirectionParameters_weights_set
    __swig_getmethods__["weights"] = _six_sicd.DirectionParameters_weights_get
    if _newclass:weights = _swig_property(_six_sicd.DirectionParameters_weights_get, _six_sicd.DirectionParameters_weights_set)
    __swig_destroy__ = _six_sicd.delete_DirectionParameters
    __del__ = lambda self : None;
DirectionParameters_swigregister = _six_sicd.DirectionParameters_swigregister
DirectionParameters_swigregister(DirectionParameters)

class Grid(_object):
    """Proxy of C++ Grid class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Grid"""
        this = _six_sicd.new_Grid(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> Grid"""
        return _six_sicd.Grid_clone(*args)

    __swig_setmethods__["imagePlane"] = _six_sicd.Grid_imagePlane_set
    __swig_getmethods__["imagePlane"] = _six_sicd.Grid_imagePlane_get
    if _newclass:imagePlane = _swig_property(_six_sicd.Grid_imagePlane_get, _six_sicd.Grid_imagePlane_set)
    __swig_setmethods__["type"] = _six_sicd.Grid_type_set
    __swig_getmethods__["type"] = _six_sicd.Grid_type_get
    if _newclass:type = _swig_property(_six_sicd.Grid_type_get, _six_sicd.Grid_type_set)
    __swig_setmethods__["timeCOAPoly"] = _six_sicd.Grid_timeCOAPoly_set
    __swig_getmethods__["timeCOAPoly"] = _six_sicd.Grid_timeCOAPoly_get
    if _newclass:timeCOAPoly = _swig_property(_six_sicd.Grid_timeCOAPoly_get, _six_sicd.Grid_timeCOAPoly_set)
    __swig_setmethods__["row"] = _six_sicd.Grid_row_set
    __swig_getmethods__["row"] = _six_sicd.Grid_row_get
    if _newclass:row = _swig_property(_six_sicd.Grid_row_get, _six_sicd.Grid_row_set)
    __swig_setmethods__["col"] = _six_sicd.Grid_col_set
    __swig_getmethods__["col"] = _six_sicd.Grid_col_get
    if _newclass:col = _swig_property(_six_sicd.Grid_col_get, _six_sicd.Grid_col_set)
    __swig_destroy__ = _six_sicd.delete_Grid
    __del__ = lambda self : None;
Grid_swigregister = _six_sicd.Grid_swigregister
Grid_swigregister(Grid)

class TimelineSet(_object):
    """Proxy of C++ TimelineSet class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimelineSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimelineSet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tStart"] = _six_sicd.TimelineSet_tStart_set
    __swig_getmethods__["tStart"] = _six_sicd.TimelineSet_tStart_get
    if _newclass:tStart = _swig_property(_six_sicd.TimelineSet_tStart_get, _six_sicd.TimelineSet_tStart_set)
    __swig_setmethods__["tEnd"] = _six_sicd.TimelineSet_tEnd_set
    __swig_getmethods__["tEnd"] = _six_sicd.TimelineSet_tEnd_get
    if _newclass:tEnd = _swig_property(_six_sicd.TimelineSet_tEnd_get, _six_sicd.TimelineSet_tEnd_set)
    __swig_setmethods__["interPulsePeriodStart"] = _six_sicd.TimelineSet_interPulsePeriodStart_set
    __swig_getmethods__["interPulsePeriodStart"] = _six_sicd.TimelineSet_interPulsePeriodStart_get
    if _newclass:interPulsePeriodStart = _swig_property(_six_sicd.TimelineSet_interPulsePeriodStart_get, _six_sicd.TimelineSet_interPulsePeriodStart_set)
    __swig_setmethods__["interPulsePeriodEnd"] = _six_sicd.TimelineSet_interPulsePeriodEnd_set
    __swig_getmethods__["interPulsePeriodEnd"] = _six_sicd.TimelineSet_interPulsePeriodEnd_get
    if _newclass:interPulsePeriodEnd = _swig_property(_six_sicd.TimelineSet_interPulsePeriodEnd_get, _six_sicd.TimelineSet_interPulsePeriodEnd_set)
    __swig_setmethods__["interPulsePeriodPoly"] = _six_sicd.TimelineSet_interPulsePeriodPoly_set
    __swig_getmethods__["interPulsePeriodPoly"] = _six_sicd.TimelineSet_interPulsePeriodPoly_get
    if _newclass:interPulsePeriodPoly = _swig_property(_six_sicd.TimelineSet_interPulsePeriodPoly_get, _six_sicd.TimelineSet_interPulsePeriodPoly_set)
    def __init__(self, *args): 
        """__init__(self) -> TimelineSet"""
        this = _six_sicd.new_TimelineSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_TimelineSet
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> TimelineSet"""
        return _six_sicd.TimelineSet_clone(*args)

TimelineSet_swigregister = _six_sicd.TimelineSet_swigregister
TimelineSet_swigregister(TimelineSet)

class InterPulsePeriod(_object):
    """Proxy of C++ InterPulsePeriod class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterPulsePeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterPulsePeriod, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> InterPulsePeriod"""
        this = _six_sicd.new_InterPulsePeriod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_InterPulsePeriod
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> InterPulsePeriod"""
        return _six_sicd.InterPulsePeriod_clone(*args)

    __swig_setmethods__["sets"] = _six_sicd.InterPulsePeriod_sets_set
    __swig_getmethods__["sets"] = _six_sicd.InterPulsePeriod_sets_get
    if _newclass:sets = _swig_property(_six_sicd.InterPulsePeriod_sets_get, _six_sicd.InterPulsePeriod_sets_set)
InterPulsePeriod_swigregister = _six_sicd.InterPulsePeriod_swigregister
InterPulsePeriod_swigregister(InterPulsePeriod)

class Timeline(_object):
    """Proxy of C++ Timeline class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timeline, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collectStart"] = _six_sicd.Timeline_collectStart_set
    __swig_getmethods__["collectStart"] = _six_sicd.Timeline_collectStart_get
    if _newclass:collectStart = _swig_property(_six_sicd.Timeline_collectStart_get, _six_sicd.Timeline_collectStart_set)
    __swig_setmethods__["collectDuration"] = _six_sicd.Timeline_collectDuration_set
    __swig_getmethods__["collectDuration"] = _six_sicd.Timeline_collectDuration_get
    if _newclass:collectDuration = _swig_property(_six_sicd.Timeline_collectDuration_get, _six_sicd.Timeline_collectDuration_set)
    __swig_setmethods__["interPulsePeriod"] = _six_sicd.Timeline_interPulsePeriod_set
    __swig_getmethods__["interPulsePeriod"] = _six_sicd.Timeline_interPulsePeriod_get
    if _newclass:interPulsePeriod = _swig_property(_six_sicd.Timeline_interPulsePeriod_get, _six_sicd.Timeline_interPulsePeriod_set)
    def __init__(self, *args): 
        """__init__(self) -> Timeline"""
        this = _six_sicd.new_Timeline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_Timeline
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> Timeline"""
        return _six_sicd.Timeline_clone(*args)

Timeline_swigregister = _six_sicd.Timeline_swigregister
Timeline_swigregister(Timeline)

class RcvAPC(_object):
    """Proxy of C++ RcvAPC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcvAPC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcvAPC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RcvAPC"""
        this = _six_sicd.new_RcvAPC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_RcvAPC
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> RcvAPC"""
        return _six_sicd.RcvAPC_clone(*args)

    __swig_setmethods__["rcvAPCPolys"] = _six_sicd.RcvAPC_rcvAPCPolys_set
    __swig_getmethods__["rcvAPCPolys"] = _six_sicd.RcvAPC_rcvAPCPolys_get
    if _newclass:rcvAPCPolys = _swig_property(_six_sicd.RcvAPC_rcvAPCPolys_get, _six_sicd.RcvAPC_rcvAPCPolys_set)
RcvAPC_swigregister = _six_sicd.RcvAPC_swigregister
RcvAPC_swigregister(RcvAPC)

class Position(_object):
    """Proxy of C++ Position class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arpPoly"] = _six_sicd.Position_arpPoly_set
    __swig_getmethods__["arpPoly"] = _six_sicd.Position_arpPoly_get
    if _newclass:arpPoly = _swig_property(_six_sicd.Position_arpPoly_get, _six_sicd.Position_arpPoly_set)
    __swig_setmethods__["grpPoly"] = _six_sicd.Position_grpPoly_set
    __swig_getmethods__["grpPoly"] = _six_sicd.Position_grpPoly_get
    if _newclass:grpPoly = _swig_property(_six_sicd.Position_grpPoly_get, _six_sicd.Position_grpPoly_set)
    __swig_setmethods__["txAPCPoly"] = _six_sicd.Position_txAPCPoly_set
    __swig_getmethods__["txAPCPoly"] = _six_sicd.Position_txAPCPoly_get
    if _newclass:txAPCPoly = _swig_property(_six_sicd.Position_txAPCPoly_get, _six_sicd.Position_txAPCPoly_set)
    __swig_setmethods__["rcvAPC"] = _six_sicd.Position_rcvAPC_set
    __swig_getmethods__["rcvAPC"] = _six_sicd.Position_rcvAPC_get
    if _newclass:rcvAPC = _swig_property(_six_sicd.Position_rcvAPC_get, _six_sicd.Position_rcvAPC_set)
    def __init__(self, *args): 
        """__init__(self) -> Position"""
        this = _six_sicd.new_Position(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_Position
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> Position"""
        return _six_sicd.Position_clone(*args)

Position_swigregister = _six_sicd.Position_swigregister
Position_swigregister(Position)

class TxStep(_object):
    """Proxy of C++ TxStep class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxStep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> TxStep"""
        this = _six_sicd.new_TxStep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_TxStep
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> TxStep"""
        return _six_sicd.TxStep_clone(*args)

    __swig_setmethods__["waveformIndex"] = _six_sicd.TxStep_waveformIndex_set
    __swig_getmethods__["waveformIndex"] = _six_sicd.TxStep_waveformIndex_get
    if _newclass:waveformIndex = _swig_property(_six_sicd.TxStep_waveformIndex_get, _six_sicd.TxStep_waveformIndex_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.TxStep_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.TxStep_txPolarization_get
    if _newclass:txPolarization = _swig_property(_six_sicd.TxStep_txPolarization_get, _six_sicd.TxStep_txPolarization_set)
TxStep_swigregister = _six_sicd.TxStep_swigregister
TxStep_swigregister(TxStep)

class WaveformParameters(_object):
    """Proxy of C++ WaveformParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> WaveformParameters"""
        this = _six_sicd.new_WaveformParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_WaveformParameters
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> WaveformParameters"""
        return _six_sicd.WaveformParameters_clone(*args)

    __swig_setmethods__["txPulseLength"] = _six_sicd.WaveformParameters_txPulseLength_set
    __swig_getmethods__["txPulseLength"] = _six_sicd.WaveformParameters_txPulseLength_get
    if _newclass:txPulseLength = _swig_property(_six_sicd.WaveformParameters_txPulseLength_get, _six_sicd.WaveformParameters_txPulseLength_set)
    __swig_setmethods__["txRFBandwidth"] = _six_sicd.WaveformParameters_txRFBandwidth_set
    __swig_getmethods__["txRFBandwidth"] = _six_sicd.WaveformParameters_txRFBandwidth_get
    if _newclass:txRFBandwidth = _swig_property(_six_sicd.WaveformParameters_txRFBandwidth_get, _six_sicd.WaveformParameters_txRFBandwidth_set)
    __swig_setmethods__["txFrequencyStart"] = _six_sicd.WaveformParameters_txFrequencyStart_set
    __swig_getmethods__["txFrequencyStart"] = _six_sicd.WaveformParameters_txFrequencyStart_get
    if _newclass:txFrequencyStart = _swig_property(_six_sicd.WaveformParameters_txFrequencyStart_get, _six_sicd.WaveformParameters_txFrequencyStart_set)
    __swig_setmethods__["txFMRate"] = _six_sicd.WaveformParameters_txFMRate_set
    __swig_getmethods__["txFMRate"] = _six_sicd.WaveformParameters_txFMRate_get
    if _newclass:txFMRate = _swig_property(_six_sicd.WaveformParameters_txFMRate_get, _six_sicd.WaveformParameters_txFMRate_set)
    __swig_setmethods__["rcvDemodType"] = _six_sicd.WaveformParameters_rcvDemodType_set
    __swig_getmethods__["rcvDemodType"] = _six_sicd.WaveformParameters_rcvDemodType_get
    if _newclass:rcvDemodType = _swig_property(_six_sicd.WaveformParameters_rcvDemodType_get, _six_sicd.WaveformParameters_rcvDemodType_set)
    __swig_setmethods__["rcvWindowLength"] = _six_sicd.WaveformParameters_rcvWindowLength_set
    __swig_getmethods__["rcvWindowLength"] = _six_sicd.WaveformParameters_rcvWindowLength_get
    if _newclass:rcvWindowLength = _swig_property(_six_sicd.WaveformParameters_rcvWindowLength_get, _six_sicd.WaveformParameters_rcvWindowLength_set)
    __swig_setmethods__["adcSampleRate"] = _six_sicd.WaveformParameters_adcSampleRate_set
    __swig_getmethods__["adcSampleRate"] = _six_sicd.WaveformParameters_adcSampleRate_get
    if _newclass:adcSampleRate = _swig_property(_six_sicd.WaveformParameters_adcSampleRate_get, _six_sicd.WaveformParameters_adcSampleRate_set)
    __swig_setmethods__["rcvIFBandwidth"] = _six_sicd.WaveformParameters_rcvIFBandwidth_set
    __swig_getmethods__["rcvIFBandwidth"] = _six_sicd.WaveformParameters_rcvIFBandwidth_get
    if _newclass:rcvIFBandwidth = _swig_property(_six_sicd.WaveformParameters_rcvIFBandwidth_get, _six_sicd.WaveformParameters_rcvIFBandwidth_set)
    __swig_setmethods__["rcvFrequencyStart"] = _six_sicd.WaveformParameters_rcvFrequencyStart_set
    __swig_getmethods__["rcvFrequencyStart"] = _six_sicd.WaveformParameters_rcvFrequencyStart_get
    if _newclass:rcvFrequencyStart = _swig_property(_six_sicd.WaveformParameters_rcvFrequencyStart_get, _six_sicd.WaveformParameters_rcvFrequencyStart_set)
    __swig_setmethods__["rcvFMRate"] = _six_sicd.WaveformParameters_rcvFMRate_set
    __swig_getmethods__["rcvFMRate"] = _six_sicd.WaveformParameters_rcvFMRate_get
    if _newclass:rcvFMRate = _swig_property(_six_sicd.WaveformParameters_rcvFMRate_get, _six_sicd.WaveformParameters_rcvFMRate_set)
WaveformParameters_swigregister = _six_sicd.WaveformParameters_swigregister
WaveformParameters_swigregister(WaveformParameters)

class ChannelParameters(_object):
    """Proxy of C++ ChannelParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ChannelParameters"""
        this = _six_sicd.new_ChannelParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> ChannelParameters"""
        return _six_sicd.ChannelParameters_clone(*args)

    __swig_setmethods__["txRcvPolarization"] = _six_sicd.ChannelParameters_txRcvPolarization_set
    __swig_getmethods__["txRcvPolarization"] = _six_sicd.ChannelParameters_txRcvPolarization_get
    if _newclass:txRcvPolarization = _swig_property(_six_sicd.ChannelParameters_txRcvPolarization_get, _six_sicd.ChannelParameters_txRcvPolarization_set)
    __swig_setmethods__["rcvAPCIndex"] = _six_sicd.ChannelParameters_rcvAPCIndex_set
    __swig_getmethods__["rcvAPCIndex"] = _six_sicd.ChannelParameters_rcvAPCIndex_get
    if _newclass:rcvAPCIndex = _swig_property(_six_sicd.ChannelParameters_rcvAPCIndex_get, _six_sicd.ChannelParameters_rcvAPCIndex_set)
    __swig_destroy__ = _six_sicd.delete_ChannelParameters
    __del__ = lambda self : None;
ChannelParameters_swigregister = _six_sicd.ChannelParameters_swigregister
ChannelParameters_swigregister(ChannelParameters)

class AreaDirectionParameters(_object):
    """Proxy of C++ AreaDirectionParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaDirectionParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> AreaDirectionParameters"""
        this = _six_sicd.new_AreaDirectionParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> AreaDirectionParameters"""
        return _six_sicd.AreaDirectionParameters_clone(*args)

    __swig_destroy__ = _six_sicd.delete_AreaDirectionParameters
    __del__ = lambda self : None;
    __swig_setmethods__["unitVector"] = _six_sicd.AreaDirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.AreaDirectionParameters_unitVector_get
    if _newclass:unitVector = _swig_property(_six_sicd.AreaDirectionParameters_unitVector_get, _six_sicd.AreaDirectionParameters_unitVector_set)
    __swig_setmethods__["spacing"] = _six_sicd.AreaDirectionParameters_spacing_set
    __swig_getmethods__["spacing"] = _six_sicd.AreaDirectionParameters_spacing_get
    if _newclass:spacing = _swig_property(_six_sicd.AreaDirectionParameters_spacing_get, _six_sicd.AreaDirectionParameters_spacing_set)
    __swig_setmethods__["elements"] = _six_sicd.AreaDirectionParameters_elements_set
    __swig_getmethods__["elements"] = _six_sicd.AreaDirectionParameters_elements_get
    if _newclass:elements = _swig_property(_six_sicd.AreaDirectionParameters_elements_get, _six_sicd.AreaDirectionParameters_elements_set)
    __swig_setmethods__["first"] = _six_sicd.AreaDirectionParameters_first_set
    __swig_getmethods__["first"] = _six_sicd.AreaDirectionParameters_first_get
    if _newclass:first = _swig_property(_six_sicd.AreaDirectionParameters_first_get, _six_sicd.AreaDirectionParameters_first_set)
    def __eq__(*args):
        """__eq__(self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.AreaDirectionParameters___eq__(*args)

    def __ne__(*args):
        """__ne__(self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.AreaDirectionParameters___ne__(*args)

AreaDirectionParameters_swigregister = _six_sicd.AreaDirectionParameters_swigregister
AreaDirectionParameters_swigregister(AreaDirectionParameters)

class Segment(_object):
    """Proxy of C++ Segment class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Segment"""
        this = _six_sicd.new_Segment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_Segment
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> Segment"""
        return _six_sicd.Segment_clone(*args)

    def getNumLines(*args):
        """getNumLines(self) -> int"""
        return _six_sicd.Segment_getNumLines(*args)

    def getNumSamples(*args):
        """getNumSamples(self) -> int"""
        return _six_sicd.Segment_getNumSamples(*args)

    __swig_setmethods__["startLine"] = _six_sicd.Segment_startLine_set
    __swig_getmethods__["startLine"] = _six_sicd.Segment_startLine_get
    if _newclass:startLine = _swig_property(_six_sicd.Segment_startLine_get, _six_sicd.Segment_startLine_set)
    __swig_setmethods__["startSample"] = _six_sicd.Segment_startSample_set
    __swig_getmethods__["startSample"] = _six_sicd.Segment_startSample_get
    if _newclass:startSample = _swig_property(_six_sicd.Segment_startSample_get, _six_sicd.Segment_startSample_set)
    __swig_setmethods__["endLine"] = _six_sicd.Segment_endLine_set
    __swig_getmethods__["endLine"] = _six_sicd.Segment_endLine_get
    if _newclass:endLine = _swig_property(_six_sicd.Segment_endLine_get, _six_sicd.Segment_endLine_set)
    __swig_setmethods__["endSample"] = _six_sicd.Segment_endSample_set
    __swig_getmethods__["endSample"] = _six_sicd.Segment_endSample_get
    if _newclass:endSample = _swig_property(_six_sicd.Segment_endSample_get, _six_sicd.Segment_endSample_set)
    __swig_setmethods__["identifier"] = _six_sicd.Segment_identifier_set
    __swig_getmethods__["identifier"] = _six_sicd.Segment_identifier_get
    if _newclass:identifier = _swig_property(_six_sicd.Segment_identifier_get, _six_sicd.Segment_identifier_set)
Segment_swigregister = _six_sicd.Segment_swigregister
Segment_swigregister(Segment)

class AreaPlane(_object):
    """Proxy of C++ AreaPlane class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaPlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> AreaPlane"""
        this = _six_sicd.new_AreaPlane(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> AreaPlane"""
        return _six_sicd.AreaPlane_clone(*args)

    __swig_setmethods__["referencePoint"] = _six_sicd.AreaPlane_referencePoint_set
    __swig_getmethods__["referencePoint"] = _six_sicd.AreaPlane_referencePoint_get
    if _newclass:referencePoint = _swig_property(_six_sicd.AreaPlane_referencePoint_get, _six_sicd.AreaPlane_referencePoint_set)
    __swig_setmethods__["xDirection"] = _six_sicd.AreaPlane_xDirection_set
    __swig_getmethods__["xDirection"] = _six_sicd.AreaPlane_xDirection_get
    if _newclass:xDirection = _swig_property(_six_sicd.AreaPlane_xDirection_get, _six_sicd.AreaPlane_xDirection_set)
    __swig_setmethods__["yDirection"] = _six_sicd.AreaPlane_yDirection_set
    __swig_getmethods__["yDirection"] = _six_sicd.AreaPlane_yDirection_get
    if _newclass:yDirection = _swig_property(_six_sicd.AreaPlane_yDirection_get, _six_sicd.AreaPlane_yDirection_set)
    __swig_setmethods__["segmentList"] = _six_sicd.AreaPlane_segmentList_set
    __swig_getmethods__["segmentList"] = _six_sicd.AreaPlane_segmentList_get
    if _newclass:segmentList = _swig_property(_six_sicd.AreaPlane_segmentList_get, _six_sicd.AreaPlane_segmentList_set)
    __swig_setmethods__["orientation"] = _six_sicd.AreaPlane_orientation_set
    __swig_getmethods__["orientation"] = _six_sicd.AreaPlane_orientation_get
    if _newclass:orientation = _swig_property(_six_sicd.AreaPlane_orientation_get, _six_sicd.AreaPlane_orientation_set)
    __swig_destroy__ = _six_sicd.delete_AreaPlane
    __del__ = lambda self : None;
AreaPlane_swigregister = _six_sicd.AreaPlane_swigregister
AreaPlane_swigregister(AreaPlane)

class Area(_object):
    """Proxy of C++ Area class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Area, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Area, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Area"""
        this = _six_sicd.new_Area(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> Area"""
        return _six_sicd.Area_clone(*args)

    __swig_setmethods__["acpCorners"] = _six_sicd.Area_acpCorners_set
    __swig_getmethods__["acpCorners"] = _six_sicd.Area_acpCorners_get
    if _newclass:acpCorners = _swig_property(_six_sicd.Area_acpCorners_get, _six_sicd.Area_acpCorners_set)
    __swig_setmethods__["plane"] = _six_sicd.Area_plane_set
    __swig_getmethods__["plane"] = _six_sicd.Area_plane_get
    if _newclass:plane = _swig_property(_six_sicd.Area_plane_get, _six_sicd.Area_plane_set)
    __swig_destroy__ = _six_sicd.delete_Area
    __del__ = lambda self : None;
Area_swigregister = _six_sicd.Area_swigregister
Area_swigregister(Area)

class RadarCollection(_object):
    """Proxy of C++ RadarCollection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarCollection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RadarCollection"""
        this = _six_sicd.new_RadarCollection(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self) -> RadarCollection"""
        return _six_sicd.RadarCollection_clone(*args)

    __swig_setmethods__["refFrequencyIndex"] = _six_sicd.RadarCollection_refFrequencyIndex_set
    __swig_getmethods__["refFrequencyIndex"] = _six_sicd.RadarCollection_refFrequencyIndex_get
    if _newclass:refFrequencyIndex = _swig_property(_six_sicd.RadarCollection_refFrequencyIndex_get, _six_sicd.RadarCollection_refFrequencyIndex_set)
    __swig_setmethods__["txFrequencyMin"] = _six_sicd.RadarCollection_txFrequencyMin_set
    __swig_getmethods__["txFrequencyMin"] = _six_sicd.RadarCollection_txFrequencyMin_get
    if _newclass:txFrequencyMin = _swig_property(_six_sicd.RadarCollection_txFrequencyMin_get, _six_sicd.RadarCollection_txFrequencyMin_set)
    __swig_setmethods__["txFrequencyMax"] = _six_sicd.RadarCollection_txFrequencyMax_set
    __swig_getmethods__["txFrequencyMax"] = _six_sicd.RadarCollection_txFrequencyMax_get
    if _newclass:txFrequencyMax = _swig_property(_six_sicd.RadarCollection_txFrequencyMax_get, _six_sicd.RadarCollection_txFrequencyMax_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.RadarCollection_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.RadarCollection_txPolarization_get
    if _newclass:txPolarization = _swig_property(_six_sicd.RadarCollection_txPolarization_get, _six_sicd.RadarCollection_txPolarization_set)
    __swig_setmethods__["polarizationHVAnglePoly"] = _six_sicd.RadarCollection_polarizationHVAnglePoly_set
    __swig_getmethods__["polarizationHVAnglePoly"] = _six_sicd.RadarCollection_polarizationHVAnglePoly_get
    if _newclass:polarizationHVAnglePoly = _swig_property(_six_sicd.RadarCollection_polarizationHVAnglePoly_get, _six_sicd.RadarCollection_polarizationHVAnglePoly_set)
    __swig_setmethods__["txSequence"] = _six_sicd.RadarCollection_txSequence_set
    __swig_getmethods__["txSequence"] = _six_sicd.RadarCollection_txSequence_get
    if _newclass:txSequence = _swig_property(_six_sicd.RadarCollection_txSequence_get, _six_sicd.RadarCollection_txSequence_set)
    __swig_setmethods__["waveform"] = _six_sicd.RadarCollection_waveform_set
    __swig_getmethods__["waveform"] = _six_sicd.RadarCollection_waveform_get
    if _newclass:waveform = _swig_property(_six_sicd.RadarCollection_waveform_get, _six_sicd.RadarCollection_waveform_set)
    __swig_setmethods__["rcvChannels"] = _six_sicd.RadarCollection_rcvChannels_set
    __swig_getmethods__["rcvChannels"] = _six_sicd.RadarCollection_rcvChannels_get
    if _newclass:rcvChannels = _swig_property(_six_sicd.RadarCollection_rcvChannels_get, _six_sicd.RadarCollection_rcvChannels_set)
    __swig_setmethods__["area"] = _six_sicd.RadarCollection_area_set
    __swig_getmethods__["area"] = _six_sicd.RadarCollection_area_get
    if _newclass:area = _swig_property(_six_sicd.RadarCollection_area_get, _six_sicd.RadarCollection_area_set)
    __swig_setmethods__["parameters"] = _six_sicd.RadarCollection_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.RadarCollection_parameters_get
    if _newclass:parameters = _swig_property(_six_sicd.RadarCollection_parameters_get, _six_sicd.RadarCollection_parameters_set)
    __swig_destroy__ = _six_sicd.delete_RadarCollection
    __del__ = lambda self : None;
RadarCollection_swigregister = _six_sicd.RadarCollection_swigregister
RadarCollection_swigregister(RadarCollection)

class RcvChannelProcessed(_object):
    """Proxy of C++ RcvChannelProcessed class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcvChannelProcessed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcvChannelProcessed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RcvChannelProcessed"""
        this = _six_sicd.new_RcvChannelProcessed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["numChannelsProcessed"] = _six_sicd.RcvChannelProcessed_numChannelsProcessed_set
    __swig_getmethods__["numChannelsProcessed"] = _six_sicd.RcvChannelProcessed_numChannelsProcessed_get
    if _newclass:numChannelsProcessed = _swig_property(_six_sicd.RcvChannelProcessed_numChannelsProcessed_get, _six_sicd.RcvChannelProcessed_numChannelsProcessed_set)
    __swig_setmethods__["prfScaleFactor"] = _six_sicd.RcvChannelProcessed_prfScaleFactor_set
    __swig_getmethods__["prfScaleFactor"] = _six_sicd.RcvChannelProcessed_prfScaleFactor_get
    if _newclass:prfScaleFactor = _swig_property(_six_sicd.RcvChannelProcessed_prfScaleFactor_get, _six_sicd.RcvChannelProcessed_prfScaleFactor_set)
    __swig_setmethods__["channelIndex"] = _six_sicd.RcvChannelProcessed_channelIndex_set
    __swig_getmethods__["channelIndex"] = _six_sicd.RcvChannelProcessed_channelIndex_get
    if _newclass:channelIndex = _swig_property(_six_sicd.RcvChannelProcessed_channelIndex_get, _six_sicd.RcvChannelProcessed_channelIndex_set)
    __swig_destroy__ = _six_sicd.delete_RcvChannelProcessed
    __del__ = lambda self : None;
RcvChannelProcessed_swigregister = _six_sicd.RcvChannelProcessed_swigregister
RcvChannelProcessed_swigregister(RcvChannelProcessed)

class Distortion(_object):
    """Proxy of C++ Distortion class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distortion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Distortion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Distortion"""
        this = _six_sicd.new_Distortion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["calibrationDate"] = _six_sicd.Distortion_calibrationDate_set
    __swig_getmethods__["calibrationDate"] = _six_sicd.Distortion_calibrationDate_get
    if _newclass:calibrationDate = _swig_property(_six_sicd.Distortion_calibrationDate_get, _six_sicd.Distortion_calibrationDate_set)
    __swig_setmethods__["a"] = _six_sicd.Distortion_a_set
    __swig_getmethods__["a"] = _six_sicd.Distortion_a_get
    if _newclass:a = _swig_property(_six_sicd.Distortion_a_get, _six_sicd.Distortion_a_set)
    __swig_setmethods__["f1"] = _six_sicd.Distortion_f1_set
    __swig_getmethods__["f1"] = _six_sicd.Distortion_f1_get
    if _newclass:f1 = _swig_property(_six_sicd.Distortion_f1_get, _six_sicd.Distortion_f1_set)
    __swig_setmethods__["q1"] = _six_sicd.Distortion_q1_set
    __swig_getmethods__["q1"] = _six_sicd.Distortion_q1_get
    if _newclass:q1 = _swig_property(_six_sicd.Distortion_q1_get, _six_sicd.Distortion_q1_set)
    __swig_setmethods__["q2"] = _six_sicd.Distortion_q2_set
    __swig_getmethods__["q2"] = _six_sicd.Distortion_q2_get
    if _newclass:q2 = _swig_property(_six_sicd.Distortion_q2_get, _six_sicd.Distortion_q2_set)
    __swig_setmethods__["f2"] = _six_sicd.Distortion_f2_set
    __swig_getmethods__["f2"] = _six_sicd.Distortion_f2_get
    if _newclass:f2 = _swig_property(_six_sicd.Distortion_f2_get, _six_sicd.Distortion_f2_set)
    __swig_setmethods__["q3"] = _six_sicd.Distortion_q3_set
    __swig_getmethods__["q3"] = _six_sicd.Distortion_q3_get
    if _newclass:q3 = _swig_property(_six_sicd.Distortion_q3_get, _six_sicd.Distortion_q3_set)
    __swig_setmethods__["q4"] = _six_sicd.Distortion_q4_set
    __swig_getmethods__["q4"] = _six_sicd.Distortion_q4_get
    if _newclass:q4 = _swig_property(_six_sicd.Distortion_q4_get, _six_sicd.Distortion_q4_set)
    __swig_setmethods__["gainErrorA"] = _six_sicd.Distortion_gainErrorA_set
    __swig_getmethods__["gainErrorA"] = _six_sicd.Distortion_gainErrorA_get
    if _newclass:gainErrorA = _swig_property(_six_sicd.Distortion_gainErrorA_get, _six_sicd.Distortion_gainErrorA_set)
    __swig_setmethods__["gainErrorF1"] = _six_sicd.Distortion_gainErrorF1_set
    __swig_getmethods__["gainErrorF1"] = _six_sicd.Distortion_gainErrorF1_get
    if _newclass:gainErrorF1 = _swig_property(_six_sicd.Distortion_gainErrorF1_get, _six_sicd.Distortion_gainErrorF1_set)
    __swig_setmethods__["gainErrorF2"] = _six_sicd.Distortion_gainErrorF2_set
    __swig_getmethods__["gainErrorF2"] = _six_sicd.Distortion_gainErrorF2_get
    if _newclass:gainErrorF2 = _swig_property(_six_sicd.Distortion_gainErrorF2_get, _six_sicd.Distortion_gainErrorF2_set)
    __swig_setmethods__["phaseErrorF1"] = _six_sicd.Distortion_phaseErrorF1_set
    __swig_getmethods__["phaseErrorF1"] = _six_sicd.Distortion_phaseErrorF1_get
    if _newclass:phaseErrorF1 = _swig_property(_six_sicd.Distortion_phaseErrorF1_get, _six_sicd.Distortion_phaseErrorF1_set)
    __swig_setmethods__["phaseErrorF2"] = _six_sicd.Distortion_phaseErrorF2_set
    __swig_getmethods__["phaseErrorF2"] = _six_sicd.Distortion_phaseErrorF2_get
    if _newclass:phaseErrorF2 = _swig_property(_six_sicd.Distortion_phaseErrorF2_get, _six_sicd.Distortion_phaseErrorF2_set)
    __swig_destroy__ = _six_sicd.delete_Distortion
    __del__ = lambda self : None;
Distortion_swigregister = _six_sicd.Distortion_swigregister
Distortion_swigregister(Distortion)

class PolarizationCalibration(_object):
    """Proxy of C++ PolarizationCalibration class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationCalibration, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> PolarizationCalibration"""
        this = _six_sicd.new_PolarizationCalibration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["hvAngleCompensationApplied"] = _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_set
    __swig_getmethods__["hvAngleCompensationApplied"] = _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_get
    if _newclass:hvAngleCompensationApplied = _swig_property(_six_sicd.PolarizationCalibration_hvAngleCompensationApplied_get, _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_set)
    __swig_setmethods__["distortionCorrectionApplied"] = _six_sicd.PolarizationCalibration_distortionCorrectionApplied_set
    __swig_getmethods__["distortionCorrectionApplied"] = _six_sicd.PolarizationCalibration_distortionCorrectionApplied_get
    if _newclass:distortionCorrectionApplied = _swig_property(_six_sicd.PolarizationCalibration_distortionCorrectionApplied_get, _six_sicd.PolarizationCalibration_distortionCorrectionApplied_set)
    __swig_setmethods__["distortion"] = _six_sicd.PolarizationCalibration_distortion_set
    __swig_getmethods__["distortion"] = _six_sicd.PolarizationCalibration_distortion_get
    if _newclass:distortion = _swig_property(_six_sicd.PolarizationCalibration_distortion_get, _six_sicd.PolarizationCalibration_distortion_set)
    __swig_destroy__ = _six_sicd.delete_PolarizationCalibration
    __del__ = lambda self : None;
PolarizationCalibration_swigregister = _six_sicd.PolarizationCalibration_swigregister
PolarizationCalibration_swigregister(PolarizationCalibration)

class Processing(_object):
    """Proxy of C++ Processing class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Processing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Processing, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Processing"""
        this = _six_sicd.new_Processing(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["type"] = _six_sicd.Processing_type_set
    __swig_getmethods__["type"] = _six_sicd.Processing_type_get
    if _newclass:type = _swig_property(_six_sicd.Processing_type_get, _six_sicd.Processing_type_set)
    __swig_setmethods__["applied"] = _six_sicd.Processing_applied_set
    __swig_getmethods__["applied"] = _six_sicd.Processing_applied_get
    if _newclass:applied = _swig_property(_six_sicd.Processing_applied_get, _six_sicd.Processing_applied_set)
    __swig_setmethods__["parameters"] = _six_sicd.Processing_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.Processing_parameters_get
    if _newclass:parameters = _swig_property(_six_sicd.Processing_parameters_get, _six_sicd.Processing_parameters_set)
    __swig_destroy__ = _six_sicd.delete_Processing
    __del__ = lambda self : None;
Processing_swigregister = _six_sicd.Processing_swigregister
Processing_swigregister(Processing)

class ImageFormation(_object):
    """Proxy of C++ ImageFormation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageFormation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageFormation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ImageFormation"""
        this = _six_sicd.new_ImageFormation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["segmentIdentifier"] = _six_sicd.ImageFormation_segmentIdentifier_set
    __swig_getmethods__["segmentIdentifier"] = _six_sicd.ImageFormation_segmentIdentifier_get
    if _newclass:segmentIdentifier = _swig_property(_six_sicd.ImageFormation_segmentIdentifier_get, _six_sicd.ImageFormation_segmentIdentifier_set)
    __swig_setmethods__["rcvChannelProcessed"] = _six_sicd.ImageFormation_rcvChannelProcessed_set
    __swig_getmethods__["rcvChannelProcessed"] = _six_sicd.ImageFormation_rcvChannelProcessed_get
    if _newclass:rcvChannelProcessed = _swig_property(_six_sicd.ImageFormation_rcvChannelProcessed_get, _six_sicd.ImageFormation_rcvChannelProcessed_set)
    __swig_setmethods__["txRcvPolarizationProc"] = _six_sicd.ImageFormation_txRcvPolarizationProc_set
    __swig_getmethods__["txRcvPolarizationProc"] = _six_sicd.ImageFormation_txRcvPolarizationProc_get
    if _newclass:txRcvPolarizationProc = _swig_property(_six_sicd.ImageFormation_txRcvPolarizationProc_get, _six_sicd.ImageFormation_txRcvPolarizationProc_set)
    __swig_setmethods__["imageFormationAlgorithm"] = _six_sicd.ImageFormation_imageFormationAlgorithm_set
    __swig_getmethods__["imageFormationAlgorithm"] = _six_sicd.ImageFormation_imageFormationAlgorithm_get
    if _newclass:imageFormationAlgorithm = _swig_property(_six_sicd.ImageFormation_imageFormationAlgorithm_get, _six_sicd.ImageFormation_imageFormationAlgorithm_set)
    __swig_setmethods__["tStartProc"] = _six_sicd.ImageFormation_tStartProc_set
    __swig_getmethods__["tStartProc"] = _six_sicd.ImageFormation_tStartProc_get
    if _newclass:tStartProc = _swig_property(_six_sicd.ImageFormation_tStartProc_get, _six_sicd.ImageFormation_tStartProc_set)
    __swig_setmethods__["tEndProc"] = _six_sicd.ImageFormation_tEndProc_set
    __swig_getmethods__["tEndProc"] = _six_sicd.ImageFormation_tEndProc_get
    if _newclass:tEndProc = _swig_property(_six_sicd.ImageFormation_tEndProc_get, _six_sicd.ImageFormation_tEndProc_set)
    __swig_setmethods__["txFrequencyProcMin"] = _six_sicd.ImageFormation_txFrequencyProcMin_set
    __swig_getmethods__["txFrequencyProcMin"] = _six_sicd.ImageFormation_txFrequencyProcMin_get
    if _newclass:txFrequencyProcMin = _swig_property(_six_sicd.ImageFormation_txFrequencyProcMin_get, _six_sicd.ImageFormation_txFrequencyProcMin_set)
    __swig_setmethods__["txFrequencyProcMax"] = _six_sicd.ImageFormation_txFrequencyProcMax_set
    __swig_getmethods__["txFrequencyProcMax"] = _six_sicd.ImageFormation_txFrequencyProcMax_get
    if _newclass:txFrequencyProcMax = _swig_property(_six_sicd.ImageFormation_txFrequencyProcMax_get, _six_sicd.ImageFormation_txFrequencyProcMax_set)
    __swig_setmethods__["slowTimeBeamCompensation"] = _six_sicd.ImageFormation_slowTimeBeamCompensation_set
    __swig_getmethods__["slowTimeBeamCompensation"] = _six_sicd.ImageFormation_slowTimeBeamCompensation_get
    if _newclass:slowTimeBeamCompensation = _swig_property(_six_sicd.ImageFormation_slowTimeBeamCompensation_get, _six_sicd.ImageFormation_slowTimeBeamCompensation_set)
    __swig_setmethods__["imageBeamCompensation"] = _six_sicd.ImageFormation_imageBeamCompensation_set
    __swig_getmethods__["imageBeamCompensation"] = _six_sicd.ImageFormation_imageBeamCompensation_get
    if _newclass:imageBeamCompensation = _swig_property(_six_sicd.ImageFormation_imageBeamCompensation_get, _six_sicd.ImageFormation_imageBeamCompensation_set)
    __swig_setmethods__["azimuthAutofocus"] = _six_sicd.ImageFormation_azimuthAutofocus_set
    __swig_getmethods__["azimuthAutofocus"] = _six_sicd.ImageFormation_azimuthAutofocus_get
    if _newclass:azimuthAutofocus = _swig_property(_six_sicd.ImageFormation_azimuthAutofocus_get, _six_sicd.ImageFormation_azimuthAutofocus_set)
    __swig_setmethods__["rangeAutofocus"] = _six_sicd.ImageFormation_rangeAutofocus_set
    __swig_getmethods__["rangeAutofocus"] = _six_sicd.ImageFormation_rangeAutofocus_get
    if _newclass:rangeAutofocus = _swig_property(_six_sicd.ImageFormation_rangeAutofocus_get, _six_sicd.ImageFormation_rangeAutofocus_set)
    __swig_setmethods__["processing"] = _six_sicd.ImageFormation_processing_set
    __swig_getmethods__["processing"] = _six_sicd.ImageFormation_processing_get
    if _newclass:processing = _swig_property(_six_sicd.ImageFormation_processing_get, _six_sicd.ImageFormation_processing_set)
    __swig_setmethods__["polarizationCalibration"] = _six_sicd.ImageFormation_polarizationCalibration_set
    __swig_getmethods__["polarizationCalibration"] = _six_sicd.ImageFormation_polarizationCalibration_get
    if _newclass:polarizationCalibration = _swig_property(_six_sicd.ImageFormation_polarizationCalibration_get, _six_sicd.ImageFormation_polarizationCalibration_set)
    __swig_destroy__ = _six_sicd.delete_ImageFormation
    __del__ = lambda self : None;
ImageFormation_swigregister = _six_sicd.ImageFormation_swigregister
ImageFormation_swigregister(ImageFormation)

class SCPCOA(_object):
    """Proxy of C++ SCPCOA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCPCOA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCPCOA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> SCPCOA"""
        this = _six_sicd.new_SCPCOA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["scpTime"] = _six_sicd.SCPCOA_scpTime_set
    __swig_getmethods__["scpTime"] = _six_sicd.SCPCOA_scpTime_get
    if _newclass:scpTime = _swig_property(_six_sicd.SCPCOA_scpTime_get, _six_sicd.SCPCOA_scpTime_set)
    __swig_setmethods__["arpPos"] = _six_sicd.SCPCOA_arpPos_set
    __swig_getmethods__["arpPos"] = _six_sicd.SCPCOA_arpPos_get
    if _newclass:arpPos = _swig_property(_six_sicd.SCPCOA_arpPos_get, _six_sicd.SCPCOA_arpPos_set)
    __swig_setmethods__["arpVel"] = _six_sicd.SCPCOA_arpVel_set
    __swig_getmethods__["arpVel"] = _six_sicd.SCPCOA_arpVel_get
    if _newclass:arpVel = _swig_property(_six_sicd.SCPCOA_arpVel_get, _six_sicd.SCPCOA_arpVel_set)
    __swig_setmethods__["arpAcc"] = _six_sicd.SCPCOA_arpAcc_set
    __swig_getmethods__["arpAcc"] = _six_sicd.SCPCOA_arpAcc_get
    if _newclass:arpAcc = _swig_property(_six_sicd.SCPCOA_arpAcc_get, _six_sicd.SCPCOA_arpAcc_set)
    __swig_setmethods__["sideOfTrack"] = _six_sicd.SCPCOA_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _six_sicd.SCPCOA_sideOfTrack_get
    if _newclass:sideOfTrack = _swig_property(_six_sicd.SCPCOA_sideOfTrack_get, _six_sicd.SCPCOA_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _six_sicd.SCPCOA_slantRange_set
    __swig_getmethods__["slantRange"] = _six_sicd.SCPCOA_slantRange_get
    if _newclass:slantRange = _swig_property(_six_sicd.SCPCOA_slantRange_get, _six_sicd.SCPCOA_slantRange_set)
    __swig_setmethods__["groundRange"] = _six_sicd.SCPCOA_groundRange_set
    __swig_getmethods__["groundRange"] = _six_sicd.SCPCOA_groundRange_get
    if _newclass:groundRange = _swig_property(_six_sicd.SCPCOA_groundRange_get, _six_sicd.SCPCOA_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _six_sicd.SCPCOA_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _six_sicd.SCPCOA_dopplerConeAngle_get
    if _newclass:dopplerConeAngle = _swig_property(_six_sicd.SCPCOA_dopplerConeAngle_get, _six_sicd.SCPCOA_dopplerConeAngle_set)
    __swig_setmethods__["grazeAngle"] = _six_sicd.SCPCOA_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _six_sicd.SCPCOA_grazeAngle_get
    if _newclass:grazeAngle = _swig_property(_six_sicd.SCPCOA_grazeAngle_get, _six_sicd.SCPCOA_grazeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _six_sicd.SCPCOA_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _six_sicd.SCPCOA_incidenceAngle_get
    if _newclass:incidenceAngle = _swig_property(_six_sicd.SCPCOA_incidenceAngle_get, _six_sicd.SCPCOA_incidenceAngle_set)
    __swig_setmethods__["twistAngle"] = _six_sicd.SCPCOA_twistAngle_set
    __swig_getmethods__["twistAngle"] = _six_sicd.SCPCOA_twistAngle_get
    if _newclass:twistAngle = _swig_property(_six_sicd.SCPCOA_twistAngle_get, _six_sicd.SCPCOA_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _six_sicd.SCPCOA_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _six_sicd.SCPCOA_slopeAngle_get
    if _newclass:slopeAngle = _swig_property(_six_sicd.SCPCOA_slopeAngle_get, _six_sicd.SCPCOA_slopeAngle_set)
    __swig_setmethods__["azimAngle"] = _six_sicd.SCPCOA_azimAngle_set
    __swig_getmethods__["azimAngle"] = _six_sicd.SCPCOA_azimAngle_get
    if _newclass:azimAngle = _swig_property(_six_sicd.SCPCOA_azimAngle_get, _six_sicd.SCPCOA_azimAngle_set)
    __swig_setmethods__["layoverAngle"] = _six_sicd.SCPCOA_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _six_sicd.SCPCOA_layoverAngle_get
    if _newclass:layoverAngle = _swig_property(_six_sicd.SCPCOA_layoverAngle_get, _six_sicd.SCPCOA_layoverAngle_set)
    __swig_destroy__ = _six_sicd.delete_SCPCOA
    __del__ = lambda self : None;
SCPCOA_swigregister = _six_sicd.SCPCOA_swigregister
SCPCOA_swigregister(SCPCOA)

class ElectricalBoresight(_object):
    """Proxy of C++ ElectricalBoresight class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricalBoresight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectricalBoresight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> ElectricalBoresight"""
        this = _six_sicd.new_ElectricalBoresight(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ElectricalBoresight___eq__(*args)

    def __ne__(*args):
        """__ne__(self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ElectricalBoresight___ne__(*args)

    __swig_setmethods__["dcxPoly"] = _six_sicd.ElectricalBoresight_dcxPoly_set
    __swig_getmethods__["dcxPoly"] = _six_sicd.ElectricalBoresight_dcxPoly_get
    if _newclass:dcxPoly = _swig_property(_six_sicd.ElectricalBoresight_dcxPoly_get, _six_sicd.ElectricalBoresight_dcxPoly_set)
    __swig_setmethods__["dcyPoly"] = _six_sicd.ElectricalBoresight_dcyPoly_set
    __swig_getmethods__["dcyPoly"] = _six_sicd.ElectricalBoresight_dcyPoly_get
    if _newclass:dcyPoly = _swig_property(_six_sicd.ElectricalBoresight_dcyPoly_get, _six_sicd.ElectricalBoresight_dcyPoly_set)
    __swig_destroy__ = _six_sicd.delete_ElectricalBoresight
    __del__ = lambda self : None;
ElectricalBoresight_swigregister = _six_sicd.ElectricalBoresight_swigregister
ElectricalBoresight_swigregister(ElectricalBoresight)

class HalfPowerBeamwidths(_object):
    """Proxy of C++ HalfPowerBeamwidths class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HalfPowerBeamwidths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HalfPowerBeamwidths, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> HalfPowerBeamwidths"""
        this = _six_sicd.new_HalfPowerBeamwidths(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.HalfPowerBeamwidths___eq__(*args)

    def __ne__(*args):
        """__ne__(self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.HalfPowerBeamwidths___ne__(*args)

    __swig_setmethods__["dcx"] = _six_sicd.HalfPowerBeamwidths_dcx_set
    __swig_getmethods__["dcx"] = _six_sicd.HalfPowerBeamwidths_dcx_get
    if _newclass:dcx = _swig_property(_six_sicd.HalfPowerBeamwidths_dcx_get, _six_sicd.HalfPowerBeamwidths_dcx_set)
    __swig_setmethods__["dcy"] = _six_sicd.HalfPowerBeamwidths_dcy_set
    __swig_getmethods__["dcy"] = _six_sicd.HalfPowerBeamwidths_dcy_get
    if _newclass:dcy = _swig_property(_six_sicd.HalfPowerBeamwidths_dcy_get, _six_sicd.HalfPowerBeamwidths_dcy_set)
    __swig_destroy__ = _six_sicd.delete_HalfPowerBeamwidths
    __del__ = lambda self : None;
HalfPowerBeamwidths_swigregister = _six_sicd.HalfPowerBeamwidths_swigregister
HalfPowerBeamwidths_swigregister(HalfPowerBeamwidths)

class GainAndPhasePolys(_object):
    """Proxy of C++ GainAndPhasePolys class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GainAndPhasePolys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GainAndPhasePolys, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> GainAndPhasePolys"""
        this = _six_sicd.new_GainAndPhasePolys(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.GainAndPhasePolys___eq__(*args)

    def __ne__(*args):
        """__ne__(self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.GainAndPhasePolys___ne__(*args)

    __swig_setmethods__["gainPoly"] = _six_sicd.GainAndPhasePolys_gainPoly_set
    __swig_getmethods__["gainPoly"] = _six_sicd.GainAndPhasePolys_gainPoly_get
    if _newclass:gainPoly = _swig_property(_six_sicd.GainAndPhasePolys_gainPoly_get, _six_sicd.GainAndPhasePolys_gainPoly_set)
    __swig_setmethods__["phasePoly"] = _six_sicd.GainAndPhasePolys_phasePoly_set
    __swig_getmethods__["phasePoly"] = _six_sicd.GainAndPhasePolys_phasePoly_get
    if _newclass:phasePoly = _swig_property(_six_sicd.GainAndPhasePolys_phasePoly_get, _six_sicd.GainAndPhasePolys_phasePoly_set)
    __swig_destroy__ = _six_sicd.delete_GainAndPhasePolys
    __del__ = lambda self : None;
GainAndPhasePolys_swigregister = _six_sicd.GainAndPhasePolys_swigregister
GainAndPhasePolys_swigregister(GainAndPhasePolys)

class AntennaParameters(_object):
    """Proxy of C++ AntennaParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntennaParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> AntennaParameters"""
        this = _six_sicd.new_AntennaParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, AntennaParameters other) -> bool"""
        return _six_sicd.AntennaParameters___eq__(*args)

    def __ne__(*args):
        """__ne__(self, AntennaParameters other) -> bool"""
        return _six_sicd.AntennaParameters___ne__(*args)

    __swig_setmethods__["xAxisPoly"] = _six_sicd.AntennaParameters_xAxisPoly_set
    __swig_getmethods__["xAxisPoly"] = _six_sicd.AntennaParameters_xAxisPoly_get
    if _newclass:xAxisPoly = _swig_property(_six_sicd.AntennaParameters_xAxisPoly_get, _six_sicd.AntennaParameters_xAxisPoly_set)
    __swig_setmethods__["yAxisPoly"] = _six_sicd.AntennaParameters_yAxisPoly_set
    __swig_getmethods__["yAxisPoly"] = _six_sicd.AntennaParameters_yAxisPoly_get
    if _newclass:yAxisPoly = _swig_property(_six_sicd.AntennaParameters_yAxisPoly_get, _six_sicd.AntennaParameters_yAxisPoly_set)
    __swig_setmethods__["frequencyZero"] = _six_sicd.AntennaParameters_frequencyZero_set
    __swig_getmethods__["frequencyZero"] = _six_sicd.AntennaParameters_frequencyZero_get
    if _newclass:frequencyZero = _swig_property(_six_sicd.AntennaParameters_frequencyZero_get, _six_sicd.AntennaParameters_frequencyZero_set)
    __swig_setmethods__["electricalBoresight"] = _six_sicd.AntennaParameters_electricalBoresight_set
    __swig_getmethods__["electricalBoresight"] = _six_sicd.AntennaParameters_electricalBoresight_get
    if _newclass:electricalBoresight = _swig_property(_six_sicd.AntennaParameters_electricalBoresight_get, _six_sicd.AntennaParameters_electricalBoresight_set)
    __swig_setmethods__["halfPowerBeamwidths"] = _six_sicd.AntennaParameters_halfPowerBeamwidths_set
    __swig_getmethods__["halfPowerBeamwidths"] = _six_sicd.AntennaParameters_halfPowerBeamwidths_get
    if _newclass:halfPowerBeamwidths = _swig_property(_six_sicd.AntennaParameters_halfPowerBeamwidths_get, _six_sicd.AntennaParameters_halfPowerBeamwidths_set)
    __swig_setmethods__["array"] = _six_sicd.AntennaParameters_array_set
    __swig_getmethods__["array"] = _six_sicd.AntennaParameters_array_get
    if _newclass:array = _swig_property(_six_sicd.AntennaParameters_array_get, _six_sicd.AntennaParameters_array_set)
    __swig_setmethods__["element"] = _six_sicd.AntennaParameters_element_set
    __swig_getmethods__["element"] = _six_sicd.AntennaParameters_element_get
    if _newclass:element = _swig_property(_six_sicd.AntennaParameters_element_get, _six_sicd.AntennaParameters_element_set)
    __swig_setmethods__["gainBSPoly"] = _six_sicd.AntennaParameters_gainBSPoly_set
    __swig_getmethods__["gainBSPoly"] = _six_sicd.AntennaParameters_gainBSPoly_get
    if _newclass:gainBSPoly = _swig_property(_six_sicd.AntennaParameters_gainBSPoly_get, _six_sicd.AntennaParameters_gainBSPoly_set)
    __swig_setmethods__["electricalBoresightFrequencyShift"] = _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_set
    __swig_getmethods__["electricalBoresightFrequencyShift"] = _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_get
    if _newclass:electricalBoresightFrequencyShift = _swig_property(_six_sicd.AntennaParameters_electricalBoresightFrequencyShift_get, _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_set)
    __swig_setmethods__["mainlobeFrequencyDilation"] = _six_sicd.AntennaParameters_mainlobeFrequencyDilation_set
    __swig_getmethods__["mainlobeFrequencyDilation"] = _six_sicd.AntennaParameters_mainlobeFrequencyDilation_get
    if _newclass:mainlobeFrequencyDilation = _swig_property(_six_sicd.AntennaParameters_mainlobeFrequencyDilation_get, _six_sicd.AntennaParameters_mainlobeFrequencyDilation_set)
    __swig_destroy__ = _six_sicd.delete_AntennaParameters
    __del__ = lambda self : None;
AntennaParameters_swigregister = _six_sicd.AntennaParameters_swigregister
AntennaParameters_swigregister(AntennaParameters)

class Antenna(_object):
    """Proxy of C++ Antenna class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Antenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Antenna, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tx"] = _six_sicd.Antenna_tx_set
    __swig_getmethods__["tx"] = _six_sicd.Antenna_tx_get
    if _newclass:tx = _swig_property(_six_sicd.Antenna_tx_get, _six_sicd.Antenna_tx_set)
    __swig_setmethods__["rcv"] = _six_sicd.Antenna_rcv_set
    __swig_getmethods__["rcv"] = _six_sicd.Antenna_rcv_get
    if _newclass:rcv = _swig_property(_six_sicd.Antenna_rcv_get, _six_sicd.Antenna_rcv_set)
    __swig_setmethods__["twoWay"] = _six_sicd.Antenna_twoWay_set
    __swig_getmethods__["twoWay"] = _six_sicd.Antenna_twoWay_get
    if _newclass:twoWay = _swig_property(_six_sicd.Antenna_twoWay_get, _six_sicd.Antenna_twoWay_set)
    def __init__(self, *args): 
        """__init__(self) -> Antenna"""
        this = _six_sicd.new_Antenna(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_Antenna
    __del__ = lambda self : None;
Antenna_swigregister = _six_sicd.Antenna_swigregister
Antenna_swigregister(Antenna)

def __lshift__(*args):
  """
    __lshift__(std::ostream os, AreaDirectionParameters d) -> std::ostream
    __lshift__(std::ostream os, ElectricalBoresight d) -> std::ostream
    __lshift__(std::ostream os, HalfPowerBeamwidths d) -> std::ostream
    __lshift__(std::ostream os, GainAndPhasePolys d) -> std::ostream
    __lshift__(std::ostream os, AntennaParameters d) -> std::ostream
    """
  return _six_sicd.__lshift__(*args)

class MatchCollect(_object):
    """Proxy of C++ MatchCollect class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchCollect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchCollect, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> MatchCollect"""
        this = _six_sicd.new_MatchCollect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["coreName"] = _six_sicd.MatchCollect_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.MatchCollect_coreName_get
    if _newclass:coreName = _swig_property(_six_sicd.MatchCollect_coreName_get, _six_sicd.MatchCollect_coreName_set)
    __swig_setmethods__["matchIndex"] = _six_sicd.MatchCollect_matchIndex_set
    __swig_getmethods__["matchIndex"] = _six_sicd.MatchCollect_matchIndex_get
    if _newclass:matchIndex = _swig_property(_six_sicd.MatchCollect_matchIndex_get, _six_sicd.MatchCollect_matchIndex_set)
    __swig_setmethods__["parameters"] = _six_sicd.MatchCollect_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.MatchCollect_parameters_get
    if _newclass:parameters = _swig_property(_six_sicd.MatchCollect_parameters_get, _six_sicd.MatchCollect_parameters_set)
    __swig_destroy__ = _six_sicd.delete_MatchCollect
    __del__ = lambda self : None;
MatchCollect_swigregister = _six_sicd.MatchCollect_swigregister
MatchCollect_swigregister(MatchCollect)

class MatchType(_object):
    """Proxy of C++ MatchType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> MatchType"""
        this = _six_sicd.new_MatchType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["collectorName"] = _six_sicd.MatchType_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.MatchType_collectorName_get
    if _newclass:collectorName = _swig_property(_six_sicd.MatchType_collectorName_get, _six_sicd.MatchType_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.MatchType_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.MatchType_illuminatorName_get
    if _newclass:illuminatorName = _swig_property(_six_sicd.MatchType_illuminatorName_get, _six_sicd.MatchType_illuminatorName_set)
    __swig_setmethods__["matchType"] = _six_sicd.MatchType_matchType_set
    __swig_getmethods__["matchType"] = _six_sicd.MatchType_matchType_get
    if _newclass:matchType = _swig_property(_six_sicd.MatchType_matchType_get, _six_sicd.MatchType_matchType_set)
    __swig_setmethods__["typeID"] = _six_sicd.MatchType_typeID_set
    __swig_getmethods__["typeID"] = _six_sicd.MatchType_typeID_get
    if _newclass:typeID = _swig_property(_six_sicd.MatchType_typeID_get, _six_sicd.MatchType_typeID_set)
    __swig_setmethods__["currentIndex"] = _six_sicd.MatchType_currentIndex_set
    __swig_getmethods__["currentIndex"] = _six_sicd.MatchType_currentIndex_get
    if _newclass:currentIndex = _swig_property(_six_sicd.MatchType_currentIndex_get, _six_sicd.MatchType_currentIndex_set)
    __swig_setmethods__["matchCollects"] = _six_sicd.MatchType_matchCollects_set
    __swig_getmethods__["matchCollects"] = _six_sicd.MatchType_matchCollects_get
    if _newclass:matchCollects = _swig_property(_six_sicd.MatchType_matchCollects_get, _six_sicd.MatchType_matchCollects_set)
    __swig_destroy__ = _six_sicd.delete_MatchType
    __del__ = lambda self : None;
MatchType_swigregister = _six_sicd.MatchType_swigregister
MatchType_swigregister(MatchType)

class MatchInformation(_object):
    """Proxy of C++ MatchInformation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchInformation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> MatchInformation"""
        this = _six_sicd.new_MatchInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["types"] = _six_sicd.MatchInformation_types_set
    __swig_getmethods__["types"] = _six_sicd.MatchInformation_types_get
    if _newclass:types = _swig_property(_six_sicd.MatchInformation_types_get, _six_sicd.MatchInformation_types_set)
    __swig_destroy__ = _six_sicd.delete_MatchInformation
    __del__ = lambda self : None;
MatchInformation_swigregister = _six_sicd.MatchInformation_swigregister
MatchInformation_swigregister(MatchInformation)

class SlowTimeDeskew(_object):
    """Proxy of C++ SlowTimeDeskew class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlowTimeDeskew, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlowTimeDeskew, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> SlowTimeDeskew"""
        this = _six_sicd.new_SlowTimeDeskew(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_SlowTimeDeskew
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> SlowTimeDeskew"""
        return _six_sicd.SlowTimeDeskew_clone(*args)

    __swig_setmethods__["applied"] = _six_sicd.SlowTimeDeskew_applied_set
    __swig_getmethods__["applied"] = _six_sicd.SlowTimeDeskew_applied_get
    if _newclass:applied = _swig_property(_six_sicd.SlowTimeDeskew_applied_get, _six_sicd.SlowTimeDeskew_applied_set)
    __swig_setmethods__["slowTimeDeskewPhasePoly"] = _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_set
    __swig_getmethods__["slowTimeDeskewPhasePoly"] = _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_get
    if _newclass:slowTimeDeskewPhasePoly = _swig_property(_six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_get, _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_set)
SlowTimeDeskew_swigregister = _six_sicd.SlowTimeDeskew_swigregister
SlowTimeDeskew_swigregister(SlowTimeDeskew)

class PFA(_object):
    """Proxy of C++ PFA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PFA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PFA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> PFA"""
        this = _six_sicd.new_PFA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_PFA
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> PFA"""
        return _six_sicd.PFA_clone(*args)

    __swig_setmethods__["focusPlaneNormal"] = _six_sicd.PFA_focusPlaneNormal_set
    __swig_getmethods__["focusPlaneNormal"] = _six_sicd.PFA_focusPlaneNormal_get
    if _newclass:focusPlaneNormal = _swig_property(_six_sicd.PFA_focusPlaneNormal_get, _six_sicd.PFA_focusPlaneNormal_set)
    __swig_setmethods__["imagePlaneNormal"] = _six_sicd.PFA_imagePlaneNormal_set
    __swig_getmethods__["imagePlaneNormal"] = _six_sicd.PFA_imagePlaneNormal_get
    if _newclass:imagePlaneNormal = _swig_property(_six_sicd.PFA_imagePlaneNormal_get, _six_sicd.PFA_imagePlaneNormal_set)
    __swig_setmethods__["polarAngleRefTime"] = _six_sicd.PFA_polarAngleRefTime_set
    __swig_getmethods__["polarAngleRefTime"] = _six_sicd.PFA_polarAngleRefTime_get
    if _newclass:polarAngleRefTime = _swig_property(_six_sicd.PFA_polarAngleRefTime_get, _six_sicd.PFA_polarAngleRefTime_set)
    __swig_setmethods__["polarAnglePoly"] = _six_sicd.PFA_polarAnglePoly_set
    __swig_getmethods__["polarAnglePoly"] = _six_sicd.PFA_polarAnglePoly_get
    if _newclass:polarAnglePoly = _swig_property(_six_sicd.PFA_polarAnglePoly_get, _six_sicd.PFA_polarAnglePoly_set)
    __swig_setmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.PFA_spatialFrequencyScaleFactorPoly_set
    __swig_getmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.PFA_spatialFrequencyScaleFactorPoly_get
    if _newclass:spatialFrequencyScaleFactorPoly = _swig_property(_six_sicd.PFA_spatialFrequencyScaleFactorPoly_get, _six_sicd.PFA_spatialFrequencyScaleFactorPoly_set)
    __swig_setmethods__["krg1"] = _six_sicd.PFA_krg1_set
    __swig_getmethods__["krg1"] = _six_sicd.PFA_krg1_get
    if _newclass:krg1 = _swig_property(_six_sicd.PFA_krg1_get, _six_sicd.PFA_krg1_set)
    __swig_setmethods__["krg2"] = _six_sicd.PFA_krg2_set
    __swig_getmethods__["krg2"] = _six_sicd.PFA_krg2_get
    if _newclass:krg2 = _swig_property(_six_sicd.PFA_krg2_get, _six_sicd.PFA_krg2_set)
    __swig_setmethods__["kaz1"] = _six_sicd.PFA_kaz1_set
    __swig_getmethods__["kaz1"] = _six_sicd.PFA_kaz1_get
    if _newclass:kaz1 = _swig_property(_six_sicd.PFA_kaz1_get, _six_sicd.PFA_kaz1_set)
    __swig_setmethods__["kaz2"] = _six_sicd.PFA_kaz2_set
    __swig_getmethods__["kaz2"] = _six_sicd.PFA_kaz2_get
    if _newclass:kaz2 = _swig_property(_six_sicd.PFA_kaz2_get, _six_sicd.PFA_kaz2_set)
    __swig_setmethods__["slowTimeDeskew"] = _six_sicd.PFA_slowTimeDeskew_set
    __swig_getmethods__["slowTimeDeskew"] = _six_sicd.PFA_slowTimeDeskew_get
    if _newclass:slowTimeDeskew = _swig_property(_six_sicd.PFA_slowTimeDeskew_get, _six_sicd.PFA_slowTimeDeskew_set)
PFA_swigregister = _six_sicd.PFA_swigregister
PFA_swigregister(PFA)

class RMAT(_object):
    """Proxy of C++ RMAT class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMAT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RMAT"""
        this = _six_sicd.new_RMAT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["refTime"] = _six_sicd.RMAT_refTime_set
    __swig_getmethods__["refTime"] = _six_sicd.RMAT_refTime_get
    if _newclass:refTime = _swig_property(_six_sicd.RMAT_refTime_get, _six_sicd.RMAT_refTime_set)
    __swig_setmethods__["refPos"] = _six_sicd.RMAT_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.RMAT_refPos_get
    if _newclass:refPos = _swig_property(_six_sicd.RMAT_refPos_get, _six_sicd.RMAT_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.RMAT_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.RMAT_refVel_get
    if _newclass:refVel = _swig_property(_six_sicd.RMAT_refVel_get, _six_sicd.RMAT_refVel_set)
    __swig_setmethods__["distRefLinePoly"] = _six_sicd.RMAT_distRefLinePoly_set
    __swig_getmethods__["distRefLinePoly"] = _six_sicd.RMAT_distRefLinePoly_get
    if _newclass:distRefLinePoly = _swig_property(_six_sicd.RMAT_distRefLinePoly_get, _six_sicd.RMAT_distRefLinePoly_set)
    __swig_setmethods__["cosDCACOAPoly"] = _six_sicd.RMAT_cosDCACOAPoly_set
    __swig_getmethods__["cosDCACOAPoly"] = _six_sicd.RMAT_cosDCACOAPoly_get
    if _newclass:cosDCACOAPoly = _swig_property(_six_sicd.RMAT_cosDCACOAPoly_get, _six_sicd.RMAT_cosDCACOAPoly_set)
    __swig_setmethods__["kx1"] = _six_sicd.RMAT_kx1_set
    __swig_getmethods__["kx1"] = _six_sicd.RMAT_kx1_get
    if _newclass:kx1 = _swig_property(_six_sicd.RMAT_kx1_get, _six_sicd.RMAT_kx1_set)
    __swig_setmethods__["kx2"] = _six_sicd.RMAT_kx2_set
    __swig_getmethods__["kx2"] = _six_sicd.RMAT_kx2_get
    if _newclass:kx2 = _swig_property(_six_sicd.RMAT_kx2_get, _six_sicd.RMAT_kx2_set)
    __swig_setmethods__["ky1"] = _six_sicd.RMAT_ky1_set
    __swig_getmethods__["ky1"] = _six_sicd.RMAT_ky1_get
    if _newclass:ky1 = _swig_property(_six_sicd.RMAT_ky1_get, _six_sicd.RMAT_ky1_set)
    __swig_setmethods__["ky2"] = _six_sicd.RMAT_ky2_set
    __swig_getmethods__["ky2"] = _six_sicd.RMAT_ky2_get
    if _newclass:ky2 = _swig_property(_six_sicd.RMAT_ky2_get, _six_sicd.RMAT_ky2_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.RMAT_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.RMAT_dopConeAngleRef_get
    if _newclass:dopConeAngleRef = _swig_property(_six_sicd.RMAT_dopConeAngleRef_get, _six_sicd.RMAT_dopConeAngleRef_set)
    __swig_destroy__ = _six_sicd.delete_RMAT
    __del__ = lambda self : None;
RMAT_swigregister = _six_sicd.RMAT_swigregister
RMAT_swigregister(RMAT)

class RMCR(_object):
    """Proxy of C++ RMCR class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMCR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RMCR"""
        this = _six_sicd.new_RMCR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["refPos"] = _six_sicd.RMCR_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.RMCR_refPos_get
    if _newclass:refPos = _swig_property(_six_sicd.RMCR_refPos_get, _six_sicd.RMCR_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.RMCR_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.RMCR_refVel_get
    if _newclass:refVel = _swig_property(_six_sicd.RMCR_refVel_get, _six_sicd.RMCR_refVel_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.RMCR_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.RMCR_dopConeAngleRef_get
    if _newclass:dopConeAngleRef = _swig_property(_six_sicd.RMCR_dopConeAngleRef_get, _six_sicd.RMCR_dopConeAngleRef_set)
    __swig_destroy__ = _six_sicd.delete_RMCR
    __del__ = lambda self : None;
RMCR_swigregister = _six_sicd.RMCR_swigregister
RMCR_swigregister(RMCR)

class INCA(_object):
    """Proxy of C++ INCA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INCA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INCA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> INCA"""
        this = _six_sicd.new_INCA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["timeCAPoly"] = _six_sicd.INCA_timeCAPoly_set
    __swig_getmethods__["timeCAPoly"] = _six_sicd.INCA_timeCAPoly_get
    if _newclass:timeCAPoly = _swig_property(_six_sicd.INCA_timeCAPoly_get, _six_sicd.INCA_timeCAPoly_set)
    __swig_setmethods__["rangeCA"] = _six_sicd.INCA_rangeCA_set
    __swig_getmethods__["rangeCA"] = _six_sicd.INCA_rangeCA_get
    if _newclass:rangeCA = _swig_property(_six_sicd.INCA_rangeCA_get, _six_sicd.INCA_rangeCA_set)
    __swig_setmethods__["freqZero"] = _six_sicd.INCA_freqZero_set
    __swig_getmethods__["freqZero"] = _six_sicd.INCA_freqZero_get
    if _newclass:freqZero = _swig_property(_six_sicd.INCA_freqZero_get, _six_sicd.INCA_freqZero_set)
    __swig_setmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.INCA_dopplerRateScaleFactorPoly_set
    __swig_getmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.INCA_dopplerRateScaleFactorPoly_get
    if _newclass:dopplerRateScaleFactorPoly = _swig_property(_six_sicd.INCA_dopplerRateScaleFactorPoly_get, _six_sicd.INCA_dopplerRateScaleFactorPoly_set)
    __swig_setmethods__["dopplerCentroidPoly"] = _six_sicd.INCA_dopplerCentroidPoly_set
    __swig_getmethods__["dopplerCentroidPoly"] = _six_sicd.INCA_dopplerCentroidPoly_get
    if _newclass:dopplerCentroidPoly = _swig_property(_six_sicd.INCA_dopplerCentroidPoly_get, _six_sicd.INCA_dopplerCentroidPoly_set)
    __swig_setmethods__["dopplerCentroidCOA"] = _six_sicd.INCA_dopplerCentroidCOA_set
    __swig_getmethods__["dopplerCentroidCOA"] = _six_sicd.INCA_dopplerCentroidCOA_get
    if _newclass:dopplerCentroidCOA = _swig_property(_six_sicd.INCA_dopplerCentroidCOA_get, _six_sicd.INCA_dopplerCentroidCOA_set)
    __swig_destroy__ = _six_sicd.delete_INCA
    __del__ = lambda self : None;
INCA_swigregister = _six_sicd.INCA_swigregister
INCA_swigregister(INCA)

class RMA(_object):
    """Proxy of C++ RMA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RMA"""
        this = _six_sicd.new_RMA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["algoType"] = _six_sicd.RMA_algoType_set
    __swig_getmethods__["algoType"] = _six_sicd.RMA_algoType_get
    if _newclass:algoType = _swig_property(_six_sicd.RMA_algoType_get, _six_sicd.RMA_algoType_set)
    __swig_setmethods__["rmat"] = _six_sicd.RMA_rmat_set
    __swig_getmethods__["rmat"] = _six_sicd.RMA_rmat_get
    if _newclass:rmat = _swig_property(_six_sicd.RMA_rmat_get, _six_sicd.RMA_rmat_set)
    __swig_setmethods__["rmcr"] = _six_sicd.RMA_rmcr_set
    __swig_getmethods__["rmcr"] = _six_sicd.RMA_rmcr_get
    if _newclass:rmcr = _swig_property(_six_sicd.RMA_rmcr_get, _six_sicd.RMA_rmcr_set)
    __swig_setmethods__["inca"] = _six_sicd.RMA_inca_set
    __swig_getmethods__["inca"] = _six_sicd.RMA_inca_get
    if _newclass:inca = _swig_property(_six_sicd.RMA_inca_get, _six_sicd.RMA_inca_set)
    __swig_destroy__ = _six_sicd.delete_RMA
    __del__ = lambda self : None;
RMA_swigregister = _six_sicd.RMA_swigregister
RMA_swigregister(RMA)

class RgAzComp(_object):
    """Proxy of C++ RgAzComp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RgAzComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RgAzComp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> RgAzComp"""
        this = _six_sicd.new_RgAzComp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["azSF"] = _six_sicd.RgAzComp_azSF_set
    __swig_getmethods__["azSF"] = _six_sicd.RgAzComp_azSF_get
    if _newclass:azSF = _swig_property(_six_sicd.RgAzComp_azSF_get, _six_sicd.RgAzComp_azSF_set)
    __swig_setmethods__["kazPoly"] = _six_sicd.RgAzComp_kazPoly_set
    __swig_getmethods__["kazPoly"] = _six_sicd.RgAzComp_kazPoly_get
    if _newclass:kazPoly = _swig_property(_six_sicd.RgAzComp_kazPoly_get, _six_sicd.RgAzComp_kazPoly_set)
    __swig_destroy__ = _six_sicd.delete_RgAzComp
    __del__ = lambda self : None;
RgAzComp_swigregister = _six_sicd.RgAzComp_swigregister
RgAzComp_swigregister(RgAzComp)

class ComplexData(six.Data):
    """Proxy of C++ ComplexData class"""
    __swig_setmethods__ = {}
    for _s in [six.Data]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexData, name, value)
    __swig_getmethods__ = {}
    for _s in [six.Data]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collectionInformation"] = _six_sicd.ComplexData_collectionInformation_set
    __swig_getmethods__["collectionInformation"] = _six_sicd.ComplexData_collectionInformation_get
    if _newclass:collectionInformation = _swig_property(_six_sicd.ComplexData_collectionInformation_get, _six_sicd.ComplexData_collectionInformation_set)
    __swig_setmethods__["imageCreation"] = _six_sicd.ComplexData_imageCreation_set
    __swig_getmethods__["imageCreation"] = _six_sicd.ComplexData_imageCreation_get
    if _newclass:imageCreation = _swig_property(_six_sicd.ComplexData_imageCreation_get, _six_sicd.ComplexData_imageCreation_set)
    __swig_setmethods__["imageData"] = _six_sicd.ComplexData_imageData_set
    __swig_getmethods__["imageData"] = _six_sicd.ComplexData_imageData_get
    if _newclass:imageData = _swig_property(_six_sicd.ComplexData_imageData_get, _six_sicd.ComplexData_imageData_set)
    __swig_setmethods__["geoData"] = _six_sicd.ComplexData_geoData_set
    __swig_getmethods__["geoData"] = _six_sicd.ComplexData_geoData_get
    if _newclass:geoData = _swig_property(_six_sicd.ComplexData_geoData_get, _six_sicd.ComplexData_geoData_set)
    __swig_setmethods__["grid"] = _six_sicd.ComplexData_grid_set
    __swig_getmethods__["grid"] = _six_sicd.ComplexData_grid_get
    if _newclass:grid = _swig_property(_six_sicd.ComplexData_grid_get, _six_sicd.ComplexData_grid_set)
    __swig_setmethods__["timeline"] = _six_sicd.ComplexData_timeline_set
    __swig_getmethods__["timeline"] = _six_sicd.ComplexData_timeline_get
    if _newclass:timeline = _swig_property(_six_sicd.ComplexData_timeline_get, _six_sicd.ComplexData_timeline_set)
    __swig_setmethods__["position"] = _six_sicd.ComplexData_position_set
    __swig_getmethods__["position"] = _six_sicd.ComplexData_position_get
    if _newclass:position = _swig_property(_six_sicd.ComplexData_position_get, _six_sicd.ComplexData_position_set)
    __swig_setmethods__["radarCollection"] = _six_sicd.ComplexData_radarCollection_set
    __swig_getmethods__["radarCollection"] = _six_sicd.ComplexData_radarCollection_get
    if _newclass:radarCollection = _swig_property(_six_sicd.ComplexData_radarCollection_get, _six_sicd.ComplexData_radarCollection_set)
    __swig_setmethods__["imageFormation"] = _six_sicd.ComplexData_imageFormation_set
    __swig_getmethods__["imageFormation"] = _six_sicd.ComplexData_imageFormation_get
    if _newclass:imageFormation = _swig_property(_six_sicd.ComplexData_imageFormation_get, _six_sicd.ComplexData_imageFormation_set)
    __swig_setmethods__["scpcoa"] = _six_sicd.ComplexData_scpcoa_set
    __swig_getmethods__["scpcoa"] = _six_sicd.ComplexData_scpcoa_get
    if _newclass:scpcoa = _swig_property(_six_sicd.ComplexData_scpcoa_get, _six_sicd.ComplexData_scpcoa_set)
    __swig_setmethods__["radiometric"] = _six_sicd.ComplexData_radiometric_set
    __swig_getmethods__["radiometric"] = _six_sicd.ComplexData_radiometric_get
    if _newclass:radiometric = _swig_property(_six_sicd.ComplexData_radiometric_get, _six_sicd.ComplexData_radiometric_set)
    __swig_setmethods__["antenna"] = _six_sicd.ComplexData_antenna_set
    __swig_getmethods__["antenna"] = _six_sicd.ComplexData_antenna_get
    if _newclass:antenna = _swig_property(_six_sicd.ComplexData_antenna_get, _six_sicd.ComplexData_antenna_set)
    __swig_setmethods__["errorStatistics"] = _six_sicd.ComplexData_errorStatistics_set
    __swig_getmethods__["errorStatistics"] = _six_sicd.ComplexData_errorStatistics_get
    if _newclass:errorStatistics = _swig_property(_six_sicd.ComplexData_errorStatistics_get, _six_sicd.ComplexData_errorStatistics_set)
    __swig_setmethods__["matchInformation"] = _six_sicd.ComplexData_matchInformation_set
    __swig_getmethods__["matchInformation"] = _six_sicd.ComplexData_matchInformation_get
    if _newclass:matchInformation = _swig_property(_six_sicd.ComplexData_matchInformation_get, _six_sicd.ComplexData_matchInformation_set)
    __swig_setmethods__["pfa"] = _six_sicd.ComplexData_pfa_set
    __swig_getmethods__["pfa"] = _six_sicd.ComplexData_pfa_get
    if _newclass:pfa = _swig_property(_six_sicd.ComplexData_pfa_get, _six_sicd.ComplexData_pfa_set)
    __swig_setmethods__["rma"] = _six_sicd.ComplexData_rma_set
    __swig_getmethods__["rma"] = _six_sicd.ComplexData_rma_get
    if _newclass:rma = _swig_property(_six_sicd.ComplexData_rma_get, _six_sicd.ComplexData_rma_set)
    __swig_setmethods__["rgAzComp"] = _six_sicd.ComplexData_rgAzComp_set
    __swig_getmethods__["rgAzComp"] = _six_sicd.ComplexData_rgAzComp_get
    if _newclass:rgAzComp = _swig_property(_six_sicd.ComplexData_rgAzComp_get, _six_sicd.ComplexData_rgAzComp_set)
    def __init__(self, *args): 
        """__init__(self) -> ComplexData"""
        this = _six_sicd.new_ComplexData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexData
    __del__ = lambda self : None;
    def getDataType(*args):
        """getDataType(self) -> DataType"""
        return _six_sicd.ComplexData_getDataType(*args)

    def clone(*args):
        """clone(self) -> Data"""
        return _six_sicd.ComplexData_clone(*args)

    def getPixelType(*args):
        """getPixelType(self) -> PixelType"""
        return _six_sicd.ComplexData_getPixelType(*args)

    def setPixelType(*args):
        """setPixelType(self, PixelType pixelType)"""
        return _six_sicd.ComplexData_setPixelType(*args)

    def getNumRows(*args):
        """getNumRows(self) -> size_t"""
        return _six_sicd.ComplexData_getNumRows(*args)

    def setNumRows(*args):
        """setNumRows(self, size_t numRows)"""
        return _six_sicd.ComplexData_setNumRows(*args)

    def getNumCols(*args):
        """getNumCols(self) -> size_t"""
        return _six_sicd.ComplexData_getNumCols(*args)

    def setNumCols(*args):
        """setNumCols(self, size_t numCols)"""
        return _six_sicd.ComplexData_setNumCols(*args)

    def getImageCorners(*args):
        """getImageCorners(self) -> LatLonCorners"""
        return _six_sicd.ComplexData_getImageCorners(*args)

    def setImageCorners(*args):
        """setImageCorners(self, LatLonCorners imageCorners)"""
        return _six_sicd.ComplexData_setImageCorners(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _six_sicd.ComplexData_getName(*args)

    def setName(*args):
        """setName(self, string name)"""
        return _six_sicd.ComplexData_setName(*args)

    def getSource(*args):
        """getSource(self) -> string"""
        return _six_sicd.ComplexData_getSource(*args)

    def setSource(*args):
        """setSource(self, string name)"""
        return _six_sicd.ComplexData_setSource(*args)

    def getCreationTime(*args):
        """getCreationTime(self) -> DateTime"""
        return _six_sicd.ComplexData_getCreationTime(*args)

    def setCreationTime(*args):
        """setCreationTime(self, DateTime creationTime)"""
        return _six_sicd.ComplexData_setCreationTime(*args)

    def getCollectionStartDateTime(*args):
        """getCollectionStartDateTime(self) -> DateTime"""
        return _six_sicd.ComplexData_getCollectionStartDateTime(*args)

    def getClassification(*args):
        """
        getClassification(self) -> Classification
        getClassification(self) -> Classification
        """
        return _six_sicd.ComplexData_getClassification(*args)

    def getDisplayLUT(*args):
        """getDisplayLUT(self)"""
        return _six_sicd.ComplexData_getDisplayLUT(*args)

    def getVendorID(*args):
        """getVendorID(self) -> string"""
        return _six_sicd.ComplexData_getVendorID(*args)

    def getVersion(*args):
        """getVersion(self) -> string"""
        return _six_sicd.ComplexData_getVersion(*args)

    def setVersion(*args):
        """setVersion(self, string version)"""
        return _six_sicd.ComplexData_setVersion(*args)

ComplexData_swigregister = _six_sicd.ComplexData_swigregister
ComplexData_swigregister(ComplexData)

class ComplexXMLControl(six.XMLControl):
    """Proxy of C++ ComplexXMLControl class"""
    __swig_setmethods__ = {}
    for _s in [six.XMLControl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexXMLControl, name, value)
    __swig_getmethods__ = {}
    for _s in [six.XMLControl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexXMLControl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, logging::Logger log=None, bool ownLog=False) -> ComplexXMLControl
        __init__(self, logging::Logger log=None) -> ComplexXMLControl
        __init__(self) -> ComplexXMLControl
        """
        this = _six_sicd.new_ComplexXMLControl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexXMLControl
    __del__ = lambda self : None;
ComplexXMLControl_swigregister = _six_sicd.ComplexXMLControl_swigregister
ComplexXMLControl_swigregister(ComplexXMLControl)

class SixSicdUtilities(_object):
    """Proxy of C++ SixSicdUtilities class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SixSicdUtilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SixSicdUtilities, name)
    __repr__ = _swig_repr
    def getSceneGeometry(*args):
        """getSceneGeometry(ComplexData data) -> SceneGeometry"""
        return _six_sicd.SixSicdUtilities_getSceneGeometry(*args)

    if _newclass:getSceneGeometry = staticmethod(getSceneGeometry)
    __swig_getmethods__["getSceneGeometry"] = lambda x: getSceneGeometry
    def getProjectionModel(*args):
        """getProjectionModel(ComplexData data, SceneGeometry geom) -> ProjectionModel"""
        return _six_sicd.SixSicdUtilities_getProjectionModel(*args)

    if _newclass:getProjectionModel = staticmethod(getProjectionModel)
    __swig_getmethods__["getProjectionModel"] = lambda x: getProjectionModel
    def __init__(self, *args): 
        """__init__(self) -> SixSicdUtilities"""
        this = _six_sicd.new_SixSicdUtilities(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six_sicd.delete_SixSicdUtilities
    __del__ = lambda self : None;
SixSicdUtilities_swigregister = _six_sicd.SixSicdUtilities_swigregister
SixSicdUtilities_swigregister(SixSicdUtilities)

def SixSicdUtilities_getSceneGeometry(*args):
  """SixSicdUtilities_getSceneGeometry(ComplexData data) -> SceneGeometry"""
  return _six_sicd.SixSicdUtilities_getSceneGeometry(*args)

def SixSicdUtilities_getProjectionModel(*args):
  """SixSicdUtilities_getProjectionModel(ComplexData data, SceneGeometry geom) -> ProjectionModel"""
  return _six_sicd.SixSicdUtilities_getProjectionModel(*args)

class ScopedCloneableCollectionInformation(_object):
    """Proxy of C++ ScopedCloneableCollectionInformation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableCollectionInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableCollectionInformation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, CollectionInformation ptr=None) -> ScopedCloneableCollectionInformation
        __init__(self) -> ScopedCloneableCollectionInformation
        __init__(self, ScopedCloneableCollectionInformation rhs) -> ScopedCloneableCollectionInformation
        """
        this = _six_sicd.new_ScopedCloneableCollectionInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation_get(*args)

    def __ref__(*args):
        """__ref__(self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation___deref__(*args)

    def reset(*args):
        """
        reset(self, CollectionInformation ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableCollectionInformation_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableCollectionInformation
    __del__ = lambda self : None;
    __swig_setmethods__["collectorName"] = _six_sicd.ScopedCloneableCollectionInformation_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.ScopedCloneableCollectionInformation_collectorName_get
    if _newclass:collectorName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_collectorName_get, _six_sicd.ScopedCloneableCollectionInformation_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_get
    if _newclass:illuminatorName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_illuminatorName_get, _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_set)
    __swig_setmethods__["coreName"] = _six_sicd.ScopedCloneableCollectionInformation_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.ScopedCloneableCollectionInformation_coreName_get
    if _newclass:coreName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_coreName_get, _six_sicd.ScopedCloneableCollectionInformation_coreName_set)
    __swig_setmethods__["collectType"] = _six_sicd.ScopedCloneableCollectionInformation_collectType_set
    __swig_getmethods__["collectType"] = _six_sicd.ScopedCloneableCollectionInformation_collectType_get
    if _newclass:collectType = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_collectType_get, _six_sicd.ScopedCloneableCollectionInformation_collectType_set)
    __swig_setmethods__["radarMode"] = _six_sicd.ScopedCloneableCollectionInformation_radarMode_set
    __swig_getmethods__["radarMode"] = _six_sicd.ScopedCloneableCollectionInformation_radarMode_get
    if _newclass:radarMode = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_radarMode_get, _six_sicd.ScopedCloneableCollectionInformation_radarMode_set)
    __swig_setmethods__["radarModeID"] = _six_sicd.ScopedCloneableCollectionInformation_radarModeID_set
    __swig_getmethods__["radarModeID"] = _six_sicd.ScopedCloneableCollectionInformation_radarModeID_get
    if _newclass:radarModeID = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_radarModeID_get, _six_sicd.ScopedCloneableCollectionInformation_radarModeID_set)
    __swig_setmethods__["classification"] = _six_sicd.ScopedCloneableCollectionInformation_classification_set
    __swig_getmethods__["classification"] = _six_sicd.ScopedCloneableCollectionInformation_classification_get
    if _newclass:classification = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_classification_get, _six_sicd.ScopedCloneableCollectionInformation_classification_set)
    __swig_setmethods__["countryCodes"] = _six_sicd.ScopedCloneableCollectionInformation_countryCodes_set
    __swig_getmethods__["countryCodes"] = _six_sicd.ScopedCloneableCollectionInformation_countryCodes_get
    if _newclass:countryCodes = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_countryCodes_get, _six_sicd.ScopedCloneableCollectionInformation_countryCodes_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCloneableCollectionInformation_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCloneableCollectionInformation_parameters_get
    if _newclass:parameters = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_parameters_get, _six_sicd.ScopedCloneableCollectionInformation_parameters_set)
    def clone(*args):
        """clone(self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation_clone(*args)

    def __eq__(*args):
        """__eq__(self, CollectionInformation other) -> bool"""
        return _six_sicd.ScopedCloneableCollectionInformation___eq__(*args)

    def __ne__(*args):
        """__ne__(self, CollectionInformation other) -> bool"""
        return _six_sicd.ScopedCloneableCollectionInformation___ne__(*args)

ScopedCloneableCollectionInformation_swigregister = _six_sicd.ScopedCloneableCollectionInformation_swigregister
ScopedCloneableCollectionInformation_swigregister(ScopedCloneableCollectionInformation)

class ScopedCloneableImageCreation(_object):
    """Proxy of C++ ScopedCloneableImageCreation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableImageCreation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableImageCreation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ImageCreation ptr=None) -> ScopedCloneableImageCreation
        __init__(self) -> ScopedCloneableImageCreation
        __init__(self, ScopedCloneableImageCreation rhs) -> ScopedCloneableImageCreation
        """
        this = _six_sicd.new_ScopedCloneableImageCreation(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation_get(*args)

    def __ref__(*args):
        """__ref__(self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation___deref__(*args)

    def reset(*args):
        """
        reset(self, ImageCreation ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableImageCreation_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableImageCreation
    __del__ = lambda self : None;
    __swig_setmethods__["application"] = _six_sicd.ScopedCloneableImageCreation_application_set
    __swig_getmethods__["application"] = _six_sicd.ScopedCloneableImageCreation_application_get
    if _newclass:application = _swig_property(_six_sicd.ScopedCloneableImageCreation_application_get, _six_sicd.ScopedCloneableImageCreation_application_set)
    __swig_setmethods__["dateTime"] = _six_sicd.ScopedCloneableImageCreation_dateTime_set
    __swig_getmethods__["dateTime"] = _six_sicd.ScopedCloneableImageCreation_dateTime_get
    if _newclass:dateTime = _swig_property(_six_sicd.ScopedCloneableImageCreation_dateTime_get, _six_sicd.ScopedCloneableImageCreation_dateTime_set)
    __swig_setmethods__["site"] = _six_sicd.ScopedCloneableImageCreation_site_set
    __swig_getmethods__["site"] = _six_sicd.ScopedCloneableImageCreation_site_get
    if _newclass:site = _swig_property(_six_sicd.ScopedCloneableImageCreation_site_get, _six_sicd.ScopedCloneableImageCreation_site_set)
    __swig_setmethods__["profile"] = _six_sicd.ScopedCloneableImageCreation_profile_set
    __swig_getmethods__["profile"] = _six_sicd.ScopedCloneableImageCreation_profile_get
    if _newclass:profile = _swig_property(_six_sicd.ScopedCloneableImageCreation_profile_get, _six_sicd.ScopedCloneableImageCreation_profile_set)
    def clone(*args):
        """clone(self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation_clone(*args)

ScopedCloneableImageCreation_swigregister = _six_sicd.ScopedCloneableImageCreation_swigregister
ScopedCloneableImageCreation_swigregister(ScopedCloneableImageCreation)

class ScopedCloneableImageData(_object):
    """Proxy of C++ ScopedCloneableImageData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableImageData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ImageData ptr=None) -> ScopedCloneableImageData
        __init__(self) -> ScopedCloneableImageData
        __init__(self, ScopedCloneableImageData rhs) -> ScopedCloneableImageData
        """
        this = _six_sicd.new_ScopedCloneableImageData(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> ImageData"""
        return _six_sicd.ScopedCloneableImageData_get(*args)

    def __ref__(*args):
        """__ref__(self) -> ImageData"""
        return _six_sicd.ScopedCloneableImageData___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> ImageData"""
        return _six_sicd.ScopedCloneableImageData___deref__(*args)

    def reset(*args):
        """
        reset(self, ImageData ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableImageData_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableImageData
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> ImageData"""
        return _six_sicd.ScopedCloneableImageData_clone(*args)

    __swig_setmethods__["pixelType"] = _six_sicd.ScopedCloneableImageData_pixelType_set
    __swig_getmethods__["pixelType"] = _six_sicd.ScopedCloneableImageData_pixelType_get
    if _newclass:pixelType = _swig_property(_six_sicd.ScopedCloneableImageData_pixelType_get, _six_sicd.ScopedCloneableImageData_pixelType_set)
    __swig_setmethods__["amplitudeTable"] = _six_sicd.ScopedCloneableImageData_amplitudeTable_set
    __swig_getmethods__["amplitudeTable"] = _six_sicd.ScopedCloneableImageData_amplitudeTable_get
    if _newclass:amplitudeTable = _swig_property(_six_sicd.ScopedCloneableImageData_amplitudeTable_get, _six_sicd.ScopedCloneableImageData_amplitudeTable_set)
    __swig_setmethods__["numRows"] = _six_sicd.ScopedCloneableImageData_numRows_set
    __swig_getmethods__["numRows"] = _six_sicd.ScopedCloneableImageData_numRows_get
    if _newclass:numRows = _swig_property(_six_sicd.ScopedCloneableImageData_numRows_get, _six_sicd.ScopedCloneableImageData_numRows_set)
    __swig_setmethods__["numCols"] = _six_sicd.ScopedCloneableImageData_numCols_set
    __swig_getmethods__["numCols"] = _six_sicd.ScopedCloneableImageData_numCols_get
    if _newclass:numCols = _swig_property(_six_sicd.ScopedCloneableImageData_numCols_get, _six_sicd.ScopedCloneableImageData_numCols_set)
    __swig_setmethods__["firstRow"] = _six_sicd.ScopedCloneableImageData_firstRow_set
    __swig_getmethods__["firstRow"] = _six_sicd.ScopedCloneableImageData_firstRow_get
    if _newclass:firstRow = _swig_property(_six_sicd.ScopedCloneableImageData_firstRow_get, _six_sicd.ScopedCloneableImageData_firstRow_set)
    __swig_setmethods__["firstCol"] = _six_sicd.ScopedCloneableImageData_firstCol_set
    __swig_getmethods__["firstCol"] = _six_sicd.ScopedCloneableImageData_firstCol_get
    if _newclass:firstCol = _swig_property(_six_sicd.ScopedCloneableImageData_firstCol_get, _six_sicd.ScopedCloneableImageData_firstCol_set)
    __swig_setmethods__["fullImage"] = _six_sicd.ScopedCloneableImageData_fullImage_set
    __swig_getmethods__["fullImage"] = _six_sicd.ScopedCloneableImageData_fullImage_get
    if _newclass:fullImage = _swig_property(_six_sicd.ScopedCloneableImageData_fullImage_get, _six_sicd.ScopedCloneableImageData_fullImage_set)
    __swig_setmethods__["scpPixel"] = _six_sicd.ScopedCloneableImageData_scpPixel_set
    __swig_getmethods__["scpPixel"] = _six_sicd.ScopedCloneableImageData_scpPixel_get
    if _newclass:scpPixel = _swig_property(_six_sicd.ScopedCloneableImageData_scpPixel_get, _six_sicd.ScopedCloneableImageData_scpPixel_set)
    __swig_setmethods__["validData"] = _six_sicd.ScopedCloneableImageData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ScopedCloneableImageData_validData_get
    if _newclass:validData = _swig_property(_six_sicd.ScopedCloneableImageData_validData_get, _six_sicd.ScopedCloneableImageData_validData_set)
ScopedCloneableImageData_swigregister = _six_sicd.ScopedCloneableImageData_swigregister
ScopedCloneableImageData_swigregister(ScopedCloneableImageData)

class ScopedCloneableGeoData(_object):
    """Proxy of C++ ScopedCloneableGeoData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGeoData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GeoData ptr=None) -> ScopedCloneableGeoData
        __init__(self) -> ScopedCloneableGeoData
        __init__(self, ScopedCloneableGeoData rhs) -> ScopedCloneableGeoData
        """
        this = _six_sicd.new_ScopedCloneableGeoData(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData_get(*args)

    def __ref__(*args):
        """__ref__(self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData___deref__(*args)

    def reset(*args):
        """
        reset(self, GeoData ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableGeoData_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGeoData
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData_clone(*args)

    __swig_setmethods__["earthModel"] = _six_sicd.ScopedCloneableGeoData_earthModel_set
    __swig_getmethods__["earthModel"] = _six_sicd.ScopedCloneableGeoData_earthModel_get
    if _newclass:earthModel = _swig_property(_six_sicd.ScopedCloneableGeoData_earthModel_get, _six_sicd.ScopedCloneableGeoData_earthModel_set)
    __swig_setmethods__["scp"] = _six_sicd.ScopedCloneableGeoData_scp_set
    __swig_getmethods__["scp"] = _six_sicd.ScopedCloneableGeoData_scp_get
    if _newclass:scp = _swig_property(_six_sicd.ScopedCloneableGeoData_scp_get, _six_sicd.ScopedCloneableGeoData_scp_set)
    __swig_setmethods__["imageCorners"] = _six_sicd.ScopedCloneableGeoData_imageCorners_set
    __swig_getmethods__["imageCorners"] = _six_sicd.ScopedCloneableGeoData_imageCorners_get
    if _newclass:imageCorners = _swig_property(_six_sicd.ScopedCloneableGeoData_imageCorners_get, _six_sicd.ScopedCloneableGeoData_imageCorners_set)
    __swig_setmethods__["validData"] = _six_sicd.ScopedCloneableGeoData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ScopedCloneableGeoData_validData_get
    if _newclass:validData = _swig_property(_six_sicd.ScopedCloneableGeoData_validData_get, _six_sicd.ScopedCloneableGeoData_validData_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoData_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoData_geoInfos_get
    if _newclass:geoInfos = _swig_property(_six_sicd.ScopedCloneableGeoData_geoInfos_get, _six_sicd.ScopedCloneableGeoData_geoInfos_set)
ScopedCloneableGeoData_swigregister = _six_sicd.ScopedCloneableGeoData_swigregister
ScopedCloneableGeoData_swigregister(ScopedCloneableGeoData)

class ScopedCloneableGrid(_object):
    """Proxy of C++ ScopedCloneableGrid class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Grid ptr=None) -> ScopedCloneableGrid
        __init__(self) -> ScopedCloneableGrid
        __init__(self, ScopedCloneableGrid rhs) -> ScopedCloneableGrid
        """
        this = _six_sicd.new_ScopedCloneableGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid_get(*args)

    def __ref__(*args):
        """__ref__(self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid___deref__(*args)

    def reset(*args):
        """
        reset(self, Grid ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableGrid_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGrid
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid_clone(*args)

    __swig_setmethods__["imagePlane"] = _six_sicd.ScopedCloneableGrid_imagePlane_set
    __swig_getmethods__["imagePlane"] = _six_sicd.ScopedCloneableGrid_imagePlane_get
    if _newclass:imagePlane = _swig_property(_six_sicd.ScopedCloneableGrid_imagePlane_get, _six_sicd.ScopedCloneableGrid_imagePlane_set)
    __swig_setmethods__["type"] = _six_sicd.ScopedCloneableGrid_type_set
    __swig_getmethods__["type"] = _six_sicd.ScopedCloneableGrid_type_get
    if _newclass:type = _swig_property(_six_sicd.ScopedCloneableGrid_type_get, _six_sicd.ScopedCloneableGrid_type_set)
    __swig_setmethods__["timeCOAPoly"] = _six_sicd.ScopedCloneableGrid_timeCOAPoly_set
    __swig_getmethods__["timeCOAPoly"] = _six_sicd.ScopedCloneableGrid_timeCOAPoly_get
    if _newclass:timeCOAPoly = _swig_property(_six_sicd.ScopedCloneableGrid_timeCOAPoly_get, _six_sicd.ScopedCloneableGrid_timeCOAPoly_set)
    __swig_setmethods__["row"] = _six_sicd.ScopedCloneableGrid_row_set
    __swig_getmethods__["row"] = _six_sicd.ScopedCloneableGrid_row_get
    if _newclass:row = _swig_property(_six_sicd.ScopedCloneableGrid_row_get, _six_sicd.ScopedCloneableGrid_row_set)
    __swig_setmethods__["col"] = _six_sicd.ScopedCloneableGrid_col_set
    __swig_getmethods__["col"] = _six_sicd.ScopedCloneableGrid_col_get
    if _newclass:col = _swig_property(_six_sicd.ScopedCloneableGrid_col_get, _six_sicd.ScopedCloneableGrid_col_set)
ScopedCloneableGrid_swigregister = _six_sicd.ScopedCloneableGrid_swigregister
ScopedCloneableGrid_swigregister(ScopedCloneableGrid)

class ScopedCloneableTimeline(_object):
    """Proxy of C++ ScopedCloneableTimeline class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableTimeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableTimeline, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Timeline ptr=None) -> ScopedCloneableTimeline
        __init__(self) -> ScopedCloneableTimeline
        __init__(self, ScopedCloneableTimeline rhs) -> ScopedCloneableTimeline
        """
        this = _six_sicd.new_ScopedCloneableTimeline(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> Timeline"""
        return _six_sicd.ScopedCloneableTimeline_get(*args)

    def __ref__(*args):
        """__ref__(self) -> Timeline"""
        return _six_sicd.ScopedCloneableTimeline___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> Timeline"""
        return _six_sicd.ScopedCloneableTimeline___deref__(*args)

    def reset(*args):
        """
        reset(self, Timeline ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableTimeline_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableTimeline
    __del__ = lambda self : None;
    __swig_setmethods__["collectStart"] = _six_sicd.ScopedCloneableTimeline_collectStart_set
    __swig_getmethods__["collectStart"] = _six_sicd.ScopedCloneableTimeline_collectStart_get
    if _newclass:collectStart = _swig_property(_six_sicd.ScopedCloneableTimeline_collectStart_get, _six_sicd.ScopedCloneableTimeline_collectStart_set)
    __swig_setmethods__["collectDuration"] = _six_sicd.ScopedCloneableTimeline_collectDuration_set
    __swig_getmethods__["collectDuration"] = _six_sicd.ScopedCloneableTimeline_collectDuration_get
    if _newclass:collectDuration = _swig_property(_six_sicd.ScopedCloneableTimeline_collectDuration_get, _six_sicd.ScopedCloneableTimeline_collectDuration_set)
    __swig_setmethods__["interPulsePeriod"] = _six_sicd.ScopedCloneableTimeline_interPulsePeriod_set
    __swig_getmethods__["interPulsePeriod"] = _six_sicd.ScopedCloneableTimeline_interPulsePeriod_get
    if _newclass:interPulsePeriod = _swig_property(_six_sicd.ScopedCloneableTimeline_interPulsePeriod_get, _six_sicd.ScopedCloneableTimeline_interPulsePeriod_set)
    def clone(*args):
        """clone(self) -> Timeline"""
        return _six_sicd.ScopedCloneableTimeline_clone(*args)

ScopedCloneableTimeline_swigregister = _six_sicd.ScopedCloneableTimeline_swigregister
ScopedCloneableTimeline_swigregister(ScopedCloneableTimeline)

class ScopedCloneablePosition(_object):
    """Proxy of C++ ScopedCloneablePosition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneablePosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneablePosition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Position ptr=None) -> ScopedCloneablePosition
        __init__(self) -> ScopedCloneablePosition
        __init__(self, ScopedCloneablePosition rhs) -> ScopedCloneablePosition
        """
        this = _six_sicd.new_ScopedCloneablePosition(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> Position"""
        return _six_sicd.ScopedCloneablePosition_get(*args)

    def __ref__(*args):
        """__ref__(self) -> Position"""
        return _six_sicd.ScopedCloneablePosition___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> Position"""
        return _six_sicd.ScopedCloneablePosition___deref__(*args)

    def reset(*args):
        """
        reset(self, Position ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneablePosition_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneablePosition
    __del__ = lambda self : None;
    __swig_setmethods__["arpPoly"] = _six_sicd.ScopedCloneablePosition_arpPoly_set
    __swig_getmethods__["arpPoly"] = _six_sicd.ScopedCloneablePosition_arpPoly_get
    if _newclass:arpPoly = _swig_property(_six_sicd.ScopedCloneablePosition_arpPoly_get, _six_sicd.ScopedCloneablePosition_arpPoly_set)
    __swig_setmethods__["grpPoly"] = _six_sicd.ScopedCloneablePosition_grpPoly_set
    __swig_getmethods__["grpPoly"] = _six_sicd.ScopedCloneablePosition_grpPoly_get
    if _newclass:grpPoly = _swig_property(_six_sicd.ScopedCloneablePosition_grpPoly_get, _six_sicd.ScopedCloneablePosition_grpPoly_set)
    __swig_setmethods__["txAPCPoly"] = _six_sicd.ScopedCloneablePosition_txAPCPoly_set
    __swig_getmethods__["txAPCPoly"] = _six_sicd.ScopedCloneablePosition_txAPCPoly_get
    if _newclass:txAPCPoly = _swig_property(_six_sicd.ScopedCloneablePosition_txAPCPoly_get, _six_sicd.ScopedCloneablePosition_txAPCPoly_set)
    __swig_setmethods__["rcvAPC"] = _six_sicd.ScopedCloneablePosition_rcvAPC_set
    __swig_getmethods__["rcvAPC"] = _six_sicd.ScopedCloneablePosition_rcvAPC_get
    if _newclass:rcvAPC = _swig_property(_six_sicd.ScopedCloneablePosition_rcvAPC_get, _six_sicd.ScopedCloneablePosition_rcvAPC_set)
    def clone(*args):
        """clone(self) -> Position"""
        return _six_sicd.ScopedCloneablePosition_clone(*args)

ScopedCloneablePosition_swigregister = _six_sicd.ScopedCloneablePosition_swigregister
ScopedCloneablePosition_swigregister(ScopedCloneablePosition)

class ScopedCloneableRadarCollection(_object):
    """Proxy of C++ ScopedCloneableRadarCollection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableRadarCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableRadarCollection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, RadarCollection ptr=None) -> ScopedCloneableRadarCollection
        __init__(self) -> ScopedCloneableRadarCollection
        __init__(self, ScopedCloneableRadarCollection rhs) -> ScopedCloneableRadarCollection
        """
        this = _six_sicd.new_ScopedCloneableRadarCollection(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection_get(*args)

    def __ref__(*args):
        """__ref__(self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection___deref__(*args)

    def reset(*args):
        """
        reset(self, RadarCollection ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableRadarCollection_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableRadarCollection
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection_clone(*args)

    __swig_setmethods__["refFrequencyIndex"] = _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_set
    __swig_getmethods__["refFrequencyIndex"] = _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_get
    if _newclass:refFrequencyIndex = _swig_property(_six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_get, _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_set)
    __swig_setmethods__["txFrequencyMin"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_set
    __swig_getmethods__["txFrequencyMin"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_get
    if _newclass:txFrequencyMin = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_get, _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_set)
    __swig_setmethods__["txFrequencyMax"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_set
    __swig_getmethods__["txFrequencyMax"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_get
    if _newclass:txFrequencyMax = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_get, _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.ScopedCloneableRadarCollection_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.ScopedCloneableRadarCollection_txPolarization_get
    if _newclass:txPolarization = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txPolarization_get, _six_sicd.ScopedCloneableRadarCollection_txPolarization_set)
    __swig_setmethods__["polarizationHVAnglePoly"] = _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_set
    __swig_getmethods__["polarizationHVAnglePoly"] = _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_get
    if _newclass:polarizationHVAnglePoly = _swig_property(_six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_get, _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_set)
    __swig_setmethods__["txSequence"] = _six_sicd.ScopedCloneableRadarCollection_txSequence_set
    __swig_getmethods__["txSequence"] = _six_sicd.ScopedCloneableRadarCollection_txSequence_get
    if _newclass:txSequence = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txSequence_get, _six_sicd.ScopedCloneableRadarCollection_txSequence_set)
    __swig_setmethods__["waveform"] = _six_sicd.ScopedCloneableRadarCollection_waveform_set
    __swig_getmethods__["waveform"] = _six_sicd.ScopedCloneableRadarCollection_waveform_get
    if _newclass:waveform = _swig_property(_six_sicd.ScopedCloneableRadarCollection_waveform_get, _six_sicd.ScopedCloneableRadarCollection_waveform_set)
    __swig_setmethods__["rcvChannels"] = _six_sicd.ScopedCloneableRadarCollection_rcvChannels_set
    __swig_getmethods__["rcvChannels"] = _six_sicd.ScopedCloneableRadarCollection_rcvChannels_get
    if _newclass:rcvChannels = _swig_property(_six_sicd.ScopedCloneableRadarCollection_rcvChannels_get, _six_sicd.ScopedCloneableRadarCollection_rcvChannels_set)
    __swig_setmethods__["area"] = _six_sicd.ScopedCloneableRadarCollection_area_set
    __swig_getmethods__["area"] = _six_sicd.ScopedCloneableRadarCollection_area_get
    if _newclass:area = _swig_property(_six_sicd.ScopedCloneableRadarCollection_area_get, _six_sicd.ScopedCloneableRadarCollection_area_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCloneableRadarCollection_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCloneableRadarCollection_parameters_get
    if _newclass:parameters = _swig_property(_six_sicd.ScopedCloneableRadarCollection_parameters_get, _six_sicd.ScopedCloneableRadarCollection_parameters_set)
ScopedCloneableRadarCollection_swigregister = _six_sicd.ScopedCloneableRadarCollection_swigregister
ScopedCloneableRadarCollection_swigregister(ScopedCloneableRadarCollection)

class ScopedCopyableImageFormation(_object):
    """Proxy of C++ ScopedCopyableImageFormation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableImageFormation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableImageFormation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ImageFormation ptr=None) -> ScopedCopyableImageFormation
        __init__(self) -> ScopedCopyableImageFormation
        __init__(self, ScopedCopyableImageFormation rhs) -> ScopedCopyableImageFormation
        """
        this = _six_sicd.new_ScopedCopyableImageFormation(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation_get(*args)

    def __ref__(*args):
        """__ref__(self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation___deref__(*args)

    def reset(*args):
        """
        reset(self, ImageFormation ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableImageFormation_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableImageFormation
    __del__ = lambda self : None;
    __swig_setmethods__["segmentIdentifier"] = _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_set
    __swig_getmethods__["segmentIdentifier"] = _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_get
    if _newclass:segmentIdentifier = _swig_property(_six_sicd.ScopedCopyableImageFormation_segmentIdentifier_get, _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_set)
    __swig_setmethods__["rcvChannelProcessed"] = _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_set
    __swig_getmethods__["rcvChannelProcessed"] = _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_get
    if _newclass:rcvChannelProcessed = _swig_property(_six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_get, _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_set)
    __swig_setmethods__["txRcvPolarizationProc"] = _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_set
    __swig_getmethods__["txRcvPolarizationProc"] = _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_get
    if _newclass:txRcvPolarizationProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_get, _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_set)
    __swig_setmethods__["imageFormationAlgorithm"] = _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_set
    __swig_getmethods__["imageFormationAlgorithm"] = _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_get
    if _newclass:imageFormationAlgorithm = _swig_property(_six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_get, _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_set)
    __swig_setmethods__["tStartProc"] = _six_sicd.ScopedCopyableImageFormation_tStartProc_set
    __swig_getmethods__["tStartProc"] = _six_sicd.ScopedCopyableImageFormation_tStartProc_get
    if _newclass:tStartProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_tStartProc_get, _six_sicd.ScopedCopyableImageFormation_tStartProc_set)
    __swig_setmethods__["tEndProc"] = _six_sicd.ScopedCopyableImageFormation_tEndProc_set
    __swig_getmethods__["tEndProc"] = _six_sicd.ScopedCopyableImageFormation_tEndProc_get
    if _newclass:tEndProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_tEndProc_get, _six_sicd.ScopedCopyableImageFormation_tEndProc_set)
    __swig_setmethods__["txFrequencyProcMin"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_set
    __swig_getmethods__["txFrequencyProcMin"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_get
    if _newclass:txFrequencyProcMin = _swig_property(_six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_get, _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_set)
    __swig_setmethods__["txFrequencyProcMax"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_set
    __swig_getmethods__["txFrequencyProcMax"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_get
    if _newclass:txFrequencyProcMax = _swig_property(_six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_get, _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_set)
    __swig_setmethods__["slowTimeBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_set
    __swig_getmethods__["slowTimeBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_get
    if _newclass:slowTimeBeamCompensation = _swig_property(_six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_get, _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_set)
    __swig_setmethods__["imageBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_set
    __swig_getmethods__["imageBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_get
    if _newclass:imageBeamCompensation = _swig_property(_six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_get, _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_set)
    __swig_setmethods__["azimuthAutofocus"] = _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_set
    __swig_getmethods__["azimuthAutofocus"] = _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_get
    if _newclass:azimuthAutofocus = _swig_property(_six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_get, _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_set)
    __swig_setmethods__["rangeAutofocus"] = _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_set
    __swig_getmethods__["rangeAutofocus"] = _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_get
    if _newclass:rangeAutofocus = _swig_property(_six_sicd.ScopedCopyableImageFormation_rangeAutofocus_get, _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_set)
    __swig_setmethods__["processing"] = _six_sicd.ScopedCopyableImageFormation_processing_set
    __swig_getmethods__["processing"] = _six_sicd.ScopedCopyableImageFormation_processing_get
    if _newclass:processing = _swig_property(_six_sicd.ScopedCopyableImageFormation_processing_get, _six_sicd.ScopedCopyableImageFormation_processing_set)
    __swig_setmethods__["polarizationCalibration"] = _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_set
    __swig_getmethods__["polarizationCalibration"] = _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_get
    if _newclass:polarizationCalibration = _swig_property(_six_sicd.ScopedCopyableImageFormation_polarizationCalibration_get, _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_set)
ScopedCopyableImageFormation_swigregister = _six_sicd.ScopedCopyableImageFormation_swigregister
ScopedCopyableImageFormation_swigregister(ScopedCopyableImageFormation)

class ScopedCopyableSCPCOA(_object):
    """Proxy of C++ ScopedCopyableSCPCOA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableSCPCOA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableSCPCOA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, SCPCOA ptr=None) -> ScopedCopyableSCPCOA
        __init__(self) -> ScopedCopyableSCPCOA
        __init__(self, ScopedCopyableSCPCOA rhs) -> ScopedCopyableSCPCOA
        """
        this = _six_sicd.new_ScopedCopyableSCPCOA(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA_get(*args)

    def __ref__(*args):
        """__ref__(self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA___deref__(*args)

    def reset(*args):
        """
        reset(self, SCPCOA ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableSCPCOA_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableSCPCOA
    __del__ = lambda self : None;
    __swig_setmethods__["scpTime"] = _six_sicd.ScopedCopyableSCPCOA_scpTime_set
    __swig_getmethods__["scpTime"] = _six_sicd.ScopedCopyableSCPCOA_scpTime_get
    if _newclass:scpTime = _swig_property(_six_sicd.ScopedCopyableSCPCOA_scpTime_get, _six_sicd.ScopedCopyableSCPCOA_scpTime_set)
    __swig_setmethods__["arpPos"] = _six_sicd.ScopedCopyableSCPCOA_arpPos_set
    __swig_getmethods__["arpPos"] = _six_sicd.ScopedCopyableSCPCOA_arpPos_get
    if _newclass:arpPos = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpPos_get, _six_sicd.ScopedCopyableSCPCOA_arpPos_set)
    __swig_setmethods__["arpVel"] = _six_sicd.ScopedCopyableSCPCOA_arpVel_set
    __swig_getmethods__["arpVel"] = _six_sicd.ScopedCopyableSCPCOA_arpVel_get
    if _newclass:arpVel = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpVel_get, _six_sicd.ScopedCopyableSCPCOA_arpVel_set)
    __swig_setmethods__["arpAcc"] = _six_sicd.ScopedCopyableSCPCOA_arpAcc_set
    __swig_getmethods__["arpAcc"] = _six_sicd.ScopedCopyableSCPCOA_arpAcc_get
    if _newclass:arpAcc = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpAcc_get, _six_sicd.ScopedCopyableSCPCOA_arpAcc_set)
    __swig_setmethods__["sideOfTrack"] = _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_get
    if _newclass:sideOfTrack = _swig_property(_six_sicd.ScopedCopyableSCPCOA_sideOfTrack_get, _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _six_sicd.ScopedCopyableSCPCOA_slantRange_set
    __swig_getmethods__["slantRange"] = _six_sicd.ScopedCopyableSCPCOA_slantRange_get
    if _newclass:slantRange = _swig_property(_six_sicd.ScopedCopyableSCPCOA_slantRange_get, _six_sicd.ScopedCopyableSCPCOA_slantRange_set)
    __swig_setmethods__["groundRange"] = _six_sicd.ScopedCopyableSCPCOA_groundRange_set
    __swig_getmethods__["groundRange"] = _six_sicd.ScopedCopyableSCPCOA_groundRange_get
    if _newclass:groundRange = _swig_property(_six_sicd.ScopedCopyableSCPCOA_groundRange_get, _six_sicd.ScopedCopyableSCPCOA_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_get
    if _newclass:dopplerConeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_get, _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_set)
    __swig_setmethods__["grazeAngle"] = _six_sicd.ScopedCopyableSCPCOA_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _six_sicd.ScopedCopyableSCPCOA_grazeAngle_get
    if _newclass:grazeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_grazeAngle_get, _six_sicd.ScopedCopyableSCPCOA_grazeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_get
    if _newclass:incidenceAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_incidenceAngle_get, _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_set)
    __swig_setmethods__["twistAngle"] = _six_sicd.ScopedCopyableSCPCOA_twistAngle_set
    __swig_getmethods__["twistAngle"] = _six_sicd.ScopedCopyableSCPCOA_twistAngle_get
    if _newclass:twistAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_twistAngle_get, _six_sicd.ScopedCopyableSCPCOA_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _six_sicd.ScopedCopyableSCPCOA_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _six_sicd.ScopedCopyableSCPCOA_slopeAngle_get
    if _newclass:slopeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_slopeAngle_get, _six_sicd.ScopedCopyableSCPCOA_slopeAngle_set)
    __swig_setmethods__["azimAngle"] = _six_sicd.ScopedCopyableSCPCOA_azimAngle_set
    __swig_getmethods__["azimAngle"] = _six_sicd.ScopedCopyableSCPCOA_azimAngle_get
    if _newclass:azimAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_azimAngle_get, _six_sicd.ScopedCopyableSCPCOA_azimAngle_set)
    __swig_setmethods__["layoverAngle"] = _six_sicd.ScopedCopyableSCPCOA_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _six_sicd.ScopedCopyableSCPCOA_layoverAngle_get
    if _newclass:layoverAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_layoverAngle_get, _six_sicd.ScopedCopyableSCPCOA_layoverAngle_set)
ScopedCopyableSCPCOA_swigregister = _six_sicd.ScopedCopyableSCPCOA_swigregister
ScopedCopyableSCPCOA_swigregister(ScopedCopyableSCPCOA)

class ScopedCopyableRadiometric(_object):
    """Proxy of C++ ScopedCopyableRadiometric class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRadiometric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRadiometric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Radiometric ptr=None) -> ScopedCopyableRadiometric
        __init__(self) -> ScopedCopyableRadiometric
        __init__(self, ScopedCopyableRadiometric rhs) -> ScopedCopyableRadiometric
        """
        this = _six_sicd.new_ScopedCopyableRadiometric(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> Radiometric"""
        return _six_sicd.ScopedCopyableRadiometric_get(*args)

    def __ref__(*args):
        """__ref__(self) -> Radiometric"""
        return _six_sicd.ScopedCopyableRadiometric___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> Radiometric"""
        return _six_sicd.ScopedCopyableRadiometric___deref__(*args)

    def reset(*args):
        """
        reset(self, Radiometric ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableRadiometric_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRadiometric
    __del__ = lambda self : None;
    __swig_getmethods__["NL_ABSOLUTE"] = _six_sicd.ScopedCopyableRadiometric_NL_ABSOLUTE_get
    if _newclass:NL_ABSOLUTE = _swig_property(_six_sicd.ScopedCopyableRadiometric_NL_ABSOLUTE_get)
    __swig_getmethods__["NL_RELATIVE"] = _six_sicd.ScopedCopyableRadiometric_NL_RELATIVE_get
    if _newclass:NL_RELATIVE = _swig_property(_six_sicd.ScopedCopyableRadiometric_NL_RELATIVE_get)
    __swig_setmethods__["noiseLevel"] = _six_sicd.ScopedCopyableRadiometric_noiseLevel_set
    __swig_getmethods__["noiseLevel"] = _six_sicd.ScopedCopyableRadiometric_noiseLevel_get
    if _newclass:noiseLevel = _swig_property(_six_sicd.ScopedCopyableRadiometric_noiseLevel_get, _six_sicd.ScopedCopyableRadiometric_noiseLevel_set)
    __swig_setmethods__["rcsSFPoly"] = _six_sicd.ScopedCopyableRadiometric_rcsSFPoly_set
    __swig_getmethods__["rcsSFPoly"] = _six_sicd.ScopedCopyableRadiometric_rcsSFPoly_get
    if _newclass:rcsSFPoly = _swig_property(_six_sicd.ScopedCopyableRadiometric_rcsSFPoly_get, _six_sicd.ScopedCopyableRadiometric_rcsSFPoly_set)
    __swig_setmethods__["betaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_betaZeroSFPoly_set
    __swig_getmethods__["betaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_betaZeroSFPoly_get
    if _newclass:betaZeroSFPoly = _swig_property(_six_sicd.ScopedCopyableRadiometric_betaZeroSFPoly_get, _six_sicd.ScopedCopyableRadiometric_betaZeroSFPoly_set)
    __swig_setmethods__["sigmaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFPoly_set
    __swig_getmethods__["sigmaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFPoly_get
    if _newclass:sigmaZeroSFPoly = _swig_property(_six_sicd.ScopedCopyableRadiometric_sigmaZeroSFPoly_get, _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFPoly_set)
    __swig_setmethods__["sigmaZeroSFIncidenceMap"] = _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set
    __swig_getmethods__["sigmaZeroSFIncidenceMap"] = _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get
    if _newclass:sigmaZeroSFIncidenceMap = _swig_property(_six_sicd.ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get, _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set)
    __swig_setmethods__["gammaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_gammaZeroSFPoly_set
    __swig_getmethods__["gammaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_gammaZeroSFPoly_get
    if _newclass:gammaZeroSFPoly = _swig_property(_six_sicd.ScopedCopyableRadiometric_gammaZeroSFPoly_get, _six_sicd.ScopedCopyableRadiometric_gammaZeroSFPoly_set)
    __swig_setmethods__["gammaZeroSFIncidenceMap"] = _six_sicd.ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set
    __swig_getmethods__["gammaZeroSFIncidenceMap"] = _six_sicd.ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get
    if _newclass:gammaZeroSFIncidenceMap = _swig_property(_six_sicd.ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get, _six_sicd.ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set)
ScopedCopyableRadiometric_swigregister = _six_sicd.ScopedCopyableRadiometric_swigregister
ScopedCopyableRadiometric_swigregister(ScopedCopyableRadiometric)

class ScopedCopyableAntenna(_object):
    """Proxy of C++ ScopedCopyableAntenna class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableAntenna, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Antenna ptr=None) -> ScopedCopyableAntenna
        __init__(self) -> ScopedCopyableAntenna
        __init__(self, ScopedCopyableAntenna rhs) -> ScopedCopyableAntenna
        """
        this = _six_sicd.new_ScopedCopyableAntenna(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna_get(*args)

    def __ref__(*args):
        """__ref__(self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna___deref__(*args)

    def reset(*args):
        """
        reset(self, Antenna ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableAntenna_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableAntenna
    __del__ = lambda self : None;
    __swig_setmethods__["tx"] = _six_sicd.ScopedCopyableAntenna_tx_set
    __swig_getmethods__["tx"] = _six_sicd.ScopedCopyableAntenna_tx_get
    if _newclass:tx = _swig_property(_six_sicd.ScopedCopyableAntenna_tx_get, _six_sicd.ScopedCopyableAntenna_tx_set)
    __swig_setmethods__["rcv"] = _six_sicd.ScopedCopyableAntenna_rcv_set
    __swig_getmethods__["rcv"] = _six_sicd.ScopedCopyableAntenna_rcv_get
    if _newclass:rcv = _swig_property(_six_sicd.ScopedCopyableAntenna_rcv_get, _six_sicd.ScopedCopyableAntenna_rcv_set)
    __swig_setmethods__["twoWay"] = _six_sicd.ScopedCopyableAntenna_twoWay_set
    __swig_getmethods__["twoWay"] = _six_sicd.ScopedCopyableAntenna_twoWay_get
    if _newclass:twoWay = _swig_property(_six_sicd.ScopedCopyableAntenna_twoWay_get, _six_sicd.ScopedCopyableAntenna_twoWay_set)
ScopedCopyableAntenna_swigregister = _six_sicd.ScopedCopyableAntenna_swigregister
ScopedCopyableAntenna_swigregister(ScopedCopyableAntenna)

class ScopedCopyableErrorStatistics(_object):
    """Proxy of C++ ScopedCopyableErrorStatistics class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableErrorStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableErrorStatistics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ErrorStatistics ptr=None) -> ScopedCopyableErrorStatistics
        __init__(self) -> ScopedCopyableErrorStatistics
        __init__(self, ScopedCopyableErrorStatistics rhs) -> ScopedCopyableErrorStatistics
        """
        this = _six_sicd.new_ScopedCopyableErrorStatistics(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> ErrorStatistics"""
        return _six_sicd.ScopedCopyableErrorStatistics_get(*args)

    def __ref__(*args):
        """__ref__(self) -> ErrorStatistics"""
        return _six_sicd.ScopedCopyableErrorStatistics___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> ErrorStatistics"""
        return _six_sicd.ScopedCopyableErrorStatistics___deref__(*args)

    def reset(*args):
        """
        reset(self, ErrorStatistics ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableErrorStatistics_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableErrorStatistics
    __del__ = lambda self : None;
    __swig_setmethods__["compositeSCP"] = _six_sicd.ScopedCopyableErrorStatistics_compositeSCP_set
    __swig_getmethods__["compositeSCP"] = _six_sicd.ScopedCopyableErrorStatistics_compositeSCP_get
    if _newclass:compositeSCP = _swig_property(_six_sicd.ScopedCopyableErrorStatistics_compositeSCP_get, _six_sicd.ScopedCopyableErrorStatistics_compositeSCP_set)
    __swig_setmethods__["components"] = _six_sicd.ScopedCopyableErrorStatistics_components_set
    __swig_getmethods__["components"] = _six_sicd.ScopedCopyableErrorStatistics_components_get
    if _newclass:components = _swig_property(_six_sicd.ScopedCopyableErrorStatistics_components_get, _six_sicd.ScopedCopyableErrorStatistics_components_set)
    __swig_setmethods__["additionalParameters"] = _six_sicd.ScopedCopyableErrorStatistics_additionalParameters_set
    __swig_getmethods__["additionalParameters"] = _six_sicd.ScopedCopyableErrorStatistics_additionalParameters_get
    if _newclass:additionalParameters = _swig_property(_six_sicd.ScopedCopyableErrorStatistics_additionalParameters_get, _six_sicd.ScopedCopyableErrorStatistics_additionalParameters_set)
ScopedCopyableErrorStatistics_swigregister = _six_sicd.ScopedCopyableErrorStatistics_swigregister
ScopedCopyableErrorStatistics_swigregister(ScopedCopyableErrorStatistics)

class ScopedCopyableMatchInformation(_object):
    """Proxy of C++ ScopedCopyableMatchInformation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableMatchInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableMatchInformation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, MatchInformation ptr=None) -> ScopedCopyableMatchInformation
        __init__(self) -> ScopedCopyableMatchInformation
        __init__(self, ScopedCopyableMatchInformation rhs) -> ScopedCopyableMatchInformation
        """
        this = _six_sicd.new_ScopedCopyableMatchInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation_get(*args)

    def __ref__(*args):
        """__ref__(self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation___deref__(*args)

    def reset(*args):
        """
        reset(self, MatchInformation ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableMatchInformation_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableMatchInformation
    __del__ = lambda self : None;
    __swig_setmethods__["types"] = _six_sicd.ScopedCopyableMatchInformation_types_set
    __swig_getmethods__["types"] = _six_sicd.ScopedCopyableMatchInformation_types_get
    if _newclass:types = _swig_property(_six_sicd.ScopedCopyableMatchInformation_types_get, _six_sicd.ScopedCopyableMatchInformation_types_set)
ScopedCopyableMatchInformation_swigregister = _six_sicd.ScopedCopyableMatchInformation_swigregister
ScopedCopyableMatchInformation_swigregister(ScopedCopyableMatchInformation)

class ScopedCloneablePFA(_object):
    """Proxy of C++ ScopedCloneablePFA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneablePFA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneablePFA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PFA ptr=None) -> ScopedCloneablePFA
        __init__(self) -> ScopedCloneablePFA
        __init__(self, ScopedCloneablePFA rhs) -> ScopedCloneablePFA
        """
        this = _six_sicd.new_ScopedCloneablePFA(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> PFA"""
        return _six_sicd.ScopedCloneablePFA_get(*args)

    def __ref__(*args):
        """__ref__(self) -> PFA"""
        return _six_sicd.ScopedCloneablePFA___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> PFA"""
        return _six_sicd.ScopedCloneablePFA___deref__(*args)

    def reset(*args):
        """
        reset(self, PFA ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneablePFA_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneablePFA
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> PFA"""
        return _six_sicd.ScopedCloneablePFA_clone(*args)

    __swig_setmethods__["focusPlaneNormal"] = _six_sicd.ScopedCloneablePFA_focusPlaneNormal_set
    __swig_getmethods__["focusPlaneNormal"] = _six_sicd.ScopedCloneablePFA_focusPlaneNormal_get
    if _newclass:focusPlaneNormal = _swig_property(_six_sicd.ScopedCloneablePFA_focusPlaneNormal_get, _six_sicd.ScopedCloneablePFA_focusPlaneNormal_set)
    __swig_setmethods__["imagePlaneNormal"] = _six_sicd.ScopedCloneablePFA_imagePlaneNormal_set
    __swig_getmethods__["imagePlaneNormal"] = _six_sicd.ScopedCloneablePFA_imagePlaneNormal_get
    if _newclass:imagePlaneNormal = _swig_property(_six_sicd.ScopedCloneablePFA_imagePlaneNormal_get, _six_sicd.ScopedCloneablePFA_imagePlaneNormal_set)
    __swig_setmethods__["polarAngleRefTime"] = _six_sicd.ScopedCloneablePFA_polarAngleRefTime_set
    __swig_getmethods__["polarAngleRefTime"] = _six_sicd.ScopedCloneablePFA_polarAngleRefTime_get
    if _newclass:polarAngleRefTime = _swig_property(_six_sicd.ScopedCloneablePFA_polarAngleRefTime_get, _six_sicd.ScopedCloneablePFA_polarAngleRefTime_set)
    __swig_setmethods__["polarAnglePoly"] = _six_sicd.ScopedCloneablePFA_polarAnglePoly_set
    __swig_getmethods__["polarAnglePoly"] = _six_sicd.ScopedCloneablePFA_polarAnglePoly_get
    if _newclass:polarAnglePoly = _swig_property(_six_sicd.ScopedCloneablePFA_polarAnglePoly_get, _six_sicd.ScopedCloneablePFA_polarAnglePoly_set)
    __swig_setmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set
    __swig_getmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get
    if _newclass:spatialFrequencyScaleFactorPoly = _swig_property(_six_sicd.ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get, _six_sicd.ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set)
    __swig_setmethods__["krg1"] = _six_sicd.ScopedCloneablePFA_krg1_set
    __swig_getmethods__["krg1"] = _six_sicd.ScopedCloneablePFA_krg1_get
    if _newclass:krg1 = _swig_property(_six_sicd.ScopedCloneablePFA_krg1_get, _six_sicd.ScopedCloneablePFA_krg1_set)
    __swig_setmethods__["krg2"] = _six_sicd.ScopedCloneablePFA_krg2_set
    __swig_getmethods__["krg2"] = _six_sicd.ScopedCloneablePFA_krg2_get
    if _newclass:krg2 = _swig_property(_six_sicd.ScopedCloneablePFA_krg2_get, _six_sicd.ScopedCloneablePFA_krg2_set)
    __swig_setmethods__["kaz1"] = _six_sicd.ScopedCloneablePFA_kaz1_set
    __swig_getmethods__["kaz1"] = _six_sicd.ScopedCloneablePFA_kaz1_get
    if _newclass:kaz1 = _swig_property(_six_sicd.ScopedCloneablePFA_kaz1_get, _six_sicd.ScopedCloneablePFA_kaz1_set)
    __swig_setmethods__["kaz2"] = _six_sicd.ScopedCloneablePFA_kaz2_set
    __swig_getmethods__["kaz2"] = _six_sicd.ScopedCloneablePFA_kaz2_get
    if _newclass:kaz2 = _swig_property(_six_sicd.ScopedCloneablePFA_kaz2_get, _six_sicd.ScopedCloneablePFA_kaz2_set)
    __swig_setmethods__["slowTimeDeskew"] = _six_sicd.ScopedCloneablePFA_slowTimeDeskew_set
    __swig_getmethods__["slowTimeDeskew"] = _six_sicd.ScopedCloneablePFA_slowTimeDeskew_get
    if _newclass:slowTimeDeskew = _swig_property(_six_sicd.ScopedCloneablePFA_slowTimeDeskew_get, _six_sicd.ScopedCloneablePFA_slowTimeDeskew_set)
ScopedCloneablePFA_swigregister = _six_sicd.ScopedCloneablePFA_swigregister
ScopedCloneablePFA_swigregister(ScopedCloneablePFA)

class ScopedCopyableRMA(_object):
    """Proxy of C++ ScopedCopyableRMA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, RMA ptr=None) -> ScopedCopyableRMA
        __init__(self) -> ScopedCopyableRMA
        __init__(self, ScopedCopyableRMA rhs) -> ScopedCopyableRMA
        """
        this = _six_sicd.new_ScopedCopyableRMA(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA_get(*args)

    def __ref__(*args):
        """__ref__(self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA___deref__(*args)

    def reset(*args):
        """
        reset(self, RMA ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableRMA_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMA
    __del__ = lambda self : None;
    __swig_setmethods__["algoType"] = _six_sicd.ScopedCopyableRMA_algoType_set
    __swig_getmethods__["algoType"] = _six_sicd.ScopedCopyableRMA_algoType_get
    if _newclass:algoType = _swig_property(_six_sicd.ScopedCopyableRMA_algoType_get, _six_sicd.ScopedCopyableRMA_algoType_set)
    __swig_setmethods__["rmat"] = _six_sicd.ScopedCopyableRMA_rmat_set
    __swig_getmethods__["rmat"] = _six_sicd.ScopedCopyableRMA_rmat_get
    if _newclass:rmat = _swig_property(_six_sicd.ScopedCopyableRMA_rmat_get, _six_sicd.ScopedCopyableRMA_rmat_set)
    __swig_setmethods__["rmcr"] = _six_sicd.ScopedCopyableRMA_rmcr_set
    __swig_getmethods__["rmcr"] = _six_sicd.ScopedCopyableRMA_rmcr_get
    if _newclass:rmcr = _swig_property(_six_sicd.ScopedCopyableRMA_rmcr_get, _six_sicd.ScopedCopyableRMA_rmcr_set)
    __swig_setmethods__["inca"] = _six_sicd.ScopedCopyableRMA_inca_set
    __swig_getmethods__["inca"] = _six_sicd.ScopedCopyableRMA_inca_get
    if _newclass:inca = _swig_property(_six_sicd.ScopedCopyableRMA_inca_get, _six_sicd.ScopedCopyableRMA_inca_set)
ScopedCopyableRMA_swigregister = _six_sicd.ScopedCopyableRMA_swigregister
ScopedCopyableRMA_swigregister(ScopedCopyableRMA)

class ScopedCopyableRgAzComp(_object):
    """Proxy of C++ ScopedCopyableRgAzComp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRgAzComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRgAzComp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, RgAzComp ptr=None) -> ScopedCopyableRgAzComp
        __init__(self) -> ScopedCopyableRgAzComp
        __init__(self, ScopedCopyableRgAzComp rhs) -> ScopedCopyableRgAzComp
        """
        this = _six_sicd.new_ScopedCopyableRgAzComp(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp_get(*args)

    def __ref__(*args):
        """__ref__(self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp___deref__(*args)

    def reset(*args):
        """
        reset(self, RgAzComp ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableRgAzComp_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRgAzComp
    __del__ = lambda self : None;
    __swig_setmethods__["azSF"] = _six_sicd.ScopedCopyableRgAzComp_azSF_set
    __swig_getmethods__["azSF"] = _six_sicd.ScopedCopyableRgAzComp_azSF_get
    if _newclass:azSF = _swig_property(_six_sicd.ScopedCopyableRgAzComp_azSF_get, _six_sicd.ScopedCopyableRgAzComp_azSF_set)
    __swig_setmethods__["kazPoly"] = _six_sicd.ScopedCopyableRgAzComp_kazPoly_set
    __swig_getmethods__["kazPoly"] = _six_sicd.ScopedCopyableRgAzComp_kazPoly_get
    if _newclass:kazPoly = _swig_property(_six_sicd.ScopedCopyableRgAzComp_kazPoly_get, _six_sicd.ScopedCopyableRgAzComp_kazPoly_set)
ScopedCopyableRgAzComp_swigregister = _six_sicd.ScopedCopyableRgAzComp_swigregister
ScopedCopyableRgAzComp_swigregister(ScopedCopyableRgAzComp)

class ScopedCloneableGeoInfo(_object):
    """Proxy of C++ ScopedCloneableGeoInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGeoInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GeoInfo ptr=None) -> ScopedCloneableGeoInfo
        __init__(self) -> ScopedCloneableGeoInfo
        __init__(self, ScopedCloneableGeoInfo rhs) -> ScopedCloneableGeoInfo
        """
        this = _six_sicd.new_ScopedCloneableGeoInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo_get(*args)

    def __ref__(*args):
        """__ref__(self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo___deref__(*args)

    def reset(*args):
        """
        reset(self, GeoInfo ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableGeoInfo_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGeoInfo
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo_clone(*args)

    __swig_setmethods__["name"] = _six_sicd.ScopedCloneableGeoInfo_name_set
    __swig_getmethods__["name"] = _six_sicd.ScopedCloneableGeoInfo_name_get
    if _newclass:name = _swig_property(_six_sicd.ScopedCloneableGeoInfo_name_get, _six_sicd.ScopedCloneableGeoInfo_name_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoInfo_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoInfo_geoInfos_get
    if _newclass:geoInfos = _swig_property(_six_sicd.ScopedCloneableGeoInfo_geoInfos_get, _six_sicd.ScopedCloneableGeoInfo_geoInfos_set)
    __swig_setmethods__["desc"] = _six_sicd.ScopedCloneableGeoInfo_desc_set
    __swig_getmethods__["desc"] = _six_sicd.ScopedCloneableGeoInfo_desc_get
    if _newclass:desc = _swig_property(_six_sicd.ScopedCloneableGeoInfo_desc_get, _six_sicd.ScopedCloneableGeoInfo_desc_set)
    __swig_setmethods__["geometryLatLon"] = _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_set
    __swig_getmethods__["geometryLatLon"] = _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_get
    if _newclass:geometryLatLon = _swig_property(_six_sicd.ScopedCloneableGeoInfo_geometryLatLon_get, _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_set)
ScopedCloneableGeoInfo_swigregister = _six_sicd.ScopedCloneableGeoInfo_swigregister
ScopedCloneableGeoInfo_swigregister(ScopedCloneableGeoInfo)

class VectorScopedCloneableGeoInfo(_object):
    """Proxy of C++ VectorScopedCloneableGeoInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableGeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableGeoInfo, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorScopedCloneableGeoInfo___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorScopedCloneableGeoInfo v)"""
        return _six_sicd.VectorScopedCloneableGeoInfo___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorScopedCloneableGeoInfo___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorScopedCloneableGeoInfo___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorScopedCloneableGeoInfo_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_clear(*args)

    def swap(*args):
        """swap(self, VectorScopedCloneableGeoInfo v)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorScopedCloneableGeoInfo
        __init__(self, VectorScopedCloneableGeoInfo ?) -> VectorScopedCloneableGeoInfo
        __init__(self, size_type size) -> VectorScopedCloneableGeoInfo
        __init__(self, size_type size, value_type value) -> VectorScopedCloneableGeoInfo
        """
        this = _six_sicd.new_VectorScopedCloneableGeoInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableGeoInfo
    __del__ = lambda self : None;
VectorScopedCloneableGeoInfo_swigregister = _six_sicd.VectorScopedCloneableGeoInfo_swigregister
VectorScopedCloneableGeoInfo_swigregister(VectorScopedCloneableGeoInfo)

class VectorLatLon(_object):
    """Proxy of C++ VectorLatLon class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorLatLon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorLatLon, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorLatLon_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorLatLon___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorLatLon___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorLatLon_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorLatLon"""
        return _six_sicd.VectorLatLon___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorLatLon v)"""
        return _six_sicd.VectorLatLon___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorLatLon___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorLatLon___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorLatLon___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorLatLon___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorLatLon_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorLatLon_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorLatLon_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorLatLon_clear(*args)

    def swap(*args):
        """swap(self, VectorLatLon v)"""
        return _six_sicd.VectorLatLon_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorLatLon_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorLatLon_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorLatLon_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorLatLon_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorLatLon_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorLatLon_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorLatLon_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorLatLon
        __init__(self, VectorLatLon ?) -> VectorLatLon
        __init__(self, size_type size) -> VectorLatLon
        __init__(self, size_type size, value_type value) -> VectorLatLon
        """
        this = _six_sicd.new_VectorLatLon(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorLatLon_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorLatLon_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorLatLon_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorLatLon_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorLatLon_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorLatLon_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorLatLon_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorLatLon_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorLatLon
    __del__ = lambda self : None;
VectorLatLon_swigregister = _six_sicd.VectorLatLon_swigregister
VectorLatLon_swigregister(VectorLatLon)

class ScopedCopyableAntennaParameters(_object):
    """Proxy of C++ ScopedCopyableAntennaParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableAntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableAntennaParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, AntennaParameters ptr=None) -> ScopedCopyableAntennaParameters
        __init__(self) -> ScopedCopyableAntennaParameters
        __init__(self, ScopedCopyableAntennaParameters rhs) -> ScopedCopyableAntennaParameters
        """
        this = _six_sicd.new_ScopedCopyableAntennaParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters_get(*args)

    def __ref__(*args):
        """__ref__(self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters___deref__(*args)

    def reset(*args):
        """
        reset(self, AntennaParameters ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableAntennaParameters_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableAntennaParameters
    __del__ = lambda self : None;
    def __eq__(*args):
        """__eq__(self, AntennaParameters other) -> bool"""
        return _six_sicd.ScopedCopyableAntennaParameters___eq__(*args)

    def __ne__(*args):
        """__ne__(self, AntennaParameters other) -> bool"""
        return _six_sicd.ScopedCopyableAntennaParameters___ne__(*args)

    __swig_setmethods__["xAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_set
    __swig_getmethods__["xAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_get
    if _newclass:xAxisPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_get, _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_set)
    __swig_setmethods__["yAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_set
    __swig_getmethods__["yAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_get
    if _newclass:yAxisPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_get, _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_set)
    __swig_setmethods__["frequencyZero"] = _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_set
    __swig_getmethods__["frequencyZero"] = _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_get
    if _newclass:frequencyZero = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_frequencyZero_get, _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_set)
    __swig_setmethods__["electricalBoresight"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_set
    __swig_getmethods__["electricalBoresight"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_get
    if _newclass:electricalBoresight = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_get, _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_set)
    __swig_setmethods__["halfPowerBeamwidths"] = _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_set
    __swig_getmethods__["halfPowerBeamwidths"] = _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_get
    if _newclass:halfPowerBeamwidths = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_get, _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_set)
    __swig_setmethods__["array"] = _six_sicd.ScopedCopyableAntennaParameters_array_set
    __swig_getmethods__["array"] = _six_sicd.ScopedCopyableAntennaParameters_array_get
    if _newclass:array = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_array_get, _six_sicd.ScopedCopyableAntennaParameters_array_set)
    __swig_setmethods__["element"] = _six_sicd.ScopedCopyableAntennaParameters_element_set
    __swig_getmethods__["element"] = _six_sicd.ScopedCopyableAntennaParameters_element_get
    if _newclass:element = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_element_get, _six_sicd.ScopedCopyableAntennaParameters_element_set)
    __swig_setmethods__["gainBSPoly"] = _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_set
    __swig_getmethods__["gainBSPoly"] = _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_get
    if _newclass:gainBSPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_get, _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_set)
    __swig_setmethods__["electricalBoresightFrequencyShift"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set
    __swig_getmethods__["electricalBoresightFrequencyShift"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get
    if _newclass:electricalBoresightFrequencyShift = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get, _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set)
    __swig_setmethods__["mainlobeFrequencyDilation"] = _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set
    __swig_getmethods__["mainlobeFrequencyDilation"] = _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get
    if _newclass:mainlobeFrequencyDilation = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get, _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set)
ScopedCopyableAntennaParameters_swigregister = _six_sicd.ScopedCopyableAntennaParameters_swigregister
ScopedCopyableAntennaParameters_swigregister(ScopedCopyableAntennaParameters)

class ScopedCopyableElectricalBoresight(_object):
    """Proxy of C++ ScopedCopyableElectricalBoresight class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableElectricalBoresight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableElectricalBoresight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ElectricalBoresight ptr=None) -> ScopedCopyableElectricalBoresight
        __init__(self) -> ScopedCopyableElectricalBoresight
        __init__(self, ScopedCopyableElectricalBoresight rhs) -> ScopedCopyableElectricalBoresight
        """
        this = _six_sicd.new_ScopedCopyableElectricalBoresight(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight_get(*args)

    def __ref__(*args):
        """__ref__(self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight___deref__(*args)

    def reset(*args):
        """
        reset(self, ElectricalBoresight ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableElectricalBoresight_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableElectricalBoresight
    __del__ = lambda self : None;
    def __eq__(*args):
        """__eq__(self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ScopedCopyableElectricalBoresight___eq__(*args)

    def __ne__(*args):
        """__ne__(self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ScopedCopyableElectricalBoresight___ne__(*args)

    __swig_setmethods__["dcxPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_set
    __swig_getmethods__["dcxPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_get
    if _newclass:dcxPoly = _swig_property(_six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_get, _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_set)
    __swig_setmethods__["dcyPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_set
    __swig_getmethods__["dcyPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_get
    if _newclass:dcyPoly = _swig_property(_six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_get, _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_set)
ScopedCopyableElectricalBoresight_swigregister = _six_sicd.ScopedCopyableElectricalBoresight_swigregister
ScopedCopyableElectricalBoresight_swigregister(ScopedCopyableElectricalBoresight)

class ScopedCopyableHalfPowerBeamwidths(_object):
    """Proxy of C++ ScopedCopyableHalfPowerBeamwidths class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableHalfPowerBeamwidths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableHalfPowerBeamwidths, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, HalfPowerBeamwidths ptr=None) -> ScopedCopyableHalfPowerBeamwidths
        __init__(self) -> ScopedCopyableHalfPowerBeamwidths
        __init__(self, ScopedCopyableHalfPowerBeamwidths rhs) -> ScopedCopyableHalfPowerBeamwidths
        """
        this = _six_sicd.new_ScopedCopyableHalfPowerBeamwidths(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths_get(*args)

    def __ref__(*args):
        """__ref__(self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___deref__(*args)

    def reset(*args):
        """
        reset(self, HalfPowerBeamwidths ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableHalfPowerBeamwidths
    __del__ = lambda self : None;
    def __eq__(*args):
        """__eq__(self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___eq__(*args)

    def __ne__(*args):
        """__ne__(self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___ne__(*args)

    __swig_setmethods__["dcx"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_set
    __swig_getmethods__["dcx"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_get
    if _newclass:dcx = _swig_property(_six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_get, _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_set)
    __swig_setmethods__["dcy"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_set
    __swig_getmethods__["dcy"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_get
    if _newclass:dcy = _swig_property(_six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_get, _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_set)
ScopedCopyableHalfPowerBeamwidths_swigregister = _six_sicd.ScopedCopyableHalfPowerBeamwidths_swigregister
ScopedCopyableHalfPowerBeamwidths_swigregister(ScopedCopyableHalfPowerBeamwidths)

class ScopedCopyableGainAndPhasePolys(_object):
    """Proxy of C++ ScopedCopyableGainAndPhasePolys class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableGainAndPhasePolys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableGainAndPhasePolys, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GainAndPhasePolys ptr=None) -> ScopedCopyableGainAndPhasePolys
        __init__(self) -> ScopedCopyableGainAndPhasePolys
        __init__(self, ScopedCopyableGainAndPhasePolys rhs) -> ScopedCopyableGainAndPhasePolys
        """
        this = _six_sicd.new_ScopedCopyableGainAndPhasePolys(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys_get(*args)

    def __ref__(*args):
        """__ref__(self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___deref__(*args)

    def reset(*args):
        """
        reset(self, GainAndPhasePolys ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableGainAndPhasePolys_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableGainAndPhasePolys
    __del__ = lambda self : None;
    def __eq__(*args):
        """__eq__(self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___eq__(*args)

    def __ne__(*args):
        """__ne__(self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___ne__(*args)

    __swig_setmethods__["gainPoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_set
    __swig_getmethods__["gainPoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_get
    if _newclass:gainPoly = _swig_property(_six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_get, _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_set)
    __swig_setmethods__["phasePoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_set
    __swig_getmethods__["phasePoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_get
    if _newclass:phasePoly = _swig_property(_six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_get, _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_set)
ScopedCopyableGainAndPhasePolys_swigregister = _six_sicd.ScopedCopyableGainAndPhasePolys_swigregister
ScopedCopyableGainAndPhasePolys_swigregister(ScopedCopyableGainAndPhasePolys)

class ScopedCopyableWeightType(_object):
    """Proxy of C++ ScopedCopyableWeightType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableWeightType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableWeightType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, WeightType ptr=None) -> ScopedCopyableWeightType
        __init__(self) -> ScopedCopyableWeightType
        __init__(self, ScopedCopyableWeightType rhs) -> ScopedCopyableWeightType
        """
        this = _six_sicd.new_ScopedCopyableWeightType(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType_get(*args)

    def __ref__(*args):
        """__ref__(self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType___deref__(*args)

    def reset(*args):
        """
        reset(self, WeightType ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableWeightType_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableWeightType
    __del__ = lambda self : None;
    __swig_setmethods__["windowName"] = _six_sicd.ScopedCopyableWeightType_windowName_set
    __swig_getmethods__["windowName"] = _six_sicd.ScopedCopyableWeightType_windowName_get
    if _newclass:windowName = _swig_property(_six_sicd.ScopedCopyableWeightType_windowName_get, _six_sicd.ScopedCopyableWeightType_windowName_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCopyableWeightType_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCopyableWeightType_parameters_get
    if _newclass:parameters = _swig_property(_six_sicd.ScopedCopyableWeightType_parameters_get, _six_sicd.ScopedCopyableWeightType_parameters_set)
ScopedCopyableWeightType_swigregister = _six_sicd.ScopedCopyableWeightType_swigregister
ScopedCopyableWeightType_swigregister(ScopedCopyableWeightType)

class VectorPolyXYZ(_object):
    """Proxy of C++ VectorPolyXYZ class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPolyXYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPolyXYZ, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorPolyXYZ_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorPolyXYZ___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorPolyXYZ___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorPolyXYZ_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorPolyXYZ"""
        return _six_sicd.VectorPolyXYZ___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorPolyXYZ v)"""
        return _six_sicd.VectorPolyXYZ___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorPolyXYZ___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorPolyXYZ___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorPolyXYZ___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorPolyXYZ___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorPolyXYZ_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorPolyXYZ_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorPolyXYZ_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorPolyXYZ_clear(*args)

    def swap(*args):
        """swap(self, VectorPolyXYZ v)"""
        return _six_sicd.VectorPolyXYZ_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorPolyXYZ_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorPolyXYZ_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorPolyXYZ_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorPolyXYZ_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorPolyXYZ_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorPolyXYZ_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorPolyXYZ_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorPolyXYZ
        __init__(self, VectorPolyXYZ ?) -> VectorPolyXYZ
        __init__(self, size_type size) -> VectorPolyXYZ
        __init__(self, size_type size, value_type value) -> VectorPolyXYZ
        """
        this = _six_sicd.new_VectorPolyXYZ(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorPolyXYZ_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorPolyXYZ_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorPolyXYZ_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorPolyXYZ_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorPolyXYZ_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorPolyXYZ_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorPolyXYZ_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorPolyXYZ_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorPolyXYZ
    __del__ = lambda self : None;
VectorPolyXYZ_swigregister = _six_sicd.VectorPolyXYZ_swigregister
VectorPolyXYZ_swigregister(VectorPolyXYZ)

class ScopedCloneableAreaDirectionParameters(_object):
    """Proxy of C++ ScopedCloneableAreaDirectionParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableAreaDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableAreaDirectionParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, AreaDirectionParameters ptr=None) -> ScopedCloneableAreaDirectionParameters
        __init__(self) -> ScopedCloneableAreaDirectionParameters
        __init__(self, ScopedCloneableAreaDirectionParameters rhs) -> ScopedCloneableAreaDirectionParameters
        """
        this = _six_sicd.new_ScopedCloneableAreaDirectionParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters_get(*args)

    def __ref__(*args):
        """__ref__(self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___deref__(*args)

    def reset(*args):
        """
        reset(self, AreaDirectionParameters ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableAreaDirectionParameters_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableAreaDirectionParameters
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters_clone(*args)

    __swig_setmethods__["unitVector"] = _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_get
    if _newclass:unitVector = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_get, _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_set)
    __swig_setmethods__["spacing"] = _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_set
    __swig_getmethods__["spacing"] = _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_get
    if _newclass:spacing = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_spacing_get, _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_set)
    __swig_setmethods__["elements"] = _six_sicd.ScopedCloneableAreaDirectionParameters_elements_set
    __swig_getmethods__["elements"] = _six_sicd.ScopedCloneableAreaDirectionParameters_elements_get
    if _newclass:elements = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_elements_get, _six_sicd.ScopedCloneableAreaDirectionParameters_elements_set)
    __swig_setmethods__["first"] = _six_sicd.ScopedCloneableAreaDirectionParameters_first_set
    __swig_getmethods__["first"] = _six_sicd.ScopedCloneableAreaDirectionParameters_first_get
    if _newclass:first = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_first_get, _six_sicd.ScopedCloneableAreaDirectionParameters_first_set)
    def __eq__(*args):
        """__eq__(self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___eq__(*args)

    def __ne__(*args):
        """__ne__(self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___ne__(*args)

ScopedCloneableAreaDirectionParameters_swigregister = _six_sicd.ScopedCloneableAreaDirectionParameters_swigregister
ScopedCloneableAreaDirectionParameters_swigregister(ScopedCloneableAreaDirectionParameters)

class ScopedCloneableSegment(_object):
    """Proxy of C++ ScopedCloneableSegment class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableSegment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Segment ptr=None) -> ScopedCloneableSegment
        __init__(self) -> ScopedCloneableSegment
        __init__(self, ScopedCloneableSegment rhs) -> ScopedCloneableSegment
        """
        this = _six_sicd.new_ScopedCloneableSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment_get(*args)

    def __ref__(*args):
        """__ref__(self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment___deref__(*args)

    def reset(*args):
        """
        reset(self, Segment ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableSegment_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableSegment
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment_clone(*args)

    def getNumLines(*args):
        """getNumLines(self) -> int"""
        return _six_sicd.ScopedCloneableSegment_getNumLines(*args)

    def getNumSamples(*args):
        """getNumSamples(self) -> int"""
        return _six_sicd.ScopedCloneableSegment_getNumSamples(*args)

    __swig_setmethods__["startLine"] = _six_sicd.ScopedCloneableSegment_startLine_set
    __swig_getmethods__["startLine"] = _six_sicd.ScopedCloneableSegment_startLine_get
    if _newclass:startLine = _swig_property(_six_sicd.ScopedCloneableSegment_startLine_get, _six_sicd.ScopedCloneableSegment_startLine_set)
    __swig_setmethods__["startSample"] = _six_sicd.ScopedCloneableSegment_startSample_set
    __swig_getmethods__["startSample"] = _six_sicd.ScopedCloneableSegment_startSample_get
    if _newclass:startSample = _swig_property(_six_sicd.ScopedCloneableSegment_startSample_get, _six_sicd.ScopedCloneableSegment_startSample_set)
    __swig_setmethods__["endLine"] = _six_sicd.ScopedCloneableSegment_endLine_set
    __swig_getmethods__["endLine"] = _six_sicd.ScopedCloneableSegment_endLine_get
    if _newclass:endLine = _swig_property(_six_sicd.ScopedCloneableSegment_endLine_get, _six_sicd.ScopedCloneableSegment_endLine_set)
    __swig_setmethods__["endSample"] = _six_sicd.ScopedCloneableSegment_endSample_set
    __swig_getmethods__["endSample"] = _six_sicd.ScopedCloneableSegment_endSample_get
    if _newclass:endSample = _swig_property(_six_sicd.ScopedCloneableSegment_endSample_get, _six_sicd.ScopedCloneableSegment_endSample_set)
    __swig_setmethods__["identifier"] = _six_sicd.ScopedCloneableSegment_identifier_set
    __swig_getmethods__["identifier"] = _six_sicd.ScopedCloneableSegment_identifier_get
    if _newclass:identifier = _swig_property(_six_sicd.ScopedCloneableSegment_identifier_get, _six_sicd.ScopedCloneableSegment_identifier_set)
ScopedCloneableSegment_swigregister = _six_sicd.ScopedCloneableSegment_swigregister
ScopedCloneableSegment_swigregister(ScopedCloneableSegment)

class ScopedCloneableTxStep(_object):
    """Proxy of C++ ScopedCloneableTxStep class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableTxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableTxStep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TxStep ptr=None) -> ScopedCloneableTxStep
        __init__(self) -> ScopedCloneableTxStep
        __init__(self, ScopedCloneableTxStep rhs) -> ScopedCloneableTxStep
        """
        this = _six_sicd.new_ScopedCloneableTxStep(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep_get(*args)

    def __ref__(*args):
        """__ref__(self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep___deref__(*args)

    def reset(*args):
        """
        reset(self, TxStep ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableTxStep_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableTxStep
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep_clone(*args)

    __swig_setmethods__["waveformIndex"] = _six_sicd.ScopedCloneableTxStep_waveformIndex_set
    __swig_getmethods__["waveformIndex"] = _six_sicd.ScopedCloneableTxStep_waveformIndex_get
    if _newclass:waveformIndex = _swig_property(_six_sicd.ScopedCloneableTxStep_waveformIndex_get, _six_sicd.ScopedCloneableTxStep_waveformIndex_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.ScopedCloneableTxStep_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.ScopedCloneableTxStep_txPolarization_get
    if _newclass:txPolarization = _swig_property(_six_sicd.ScopedCloneableTxStep_txPolarization_get, _six_sicd.ScopedCloneableTxStep_txPolarization_set)
ScopedCloneableTxStep_swigregister = _six_sicd.ScopedCloneableTxStep_swigregister
ScopedCloneableTxStep_swigregister(ScopedCloneableTxStep)

class ScopedCloneableWaveformParameters(_object):
    """Proxy of C++ ScopedCloneableWaveformParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableWaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableWaveformParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, WaveformParameters ptr=None) -> ScopedCloneableWaveformParameters
        __init__(self) -> ScopedCloneableWaveformParameters
        __init__(self, ScopedCloneableWaveformParameters rhs) -> ScopedCloneableWaveformParameters
        """
        this = _six_sicd.new_ScopedCloneableWaveformParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters_get(*args)

    def __ref__(*args):
        """__ref__(self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters___deref__(*args)

    def reset(*args):
        """
        reset(self, WaveformParameters ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableWaveformParameters_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableWaveformParameters
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters_clone(*args)

    __swig_setmethods__["txPulseLength"] = _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_set
    __swig_getmethods__["txPulseLength"] = _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_get
    if _newclass:txPulseLength = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txPulseLength_get, _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_set)
    __swig_setmethods__["txRFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_set
    __swig_getmethods__["txRFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_get
    if _newclass:txRFBandwidth = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_get, _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_set)
    __swig_setmethods__["txFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_set
    __swig_getmethods__["txFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_get
    if _newclass:txFrequencyStart = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_get, _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_set)
    __swig_setmethods__["txFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_txFMRate_set
    __swig_getmethods__["txFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_txFMRate_get
    if _newclass:txFMRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txFMRate_get, _six_sicd.ScopedCloneableWaveformParameters_txFMRate_set)
    __swig_setmethods__["rcvDemodType"] = _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_set
    __swig_getmethods__["rcvDemodType"] = _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_get
    if _newclass:rcvDemodType = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_get, _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_set)
    __swig_setmethods__["rcvWindowLength"] = _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_set
    __swig_getmethods__["rcvWindowLength"] = _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_get
    if _newclass:rcvWindowLength = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_get, _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_set)
    __swig_setmethods__["adcSampleRate"] = _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_set
    __swig_getmethods__["adcSampleRate"] = _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_get
    if _newclass:adcSampleRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_get, _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_set)
    __swig_setmethods__["rcvIFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_set
    __swig_getmethods__["rcvIFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_get
    if _newclass:rcvIFBandwidth = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_get, _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_set)
    __swig_setmethods__["rcvFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_set
    __swig_getmethods__["rcvFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_get
    if _newclass:rcvFrequencyStart = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_get, _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_set)
    __swig_setmethods__["rcvFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_set
    __swig_getmethods__["rcvFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_get
    if _newclass:rcvFMRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_get, _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_set)
ScopedCloneableWaveformParameters_swigregister = _six_sicd.ScopedCloneableWaveformParameters_swigregister
ScopedCloneableWaveformParameters_swigregister(ScopedCloneableWaveformParameters)

class ScopedCloneableArea(_object):
    """Proxy of C++ ScopedCloneableArea class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableArea, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Area ptr=None) -> ScopedCloneableArea
        __init__(self) -> ScopedCloneableArea
        __init__(self, ScopedCloneableArea rhs) -> ScopedCloneableArea
        """
        this = _six_sicd.new_ScopedCloneableArea(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> Area"""
        return _six_sicd.ScopedCloneableArea_get(*args)

    def __ref__(*args):
        """__ref__(self) -> Area"""
        return _six_sicd.ScopedCloneableArea___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> Area"""
        return _six_sicd.ScopedCloneableArea___deref__(*args)

    def reset(*args):
        """
        reset(self, Area ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableArea_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableArea
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> Area"""
        return _six_sicd.ScopedCloneableArea_clone(*args)

    __swig_setmethods__["acpCorners"] = _six_sicd.ScopedCloneableArea_acpCorners_set
    __swig_getmethods__["acpCorners"] = _six_sicd.ScopedCloneableArea_acpCorners_get
    if _newclass:acpCorners = _swig_property(_six_sicd.ScopedCloneableArea_acpCorners_get, _six_sicd.ScopedCloneableArea_acpCorners_set)
    __swig_setmethods__["plane"] = _six_sicd.ScopedCloneableArea_plane_set
    __swig_getmethods__["plane"] = _six_sicd.ScopedCloneableArea_plane_get
    if _newclass:plane = _swig_property(_six_sicd.ScopedCloneableArea_plane_get, _six_sicd.ScopedCloneableArea_plane_set)
ScopedCloneableArea_swigregister = _six_sicd.ScopedCloneableArea_swigregister
ScopedCloneableArea_swigregister(ScopedCloneableArea)

class ScopedCloneableChannelParameters(_object):
    """Proxy of C++ ScopedCloneableChannelParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableChannelParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ChannelParameters ptr=None) -> ScopedCloneableChannelParameters
        __init__(self) -> ScopedCloneableChannelParameters
        __init__(self, ScopedCloneableChannelParameters rhs) -> ScopedCloneableChannelParameters
        """
        this = _six_sicd.new_ScopedCloneableChannelParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters_get(*args)

    def __ref__(*args):
        """__ref__(self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters___deref__(*args)

    def reset(*args):
        """
        reset(self, ChannelParameters ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCloneableChannelParameters_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableChannelParameters
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters_clone(*args)

    __swig_setmethods__["txRcvPolarization"] = _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_set
    __swig_getmethods__["txRcvPolarization"] = _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_get
    if _newclass:txRcvPolarization = _swig_property(_six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_get, _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_set)
    __swig_setmethods__["rcvAPCIndex"] = _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_set
    __swig_getmethods__["rcvAPCIndex"] = _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_get
    if _newclass:rcvAPCIndex = _swig_property(_six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_get, _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_set)
ScopedCloneableChannelParameters_swigregister = _six_sicd.ScopedCloneableChannelParameters_swigregister
ScopedCloneableChannelParameters_swigregister(ScopedCloneableChannelParameters)

class VectorScopedCloneableWaveformParameters(_object):
    """Proxy of C++ VectorScopedCloneableWaveformParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableWaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableWaveformParameters, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorScopedCloneableWaveformParameters v)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_clear(*args)

    def swap(*args):
        """swap(self, VectorScopedCloneableWaveformParameters v)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorScopedCloneableWaveformParameters
        __init__(self, VectorScopedCloneableWaveformParameters ?) -> VectorScopedCloneableWaveformParameters
        __init__(self, size_type size) -> VectorScopedCloneableWaveformParameters
        __init__(self, size_type size, value_type value) -> VectorScopedCloneableWaveformParameters
        """
        this = _six_sicd.new_VectorScopedCloneableWaveformParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableWaveformParameters
    __del__ = lambda self : None;
VectorScopedCloneableWaveformParameters_swigregister = _six_sicd.VectorScopedCloneableWaveformParameters_swigregister
VectorScopedCloneableWaveformParameters_swigregister(VectorScopedCloneableWaveformParameters)

class VectorScopedCloneableTxStep(_object):
    """Proxy of C++ VectorScopedCloneableTxStep class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableTxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableTxStep, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorScopedCloneableTxStep_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorScopedCloneableTxStep___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableTxStep___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableTxStep_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorScopedCloneableTxStep v)"""
        return _six_sicd.VectorScopedCloneableTxStep___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorScopedCloneableTxStep___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorScopedCloneableTxStep___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorScopedCloneableTxStep___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorScopedCloneableTxStep___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorScopedCloneableTxStep_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorScopedCloneableTxStep_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableTxStep_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorScopedCloneableTxStep_clear(*args)

    def swap(*args):
        """swap(self, VectorScopedCloneableTxStep v)"""
        return _six_sicd.VectorScopedCloneableTxStep_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorScopedCloneableTxStep_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorScopedCloneableTxStep_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorScopedCloneableTxStep_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorScopedCloneableTxStep
        __init__(self, VectorScopedCloneableTxStep ?) -> VectorScopedCloneableTxStep
        __init__(self, size_type size) -> VectorScopedCloneableTxStep
        __init__(self, size_type size, value_type value) -> VectorScopedCloneableTxStep
        """
        this = _six_sicd.new_VectorScopedCloneableTxStep(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorScopedCloneableTxStep_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableTxStep_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableTxStep_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorScopedCloneableTxStep_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorScopedCloneableTxStep_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorScopedCloneableTxStep_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorScopedCloneableTxStep_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableTxStep_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableTxStep
    __del__ = lambda self : None;
VectorScopedCloneableTxStep_swigregister = _six_sicd.VectorScopedCloneableTxStep_swigregister
VectorScopedCloneableTxStep_swigregister(VectorScopedCloneableTxStep)

class vectorScopedClonableSegment(_object):
    """Proxy of C++ vectorScopedClonableSegment class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorScopedClonableSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorScopedClonableSegment, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.vectorScopedClonableSegment_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.vectorScopedClonableSegment___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.vectorScopedClonableSegment___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.vectorScopedClonableSegment_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorScopedClonableSegment"""
        return _six_sicd.vectorScopedClonableSegment___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vectorScopedClonableSegment v)"""
        return _six_sicd.vectorScopedClonableSegment___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.vectorScopedClonableSegment___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.vectorScopedClonableSegment___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.vectorScopedClonableSegment___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.vectorScopedClonableSegment___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.vectorScopedClonableSegment_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.vectorScopedClonableSegment_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.vectorScopedClonableSegment_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.vectorScopedClonableSegment_clear(*args)

    def swap(*args):
        """swap(self, vectorScopedClonableSegment v)"""
        return _six_sicd.vectorScopedClonableSegment_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.vectorScopedClonableSegment_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.vectorScopedClonableSegment_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.vectorScopedClonableSegment_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.vectorScopedClonableSegment_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.vectorScopedClonableSegment_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.vectorScopedClonableSegment_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.vectorScopedClonableSegment_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorScopedClonableSegment
        __init__(self, vectorScopedClonableSegment ?) -> vectorScopedClonableSegment
        __init__(self, size_type size) -> vectorScopedClonableSegment
        __init__(self, size_type size, value_type value) -> vectorScopedClonableSegment
        """
        this = _six_sicd.new_vectorScopedClonableSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.vectorScopedClonableSegment_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.vectorScopedClonableSegment_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.vectorScopedClonableSegment_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.vectorScopedClonableSegment_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.vectorScopedClonableSegment_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.vectorScopedClonableSegment_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.vectorScopedClonableSegment_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.vectorScopedClonableSegment_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_vectorScopedClonableSegment
    __del__ = lambda self : None;
vectorScopedClonableSegment_swigregister = _six_sicd.vectorScopedClonableSegment_swigregister
vectorScopedClonableSegment_swigregister(vectorScopedClonableSegment)

class VectorScopedCloneableChannelParameters(_object):
    """Proxy of C++ VectorScopedCloneableChannelParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableChannelParameters, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorScopedCloneableChannelParameters___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorScopedCloneableChannelParameters v)"""
        return _six_sicd.VectorScopedCloneableChannelParameters___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorScopedCloneableChannelParameters___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorScopedCloneableChannelParameters___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorScopedCloneableChannelParameters_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_clear(*args)

    def swap(*args):
        """swap(self, VectorScopedCloneableChannelParameters v)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorScopedCloneableChannelParameters
        __init__(self, VectorScopedCloneableChannelParameters ?) -> VectorScopedCloneableChannelParameters
        __init__(self, size_type size) -> VectorScopedCloneableChannelParameters
        __init__(self, size_type size, value_type value) -> VectorScopedCloneableChannelParameters
        """
        this = _six_sicd.new_VectorScopedCloneableChannelParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableChannelParameters
    __del__ = lambda self : None;
VectorScopedCloneableChannelParameters_swigregister = _six_sicd.VectorScopedCloneableChannelParameters_swigregister
VectorScopedCloneableChannelParameters_swigregister(VectorScopedCloneableChannelParameters)

class VectorInt(_object):
    """Proxy of C++ VectorInt class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorInt_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorInt___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorInt___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorInt_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorInt"""
        return _six_sicd.VectorInt___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorInt v)"""
        return _six_sicd.VectorInt___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorInt___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorInt___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorInt___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorInt___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorInt_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorInt_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorInt_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorInt_clear(*args)

    def swap(*args):
        """swap(self, VectorInt v)"""
        return _six_sicd.VectorInt_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorInt_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorInt_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorInt_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorInt_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorInt_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorInt_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorInt_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorInt
        __init__(self, VectorInt ?) -> VectorInt
        __init__(self, size_type size) -> VectorInt
        __init__(self, size_type size, value_type value) -> VectorInt
        """
        this = _six_sicd.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorInt_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorInt_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorInt_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorInt_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorInt_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorInt_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorInt_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorInt_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _six_sicd.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class ScopedCopyableRcvChannelProcessed(_object):
    """Proxy of C++ ScopedCopyableRcvChannelProcessed class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRcvChannelProcessed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRcvChannelProcessed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, RcvChannelProcessed ptr=None) -> ScopedCopyableRcvChannelProcessed
        __init__(self) -> ScopedCopyableRcvChannelProcessed
        __init__(self, ScopedCopyableRcvChannelProcessed rhs) -> ScopedCopyableRcvChannelProcessed
        """
        this = _six_sicd.new_ScopedCopyableRcvChannelProcessed(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed_get(*args)

    def __ref__(*args):
        """__ref__(self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed___deref__(*args)

    def reset(*args):
        """
        reset(self, RcvChannelProcessed ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableRcvChannelProcessed_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRcvChannelProcessed
    __del__ = lambda self : None;
    __swig_setmethods__["numChannelsProcessed"] = _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set
    __swig_getmethods__["numChannelsProcessed"] = _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get
    if _newclass:numChannelsProcessed = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get, _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set)
    __swig_setmethods__["prfScaleFactor"] = _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_set
    __swig_getmethods__["prfScaleFactor"] = _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_get
    if _newclass:prfScaleFactor = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_get, _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_set)
    __swig_setmethods__["channelIndex"] = _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_set
    __swig_getmethods__["channelIndex"] = _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_get
    if _newclass:channelIndex = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_get, _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_set)
ScopedCopyableRcvChannelProcessed_swigregister = _six_sicd.ScopedCopyableRcvChannelProcessed_swigregister
ScopedCopyableRcvChannelProcessed_swigregister(ScopedCopyableRcvChannelProcessed)

class VectorProcessing(_object):
    """Proxy of C++ VectorProcessing class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorProcessing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorProcessing, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorProcessing_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorProcessing___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorProcessing___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorProcessing_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorProcessing"""
        return _six_sicd.VectorProcessing___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorProcessing v)"""
        return _six_sicd.VectorProcessing___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorProcessing___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorProcessing___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorProcessing___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorProcessing___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorProcessing_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorProcessing_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorProcessing_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorProcessing_clear(*args)

    def swap(*args):
        """swap(self, VectorProcessing v)"""
        return _six_sicd.VectorProcessing_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorProcessing_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorProcessing_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorProcessing_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorProcessing_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorProcessing_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorProcessing_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorProcessing_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorProcessing
        __init__(self, VectorProcessing ?) -> VectorProcessing
        __init__(self, size_type size) -> VectorProcessing
        __init__(self, size_type size, value_type value) -> VectorProcessing
        """
        this = _six_sicd.new_VectorProcessing(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorProcessing_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorProcessing_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorProcessing_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorProcessing_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorProcessing_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorProcessing_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorProcessing_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorProcessing_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorProcessing
    __del__ = lambda self : None;
VectorProcessing_swigregister = _six_sicd.VectorProcessing_swigregister
VectorProcessing_swigregister(VectorProcessing)

class ScopedCopyablePolarizationCalibration(_object):
    """Proxy of C++ ScopedCopyablePolarizationCalibration class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyablePolarizationCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyablePolarizationCalibration, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PolarizationCalibration ptr=None) -> ScopedCopyablePolarizationCalibration
        __init__(self) -> ScopedCopyablePolarizationCalibration
        __init__(self, ScopedCopyablePolarizationCalibration rhs) -> ScopedCopyablePolarizationCalibration
        """
        this = _six_sicd.new_ScopedCopyablePolarizationCalibration(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration_get(*args)

    def __ref__(*args):
        """__ref__(self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration___deref__(*args)

    def reset(*args):
        """
        reset(self, PolarizationCalibration ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyablePolarizationCalibration_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyablePolarizationCalibration
    __del__ = lambda self : None;
    __swig_setmethods__["hvAngleCompensationApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set
    __swig_getmethods__["hvAngleCompensationApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get
    if _newclass:hvAngleCompensationApplied = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get, _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set)
    __swig_setmethods__["distortionCorrectionApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set
    __swig_getmethods__["distortionCorrectionApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get
    if _newclass:distortionCorrectionApplied = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get, _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set)
    __swig_setmethods__["distortion"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortion_set
    __swig_getmethods__["distortion"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortion_get
    if _newclass:distortion = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_distortion_get, _six_sicd.ScopedCopyablePolarizationCalibration_distortion_set)
ScopedCopyablePolarizationCalibration_swigregister = _six_sicd.ScopedCopyablePolarizationCalibration_swigregister
ScopedCopyablePolarizationCalibration_swigregister(ScopedCopyablePolarizationCalibration)

class ScopedCopyablePosVelError(_object):
    """Proxy of C++ ScopedCopyablePosVelError class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyablePosVelError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyablePosVelError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PosVelError ptr=None) -> ScopedCopyablePosVelError
        __init__(self) -> ScopedCopyablePosVelError
        __init__(self, ScopedCopyablePosVelError rhs) -> ScopedCopyablePosVelError
        """
        this = _six_sicd.new_ScopedCopyablePosVelError(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> PosVelError"""
        return _six_sicd.ScopedCopyablePosVelError_get(*args)

    def __ref__(*args):
        """__ref__(self) -> PosVelError"""
        return _six_sicd.ScopedCopyablePosVelError___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> PosVelError"""
        return _six_sicd.ScopedCopyablePosVelError___deref__(*args)

    def reset(*args):
        """
        reset(self, PosVelError ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyablePosVelError_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyablePosVelError
    __del__ = lambda self : None;
    __swig_setmethods__["frame"] = _six_sicd.ScopedCopyablePosVelError_frame_set
    __swig_getmethods__["frame"] = _six_sicd.ScopedCopyablePosVelError_frame_get
    if _newclass:frame = _swig_property(_six_sicd.ScopedCopyablePosVelError_frame_get, _six_sicd.ScopedCopyablePosVelError_frame_set)
    __swig_setmethods__["p1"] = _six_sicd.ScopedCopyablePosVelError_p1_set
    __swig_getmethods__["p1"] = _six_sicd.ScopedCopyablePosVelError_p1_get
    if _newclass:p1 = _swig_property(_six_sicd.ScopedCopyablePosVelError_p1_get, _six_sicd.ScopedCopyablePosVelError_p1_set)
    __swig_setmethods__["p2"] = _six_sicd.ScopedCopyablePosVelError_p2_set
    __swig_getmethods__["p2"] = _six_sicd.ScopedCopyablePosVelError_p2_get
    if _newclass:p2 = _swig_property(_six_sicd.ScopedCopyablePosVelError_p2_get, _six_sicd.ScopedCopyablePosVelError_p2_set)
    __swig_setmethods__["p3"] = _six_sicd.ScopedCopyablePosVelError_p3_set
    __swig_getmethods__["p3"] = _six_sicd.ScopedCopyablePosVelError_p3_get
    if _newclass:p3 = _swig_property(_six_sicd.ScopedCopyablePosVelError_p3_get, _six_sicd.ScopedCopyablePosVelError_p3_set)
    __swig_setmethods__["v1"] = _six_sicd.ScopedCopyablePosVelError_v1_set
    __swig_getmethods__["v1"] = _six_sicd.ScopedCopyablePosVelError_v1_get
    if _newclass:v1 = _swig_property(_six_sicd.ScopedCopyablePosVelError_v1_get, _six_sicd.ScopedCopyablePosVelError_v1_set)
    __swig_setmethods__["v2"] = _six_sicd.ScopedCopyablePosVelError_v2_set
    __swig_getmethods__["v2"] = _six_sicd.ScopedCopyablePosVelError_v2_get
    if _newclass:v2 = _swig_property(_six_sicd.ScopedCopyablePosVelError_v2_get, _six_sicd.ScopedCopyablePosVelError_v2_set)
    __swig_setmethods__["v3"] = _six_sicd.ScopedCopyablePosVelError_v3_set
    __swig_getmethods__["v3"] = _six_sicd.ScopedCopyablePosVelError_v3_get
    if _newclass:v3 = _swig_property(_six_sicd.ScopedCopyablePosVelError_v3_get, _six_sicd.ScopedCopyablePosVelError_v3_set)
    __swig_setmethods__["corrCoefs"] = _six_sicd.ScopedCopyablePosVelError_corrCoefs_set
    __swig_getmethods__["corrCoefs"] = _six_sicd.ScopedCopyablePosVelError_corrCoefs_get
    if _newclass:corrCoefs = _swig_property(_six_sicd.ScopedCopyablePosVelError_corrCoefs_get, _six_sicd.ScopedCopyablePosVelError_corrCoefs_set)
    __swig_setmethods__["positionDecorr"] = _six_sicd.ScopedCopyablePosVelError_positionDecorr_set
    __swig_getmethods__["positionDecorr"] = _six_sicd.ScopedCopyablePosVelError_positionDecorr_get
    if _newclass:positionDecorr = _swig_property(_six_sicd.ScopedCopyablePosVelError_positionDecorr_get, _six_sicd.ScopedCopyablePosVelError_positionDecorr_set)
ScopedCopyablePosVelError_swigregister = _six_sicd.ScopedCopyablePosVelError_swigregister
ScopedCopyablePosVelError_swigregister(ScopedCopyablePosVelError)

class ScopedCopyableRadarSensor(_object):
    """Proxy of C++ ScopedCopyableRadarSensor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRadarSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRadarSensor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, RadarSensor ptr=None) -> ScopedCopyableRadarSensor
        __init__(self) -> ScopedCopyableRadarSensor
        __init__(self, ScopedCopyableRadarSensor rhs) -> ScopedCopyableRadarSensor
        """
        this = _six_sicd.new_ScopedCopyableRadarSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> RadarSensor"""
        return _six_sicd.ScopedCopyableRadarSensor_get(*args)

    def __ref__(*args):
        """__ref__(self) -> RadarSensor"""
        return _six_sicd.ScopedCopyableRadarSensor___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> RadarSensor"""
        return _six_sicd.ScopedCopyableRadarSensor___deref__(*args)

    def reset(*args):
        """
        reset(self, RadarSensor ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableRadarSensor_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRadarSensor
    __del__ = lambda self : None;
    __swig_setmethods__["rangeBias"] = _six_sicd.ScopedCopyableRadarSensor_rangeBias_set
    __swig_getmethods__["rangeBias"] = _six_sicd.ScopedCopyableRadarSensor_rangeBias_get
    if _newclass:rangeBias = _swig_property(_six_sicd.ScopedCopyableRadarSensor_rangeBias_get, _six_sicd.ScopedCopyableRadarSensor_rangeBias_set)
    __swig_setmethods__["clockFreqSF"] = _six_sicd.ScopedCopyableRadarSensor_clockFreqSF_set
    __swig_getmethods__["clockFreqSF"] = _six_sicd.ScopedCopyableRadarSensor_clockFreqSF_get
    if _newclass:clockFreqSF = _swig_property(_six_sicd.ScopedCopyableRadarSensor_clockFreqSF_get, _six_sicd.ScopedCopyableRadarSensor_clockFreqSF_set)
    __swig_setmethods__["transmitFreqSF"] = _six_sicd.ScopedCopyableRadarSensor_transmitFreqSF_set
    __swig_getmethods__["transmitFreqSF"] = _six_sicd.ScopedCopyableRadarSensor_transmitFreqSF_get
    if _newclass:transmitFreqSF = _swig_property(_six_sicd.ScopedCopyableRadarSensor_transmitFreqSF_get, _six_sicd.ScopedCopyableRadarSensor_transmitFreqSF_set)
    __swig_setmethods__["rangeBiasDecorr"] = _six_sicd.ScopedCopyableRadarSensor_rangeBiasDecorr_set
    __swig_getmethods__["rangeBiasDecorr"] = _six_sicd.ScopedCopyableRadarSensor_rangeBiasDecorr_get
    if _newclass:rangeBiasDecorr = _swig_property(_six_sicd.ScopedCopyableRadarSensor_rangeBiasDecorr_get, _six_sicd.ScopedCopyableRadarSensor_rangeBiasDecorr_set)
ScopedCopyableRadarSensor_swigregister = _six_sicd.ScopedCopyableRadarSensor_swigregister
ScopedCopyableRadarSensor_swigregister(ScopedCopyableRadarSensor)

class ScopedCopyableTropoError(_object):
    """Proxy of C++ ScopedCopyableTropoError class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTropoError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTropoError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TropoError ptr=None) -> ScopedCopyableTropoError
        __init__(self) -> ScopedCopyableTropoError
        __init__(self, ScopedCopyableTropoError rhs) -> ScopedCopyableTropoError
        """
        this = _six_sicd.new_ScopedCopyableTropoError(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> TropoError"""
        return _six_sicd.ScopedCopyableTropoError_get(*args)

    def __ref__(*args):
        """__ref__(self) -> TropoError"""
        return _six_sicd.ScopedCopyableTropoError___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> TropoError"""
        return _six_sicd.ScopedCopyableTropoError___deref__(*args)

    def reset(*args):
        """
        reset(self, TropoError ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableTropoError_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableTropoError
    __del__ = lambda self : None;
    __swig_setmethods__["tropoRangeVertical"] = _six_sicd.ScopedCopyableTropoError_tropoRangeVertical_set
    __swig_getmethods__["tropoRangeVertical"] = _six_sicd.ScopedCopyableTropoError_tropoRangeVertical_get
    if _newclass:tropoRangeVertical = _swig_property(_six_sicd.ScopedCopyableTropoError_tropoRangeVertical_get, _six_sicd.ScopedCopyableTropoError_tropoRangeVertical_set)
    __swig_setmethods__["tropoRangeSlant"] = _six_sicd.ScopedCopyableTropoError_tropoRangeSlant_set
    __swig_getmethods__["tropoRangeSlant"] = _six_sicd.ScopedCopyableTropoError_tropoRangeSlant_get
    if _newclass:tropoRangeSlant = _swig_property(_six_sicd.ScopedCopyableTropoError_tropoRangeSlant_get, _six_sicd.ScopedCopyableTropoError_tropoRangeSlant_set)
    __swig_setmethods__["tropoRangeDecorr"] = _six_sicd.ScopedCopyableTropoError_tropoRangeDecorr_set
    __swig_getmethods__["tropoRangeDecorr"] = _six_sicd.ScopedCopyableTropoError_tropoRangeDecorr_get
    if _newclass:tropoRangeDecorr = _swig_property(_six_sicd.ScopedCopyableTropoError_tropoRangeDecorr_get, _six_sicd.ScopedCopyableTropoError_tropoRangeDecorr_set)
ScopedCopyableTropoError_swigregister = _six_sicd.ScopedCopyableTropoError_swigregister
ScopedCopyableTropoError_swigregister(ScopedCopyableTropoError)

class ScopedCopyableIonoError(_object):
    """Proxy of C++ ScopedCopyableIonoError class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableIonoError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableIonoError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, IonoError ptr=None) -> ScopedCopyableIonoError
        __init__(self) -> ScopedCopyableIonoError
        __init__(self, ScopedCopyableIonoError rhs) -> ScopedCopyableIonoError
        """
        this = _six_sicd.new_ScopedCopyableIonoError(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> IonoError"""
        return _six_sicd.ScopedCopyableIonoError_get(*args)

    def __ref__(*args):
        """__ref__(self) -> IonoError"""
        return _six_sicd.ScopedCopyableIonoError___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> IonoError"""
        return _six_sicd.ScopedCopyableIonoError___deref__(*args)

    def reset(*args):
        """
        reset(self, IonoError ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableIonoError_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableIonoError
    __del__ = lambda self : None;
    __swig_setmethods__["ionoRangeVertical"] = _six_sicd.ScopedCopyableIonoError_ionoRangeVertical_set
    __swig_getmethods__["ionoRangeVertical"] = _six_sicd.ScopedCopyableIonoError_ionoRangeVertical_get
    if _newclass:ionoRangeVertical = _swig_property(_six_sicd.ScopedCopyableIonoError_ionoRangeVertical_get, _six_sicd.ScopedCopyableIonoError_ionoRangeVertical_set)
    __swig_setmethods__["ionoRangeRateVertical"] = _six_sicd.ScopedCopyableIonoError_ionoRangeRateVertical_set
    __swig_getmethods__["ionoRangeRateVertical"] = _six_sicd.ScopedCopyableIonoError_ionoRangeRateVertical_get
    if _newclass:ionoRangeRateVertical = _swig_property(_six_sicd.ScopedCopyableIonoError_ionoRangeRateVertical_get, _six_sicd.ScopedCopyableIonoError_ionoRangeRateVertical_set)
    __swig_setmethods__["ionoRgRgRateCC"] = _six_sicd.ScopedCopyableIonoError_ionoRgRgRateCC_set
    __swig_getmethods__["ionoRgRgRateCC"] = _six_sicd.ScopedCopyableIonoError_ionoRgRgRateCC_get
    if _newclass:ionoRgRgRateCC = _swig_property(_six_sicd.ScopedCopyableIonoError_ionoRgRgRateCC_get, _six_sicd.ScopedCopyableIonoError_ionoRgRgRateCC_set)
    __swig_setmethods__["ionoRangeVertDecorr"] = _six_sicd.ScopedCopyableIonoError_ionoRangeVertDecorr_set
    __swig_getmethods__["ionoRangeVertDecorr"] = _six_sicd.ScopedCopyableIonoError_ionoRangeVertDecorr_get
    if _newclass:ionoRangeVertDecorr = _swig_property(_six_sicd.ScopedCopyableIonoError_ionoRangeVertDecorr_get, _six_sicd.ScopedCopyableIonoError_ionoRangeVertDecorr_set)
ScopedCopyableIonoError_swigregister = _six_sicd.ScopedCopyableIonoError_swigregister
ScopedCopyableIonoError_swigregister(ScopedCopyableIonoError)

class ScopedCopyableCompositeSCP(_object):
    """Proxy of C++ ScopedCopyableCompositeSCP class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableCompositeSCP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableCompositeSCP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, CompositeSCP ptr=None) -> ScopedCopyableCompositeSCP
        __init__(self) -> ScopedCopyableCompositeSCP
        __init__(self, ScopedCopyableCompositeSCP rhs) -> ScopedCopyableCompositeSCP
        """
        this = _six_sicd.new_ScopedCopyableCompositeSCP(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> CompositeSCP"""
        return _six_sicd.ScopedCopyableCompositeSCP_get(*args)

    def __ref__(*args):
        """__ref__(self) -> CompositeSCP"""
        return _six_sicd.ScopedCopyableCompositeSCP___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> CompositeSCP"""
        return _six_sicd.ScopedCopyableCompositeSCP___deref__(*args)

    def reset(*args):
        """
        reset(self, CompositeSCP ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableCompositeSCP_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableCompositeSCP
    __del__ = lambda self : None;
    __swig_setmethods__["scpType"] = _six_sicd.ScopedCopyableCompositeSCP_scpType_set
    __swig_getmethods__["scpType"] = _six_sicd.ScopedCopyableCompositeSCP_scpType_get
    if _newclass:scpType = _swig_property(_six_sicd.ScopedCopyableCompositeSCP_scpType_get, _six_sicd.ScopedCopyableCompositeSCP_scpType_set)
    __swig_setmethods__["xErr"] = _six_sicd.ScopedCopyableCompositeSCP_xErr_set
    __swig_getmethods__["xErr"] = _six_sicd.ScopedCopyableCompositeSCP_xErr_get
    if _newclass:xErr = _swig_property(_six_sicd.ScopedCopyableCompositeSCP_xErr_get, _six_sicd.ScopedCopyableCompositeSCP_xErr_set)
    __swig_setmethods__["yErr"] = _six_sicd.ScopedCopyableCompositeSCP_yErr_set
    __swig_getmethods__["yErr"] = _six_sicd.ScopedCopyableCompositeSCP_yErr_get
    if _newclass:yErr = _swig_property(_six_sicd.ScopedCopyableCompositeSCP_yErr_get, _six_sicd.ScopedCopyableCompositeSCP_yErr_set)
    __swig_setmethods__["xyErr"] = _six_sicd.ScopedCopyableCompositeSCP_xyErr_set
    __swig_getmethods__["xyErr"] = _six_sicd.ScopedCopyableCompositeSCP_xyErr_get
    if _newclass:xyErr = _swig_property(_six_sicd.ScopedCopyableCompositeSCP_xyErr_get, _six_sicd.ScopedCopyableCompositeSCP_xyErr_set)
ScopedCopyableCompositeSCP_swigregister = _six_sicd.ScopedCopyableCompositeSCP_swigregister
ScopedCopyableCompositeSCP_swigregister(ScopedCopyableCompositeSCP)

class ScopedCopyableComponents(_object):
    """Proxy of C++ ScopedCopyableComponents class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableComponents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableComponents, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Components ptr=None) -> ScopedCopyableComponents
        __init__(self) -> ScopedCopyableComponents
        __init__(self, ScopedCopyableComponents rhs) -> ScopedCopyableComponents
        """
        this = _six_sicd.new_ScopedCopyableComponents(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> Components"""
        return _six_sicd.ScopedCopyableComponents_get(*args)

    def __ref__(*args):
        """__ref__(self) -> Components"""
        return _six_sicd.ScopedCopyableComponents___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> Components"""
        return _six_sicd.ScopedCopyableComponents___deref__(*args)

    def reset(*args):
        """
        reset(self, Components ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableComponents_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableComponents
    __del__ = lambda self : None;
    __swig_setmethods__["posVelError"] = _six_sicd.ScopedCopyableComponents_posVelError_set
    __swig_getmethods__["posVelError"] = _six_sicd.ScopedCopyableComponents_posVelError_get
    if _newclass:posVelError = _swig_property(_six_sicd.ScopedCopyableComponents_posVelError_get, _six_sicd.ScopedCopyableComponents_posVelError_set)
    __swig_setmethods__["radarSensor"] = _six_sicd.ScopedCopyableComponents_radarSensor_set
    __swig_getmethods__["radarSensor"] = _six_sicd.ScopedCopyableComponents_radarSensor_get
    if _newclass:radarSensor = _swig_property(_six_sicd.ScopedCopyableComponents_radarSensor_get, _six_sicd.ScopedCopyableComponents_radarSensor_set)
    __swig_setmethods__["tropoError"] = _six_sicd.ScopedCopyableComponents_tropoError_set
    __swig_getmethods__["tropoError"] = _six_sicd.ScopedCopyableComponents_tropoError_get
    if _newclass:tropoError = _swig_property(_six_sicd.ScopedCopyableComponents_tropoError_get, _six_sicd.ScopedCopyableComponents_tropoError_set)
    __swig_setmethods__["ionoError"] = _six_sicd.ScopedCopyableComponents_ionoError_set
    __swig_getmethods__["ionoError"] = _six_sicd.ScopedCopyableComponents_ionoError_get
    if _newclass:ionoError = _swig_property(_six_sicd.ScopedCopyableComponents_ionoError_get, _six_sicd.ScopedCopyableComponents_ionoError_set)
ScopedCopyableComponents_swigregister = _six_sicd.ScopedCopyableComponents_swigregister
ScopedCopyableComponents_swigregister(ScopedCopyableComponents)

class VectorMatchCollect(_object):
    """Proxy of C++ VectorMatchCollect class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorMatchCollect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorMatchCollect, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorMatchCollect_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorMatchCollect___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorMatchCollect___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorMatchCollect_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorMatchCollect"""
        return _six_sicd.VectorMatchCollect___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorMatchCollect v)"""
        return _six_sicd.VectorMatchCollect___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorMatchCollect___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorMatchCollect___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorMatchCollect___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorMatchCollect___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorMatchCollect_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorMatchCollect_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorMatchCollect_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorMatchCollect_clear(*args)

    def swap(*args):
        """swap(self, VectorMatchCollect v)"""
        return _six_sicd.VectorMatchCollect_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorMatchCollect_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorMatchCollect_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorMatchCollect_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorMatchCollect_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorMatchCollect_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorMatchCollect_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorMatchCollect_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorMatchCollect
        __init__(self, VectorMatchCollect ?) -> VectorMatchCollect
        __init__(self, size_type size) -> VectorMatchCollect
        __init__(self, size_type size, value_type value) -> VectorMatchCollect
        """
        this = _six_sicd.new_VectorMatchCollect(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorMatchCollect_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorMatchCollect_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorMatchCollect_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorMatchCollect_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorMatchCollect_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorMatchCollect_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorMatchCollect_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorMatchCollect_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorMatchCollect
    __del__ = lambda self : None;
VectorMatchCollect_swigregister = _six_sicd.VectorMatchCollect_swigregister
VectorMatchCollect_swigregister(VectorMatchCollect)

class VectorScopedCopyableMatchType(_object):
    """Proxy of C++ VectorScopedCopyableMatchType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCopyableMatchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCopyableMatchType, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorScopedCopyableMatchType_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorScopedCopyableMatchType___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorScopedCopyableMatchType___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorScopedCopyableMatchType_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorScopedCopyableMatchType"""
        return _six_sicd.VectorScopedCopyableMatchType___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorScopedCopyableMatchType v)"""
        return _six_sicd.VectorScopedCopyableMatchType___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorScopedCopyableMatchType___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorScopedCopyableMatchType___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorScopedCopyableMatchType___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorScopedCopyableMatchType___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorScopedCopyableMatchType_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorScopedCopyableMatchType_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorScopedCopyableMatchType_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorScopedCopyableMatchType_clear(*args)

    def swap(*args):
        """swap(self, VectorScopedCopyableMatchType v)"""
        return _six_sicd.VectorScopedCopyableMatchType_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorScopedCopyableMatchType_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorScopedCopyableMatchType_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorScopedCopyableMatchType_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorScopedCopyableMatchType
        __init__(self, VectorScopedCopyableMatchType ?) -> VectorScopedCopyableMatchType
        __init__(self, size_type size) -> VectorScopedCopyableMatchType
        __init__(self, size_type size, value_type value) -> VectorScopedCopyableMatchType
        """
        this = _six_sicd.new_VectorScopedCopyableMatchType(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorScopedCopyableMatchType_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorScopedCopyableMatchType_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorScopedCopyableMatchType_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorScopedCopyableMatchType_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorScopedCopyableMatchType_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorScopedCopyableMatchType_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorScopedCopyableMatchType_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorScopedCopyableMatchType_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCopyableMatchType
    __del__ = lambda self : None;
VectorScopedCopyableMatchType_swigregister = _six_sicd.VectorScopedCopyableMatchType_swigregister
VectorScopedCopyableMatchType_swigregister(VectorScopedCopyableMatchType)

class ScopedCopyableRMAT(_object):
    """Proxy of C++ ScopedCopyableRMAT class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMAT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, RMAT ptr=None) -> ScopedCopyableRMAT
        __init__(self) -> ScopedCopyableRMAT
        __init__(self, ScopedCopyableRMAT rhs) -> ScopedCopyableRMAT
        """
        this = _six_sicd.new_ScopedCopyableRMAT(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT_get(*args)

    def __ref__(*args):
        """__ref__(self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT___deref__(*args)

    def reset(*args):
        """
        reset(self, RMAT ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableRMAT_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMAT
    __del__ = lambda self : None;
    __swig_setmethods__["refTime"] = _six_sicd.ScopedCopyableRMAT_refTime_set
    __swig_getmethods__["refTime"] = _six_sicd.ScopedCopyableRMAT_refTime_get
    if _newclass:refTime = _swig_property(_six_sicd.ScopedCopyableRMAT_refTime_get, _six_sicd.ScopedCopyableRMAT_refTime_set)
    __swig_setmethods__["refPos"] = _six_sicd.ScopedCopyableRMAT_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.ScopedCopyableRMAT_refPos_get
    if _newclass:refPos = _swig_property(_six_sicd.ScopedCopyableRMAT_refPos_get, _six_sicd.ScopedCopyableRMAT_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.ScopedCopyableRMAT_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.ScopedCopyableRMAT_refVel_get
    if _newclass:refVel = _swig_property(_six_sicd.ScopedCopyableRMAT_refVel_get, _six_sicd.ScopedCopyableRMAT_refVel_set)
    __swig_setmethods__["distRefLinePoly"] = _six_sicd.ScopedCopyableRMAT_distRefLinePoly_set
    __swig_getmethods__["distRefLinePoly"] = _six_sicd.ScopedCopyableRMAT_distRefLinePoly_get
    if _newclass:distRefLinePoly = _swig_property(_six_sicd.ScopedCopyableRMAT_distRefLinePoly_get, _six_sicd.ScopedCopyableRMAT_distRefLinePoly_set)
    __swig_setmethods__["cosDCACOAPoly"] = _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_set
    __swig_getmethods__["cosDCACOAPoly"] = _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_get
    if _newclass:cosDCACOAPoly = _swig_property(_six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_get, _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_set)
    __swig_setmethods__["kx1"] = _six_sicd.ScopedCopyableRMAT_kx1_set
    __swig_getmethods__["kx1"] = _six_sicd.ScopedCopyableRMAT_kx1_get
    if _newclass:kx1 = _swig_property(_six_sicd.ScopedCopyableRMAT_kx1_get, _six_sicd.ScopedCopyableRMAT_kx1_set)
    __swig_setmethods__["kx2"] = _six_sicd.ScopedCopyableRMAT_kx2_set
    __swig_getmethods__["kx2"] = _six_sicd.ScopedCopyableRMAT_kx2_get
    if _newclass:kx2 = _swig_property(_six_sicd.ScopedCopyableRMAT_kx2_get, _six_sicd.ScopedCopyableRMAT_kx2_set)
    __swig_setmethods__["ky1"] = _six_sicd.ScopedCopyableRMAT_ky1_set
    __swig_getmethods__["ky1"] = _six_sicd.ScopedCopyableRMAT_ky1_get
    if _newclass:ky1 = _swig_property(_six_sicd.ScopedCopyableRMAT_ky1_get, _six_sicd.ScopedCopyableRMAT_ky1_set)
    __swig_setmethods__["ky2"] = _six_sicd.ScopedCopyableRMAT_ky2_set
    __swig_getmethods__["ky2"] = _six_sicd.ScopedCopyableRMAT_ky2_get
    if _newclass:ky2 = _swig_property(_six_sicd.ScopedCopyableRMAT_ky2_get, _six_sicd.ScopedCopyableRMAT_ky2_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_get
    if _newclass:dopConeAngleRef = _swig_property(_six_sicd.ScopedCopyableRMAT_dopConeAngleRef_get, _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_set)
ScopedCopyableRMAT_swigregister = _six_sicd.ScopedCopyableRMAT_swigregister
ScopedCopyableRMAT_swigregister(ScopedCopyableRMAT)

class ScopedCopyableRMCR(_object):
    """Proxy of C++ ScopedCopyableRMCR class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMCR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, RMCR ptr=None) -> ScopedCopyableRMCR
        __init__(self) -> ScopedCopyableRMCR
        __init__(self, ScopedCopyableRMCR rhs) -> ScopedCopyableRMCR
        """
        this = _six_sicd.new_ScopedCopyableRMCR(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR_get(*args)

    def __ref__(*args):
        """__ref__(self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR___deref__(*args)

    def reset(*args):
        """
        reset(self, RMCR ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableRMCR_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMCR
    __del__ = lambda self : None;
    __swig_setmethods__["refPos"] = _six_sicd.ScopedCopyableRMCR_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.ScopedCopyableRMCR_refPos_get
    if _newclass:refPos = _swig_property(_six_sicd.ScopedCopyableRMCR_refPos_get, _six_sicd.ScopedCopyableRMCR_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.ScopedCopyableRMCR_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.ScopedCopyableRMCR_refVel_get
    if _newclass:refVel = _swig_property(_six_sicd.ScopedCopyableRMCR_refVel_get, _six_sicd.ScopedCopyableRMCR_refVel_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_get
    if _newclass:dopConeAngleRef = _swig_property(_six_sicd.ScopedCopyableRMCR_dopConeAngleRef_get, _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_set)
ScopedCopyableRMCR_swigregister = _six_sicd.ScopedCopyableRMCR_swigregister
ScopedCopyableRMCR_swigregister(ScopedCopyableRMCR)

class ScopedCopyableINCA(_object):
    """Proxy of C++ ScopedCopyableINCA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableINCA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableINCA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, INCA ptr=None) -> ScopedCopyableINCA
        __init__(self) -> ScopedCopyableINCA
        __init__(self, ScopedCopyableINCA rhs) -> ScopedCopyableINCA
        """
        this = _six_sicd.new_ScopedCopyableINCA(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(*args):
        """get(self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA_get(*args)

    def __ref__(*args):
        """__ref__(self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA___deref__(*args)

    def reset(*args):
        """
        reset(self, INCA ptr=None)
        reset(self)
        """
        return _six_sicd.ScopedCopyableINCA_reset(*args)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableINCA
    __del__ = lambda self : None;
    __swig_setmethods__["timeCAPoly"] = _six_sicd.ScopedCopyableINCA_timeCAPoly_set
    __swig_getmethods__["timeCAPoly"] = _six_sicd.ScopedCopyableINCA_timeCAPoly_get
    if _newclass:timeCAPoly = _swig_property(_six_sicd.ScopedCopyableINCA_timeCAPoly_get, _six_sicd.ScopedCopyableINCA_timeCAPoly_set)
    __swig_setmethods__["rangeCA"] = _six_sicd.ScopedCopyableINCA_rangeCA_set
    __swig_getmethods__["rangeCA"] = _six_sicd.ScopedCopyableINCA_rangeCA_get
    if _newclass:rangeCA = _swig_property(_six_sicd.ScopedCopyableINCA_rangeCA_get, _six_sicd.ScopedCopyableINCA_rangeCA_set)
    __swig_setmethods__["freqZero"] = _six_sicd.ScopedCopyableINCA_freqZero_set
    __swig_getmethods__["freqZero"] = _six_sicd.ScopedCopyableINCA_freqZero_get
    if _newclass:freqZero = _swig_property(_six_sicd.ScopedCopyableINCA_freqZero_get, _six_sicd.ScopedCopyableINCA_freqZero_set)
    __swig_setmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_set
    __swig_getmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_get
    if _newclass:dopplerRateScaleFactorPoly = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_get, _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_set)
    __swig_setmethods__["dopplerCentroidPoly"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_set
    __swig_getmethods__["dopplerCentroidPoly"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_get
    if _newclass:dopplerCentroidPoly = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_get, _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_set)
    __swig_setmethods__["dopplerCentroidCOA"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_set
    __swig_getmethods__["dopplerCentroidCOA"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_get
    if _newclass:dopplerCentroidCOA = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_get, _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_set)
ScopedCopyableINCA_swigregister = _six_sicd.ScopedCopyableINCA_swigregister
ScopedCopyableINCA_swigregister(ScopedCopyableINCA)

class VectorTimelineSet(_object):
    """Proxy of C++ VectorTimelineSet class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorTimelineSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorTimelineSet, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six_sicd.VectorTimelineSet_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six_sicd.VectorTimelineSet___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six_sicd.VectorTimelineSet___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six_sicd.VectorTimelineSet_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorTimelineSet"""
        return _six_sicd.VectorTimelineSet___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorTimelineSet v)"""
        return _six_sicd.VectorTimelineSet___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six_sicd.VectorTimelineSet___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six_sicd.VectorTimelineSet___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six_sicd.VectorTimelineSet___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six_sicd.VectorTimelineSet___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six_sicd.VectorTimelineSet_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six_sicd.VectorTimelineSet_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six_sicd.VectorTimelineSet_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six_sicd.VectorTimelineSet_clear(*args)

    def swap(*args):
        """swap(self, VectorTimelineSet v)"""
        return _six_sicd.VectorTimelineSet_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six_sicd.VectorTimelineSet_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six_sicd.VectorTimelineSet_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six_sicd.VectorTimelineSet_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six_sicd.VectorTimelineSet_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six_sicd.VectorTimelineSet_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six_sicd.VectorTimelineSet_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six_sicd.VectorTimelineSet_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorTimelineSet
        __init__(self, VectorTimelineSet ?) -> VectorTimelineSet
        __init__(self, size_type size) -> VectorTimelineSet
        __init__(self, size_type size, value_type value) -> VectorTimelineSet
        """
        this = _six_sicd.new_VectorTimelineSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six_sicd.VectorTimelineSet_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six_sicd.VectorTimelineSet_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six_sicd.VectorTimelineSet_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six_sicd.VectorTimelineSet_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six_sicd.VectorTimelineSet_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six_sicd.VectorTimelineSet_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six_sicd.VectorTimelineSet_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six_sicd.VectorTimelineSet_capacity(*args)

    __swig_destroy__ = _six_sicd.delete_VectorTimelineSet
    __del__ = lambda self : None;
VectorTimelineSet_swigregister = _six_sicd.VectorTimelineSet_swigregister
VectorTimelineSet_swigregister(VectorTimelineSet)



