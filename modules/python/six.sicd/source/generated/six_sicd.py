# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_six_sicd', [dirname(__file__)])
        except ImportError:
            import _six_sicd
            return _six_sicd
        if fp is not None:
            try:
                _mod = imp.load_module('_six_sicd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _six_sicd = swig_import_helper()
    del swig_import_helper
else:
    import _six_sicd
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _six_sicd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _six_sicd.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _six_sicd.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _six_sicd.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _six_sicd.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _six_sicd.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _six_sicd.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _six_sicd.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _six_sicd.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _six_sicd.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _six_sicd.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _six_sicd.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _six_sicd.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _six_sicd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import math_poly
import math_linear
import coda_except
import six_base
import scene
import coda_types
import coda_io
import mem

def getComplexData(sicdPathname, schemaPaths):
    """getComplexData(std::string const & sicdPathname, VectorString schemaPaths) -> ComplexData"""
    return _six_sicd.getComplexData(sicdPathname, schemaPaths)

def asComplexData(data):
    """asComplexData(Data data) -> ComplexData"""
    return _six_sicd.asComplexData(data)
class ComplexClassification(six_base.Classification):
    """Proxy of C++ six::sicd::ComplexClassification class"""
    __swig_setmethods__ = {}
    for _s in [six_base.Classification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexClassification, name, value)
    __swig_getmethods__ = {}
    for _s in [six_base.Classification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexClassification, name)
    __repr__ = _swig_repr

    def getLevel(self):
        """getLevel(ComplexClassification self) -> std::string"""
        return _six_sicd.ComplexClassification_getLevel(self)


    def put(self, os):
        """put(ComplexClassification self, std::ostream & os) -> std::ostream &"""
        return _six_sicd.ComplexClassification_put(self, os)

    __swig_setmethods__["level"] = _six_sicd.ComplexClassification_level_set
    __swig_getmethods__["level"] = _six_sicd.ComplexClassification_level_get
    if _newclass:
        level = _swig_property(_six_sicd.ComplexClassification_level_get, _six_sicd.ComplexClassification_level_set)

    def __init__(self):
        """__init__(six::sicd::ComplexClassification self) -> ComplexClassification"""
        this = _six_sicd.new_ComplexClassification()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexClassification
    __del__ = lambda self: None
ComplexClassification_swigregister = _six_sicd.ComplexClassification_swigregister
ComplexClassification_swigregister(ComplexClassification)

class CollectionInformation(_object):
    """Proxy of C++ six::sicd::CollectionInformation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionInformation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collectorName"] = _six_sicd.CollectionInformation_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.CollectionInformation_collectorName_get
    if _newclass:
        collectorName = _swig_property(_six_sicd.CollectionInformation_collectorName_get, _six_sicd.CollectionInformation_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.CollectionInformation_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.CollectionInformation_illuminatorName_get
    if _newclass:
        illuminatorName = _swig_property(_six_sicd.CollectionInformation_illuminatorName_get, _six_sicd.CollectionInformation_illuminatorName_set)
    __swig_setmethods__["coreName"] = _six_sicd.CollectionInformation_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.CollectionInformation_coreName_get
    if _newclass:
        coreName = _swig_property(_six_sicd.CollectionInformation_coreName_get, _six_sicd.CollectionInformation_coreName_set)
    __swig_setmethods__["collectType"] = _six_sicd.CollectionInformation_collectType_set
    __swig_getmethods__["collectType"] = _six_sicd.CollectionInformation_collectType_get
    if _newclass:
        collectType = _swig_property(_six_sicd.CollectionInformation_collectType_get, _six_sicd.CollectionInformation_collectType_set)
    __swig_setmethods__["radarMode"] = _six_sicd.CollectionInformation_radarMode_set
    __swig_getmethods__["radarMode"] = _six_sicd.CollectionInformation_radarMode_get
    if _newclass:
        radarMode = _swig_property(_six_sicd.CollectionInformation_radarMode_get, _six_sicd.CollectionInformation_radarMode_set)
    __swig_setmethods__["radarModeID"] = _six_sicd.CollectionInformation_radarModeID_set
    __swig_getmethods__["radarModeID"] = _six_sicd.CollectionInformation_radarModeID_get
    if _newclass:
        radarModeID = _swig_property(_six_sicd.CollectionInformation_radarModeID_get, _six_sicd.CollectionInformation_radarModeID_set)
    __swig_setmethods__["classification"] = _six_sicd.CollectionInformation_classification_set
    __swig_getmethods__["classification"] = _six_sicd.CollectionInformation_classification_get
    if _newclass:
        classification = _swig_property(_six_sicd.CollectionInformation_classification_get, _six_sicd.CollectionInformation_classification_set)
    __swig_setmethods__["countryCodes"] = _six_sicd.CollectionInformation_countryCodes_set
    __swig_getmethods__["countryCodes"] = _six_sicd.CollectionInformation_countryCodes_get
    if _newclass:
        countryCodes = _swig_property(_six_sicd.CollectionInformation_countryCodes_get, _six_sicd.CollectionInformation_countryCodes_set)
    __swig_setmethods__["parameters"] = _six_sicd.CollectionInformation_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.CollectionInformation_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.CollectionInformation_parameters_get, _six_sicd.CollectionInformation_parameters_set)

    def __init__(self):
        """__init__(six::sicd::CollectionInformation self) -> CollectionInformation"""
        this = _six_sicd.new_CollectionInformation()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_CollectionInformation
    __del__ = lambda self: None

    def clone(self):
        """clone(CollectionInformation self) -> CollectionInformation"""
        return _six_sicd.CollectionInformation_clone(self)


    def __eq__(self, other):
        """__eq__(CollectionInformation self, CollectionInformation other) -> bool"""
        return _six_sicd.CollectionInformation___eq__(self, other)


    def __ne__(self, other):
        """__ne__(CollectionInformation self, CollectionInformation other) -> bool"""
        return _six_sicd.CollectionInformation___ne__(self, other)

CollectionInformation_swigregister = _six_sicd.CollectionInformation_swigregister
CollectionInformation_swigregister(CollectionInformation)

class ImageCreation(_object):
    """Proxy of C++ six::sicd::ImageCreation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageCreation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageCreation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["application"] = _six_sicd.ImageCreation_application_set
    __swig_getmethods__["application"] = _six_sicd.ImageCreation_application_get
    if _newclass:
        application = _swig_property(_six_sicd.ImageCreation_application_get, _six_sicd.ImageCreation_application_set)
    __swig_setmethods__["dateTime"] = _six_sicd.ImageCreation_dateTime_set
    __swig_getmethods__["dateTime"] = _six_sicd.ImageCreation_dateTime_get
    if _newclass:
        dateTime = _swig_property(_six_sicd.ImageCreation_dateTime_get, _six_sicd.ImageCreation_dateTime_set)
    __swig_setmethods__["site"] = _six_sicd.ImageCreation_site_set
    __swig_getmethods__["site"] = _six_sicd.ImageCreation_site_get
    if _newclass:
        site = _swig_property(_six_sicd.ImageCreation_site_get, _six_sicd.ImageCreation_site_set)
    __swig_setmethods__["profile"] = _six_sicd.ImageCreation_profile_set
    __swig_getmethods__["profile"] = _six_sicd.ImageCreation_profile_get
    if _newclass:
        profile = _swig_property(_six_sicd.ImageCreation_profile_get, _six_sicd.ImageCreation_profile_set)

    def clone(self):
        """clone(ImageCreation self) -> ImageCreation"""
        return _six_sicd.ImageCreation_clone(self)


    def __init__(self):
        """__init__(six::sicd::ImageCreation self) -> ImageCreation"""
        this = _six_sicd.new_ImageCreation()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ImageCreation
    __del__ = lambda self: None
ImageCreation_swigregister = _six_sicd.ImageCreation_swigregister
ImageCreation_swigregister(ImageCreation)

class ImageData(_object):
    """Proxy of C++ six::sicd::ImageData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::ImageData self) -> ImageData"""
        this = _six_sicd.new_ImageData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ImageData
    __del__ = lambda self: None

    def clone(self):
        """clone(ImageData self) -> ImageData"""
        return _six_sicd.ImageData_clone(self)

    __swig_setmethods__["pixelType"] = _six_sicd.ImageData_pixelType_set
    __swig_getmethods__["pixelType"] = _six_sicd.ImageData_pixelType_get
    if _newclass:
        pixelType = _swig_property(_six_sicd.ImageData_pixelType_get, _six_sicd.ImageData_pixelType_set)
    __swig_setmethods__["amplitudeTable"] = _six_sicd.ImageData_amplitudeTable_set
    __swig_getmethods__["amplitudeTable"] = _six_sicd.ImageData_amplitudeTable_get
    if _newclass:
        amplitudeTable = _swig_property(_six_sicd.ImageData_amplitudeTable_get, _six_sicd.ImageData_amplitudeTable_set)
    __swig_setmethods__["numRows"] = _six_sicd.ImageData_numRows_set
    __swig_getmethods__["numRows"] = _six_sicd.ImageData_numRows_get
    if _newclass:
        numRows = _swig_property(_six_sicd.ImageData_numRows_get, _six_sicd.ImageData_numRows_set)
    __swig_setmethods__["numCols"] = _six_sicd.ImageData_numCols_set
    __swig_getmethods__["numCols"] = _six_sicd.ImageData_numCols_get
    if _newclass:
        numCols = _swig_property(_six_sicd.ImageData_numCols_get, _six_sicd.ImageData_numCols_set)
    __swig_setmethods__["firstRow"] = _six_sicd.ImageData_firstRow_set
    __swig_getmethods__["firstRow"] = _six_sicd.ImageData_firstRow_get
    if _newclass:
        firstRow = _swig_property(_six_sicd.ImageData_firstRow_get, _six_sicd.ImageData_firstRow_set)
    __swig_setmethods__["firstCol"] = _six_sicd.ImageData_firstCol_set
    __swig_getmethods__["firstCol"] = _six_sicd.ImageData_firstCol_get
    if _newclass:
        firstCol = _swig_property(_six_sicd.ImageData_firstCol_get, _six_sicd.ImageData_firstCol_set)
    __swig_setmethods__["fullImage"] = _six_sicd.ImageData_fullImage_set
    __swig_getmethods__["fullImage"] = _six_sicd.ImageData_fullImage_get
    if _newclass:
        fullImage = _swig_property(_six_sicd.ImageData_fullImage_get, _six_sicd.ImageData_fullImage_set)
    __swig_setmethods__["scpPixel"] = _six_sicd.ImageData_scpPixel_set
    __swig_getmethods__["scpPixel"] = _six_sicd.ImageData_scpPixel_get
    if _newclass:
        scpPixel = _swig_property(_six_sicd.ImageData_scpPixel_get, _six_sicd.ImageData_scpPixel_set)
    __swig_setmethods__["validData"] = _six_sicd.ImageData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ImageData_validData_get
    if _newclass:
        validData = _swig_property(_six_sicd.ImageData_validData_get, _six_sicd.ImageData_validData_set)
ImageData_swigregister = _six_sicd.ImageData_swigregister
ImageData_swigregister(ImageData)

class GeoInfo(_object):
    """Proxy of C++ six::sicd::GeoInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::GeoInfo self) -> GeoInfo"""
        this = _six_sicd.new_GeoInfo()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_GeoInfo
    __del__ = lambda self: None

    def clone(self):
        """clone(GeoInfo self) -> GeoInfo"""
        return _six_sicd.GeoInfo_clone(self)

    __swig_setmethods__["name"] = _six_sicd.GeoInfo_name_set
    __swig_getmethods__["name"] = _six_sicd.GeoInfo_name_get
    if _newclass:
        name = _swig_property(_six_sicd.GeoInfo_name_get, _six_sicd.GeoInfo_name_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.GeoInfo_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.GeoInfo_geoInfos_get
    if _newclass:
        geoInfos = _swig_property(_six_sicd.GeoInfo_geoInfos_get, _six_sicd.GeoInfo_geoInfos_set)
    __swig_setmethods__["desc"] = _six_sicd.GeoInfo_desc_set
    __swig_getmethods__["desc"] = _six_sicd.GeoInfo_desc_get
    if _newclass:
        desc = _swig_property(_six_sicd.GeoInfo_desc_get, _six_sicd.GeoInfo_desc_set)
    __swig_setmethods__["geometryLatLon"] = _six_sicd.GeoInfo_geometryLatLon_set
    __swig_getmethods__["geometryLatLon"] = _six_sicd.GeoInfo_geometryLatLon_get
    if _newclass:
        geometryLatLon = _swig_property(_six_sicd.GeoInfo_geometryLatLon_get, _six_sicd.GeoInfo_geometryLatLon_set)
GeoInfo_swigregister = _six_sicd.GeoInfo_swigregister
GeoInfo_swigregister(GeoInfo)

class GeoData(_object):
    """Proxy of C++ six::sicd::GeoData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::GeoData self) -> GeoData"""
        this = _six_sicd.new_GeoData()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self):
        """clone(GeoData self) -> GeoData"""
        return _six_sicd.GeoData_clone(self)

    __swig_setmethods__["earthModel"] = _six_sicd.GeoData_earthModel_set
    __swig_getmethods__["earthModel"] = _six_sicd.GeoData_earthModel_get
    if _newclass:
        earthModel = _swig_property(_six_sicd.GeoData_earthModel_get, _six_sicd.GeoData_earthModel_set)
    __swig_setmethods__["scp"] = _six_sicd.GeoData_scp_set
    __swig_getmethods__["scp"] = _six_sicd.GeoData_scp_get
    if _newclass:
        scp = _swig_property(_six_sicd.GeoData_scp_get, _six_sicd.GeoData_scp_set)
    __swig_setmethods__["imageCorners"] = _six_sicd.GeoData_imageCorners_set
    __swig_getmethods__["imageCorners"] = _six_sicd.GeoData_imageCorners_get
    if _newclass:
        imageCorners = _swig_property(_six_sicd.GeoData_imageCorners_get, _six_sicd.GeoData_imageCorners_set)
    __swig_setmethods__["validData"] = _six_sicd.GeoData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.GeoData_validData_get
    if _newclass:
        validData = _swig_property(_six_sicd.GeoData_validData_get, _six_sicd.GeoData_validData_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.GeoData_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.GeoData_geoInfos_get
    if _newclass:
        geoInfos = _swig_property(_six_sicd.GeoData_geoInfos_get, _six_sicd.GeoData_geoInfos_set)
    __swig_destroy__ = _six_sicd.delete_GeoData
    __del__ = lambda self: None
GeoData_swigregister = _six_sicd.GeoData_swigregister
GeoData_swigregister(GeoData)

class WeightType(_object):
    """Proxy of C++ six::sicd::WeightType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeightType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::WeightType self) -> WeightType"""
        this = _six_sicd.new_WeightType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["windowName"] = _six_sicd.WeightType_windowName_set
    __swig_getmethods__["windowName"] = _six_sicd.WeightType_windowName_get
    if _newclass:
        windowName = _swig_property(_six_sicd.WeightType_windowName_get, _six_sicd.WeightType_windowName_set)
    __swig_setmethods__["parameters"] = _six_sicd.WeightType_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.WeightType_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.WeightType_parameters_get, _six_sicd.WeightType_parameters_set)
    __swig_destroy__ = _six_sicd.delete_WeightType
    __del__ = lambda self: None
WeightType_swigregister = _six_sicd.WeightType_swigregister
WeightType_swigregister(WeightType)

class DirectionParameters(_object):
    """Proxy of C++ six::sicd::DirectionParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::DirectionParameters self) -> DirectionParameters"""
        this = _six_sicd.new_DirectionParameters()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self):
        """clone(DirectionParameters self) -> DirectionParameters"""
        return _six_sicd.DirectionParameters_clone(self)

    __swig_setmethods__["unitVector"] = _six_sicd.DirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.DirectionParameters_unitVector_get
    if _newclass:
        unitVector = _swig_property(_six_sicd.DirectionParameters_unitVector_get, _six_sicd.DirectionParameters_unitVector_set)
    __swig_setmethods__["sampleSpacing"] = _six_sicd.DirectionParameters_sampleSpacing_set
    __swig_getmethods__["sampleSpacing"] = _six_sicd.DirectionParameters_sampleSpacing_get
    if _newclass:
        sampleSpacing = _swig_property(_six_sicd.DirectionParameters_sampleSpacing_get, _six_sicd.DirectionParameters_sampleSpacing_set)
    __swig_setmethods__["impulseResponseWidth"] = _six_sicd.DirectionParameters_impulseResponseWidth_set
    __swig_getmethods__["impulseResponseWidth"] = _six_sicd.DirectionParameters_impulseResponseWidth_get
    if _newclass:
        impulseResponseWidth = _swig_property(_six_sicd.DirectionParameters_impulseResponseWidth_get, _six_sicd.DirectionParameters_impulseResponseWidth_set)
    __swig_setmethods__["sign"] = _six_sicd.DirectionParameters_sign_set
    __swig_getmethods__["sign"] = _six_sicd.DirectionParameters_sign_get
    if _newclass:
        sign = _swig_property(_six_sicd.DirectionParameters_sign_get, _six_sicd.DirectionParameters_sign_set)
    __swig_setmethods__["impulseResponseBandwidth"] = _six_sicd.DirectionParameters_impulseResponseBandwidth_set
    __swig_getmethods__["impulseResponseBandwidth"] = _six_sicd.DirectionParameters_impulseResponseBandwidth_get
    if _newclass:
        impulseResponseBandwidth = _swig_property(_six_sicd.DirectionParameters_impulseResponseBandwidth_get, _six_sicd.DirectionParameters_impulseResponseBandwidth_set)
    __swig_setmethods__["kCenter"] = _six_sicd.DirectionParameters_kCenter_set
    __swig_getmethods__["kCenter"] = _six_sicd.DirectionParameters_kCenter_get
    if _newclass:
        kCenter = _swig_property(_six_sicd.DirectionParameters_kCenter_get, _six_sicd.DirectionParameters_kCenter_set)
    __swig_setmethods__["deltaK1"] = _six_sicd.DirectionParameters_deltaK1_set
    __swig_getmethods__["deltaK1"] = _six_sicd.DirectionParameters_deltaK1_get
    if _newclass:
        deltaK1 = _swig_property(_six_sicd.DirectionParameters_deltaK1_get, _six_sicd.DirectionParameters_deltaK1_set)
    __swig_setmethods__["deltaK2"] = _six_sicd.DirectionParameters_deltaK2_set
    __swig_getmethods__["deltaK2"] = _six_sicd.DirectionParameters_deltaK2_get
    if _newclass:
        deltaK2 = _swig_property(_six_sicd.DirectionParameters_deltaK2_get, _six_sicd.DirectionParameters_deltaK2_set)
    __swig_setmethods__["deltaKCOAPoly"] = _six_sicd.DirectionParameters_deltaKCOAPoly_set
    __swig_getmethods__["deltaKCOAPoly"] = _six_sicd.DirectionParameters_deltaKCOAPoly_get
    if _newclass:
        deltaKCOAPoly = _swig_property(_six_sicd.DirectionParameters_deltaKCOAPoly_get, _six_sicd.DirectionParameters_deltaKCOAPoly_set)
    __swig_setmethods__["weightType"] = _six_sicd.DirectionParameters_weightType_set
    __swig_getmethods__["weightType"] = _six_sicd.DirectionParameters_weightType_get
    if _newclass:
        weightType = _swig_property(_six_sicd.DirectionParameters_weightType_get, _six_sicd.DirectionParameters_weightType_set)
    __swig_setmethods__["weights"] = _six_sicd.DirectionParameters_weights_set
    __swig_getmethods__["weights"] = _six_sicd.DirectionParameters_weights_get
    if _newclass:
        weights = _swig_property(_six_sicd.DirectionParameters_weights_get, _six_sicd.DirectionParameters_weights_set)
    __swig_destroy__ = _six_sicd.delete_DirectionParameters
    __del__ = lambda self: None
DirectionParameters_swigregister = _six_sicd.DirectionParameters_swigregister
DirectionParameters_swigregister(DirectionParameters)

class Grid(_object):
    """Proxy of C++ six::sicd::Grid class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Grid self) -> Grid"""
        this = _six_sicd.new_Grid()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self):
        """clone(Grid self) -> Grid"""
        return _six_sicd.Grid_clone(self)

    __swig_setmethods__["imagePlane"] = _six_sicd.Grid_imagePlane_set
    __swig_getmethods__["imagePlane"] = _six_sicd.Grid_imagePlane_get
    if _newclass:
        imagePlane = _swig_property(_six_sicd.Grid_imagePlane_get, _six_sicd.Grid_imagePlane_set)
    __swig_setmethods__["type"] = _six_sicd.Grid_type_set
    __swig_getmethods__["type"] = _six_sicd.Grid_type_get
    if _newclass:
        type = _swig_property(_six_sicd.Grid_type_get, _six_sicd.Grid_type_set)
    __swig_setmethods__["timeCOAPoly"] = _six_sicd.Grid_timeCOAPoly_set
    __swig_getmethods__["timeCOAPoly"] = _six_sicd.Grid_timeCOAPoly_get
    if _newclass:
        timeCOAPoly = _swig_property(_six_sicd.Grid_timeCOAPoly_get, _six_sicd.Grid_timeCOAPoly_set)
    __swig_setmethods__["row"] = _six_sicd.Grid_row_set
    __swig_getmethods__["row"] = _six_sicd.Grid_row_get
    if _newclass:
        row = _swig_property(_six_sicd.Grid_row_get, _six_sicd.Grid_row_set)
    __swig_setmethods__["col"] = _six_sicd.Grid_col_set
    __swig_getmethods__["col"] = _six_sicd.Grid_col_get
    if _newclass:
        col = _swig_property(_six_sicd.Grid_col_get, _six_sicd.Grid_col_set)
    __swig_destroy__ = _six_sicd.delete_Grid
    __del__ = lambda self: None
Grid_swigregister = _six_sicd.Grid_swigregister
Grid_swigregister(Grid)

class TimelineSet(_object):
    """Proxy of C++ six::sicd::TimelineSet class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimelineSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimelineSet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tStart"] = _six_sicd.TimelineSet_tStart_set
    __swig_getmethods__["tStart"] = _six_sicd.TimelineSet_tStart_get
    if _newclass:
        tStart = _swig_property(_six_sicd.TimelineSet_tStart_get, _six_sicd.TimelineSet_tStart_set)
    __swig_setmethods__["tEnd"] = _six_sicd.TimelineSet_tEnd_set
    __swig_getmethods__["tEnd"] = _six_sicd.TimelineSet_tEnd_get
    if _newclass:
        tEnd = _swig_property(_six_sicd.TimelineSet_tEnd_get, _six_sicd.TimelineSet_tEnd_set)
    __swig_setmethods__["interPulsePeriodStart"] = _six_sicd.TimelineSet_interPulsePeriodStart_set
    __swig_getmethods__["interPulsePeriodStart"] = _six_sicd.TimelineSet_interPulsePeriodStart_get
    if _newclass:
        interPulsePeriodStart = _swig_property(_six_sicd.TimelineSet_interPulsePeriodStart_get, _six_sicd.TimelineSet_interPulsePeriodStart_set)
    __swig_setmethods__["interPulsePeriodEnd"] = _six_sicd.TimelineSet_interPulsePeriodEnd_set
    __swig_getmethods__["interPulsePeriodEnd"] = _six_sicd.TimelineSet_interPulsePeriodEnd_get
    if _newclass:
        interPulsePeriodEnd = _swig_property(_six_sicd.TimelineSet_interPulsePeriodEnd_get, _six_sicd.TimelineSet_interPulsePeriodEnd_set)
    __swig_setmethods__["interPulsePeriodPoly"] = _six_sicd.TimelineSet_interPulsePeriodPoly_set
    __swig_getmethods__["interPulsePeriodPoly"] = _six_sicd.TimelineSet_interPulsePeriodPoly_get
    if _newclass:
        interPulsePeriodPoly = _swig_property(_six_sicd.TimelineSet_interPulsePeriodPoly_get, _six_sicd.TimelineSet_interPulsePeriodPoly_set)

    def __init__(self):
        """__init__(six::sicd::TimelineSet self) -> TimelineSet"""
        this = _six_sicd.new_TimelineSet()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_TimelineSet
    __del__ = lambda self: None

    def clone(self):
        """clone(TimelineSet self) -> TimelineSet"""
        return _six_sicd.TimelineSet_clone(self)

TimelineSet_swigregister = _six_sicd.TimelineSet_swigregister
TimelineSet_swigregister(TimelineSet)

class InterPulsePeriod(_object):
    """Proxy of C++ six::sicd::InterPulsePeriod class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterPulsePeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterPulsePeriod, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::InterPulsePeriod self) -> InterPulsePeriod"""
        this = _six_sicd.new_InterPulsePeriod()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_InterPulsePeriod
    __del__ = lambda self: None

    def clone(self):
        """clone(InterPulsePeriod self) -> InterPulsePeriod"""
        return _six_sicd.InterPulsePeriod_clone(self)

    __swig_setmethods__["sets"] = _six_sicd.InterPulsePeriod_sets_set
    __swig_getmethods__["sets"] = _six_sicd.InterPulsePeriod_sets_get
    if _newclass:
        sets = _swig_property(_six_sicd.InterPulsePeriod_sets_get, _six_sicd.InterPulsePeriod_sets_set)
InterPulsePeriod_swigregister = _six_sicd.InterPulsePeriod_swigregister
InterPulsePeriod_swigregister(InterPulsePeriod)

class Timeline(_object):
    """Proxy of C++ six::sicd::Timeline class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timeline, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collectStart"] = _six_sicd.Timeline_collectStart_set
    __swig_getmethods__["collectStart"] = _six_sicd.Timeline_collectStart_get
    if _newclass:
        collectStart = _swig_property(_six_sicd.Timeline_collectStart_get, _six_sicd.Timeline_collectStart_set)
    __swig_setmethods__["collectDuration"] = _six_sicd.Timeline_collectDuration_set
    __swig_getmethods__["collectDuration"] = _six_sicd.Timeline_collectDuration_get
    if _newclass:
        collectDuration = _swig_property(_six_sicd.Timeline_collectDuration_get, _six_sicd.Timeline_collectDuration_set)
    __swig_setmethods__["interPulsePeriod"] = _six_sicd.Timeline_interPulsePeriod_set
    __swig_getmethods__["interPulsePeriod"] = _six_sicd.Timeline_interPulsePeriod_get
    if _newclass:
        interPulsePeriod = _swig_property(_six_sicd.Timeline_interPulsePeriod_get, _six_sicd.Timeline_interPulsePeriod_set)

    def __init__(self):
        """__init__(six::sicd::Timeline self) -> Timeline"""
        this = _six_sicd.new_Timeline()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_Timeline
    __del__ = lambda self: None

    def clone(self):
        """clone(Timeline self) -> Timeline"""
        return _six_sicd.Timeline_clone(self)

Timeline_swigregister = _six_sicd.Timeline_swigregister
Timeline_swigregister(Timeline)

class RcvAPC(_object):
    """Proxy of C++ six::sicd::RcvAPC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcvAPC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcvAPC, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RcvAPC self) -> RcvAPC"""
        this = _six_sicd.new_RcvAPC()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_RcvAPC
    __del__ = lambda self: None

    def clone(self):
        """clone(RcvAPC self) -> RcvAPC"""
        return _six_sicd.RcvAPC_clone(self)

    __swig_setmethods__["rcvAPCPolys"] = _six_sicd.RcvAPC_rcvAPCPolys_set
    __swig_getmethods__["rcvAPCPolys"] = _six_sicd.RcvAPC_rcvAPCPolys_get
    if _newclass:
        rcvAPCPolys = _swig_property(_six_sicd.RcvAPC_rcvAPCPolys_get, _six_sicd.RcvAPC_rcvAPCPolys_set)
RcvAPC_swigregister = _six_sicd.RcvAPC_swigregister
RcvAPC_swigregister(RcvAPC)

class Position(_object):
    """Proxy of C++ six::sicd::Position class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arpPoly"] = _six_sicd.Position_arpPoly_set
    __swig_getmethods__["arpPoly"] = _six_sicd.Position_arpPoly_get
    if _newclass:
        arpPoly = _swig_property(_six_sicd.Position_arpPoly_get, _six_sicd.Position_arpPoly_set)
    __swig_setmethods__["grpPoly"] = _six_sicd.Position_grpPoly_set
    __swig_getmethods__["grpPoly"] = _six_sicd.Position_grpPoly_get
    if _newclass:
        grpPoly = _swig_property(_six_sicd.Position_grpPoly_get, _six_sicd.Position_grpPoly_set)
    __swig_setmethods__["txAPCPoly"] = _six_sicd.Position_txAPCPoly_set
    __swig_getmethods__["txAPCPoly"] = _six_sicd.Position_txAPCPoly_get
    if _newclass:
        txAPCPoly = _swig_property(_six_sicd.Position_txAPCPoly_get, _six_sicd.Position_txAPCPoly_set)
    __swig_setmethods__["rcvAPC"] = _six_sicd.Position_rcvAPC_set
    __swig_getmethods__["rcvAPC"] = _six_sicd.Position_rcvAPC_get
    if _newclass:
        rcvAPC = _swig_property(_six_sicd.Position_rcvAPC_get, _six_sicd.Position_rcvAPC_set)

    def __init__(self):
        """__init__(six::sicd::Position self) -> Position"""
        this = _six_sicd.new_Position()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_Position
    __del__ = lambda self: None

    def clone(self):
        """clone(Position self) -> Position"""
        return _six_sicd.Position_clone(self)

Position_swigregister = _six_sicd.Position_swigregister
Position_swigregister(Position)

class TxStep(_object):
    """Proxy of C++ six::sicd::TxStep class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxStep, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::TxStep self) -> TxStep"""
        this = _six_sicd.new_TxStep()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_TxStep
    __del__ = lambda self: None

    def clone(self):
        """clone(TxStep self) -> TxStep"""
        return _six_sicd.TxStep_clone(self)

    __swig_setmethods__["waveformIndex"] = _six_sicd.TxStep_waveformIndex_set
    __swig_getmethods__["waveformIndex"] = _six_sicd.TxStep_waveformIndex_get
    if _newclass:
        waveformIndex = _swig_property(_six_sicd.TxStep_waveformIndex_get, _six_sicd.TxStep_waveformIndex_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.TxStep_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.TxStep_txPolarization_get
    if _newclass:
        txPolarization = _swig_property(_six_sicd.TxStep_txPolarization_get, _six_sicd.TxStep_txPolarization_set)
TxStep_swigregister = _six_sicd.TxStep_swigregister
TxStep_swigregister(TxStep)

class WaveformParameters(_object):
    """Proxy of C++ six::sicd::WaveformParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaveformParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::WaveformParameters self) -> WaveformParameters"""
        this = _six_sicd.new_WaveformParameters()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_WaveformParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(WaveformParameters self) -> WaveformParameters"""
        return _six_sicd.WaveformParameters_clone(self)

    __swig_setmethods__["txPulseLength"] = _six_sicd.WaveformParameters_txPulseLength_set
    __swig_getmethods__["txPulseLength"] = _six_sicd.WaveformParameters_txPulseLength_get
    if _newclass:
        txPulseLength = _swig_property(_six_sicd.WaveformParameters_txPulseLength_get, _six_sicd.WaveformParameters_txPulseLength_set)
    __swig_setmethods__["txRFBandwidth"] = _six_sicd.WaveformParameters_txRFBandwidth_set
    __swig_getmethods__["txRFBandwidth"] = _six_sicd.WaveformParameters_txRFBandwidth_get
    if _newclass:
        txRFBandwidth = _swig_property(_six_sicd.WaveformParameters_txRFBandwidth_get, _six_sicd.WaveformParameters_txRFBandwidth_set)
    __swig_setmethods__["txFrequencyStart"] = _six_sicd.WaveformParameters_txFrequencyStart_set
    __swig_getmethods__["txFrequencyStart"] = _six_sicd.WaveformParameters_txFrequencyStart_get
    if _newclass:
        txFrequencyStart = _swig_property(_six_sicd.WaveformParameters_txFrequencyStart_get, _six_sicd.WaveformParameters_txFrequencyStart_set)
    __swig_setmethods__["txFMRate"] = _six_sicd.WaveformParameters_txFMRate_set
    __swig_getmethods__["txFMRate"] = _six_sicd.WaveformParameters_txFMRate_get
    if _newclass:
        txFMRate = _swig_property(_six_sicd.WaveformParameters_txFMRate_get, _six_sicd.WaveformParameters_txFMRate_set)
    __swig_setmethods__["rcvDemodType"] = _six_sicd.WaveformParameters_rcvDemodType_set
    __swig_getmethods__["rcvDemodType"] = _six_sicd.WaveformParameters_rcvDemodType_get
    if _newclass:
        rcvDemodType = _swig_property(_six_sicd.WaveformParameters_rcvDemodType_get, _six_sicd.WaveformParameters_rcvDemodType_set)
    __swig_setmethods__["rcvWindowLength"] = _six_sicd.WaveformParameters_rcvWindowLength_set
    __swig_getmethods__["rcvWindowLength"] = _six_sicd.WaveformParameters_rcvWindowLength_get
    if _newclass:
        rcvWindowLength = _swig_property(_six_sicd.WaveformParameters_rcvWindowLength_get, _six_sicd.WaveformParameters_rcvWindowLength_set)
    __swig_setmethods__["adcSampleRate"] = _six_sicd.WaveformParameters_adcSampleRate_set
    __swig_getmethods__["adcSampleRate"] = _six_sicd.WaveformParameters_adcSampleRate_get
    if _newclass:
        adcSampleRate = _swig_property(_six_sicd.WaveformParameters_adcSampleRate_get, _six_sicd.WaveformParameters_adcSampleRate_set)
    __swig_setmethods__["rcvIFBandwidth"] = _six_sicd.WaveformParameters_rcvIFBandwidth_set
    __swig_getmethods__["rcvIFBandwidth"] = _six_sicd.WaveformParameters_rcvIFBandwidth_get
    if _newclass:
        rcvIFBandwidth = _swig_property(_six_sicd.WaveformParameters_rcvIFBandwidth_get, _six_sicd.WaveformParameters_rcvIFBandwidth_set)
    __swig_setmethods__["rcvFrequencyStart"] = _six_sicd.WaveformParameters_rcvFrequencyStart_set
    __swig_getmethods__["rcvFrequencyStart"] = _six_sicd.WaveformParameters_rcvFrequencyStart_get
    if _newclass:
        rcvFrequencyStart = _swig_property(_six_sicd.WaveformParameters_rcvFrequencyStart_get, _six_sicd.WaveformParameters_rcvFrequencyStart_set)
    __swig_setmethods__["rcvFMRate"] = _six_sicd.WaveformParameters_rcvFMRate_set
    __swig_getmethods__["rcvFMRate"] = _six_sicd.WaveformParameters_rcvFMRate_get
    if _newclass:
        rcvFMRate = _swig_property(_six_sicd.WaveformParameters_rcvFMRate_get, _six_sicd.WaveformParameters_rcvFMRate_set)
WaveformParameters_swigregister = _six_sicd.WaveformParameters_swigregister
WaveformParameters_swigregister(WaveformParameters)

class ChannelParameters(_object):
    """Proxy of C++ six::sicd::ChannelParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::ChannelParameters self) -> ChannelParameters"""
        this = _six_sicd.new_ChannelParameters()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self):
        """clone(ChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ChannelParameters_clone(self)

    __swig_setmethods__["txRcvPolarization"] = _six_sicd.ChannelParameters_txRcvPolarization_set
    __swig_getmethods__["txRcvPolarization"] = _six_sicd.ChannelParameters_txRcvPolarization_get
    if _newclass:
        txRcvPolarization = _swig_property(_six_sicd.ChannelParameters_txRcvPolarization_get, _six_sicd.ChannelParameters_txRcvPolarization_set)
    __swig_setmethods__["rcvAPCIndex"] = _six_sicd.ChannelParameters_rcvAPCIndex_set
    __swig_getmethods__["rcvAPCIndex"] = _six_sicd.ChannelParameters_rcvAPCIndex_get
    if _newclass:
        rcvAPCIndex = _swig_property(_six_sicd.ChannelParameters_rcvAPCIndex_get, _six_sicd.ChannelParameters_rcvAPCIndex_set)
    __swig_destroy__ = _six_sicd.delete_ChannelParameters
    __del__ = lambda self: None
ChannelParameters_swigregister = _six_sicd.ChannelParameters_swigregister
ChannelParameters_swigregister(ChannelParameters)

class AreaDirectionParameters(_object):
    """Proxy of C++ six::sicd::AreaDirectionParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaDirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::AreaDirectionParameters self) -> AreaDirectionParameters"""
        this = _six_sicd.new_AreaDirectionParameters()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self):
        """clone(AreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.AreaDirectionParameters_clone(self)

    __swig_destroy__ = _six_sicd.delete_AreaDirectionParameters
    __del__ = lambda self: None
    __swig_setmethods__["unitVector"] = _six_sicd.AreaDirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.AreaDirectionParameters_unitVector_get
    if _newclass:
        unitVector = _swig_property(_six_sicd.AreaDirectionParameters_unitVector_get, _six_sicd.AreaDirectionParameters_unitVector_set)
    __swig_setmethods__["spacing"] = _six_sicd.AreaDirectionParameters_spacing_set
    __swig_getmethods__["spacing"] = _six_sicd.AreaDirectionParameters_spacing_get
    if _newclass:
        spacing = _swig_property(_six_sicd.AreaDirectionParameters_spacing_get, _six_sicd.AreaDirectionParameters_spacing_set)
    __swig_setmethods__["elements"] = _six_sicd.AreaDirectionParameters_elements_set
    __swig_getmethods__["elements"] = _six_sicd.AreaDirectionParameters_elements_get
    if _newclass:
        elements = _swig_property(_six_sicd.AreaDirectionParameters_elements_get, _six_sicd.AreaDirectionParameters_elements_set)
    __swig_setmethods__["first"] = _six_sicd.AreaDirectionParameters_first_set
    __swig_getmethods__["first"] = _six_sicd.AreaDirectionParameters_first_get
    if _newclass:
        first = _swig_property(_six_sicd.AreaDirectionParameters_first_get, _six_sicd.AreaDirectionParameters_first_set)

    def __eq__(self, other):
        """__eq__(AreaDirectionParameters self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.AreaDirectionParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(AreaDirectionParameters self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.AreaDirectionParameters___ne__(self, other)

AreaDirectionParameters_swigregister = _six_sicd.AreaDirectionParameters_swigregister
AreaDirectionParameters_swigregister(AreaDirectionParameters)

class Segment(_object):
    """Proxy of C++ six::sicd::Segment class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Segment self) -> Segment"""
        this = _six_sicd.new_Segment()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_Segment
    __del__ = lambda self: None

    def clone(self):
        """clone(Segment self) -> Segment"""
        return _six_sicd.Segment_clone(self)


    def getNumLines(self):
        """getNumLines(Segment self) -> int"""
        return _six_sicd.Segment_getNumLines(self)


    def getNumSamples(self):
        """getNumSamples(Segment self) -> int"""
        return _six_sicd.Segment_getNumSamples(self)

    __swig_setmethods__["startLine"] = _six_sicd.Segment_startLine_set
    __swig_getmethods__["startLine"] = _six_sicd.Segment_startLine_get
    if _newclass:
        startLine = _swig_property(_six_sicd.Segment_startLine_get, _six_sicd.Segment_startLine_set)
    __swig_setmethods__["startSample"] = _six_sicd.Segment_startSample_set
    __swig_getmethods__["startSample"] = _six_sicd.Segment_startSample_get
    if _newclass:
        startSample = _swig_property(_six_sicd.Segment_startSample_get, _six_sicd.Segment_startSample_set)
    __swig_setmethods__["endLine"] = _six_sicd.Segment_endLine_set
    __swig_getmethods__["endLine"] = _six_sicd.Segment_endLine_get
    if _newclass:
        endLine = _swig_property(_six_sicd.Segment_endLine_get, _six_sicd.Segment_endLine_set)
    __swig_setmethods__["endSample"] = _six_sicd.Segment_endSample_set
    __swig_getmethods__["endSample"] = _six_sicd.Segment_endSample_get
    if _newclass:
        endSample = _swig_property(_six_sicd.Segment_endSample_get, _six_sicd.Segment_endSample_set)
    __swig_setmethods__["identifier"] = _six_sicd.Segment_identifier_set
    __swig_getmethods__["identifier"] = _six_sicd.Segment_identifier_get
    if _newclass:
        identifier = _swig_property(_six_sicd.Segment_identifier_get, _six_sicd.Segment_identifier_set)
Segment_swigregister = _six_sicd.Segment_swigregister
Segment_swigregister(Segment)

class AreaPlane(_object):
    """Proxy of C++ six::sicd::AreaPlane class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaPlane, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::AreaPlane self) -> AreaPlane"""
        this = _six_sicd.new_AreaPlane()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self):
        """clone(AreaPlane self) -> AreaPlane"""
        return _six_sicd.AreaPlane_clone(self)

    __swig_setmethods__["referencePoint"] = _six_sicd.AreaPlane_referencePoint_set
    __swig_getmethods__["referencePoint"] = _six_sicd.AreaPlane_referencePoint_get
    if _newclass:
        referencePoint = _swig_property(_six_sicd.AreaPlane_referencePoint_get, _six_sicd.AreaPlane_referencePoint_set)
    __swig_setmethods__["xDirection"] = _six_sicd.AreaPlane_xDirection_set
    __swig_getmethods__["xDirection"] = _six_sicd.AreaPlane_xDirection_get
    if _newclass:
        xDirection = _swig_property(_six_sicd.AreaPlane_xDirection_get, _six_sicd.AreaPlane_xDirection_set)
    __swig_setmethods__["yDirection"] = _six_sicd.AreaPlane_yDirection_set
    __swig_getmethods__["yDirection"] = _six_sicd.AreaPlane_yDirection_get
    if _newclass:
        yDirection = _swig_property(_six_sicd.AreaPlane_yDirection_get, _six_sicd.AreaPlane_yDirection_set)
    __swig_setmethods__["segmentList"] = _six_sicd.AreaPlane_segmentList_set
    __swig_getmethods__["segmentList"] = _six_sicd.AreaPlane_segmentList_get
    if _newclass:
        segmentList = _swig_property(_six_sicd.AreaPlane_segmentList_get, _six_sicd.AreaPlane_segmentList_set)
    __swig_setmethods__["orientation"] = _six_sicd.AreaPlane_orientation_set
    __swig_getmethods__["orientation"] = _six_sicd.AreaPlane_orientation_get
    if _newclass:
        orientation = _swig_property(_six_sicd.AreaPlane_orientation_get, _six_sicd.AreaPlane_orientation_set)
    __swig_destroy__ = _six_sicd.delete_AreaPlane
    __del__ = lambda self: None
AreaPlane_swigregister = _six_sicd.AreaPlane_swigregister
AreaPlane_swigregister(AreaPlane)

class Area(_object):
    """Proxy of C++ six::sicd::Area class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Area, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Area, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Area self) -> Area"""
        this = _six_sicd.new_Area()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self):
        """clone(Area self) -> Area"""
        return _six_sicd.Area_clone(self)

    __swig_setmethods__["acpCorners"] = _six_sicd.Area_acpCorners_set
    __swig_getmethods__["acpCorners"] = _six_sicd.Area_acpCorners_get
    if _newclass:
        acpCorners = _swig_property(_six_sicd.Area_acpCorners_get, _six_sicd.Area_acpCorners_set)
    __swig_setmethods__["plane"] = _six_sicd.Area_plane_set
    __swig_getmethods__["plane"] = _six_sicd.Area_plane_get
    if _newclass:
        plane = _swig_property(_six_sicd.Area_plane_get, _six_sicd.Area_plane_set)
    __swig_destroy__ = _six_sicd.delete_Area
    __del__ = lambda self: None
Area_swigregister = _six_sicd.Area_swigregister
Area_swigregister(Area)

class RadarCollection(_object):
    """Proxy of C++ six::sicd::RadarCollection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarCollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RadarCollection self) -> RadarCollection"""
        this = _six_sicd.new_RadarCollection()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clone(self):
        """clone(RadarCollection self) -> RadarCollection"""
        return _six_sicd.RadarCollection_clone(self)

    __swig_setmethods__["refFrequencyIndex"] = _six_sicd.RadarCollection_refFrequencyIndex_set
    __swig_getmethods__["refFrequencyIndex"] = _six_sicd.RadarCollection_refFrequencyIndex_get
    if _newclass:
        refFrequencyIndex = _swig_property(_six_sicd.RadarCollection_refFrequencyIndex_get, _six_sicd.RadarCollection_refFrequencyIndex_set)
    __swig_setmethods__["txFrequencyMin"] = _six_sicd.RadarCollection_txFrequencyMin_set
    __swig_getmethods__["txFrequencyMin"] = _six_sicd.RadarCollection_txFrequencyMin_get
    if _newclass:
        txFrequencyMin = _swig_property(_six_sicd.RadarCollection_txFrequencyMin_get, _six_sicd.RadarCollection_txFrequencyMin_set)
    __swig_setmethods__["txFrequencyMax"] = _six_sicd.RadarCollection_txFrequencyMax_set
    __swig_getmethods__["txFrequencyMax"] = _six_sicd.RadarCollection_txFrequencyMax_get
    if _newclass:
        txFrequencyMax = _swig_property(_six_sicd.RadarCollection_txFrequencyMax_get, _six_sicd.RadarCollection_txFrequencyMax_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.RadarCollection_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.RadarCollection_txPolarization_get
    if _newclass:
        txPolarization = _swig_property(_six_sicd.RadarCollection_txPolarization_get, _six_sicd.RadarCollection_txPolarization_set)
    __swig_setmethods__["polarizationHVAnglePoly"] = _six_sicd.RadarCollection_polarizationHVAnglePoly_set
    __swig_getmethods__["polarizationHVAnglePoly"] = _six_sicd.RadarCollection_polarizationHVAnglePoly_get
    if _newclass:
        polarizationHVAnglePoly = _swig_property(_six_sicd.RadarCollection_polarizationHVAnglePoly_get, _six_sicd.RadarCollection_polarizationHVAnglePoly_set)
    __swig_setmethods__["txSequence"] = _six_sicd.RadarCollection_txSequence_set
    __swig_getmethods__["txSequence"] = _six_sicd.RadarCollection_txSequence_get
    if _newclass:
        txSequence = _swig_property(_six_sicd.RadarCollection_txSequence_get, _six_sicd.RadarCollection_txSequence_set)
    __swig_setmethods__["waveform"] = _six_sicd.RadarCollection_waveform_set
    __swig_getmethods__["waveform"] = _six_sicd.RadarCollection_waveform_get
    if _newclass:
        waveform = _swig_property(_six_sicd.RadarCollection_waveform_get, _six_sicd.RadarCollection_waveform_set)
    __swig_setmethods__["rcvChannels"] = _six_sicd.RadarCollection_rcvChannels_set
    __swig_getmethods__["rcvChannels"] = _six_sicd.RadarCollection_rcvChannels_get
    if _newclass:
        rcvChannels = _swig_property(_six_sicd.RadarCollection_rcvChannels_get, _six_sicd.RadarCollection_rcvChannels_set)
    __swig_setmethods__["area"] = _six_sicd.RadarCollection_area_set
    __swig_getmethods__["area"] = _six_sicd.RadarCollection_area_get
    if _newclass:
        area = _swig_property(_six_sicd.RadarCollection_area_get, _six_sicd.RadarCollection_area_set)
    __swig_setmethods__["parameters"] = _six_sicd.RadarCollection_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.RadarCollection_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.RadarCollection_parameters_get, _six_sicd.RadarCollection_parameters_set)
    __swig_destroy__ = _six_sicd.delete_RadarCollection
    __del__ = lambda self: None
RadarCollection_swigregister = _six_sicd.RadarCollection_swigregister
RadarCollection_swigregister(RadarCollection)

class RcvChannelProcessed(_object):
    """Proxy of C++ six::sicd::RcvChannelProcessed class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcvChannelProcessed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcvChannelProcessed, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RcvChannelProcessed self) -> RcvChannelProcessed"""
        this = _six_sicd.new_RcvChannelProcessed()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["numChannelsProcessed"] = _six_sicd.RcvChannelProcessed_numChannelsProcessed_set
    __swig_getmethods__["numChannelsProcessed"] = _six_sicd.RcvChannelProcessed_numChannelsProcessed_get
    if _newclass:
        numChannelsProcessed = _swig_property(_six_sicd.RcvChannelProcessed_numChannelsProcessed_get, _six_sicd.RcvChannelProcessed_numChannelsProcessed_set)
    __swig_setmethods__["prfScaleFactor"] = _six_sicd.RcvChannelProcessed_prfScaleFactor_set
    __swig_getmethods__["prfScaleFactor"] = _six_sicd.RcvChannelProcessed_prfScaleFactor_get
    if _newclass:
        prfScaleFactor = _swig_property(_six_sicd.RcvChannelProcessed_prfScaleFactor_get, _six_sicd.RcvChannelProcessed_prfScaleFactor_set)
    __swig_setmethods__["channelIndex"] = _six_sicd.RcvChannelProcessed_channelIndex_set
    __swig_getmethods__["channelIndex"] = _six_sicd.RcvChannelProcessed_channelIndex_get
    if _newclass:
        channelIndex = _swig_property(_six_sicd.RcvChannelProcessed_channelIndex_get, _six_sicd.RcvChannelProcessed_channelIndex_set)
    __swig_destroy__ = _six_sicd.delete_RcvChannelProcessed
    __del__ = lambda self: None
RcvChannelProcessed_swigregister = _six_sicd.RcvChannelProcessed_swigregister
RcvChannelProcessed_swigregister(RcvChannelProcessed)

class Distortion(_object):
    """Proxy of C++ six::sicd::Distortion class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distortion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Distortion, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Distortion self) -> Distortion"""
        this = _six_sicd.new_Distortion()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["calibrationDate"] = _six_sicd.Distortion_calibrationDate_set
    __swig_getmethods__["calibrationDate"] = _six_sicd.Distortion_calibrationDate_get
    if _newclass:
        calibrationDate = _swig_property(_six_sicd.Distortion_calibrationDate_get, _six_sicd.Distortion_calibrationDate_set)
    __swig_setmethods__["a"] = _six_sicd.Distortion_a_set
    __swig_getmethods__["a"] = _six_sicd.Distortion_a_get
    if _newclass:
        a = _swig_property(_six_sicd.Distortion_a_get, _six_sicd.Distortion_a_set)
    __swig_setmethods__["f1"] = _six_sicd.Distortion_f1_set
    __swig_getmethods__["f1"] = _six_sicd.Distortion_f1_get
    if _newclass:
        f1 = _swig_property(_six_sicd.Distortion_f1_get, _six_sicd.Distortion_f1_set)
    __swig_setmethods__["q1"] = _six_sicd.Distortion_q1_set
    __swig_getmethods__["q1"] = _six_sicd.Distortion_q1_get
    if _newclass:
        q1 = _swig_property(_six_sicd.Distortion_q1_get, _six_sicd.Distortion_q1_set)
    __swig_setmethods__["q2"] = _six_sicd.Distortion_q2_set
    __swig_getmethods__["q2"] = _six_sicd.Distortion_q2_get
    if _newclass:
        q2 = _swig_property(_six_sicd.Distortion_q2_get, _six_sicd.Distortion_q2_set)
    __swig_setmethods__["f2"] = _six_sicd.Distortion_f2_set
    __swig_getmethods__["f2"] = _six_sicd.Distortion_f2_get
    if _newclass:
        f2 = _swig_property(_six_sicd.Distortion_f2_get, _six_sicd.Distortion_f2_set)
    __swig_setmethods__["q3"] = _six_sicd.Distortion_q3_set
    __swig_getmethods__["q3"] = _six_sicd.Distortion_q3_get
    if _newclass:
        q3 = _swig_property(_six_sicd.Distortion_q3_get, _six_sicd.Distortion_q3_set)
    __swig_setmethods__["q4"] = _six_sicd.Distortion_q4_set
    __swig_getmethods__["q4"] = _six_sicd.Distortion_q4_get
    if _newclass:
        q4 = _swig_property(_six_sicd.Distortion_q4_get, _six_sicd.Distortion_q4_set)
    __swig_setmethods__["gainErrorA"] = _six_sicd.Distortion_gainErrorA_set
    __swig_getmethods__["gainErrorA"] = _six_sicd.Distortion_gainErrorA_get
    if _newclass:
        gainErrorA = _swig_property(_six_sicd.Distortion_gainErrorA_get, _six_sicd.Distortion_gainErrorA_set)
    __swig_setmethods__["gainErrorF1"] = _six_sicd.Distortion_gainErrorF1_set
    __swig_getmethods__["gainErrorF1"] = _six_sicd.Distortion_gainErrorF1_get
    if _newclass:
        gainErrorF1 = _swig_property(_six_sicd.Distortion_gainErrorF1_get, _six_sicd.Distortion_gainErrorF1_set)
    __swig_setmethods__["gainErrorF2"] = _six_sicd.Distortion_gainErrorF2_set
    __swig_getmethods__["gainErrorF2"] = _six_sicd.Distortion_gainErrorF2_get
    if _newclass:
        gainErrorF2 = _swig_property(_six_sicd.Distortion_gainErrorF2_get, _six_sicd.Distortion_gainErrorF2_set)
    __swig_setmethods__["phaseErrorF1"] = _six_sicd.Distortion_phaseErrorF1_set
    __swig_getmethods__["phaseErrorF1"] = _six_sicd.Distortion_phaseErrorF1_get
    if _newclass:
        phaseErrorF1 = _swig_property(_six_sicd.Distortion_phaseErrorF1_get, _six_sicd.Distortion_phaseErrorF1_set)
    __swig_setmethods__["phaseErrorF2"] = _six_sicd.Distortion_phaseErrorF2_set
    __swig_getmethods__["phaseErrorF2"] = _six_sicd.Distortion_phaseErrorF2_get
    if _newclass:
        phaseErrorF2 = _swig_property(_six_sicd.Distortion_phaseErrorF2_get, _six_sicd.Distortion_phaseErrorF2_set)
    __swig_destroy__ = _six_sicd.delete_Distortion
    __del__ = lambda self: None
Distortion_swigregister = _six_sicd.Distortion_swigregister
Distortion_swigregister(Distortion)

class PolarizationCalibration(_object):
    """Proxy of C++ six::sicd::PolarizationCalibration class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationCalibration, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::PolarizationCalibration self) -> PolarizationCalibration"""
        this = _six_sicd.new_PolarizationCalibration()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["hvAngleCompensationApplied"] = _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_set
    __swig_getmethods__["hvAngleCompensationApplied"] = _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_get
    if _newclass:
        hvAngleCompensationApplied = _swig_property(_six_sicd.PolarizationCalibration_hvAngleCompensationApplied_get, _six_sicd.PolarizationCalibration_hvAngleCompensationApplied_set)
    __swig_setmethods__["distortionCorrectionApplied"] = _six_sicd.PolarizationCalibration_distortionCorrectionApplied_set
    __swig_getmethods__["distortionCorrectionApplied"] = _six_sicd.PolarizationCalibration_distortionCorrectionApplied_get
    if _newclass:
        distortionCorrectionApplied = _swig_property(_six_sicd.PolarizationCalibration_distortionCorrectionApplied_get, _six_sicd.PolarizationCalibration_distortionCorrectionApplied_set)
    __swig_setmethods__["distortion"] = _six_sicd.PolarizationCalibration_distortion_set
    __swig_getmethods__["distortion"] = _six_sicd.PolarizationCalibration_distortion_get
    if _newclass:
        distortion = _swig_property(_six_sicd.PolarizationCalibration_distortion_get, _six_sicd.PolarizationCalibration_distortion_set)
    __swig_destroy__ = _six_sicd.delete_PolarizationCalibration
    __del__ = lambda self: None
PolarizationCalibration_swigregister = _six_sicd.PolarizationCalibration_swigregister
PolarizationCalibration_swigregister(PolarizationCalibration)

class Processing(_object):
    """Proxy of C++ six::sicd::Processing class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Processing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Processing, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::Processing self) -> Processing"""
        this = _six_sicd.new_Processing()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["type"] = _six_sicd.Processing_type_set
    __swig_getmethods__["type"] = _six_sicd.Processing_type_get
    if _newclass:
        type = _swig_property(_six_sicd.Processing_type_get, _six_sicd.Processing_type_set)
    __swig_setmethods__["applied"] = _six_sicd.Processing_applied_set
    __swig_getmethods__["applied"] = _six_sicd.Processing_applied_get
    if _newclass:
        applied = _swig_property(_six_sicd.Processing_applied_get, _six_sicd.Processing_applied_set)
    __swig_setmethods__["parameters"] = _six_sicd.Processing_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.Processing_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.Processing_parameters_get, _six_sicd.Processing_parameters_set)
    __swig_destroy__ = _six_sicd.delete_Processing
    __del__ = lambda self: None
Processing_swigregister = _six_sicd.Processing_swigregister
Processing_swigregister(Processing)

class ImageFormation(_object):
    """Proxy of C++ six::sicd::ImageFormation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageFormation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageFormation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::ImageFormation self) -> ImageFormation"""
        this = _six_sicd.new_ImageFormation()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["segmentIdentifier"] = _six_sicd.ImageFormation_segmentIdentifier_set
    __swig_getmethods__["segmentIdentifier"] = _six_sicd.ImageFormation_segmentIdentifier_get
    if _newclass:
        segmentIdentifier = _swig_property(_six_sicd.ImageFormation_segmentIdentifier_get, _six_sicd.ImageFormation_segmentIdentifier_set)
    __swig_setmethods__["rcvChannelProcessed"] = _six_sicd.ImageFormation_rcvChannelProcessed_set
    __swig_getmethods__["rcvChannelProcessed"] = _six_sicd.ImageFormation_rcvChannelProcessed_get
    if _newclass:
        rcvChannelProcessed = _swig_property(_six_sicd.ImageFormation_rcvChannelProcessed_get, _six_sicd.ImageFormation_rcvChannelProcessed_set)
    __swig_setmethods__["txRcvPolarizationProc"] = _six_sicd.ImageFormation_txRcvPolarizationProc_set
    __swig_getmethods__["txRcvPolarizationProc"] = _six_sicd.ImageFormation_txRcvPolarizationProc_get
    if _newclass:
        txRcvPolarizationProc = _swig_property(_six_sicd.ImageFormation_txRcvPolarizationProc_get, _six_sicd.ImageFormation_txRcvPolarizationProc_set)
    __swig_setmethods__["imageFormationAlgorithm"] = _six_sicd.ImageFormation_imageFormationAlgorithm_set
    __swig_getmethods__["imageFormationAlgorithm"] = _six_sicd.ImageFormation_imageFormationAlgorithm_get
    if _newclass:
        imageFormationAlgorithm = _swig_property(_six_sicd.ImageFormation_imageFormationAlgorithm_get, _six_sicd.ImageFormation_imageFormationAlgorithm_set)
    __swig_setmethods__["tStartProc"] = _six_sicd.ImageFormation_tStartProc_set
    __swig_getmethods__["tStartProc"] = _six_sicd.ImageFormation_tStartProc_get
    if _newclass:
        tStartProc = _swig_property(_six_sicd.ImageFormation_tStartProc_get, _six_sicd.ImageFormation_tStartProc_set)
    __swig_setmethods__["tEndProc"] = _six_sicd.ImageFormation_tEndProc_set
    __swig_getmethods__["tEndProc"] = _six_sicd.ImageFormation_tEndProc_get
    if _newclass:
        tEndProc = _swig_property(_six_sicd.ImageFormation_tEndProc_get, _six_sicd.ImageFormation_tEndProc_set)
    __swig_setmethods__["txFrequencyProcMin"] = _six_sicd.ImageFormation_txFrequencyProcMin_set
    __swig_getmethods__["txFrequencyProcMin"] = _six_sicd.ImageFormation_txFrequencyProcMin_get
    if _newclass:
        txFrequencyProcMin = _swig_property(_six_sicd.ImageFormation_txFrequencyProcMin_get, _six_sicd.ImageFormation_txFrequencyProcMin_set)
    __swig_setmethods__["txFrequencyProcMax"] = _six_sicd.ImageFormation_txFrequencyProcMax_set
    __swig_getmethods__["txFrequencyProcMax"] = _six_sicd.ImageFormation_txFrequencyProcMax_get
    if _newclass:
        txFrequencyProcMax = _swig_property(_six_sicd.ImageFormation_txFrequencyProcMax_get, _six_sicd.ImageFormation_txFrequencyProcMax_set)
    __swig_setmethods__["slowTimeBeamCompensation"] = _six_sicd.ImageFormation_slowTimeBeamCompensation_set
    __swig_getmethods__["slowTimeBeamCompensation"] = _six_sicd.ImageFormation_slowTimeBeamCompensation_get
    if _newclass:
        slowTimeBeamCompensation = _swig_property(_six_sicd.ImageFormation_slowTimeBeamCompensation_get, _six_sicd.ImageFormation_slowTimeBeamCompensation_set)
    __swig_setmethods__["imageBeamCompensation"] = _six_sicd.ImageFormation_imageBeamCompensation_set
    __swig_getmethods__["imageBeamCompensation"] = _six_sicd.ImageFormation_imageBeamCompensation_get
    if _newclass:
        imageBeamCompensation = _swig_property(_six_sicd.ImageFormation_imageBeamCompensation_get, _six_sicd.ImageFormation_imageBeamCompensation_set)
    __swig_setmethods__["azimuthAutofocus"] = _six_sicd.ImageFormation_azimuthAutofocus_set
    __swig_getmethods__["azimuthAutofocus"] = _six_sicd.ImageFormation_azimuthAutofocus_get
    if _newclass:
        azimuthAutofocus = _swig_property(_six_sicd.ImageFormation_azimuthAutofocus_get, _six_sicd.ImageFormation_azimuthAutofocus_set)
    __swig_setmethods__["rangeAutofocus"] = _six_sicd.ImageFormation_rangeAutofocus_set
    __swig_getmethods__["rangeAutofocus"] = _six_sicd.ImageFormation_rangeAutofocus_get
    if _newclass:
        rangeAutofocus = _swig_property(_six_sicd.ImageFormation_rangeAutofocus_get, _six_sicd.ImageFormation_rangeAutofocus_set)
    __swig_setmethods__["processing"] = _six_sicd.ImageFormation_processing_set
    __swig_getmethods__["processing"] = _six_sicd.ImageFormation_processing_get
    if _newclass:
        processing = _swig_property(_six_sicd.ImageFormation_processing_get, _six_sicd.ImageFormation_processing_set)
    __swig_setmethods__["polarizationCalibration"] = _six_sicd.ImageFormation_polarizationCalibration_set
    __swig_getmethods__["polarizationCalibration"] = _six_sicd.ImageFormation_polarizationCalibration_get
    if _newclass:
        polarizationCalibration = _swig_property(_six_sicd.ImageFormation_polarizationCalibration_get, _six_sicd.ImageFormation_polarizationCalibration_set)
    __swig_destroy__ = _six_sicd.delete_ImageFormation
    __del__ = lambda self: None
ImageFormation_swigregister = _six_sicd.ImageFormation_swigregister
ImageFormation_swigregister(ImageFormation)

class SCPCOA(_object):
    """Proxy of C++ six::sicd::SCPCOA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCPCOA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCPCOA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::SCPCOA self) -> SCPCOA"""
        this = _six_sicd.new_SCPCOA()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["scpTime"] = _six_sicd.SCPCOA_scpTime_set
    __swig_getmethods__["scpTime"] = _six_sicd.SCPCOA_scpTime_get
    if _newclass:
        scpTime = _swig_property(_six_sicd.SCPCOA_scpTime_get, _six_sicd.SCPCOA_scpTime_set)
    __swig_setmethods__["arpPos"] = _six_sicd.SCPCOA_arpPos_set
    __swig_getmethods__["arpPos"] = _six_sicd.SCPCOA_arpPos_get
    if _newclass:
        arpPos = _swig_property(_six_sicd.SCPCOA_arpPos_get, _six_sicd.SCPCOA_arpPos_set)
    __swig_setmethods__["arpVel"] = _six_sicd.SCPCOA_arpVel_set
    __swig_getmethods__["arpVel"] = _six_sicd.SCPCOA_arpVel_get
    if _newclass:
        arpVel = _swig_property(_six_sicd.SCPCOA_arpVel_get, _six_sicd.SCPCOA_arpVel_set)
    __swig_setmethods__["arpAcc"] = _six_sicd.SCPCOA_arpAcc_set
    __swig_getmethods__["arpAcc"] = _six_sicd.SCPCOA_arpAcc_get
    if _newclass:
        arpAcc = _swig_property(_six_sicd.SCPCOA_arpAcc_get, _six_sicd.SCPCOA_arpAcc_set)
    __swig_setmethods__["sideOfTrack"] = _six_sicd.SCPCOA_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _six_sicd.SCPCOA_sideOfTrack_get
    if _newclass:
        sideOfTrack = _swig_property(_six_sicd.SCPCOA_sideOfTrack_get, _six_sicd.SCPCOA_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _six_sicd.SCPCOA_slantRange_set
    __swig_getmethods__["slantRange"] = _six_sicd.SCPCOA_slantRange_get
    if _newclass:
        slantRange = _swig_property(_six_sicd.SCPCOA_slantRange_get, _six_sicd.SCPCOA_slantRange_set)
    __swig_setmethods__["groundRange"] = _six_sicd.SCPCOA_groundRange_set
    __swig_getmethods__["groundRange"] = _six_sicd.SCPCOA_groundRange_get
    if _newclass:
        groundRange = _swig_property(_six_sicd.SCPCOA_groundRange_get, _six_sicd.SCPCOA_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _six_sicd.SCPCOA_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _six_sicd.SCPCOA_dopplerConeAngle_get
    if _newclass:
        dopplerConeAngle = _swig_property(_six_sicd.SCPCOA_dopplerConeAngle_get, _six_sicd.SCPCOA_dopplerConeAngle_set)
    __swig_setmethods__["grazeAngle"] = _six_sicd.SCPCOA_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _six_sicd.SCPCOA_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_six_sicd.SCPCOA_grazeAngle_get, _six_sicd.SCPCOA_grazeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _six_sicd.SCPCOA_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _six_sicd.SCPCOA_incidenceAngle_get
    if _newclass:
        incidenceAngle = _swig_property(_six_sicd.SCPCOA_incidenceAngle_get, _six_sicd.SCPCOA_incidenceAngle_set)
    __swig_setmethods__["twistAngle"] = _six_sicd.SCPCOA_twistAngle_set
    __swig_getmethods__["twistAngle"] = _six_sicd.SCPCOA_twistAngle_get
    if _newclass:
        twistAngle = _swig_property(_six_sicd.SCPCOA_twistAngle_get, _six_sicd.SCPCOA_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _six_sicd.SCPCOA_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _six_sicd.SCPCOA_slopeAngle_get
    if _newclass:
        slopeAngle = _swig_property(_six_sicd.SCPCOA_slopeAngle_get, _six_sicd.SCPCOA_slopeAngle_set)
    __swig_setmethods__["azimAngle"] = _six_sicd.SCPCOA_azimAngle_set
    __swig_getmethods__["azimAngle"] = _six_sicd.SCPCOA_azimAngle_get
    if _newclass:
        azimAngle = _swig_property(_six_sicd.SCPCOA_azimAngle_get, _six_sicd.SCPCOA_azimAngle_set)
    __swig_setmethods__["layoverAngle"] = _six_sicd.SCPCOA_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _six_sicd.SCPCOA_layoverAngle_get
    if _newclass:
        layoverAngle = _swig_property(_six_sicd.SCPCOA_layoverAngle_get, _six_sicd.SCPCOA_layoverAngle_set)
    __swig_destroy__ = _six_sicd.delete_SCPCOA
    __del__ = lambda self: None
SCPCOA_swigregister = _six_sicd.SCPCOA_swigregister
SCPCOA_swigregister(SCPCOA)

class ElectricalBoresight(_object):
    """Proxy of C++ six::sicd::ElectricalBoresight class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectricalBoresight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectricalBoresight, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::ElectricalBoresight self) -> ElectricalBoresight"""
        this = _six_sicd.new_ElectricalBoresight()
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, other):
        """__eq__(ElectricalBoresight self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ElectricalBoresight___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ElectricalBoresight self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ElectricalBoresight___ne__(self, other)

    __swig_setmethods__["dcxPoly"] = _six_sicd.ElectricalBoresight_dcxPoly_set
    __swig_getmethods__["dcxPoly"] = _six_sicd.ElectricalBoresight_dcxPoly_get
    if _newclass:
        dcxPoly = _swig_property(_six_sicd.ElectricalBoresight_dcxPoly_get, _six_sicd.ElectricalBoresight_dcxPoly_set)
    __swig_setmethods__["dcyPoly"] = _six_sicd.ElectricalBoresight_dcyPoly_set
    __swig_getmethods__["dcyPoly"] = _six_sicd.ElectricalBoresight_dcyPoly_get
    if _newclass:
        dcyPoly = _swig_property(_six_sicd.ElectricalBoresight_dcyPoly_get, _six_sicd.ElectricalBoresight_dcyPoly_set)
    __swig_destroy__ = _six_sicd.delete_ElectricalBoresight
    __del__ = lambda self: None
ElectricalBoresight_swigregister = _six_sicd.ElectricalBoresight_swigregister
ElectricalBoresight_swigregister(ElectricalBoresight)

class HalfPowerBeamwidths(_object):
    """Proxy of C++ six::sicd::HalfPowerBeamwidths class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HalfPowerBeamwidths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HalfPowerBeamwidths, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::HalfPowerBeamwidths self) -> HalfPowerBeamwidths"""
        this = _six_sicd.new_HalfPowerBeamwidths()
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, other):
        """__eq__(HalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.HalfPowerBeamwidths___eq__(self, other)


    def __ne__(self, other):
        """__ne__(HalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.HalfPowerBeamwidths___ne__(self, other)

    __swig_setmethods__["dcx"] = _six_sicd.HalfPowerBeamwidths_dcx_set
    __swig_getmethods__["dcx"] = _six_sicd.HalfPowerBeamwidths_dcx_get
    if _newclass:
        dcx = _swig_property(_six_sicd.HalfPowerBeamwidths_dcx_get, _six_sicd.HalfPowerBeamwidths_dcx_set)
    __swig_setmethods__["dcy"] = _six_sicd.HalfPowerBeamwidths_dcy_set
    __swig_getmethods__["dcy"] = _six_sicd.HalfPowerBeamwidths_dcy_get
    if _newclass:
        dcy = _swig_property(_six_sicd.HalfPowerBeamwidths_dcy_get, _six_sicd.HalfPowerBeamwidths_dcy_set)
    __swig_destroy__ = _six_sicd.delete_HalfPowerBeamwidths
    __del__ = lambda self: None
HalfPowerBeamwidths_swigregister = _six_sicd.HalfPowerBeamwidths_swigregister
HalfPowerBeamwidths_swigregister(HalfPowerBeamwidths)

class GainAndPhasePolys(_object):
    """Proxy of C++ six::sicd::GainAndPhasePolys class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GainAndPhasePolys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GainAndPhasePolys, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::GainAndPhasePolys self) -> GainAndPhasePolys"""
        this = _six_sicd.new_GainAndPhasePolys()
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, other):
        """__eq__(GainAndPhasePolys self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.GainAndPhasePolys___eq__(self, other)


    def __ne__(self, other):
        """__ne__(GainAndPhasePolys self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.GainAndPhasePolys___ne__(self, other)

    __swig_setmethods__["gainPoly"] = _six_sicd.GainAndPhasePolys_gainPoly_set
    __swig_getmethods__["gainPoly"] = _six_sicd.GainAndPhasePolys_gainPoly_get
    if _newclass:
        gainPoly = _swig_property(_six_sicd.GainAndPhasePolys_gainPoly_get, _six_sicd.GainAndPhasePolys_gainPoly_set)
    __swig_setmethods__["phasePoly"] = _six_sicd.GainAndPhasePolys_phasePoly_set
    __swig_getmethods__["phasePoly"] = _six_sicd.GainAndPhasePolys_phasePoly_get
    if _newclass:
        phasePoly = _swig_property(_six_sicd.GainAndPhasePolys_phasePoly_get, _six_sicd.GainAndPhasePolys_phasePoly_set)
    __swig_destroy__ = _six_sicd.delete_GainAndPhasePolys
    __del__ = lambda self: None
GainAndPhasePolys_swigregister = _six_sicd.GainAndPhasePolys_swigregister
GainAndPhasePolys_swigregister(GainAndPhasePolys)

class AntennaParameters(_object):
    """Proxy of C++ six::sicd::AntennaParameters class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntennaParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::AntennaParameters self) -> AntennaParameters"""
        this = _six_sicd.new_AntennaParameters()
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, other):
        """__eq__(AntennaParameters self, AntennaParameters other) -> bool"""
        return _six_sicd.AntennaParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(AntennaParameters self, AntennaParameters other) -> bool"""
        return _six_sicd.AntennaParameters___ne__(self, other)

    __swig_setmethods__["xAxisPoly"] = _six_sicd.AntennaParameters_xAxisPoly_set
    __swig_getmethods__["xAxisPoly"] = _six_sicd.AntennaParameters_xAxisPoly_get
    if _newclass:
        xAxisPoly = _swig_property(_six_sicd.AntennaParameters_xAxisPoly_get, _six_sicd.AntennaParameters_xAxisPoly_set)
    __swig_setmethods__["yAxisPoly"] = _six_sicd.AntennaParameters_yAxisPoly_set
    __swig_getmethods__["yAxisPoly"] = _six_sicd.AntennaParameters_yAxisPoly_get
    if _newclass:
        yAxisPoly = _swig_property(_six_sicd.AntennaParameters_yAxisPoly_get, _six_sicd.AntennaParameters_yAxisPoly_set)
    __swig_setmethods__["frequencyZero"] = _six_sicd.AntennaParameters_frequencyZero_set
    __swig_getmethods__["frequencyZero"] = _six_sicd.AntennaParameters_frequencyZero_get
    if _newclass:
        frequencyZero = _swig_property(_six_sicd.AntennaParameters_frequencyZero_get, _six_sicd.AntennaParameters_frequencyZero_set)
    __swig_setmethods__["electricalBoresight"] = _six_sicd.AntennaParameters_electricalBoresight_set
    __swig_getmethods__["electricalBoresight"] = _six_sicd.AntennaParameters_electricalBoresight_get
    if _newclass:
        electricalBoresight = _swig_property(_six_sicd.AntennaParameters_electricalBoresight_get, _six_sicd.AntennaParameters_electricalBoresight_set)
    __swig_setmethods__["halfPowerBeamwidths"] = _six_sicd.AntennaParameters_halfPowerBeamwidths_set
    __swig_getmethods__["halfPowerBeamwidths"] = _six_sicd.AntennaParameters_halfPowerBeamwidths_get
    if _newclass:
        halfPowerBeamwidths = _swig_property(_six_sicd.AntennaParameters_halfPowerBeamwidths_get, _six_sicd.AntennaParameters_halfPowerBeamwidths_set)
    __swig_setmethods__["array"] = _six_sicd.AntennaParameters_array_set
    __swig_getmethods__["array"] = _six_sicd.AntennaParameters_array_get
    if _newclass:
        array = _swig_property(_six_sicd.AntennaParameters_array_get, _six_sicd.AntennaParameters_array_set)
    __swig_setmethods__["element"] = _six_sicd.AntennaParameters_element_set
    __swig_getmethods__["element"] = _six_sicd.AntennaParameters_element_get
    if _newclass:
        element = _swig_property(_six_sicd.AntennaParameters_element_get, _six_sicd.AntennaParameters_element_set)
    __swig_setmethods__["gainBSPoly"] = _six_sicd.AntennaParameters_gainBSPoly_set
    __swig_getmethods__["gainBSPoly"] = _six_sicd.AntennaParameters_gainBSPoly_get
    if _newclass:
        gainBSPoly = _swig_property(_six_sicd.AntennaParameters_gainBSPoly_get, _six_sicd.AntennaParameters_gainBSPoly_set)
    __swig_setmethods__["electricalBoresightFrequencyShift"] = _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_set
    __swig_getmethods__["electricalBoresightFrequencyShift"] = _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_get
    if _newclass:
        electricalBoresightFrequencyShift = _swig_property(_six_sicd.AntennaParameters_electricalBoresightFrequencyShift_get, _six_sicd.AntennaParameters_electricalBoresightFrequencyShift_set)
    __swig_setmethods__["mainlobeFrequencyDilation"] = _six_sicd.AntennaParameters_mainlobeFrequencyDilation_set
    __swig_getmethods__["mainlobeFrequencyDilation"] = _six_sicd.AntennaParameters_mainlobeFrequencyDilation_get
    if _newclass:
        mainlobeFrequencyDilation = _swig_property(_six_sicd.AntennaParameters_mainlobeFrequencyDilation_get, _six_sicd.AntennaParameters_mainlobeFrequencyDilation_set)
    __swig_destroy__ = _six_sicd.delete_AntennaParameters
    __del__ = lambda self: None
AntennaParameters_swigregister = _six_sicd.AntennaParameters_swigregister
AntennaParameters_swigregister(AntennaParameters)


def __lshift__(*args):
    """
    __lshift__(std::ostream & os, AreaDirectionParameters d) -> std::ostream
    __lshift__(std::ostream & os, ElectricalBoresight d) -> std::ostream
    __lshift__(std::ostream & os, HalfPowerBeamwidths d) -> std::ostream
    __lshift__(std::ostream & os, GainAndPhasePolys d) -> std::ostream
    __lshift__(std::ostream & os, AntennaParameters d) -> std::ostream &
    """
    return _six_sicd.__lshift__(*args)
class Antenna(_object):
    """Proxy of C++ six::sicd::Antenna class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Antenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Antenna, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tx"] = _six_sicd.Antenna_tx_set
    __swig_getmethods__["tx"] = _six_sicd.Antenna_tx_get
    if _newclass:
        tx = _swig_property(_six_sicd.Antenna_tx_get, _six_sicd.Antenna_tx_set)
    __swig_setmethods__["rcv"] = _six_sicd.Antenna_rcv_set
    __swig_getmethods__["rcv"] = _six_sicd.Antenna_rcv_get
    if _newclass:
        rcv = _swig_property(_six_sicd.Antenna_rcv_get, _six_sicd.Antenna_rcv_set)
    __swig_setmethods__["twoWay"] = _six_sicd.Antenna_twoWay_set
    __swig_getmethods__["twoWay"] = _six_sicd.Antenna_twoWay_get
    if _newclass:
        twoWay = _swig_property(_six_sicd.Antenna_twoWay_get, _six_sicd.Antenna_twoWay_set)

    def __init__(self):
        """__init__(six::sicd::Antenna self) -> Antenna"""
        this = _six_sicd.new_Antenna()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_Antenna
    __del__ = lambda self: None
Antenna_swigregister = _six_sicd.Antenna_swigregister
Antenna_swigregister(Antenna)

class MatchCollect(_object):
    """Proxy of C++ six::sicd::MatchCollect class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchCollect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchCollect, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::MatchCollect self) -> MatchCollect"""
        this = _six_sicd.new_MatchCollect()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["coreName"] = _six_sicd.MatchCollect_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.MatchCollect_coreName_get
    if _newclass:
        coreName = _swig_property(_six_sicd.MatchCollect_coreName_get, _six_sicd.MatchCollect_coreName_set)
    __swig_setmethods__["matchIndex"] = _six_sicd.MatchCollect_matchIndex_set
    __swig_getmethods__["matchIndex"] = _six_sicd.MatchCollect_matchIndex_get
    if _newclass:
        matchIndex = _swig_property(_six_sicd.MatchCollect_matchIndex_get, _six_sicd.MatchCollect_matchIndex_set)
    __swig_setmethods__["parameters"] = _six_sicd.MatchCollect_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.MatchCollect_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.MatchCollect_parameters_get, _six_sicd.MatchCollect_parameters_set)
    __swig_destroy__ = _six_sicd.delete_MatchCollect
    __del__ = lambda self: None
MatchCollect_swigregister = _six_sicd.MatchCollect_swigregister
MatchCollect_swigregister(MatchCollect)

class MatchType(_object):
    """Proxy of C++ six::sicd::MatchType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::MatchType self) -> MatchType"""
        this = _six_sicd.new_MatchType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["collectorName"] = _six_sicd.MatchType_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.MatchType_collectorName_get
    if _newclass:
        collectorName = _swig_property(_six_sicd.MatchType_collectorName_get, _six_sicd.MatchType_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.MatchType_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.MatchType_illuminatorName_get
    if _newclass:
        illuminatorName = _swig_property(_six_sicd.MatchType_illuminatorName_get, _six_sicd.MatchType_illuminatorName_set)
    __swig_setmethods__["matchType"] = _six_sicd.MatchType_matchType_set
    __swig_getmethods__["matchType"] = _six_sicd.MatchType_matchType_get
    if _newclass:
        matchType = _swig_property(_six_sicd.MatchType_matchType_get, _six_sicd.MatchType_matchType_set)
    __swig_setmethods__["typeID"] = _six_sicd.MatchType_typeID_set
    __swig_getmethods__["typeID"] = _six_sicd.MatchType_typeID_get
    if _newclass:
        typeID = _swig_property(_six_sicd.MatchType_typeID_get, _six_sicd.MatchType_typeID_set)
    __swig_setmethods__["currentIndex"] = _six_sicd.MatchType_currentIndex_set
    __swig_getmethods__["currentIndex"] = _six_sicd.MatchType_currentIndex_get
    if _newclass:
        currentIndex = _swig_property(_six_sicd.MatchType_currentIndex_get, _six_sicd.MatchType_currentIndex_set)
    __swig_setmethods__["matchCollects"] = _six_sicd.MatchType_matchCollects_set
    __swig_getmethods__["matchCollects"] = _six_sicd.MatchType_matchCollects_get
    if _newclass:
        matchCollects = _swig_property(_six_sicd.MatchType_matchCollects_get, _six_sicd.MatchType_matchCollects_set)
    __swig_destroy__ = _six_sicd.delete_MatchType
    __del__ = lambda self: None
MatchType_swigregister = _six_sicd.MatchType_swigregister
MatchType_swigregister(MatchType)

class MatchInformation(_object):
    """Proxy of C++ six::sicd::MatchInformation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatchInformation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::MatchInformation self) -> MatchInformation"""
        this = _six_sicd.new_MatchInformation()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["types"] = _six_sicd.MatchInformation_types_set
    __swig_getmethods__["types"] = _six_sicd.MatchInformation_types_get
    if _newclass:
        types = _swig_property(_six_sicd.MatchInformation_types_get, _six_sicd.MatchInformation_types_set)
    __swig_destroy__ = _six_sicd.delete_MatchInformation
    __del__ = lambda self: None
MatchInformation_swigregister = _six_sicd.MatchInformation_swigregister
MatchInformation_swigregister(MatchInformation)

class SlowTimeDeskew(_object):
    """Proxy of C++ six::sicd::SlowTimeDeskew class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlowTimeDeskew, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlowTimeDeskew, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::SlowTimeDeskew self) -> SlowTimeDeskew"""
        this = _six_sicd.new_SlowTimeDeskew()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_SlowTimeDeskew
    __del__ = lambda self: None

    def clone(self):
        """clone(SlowTimeDeskew self) -> SlowTimeDeskew"""
        return _six_sicd.SlowTimeDeskew_clone(self)

    __swig_setmethods__["applied"] = _six_sicd.SlowTimeDeskew_applied_set
    __swig_getmethods__["applied"] = _six_sicd.SlowTimeDeskew_applied_get
    if _newclass:
        applied = _swig_property(_six_sicd.SlowTimeDeskew_applied_get, _six_sicd.SlowTimeDeskew_applied_set)
    __swig_setmethods__["slowTimeDeskewPhasePoly"] = _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_set
    __swig_getmethods__["slowTimeDeskewPhasePoly"] = _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_get
    if _newclass:
        slowTimeDeskewPhasePoly = _swig_property(_six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_get, _six_sicd.SlowTimeDeskew_slowTimeDeskewPhasePoly_set)
SlowTimeDeskew_swigregister = _six_sicd.SlowTimeDeskew_swigregister
SlowTimeDeskew_swigregister(SlowTimeDeskew)

class PFA(_object):
    """Proxy of C++ six::sicd::PFA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PFA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PFA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::PFA self) -> PFA"""
        this = _six_sicd.new_PFA()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_PFA
    __del__ = lambda self: None

    def clone(self):
        """clone(PFA self) -> PFA"""
        return _six_sicd.PFA_clone(self)

    __swig_setmethods__["focusPlaneNormal"] = _six_sicd.PFA_focusPlaneNormal_set
    __swig_getmethods__["focusPlaneNormal"] = _six_sicd.PFA_focusPlaneNormal_get
    if _newclass:
        focusPlaneNormal = _swig_property(_six_sicd.PFA_focusPlaneNormal_get, _six_sicd.PFA_focusPlaneNormal_set)
    __swig_setmethods__["imagePlaneNormal"] = _six_sicd.PFA_imagePlaneNormal_set
    __swig_getmethods__["imagePlaneNormal"] = _six_sicd.PFA_imagePlaneNormal_get
    if _newclass:
        imagePlaneNormal = _swig_property(_six_sicd.PFA_imagePlaneNormal_get, _six_sicd.PFA_imagePlaneNormal_set)
    __swig_setmethods__["polarAngleRefTime"] = _six_sicd.PFA_polarAngleRefTime_set
    __swig_getmethods__["polarAngleRefTime"] = _six_sicd.PFA_polarAngleRefTime_get
    if _newclass:
        polarAngleRefTime = _swig_property(_six_sicd.PFA_polarAngleRefTime_get, _six_sicd.PFA_polarAngleRefTime_set)
    __swig_setmethods__["polarAnglePoly"] = _six_sicd.PFA_polarAnglePoly_set
    __swig_getmethods__["polarAnglePoly"] = _six_sicd.PFA_polarAnglePoly_get
    if _newclass:
        polarAnglePoly = _swig_property(_six_sicd.PFA_polarAnglePoly_get, _six_sicd.PFA_polarAnglePoly_set)
    __swig_setmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.PFA_spatialFrequencyScaleFactorPoly_set
    __swig_getmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.PFA_spatialFrequencyScaleFactorPoly_get
    if _newclass:
        spatialFrequencyScaleFactorPoly = _swig_property(_six_sicd.PFA_spatialFrequencyScaleFactorPoly_get, _six_sicd.PFA_spatialFrequencyScaleFactorPoly_set)
    __swig_setmethods__["krg1"] = _six_sicd.PFA_krg1_set
    __swig_getmethods__["krg1"] = _six_sicd.PFA_krg1_get
    if _newclass:
        krg1 = _swig_property(_six_sicd.PFA_krg1_get, _six_sicd.PFA_krg1_set)
    __swig_setmethods__["krg2"] = _six_sicd.PFA_krg2_set
    __swig_getmethods__["krg2"] = _six_sicd.PFA_krg2_get
    if _newclass:
        krg2 = _swig_property(_six_sicd.PFA_krg2_get, _six_sicd.PFA_krg2_set)
    __swig_setmethods__["kaz1"] = _six_sicd.PFA_kaz1_set
    __swig_getmethods__["kaz1"] = _six_sicd.PFA_kaz1_get
    if _newclass:
        kaz1 = _swig_property(_six_sicd.PFA_kaz1_get, _six_sicd.PFA_kaz1_set)
    __swig_setmethods__["kaz2"] = _six_sicd.PFA_kaz2_set
    __swig_getmethods__["kaz2"] = _six_sicd.PFA_kaz2_get
    if _newclass:
        kaz2 = _swig_property(_six_sicd.PFA_kaz2_get, _six_sicd.PFA_kaz2_set)
    __swig_setmethods__["slowTimeDeskew"] = _six_sicd.PFA_slowTimeDeskew_set
    __swig_getmethods__["slowTimeDeskew"] = _six_sicd.PFA_slowTimeDeskew_get
    if _newclass:
        slowTimeDeskew = _swig_property(_six_sicd.PFA_slowTimeDeskew_get, _six_sicd.PFA_slowTimeDeskew_set)
PFA_swigregister = _six_sicd.PFA_swigregister
PFA_swigregister(PFA)

class RMAT(_object):
    """Proxy of C++ six::sicd::RMAT class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMAT, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RMAT self) -> RMAT"""
        this = _six_sicd.new_RMAT()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["refTime"] = _six_sicd.RMAT_refTime_set
    __swig_getmethods__["refTime"] = _six_sicd.RMAT_refTime_get
    if _newclass:
        refTime = _swig_property(_six_sicd.RMAT_refTime_get, _six_sicd.RMAT_refTime_set)
    __swig_setmethods__["refPos"] = _six_sicd.RMAT_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.RMAT_refPos_get
    if _newclass:
        refPos = _swig_property(_six_sicd.RMAT_refPos_get, _six_sicd.RMAT_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.RMAT_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.RMAT_refVel_get
    if _newclass:
        refVel = _swig_property(_six_sicd.RMAT_refVel_get, _six_sicd.RMAT_refVel_set)
    __swig_setmethods__["distRefLinePoly"] = _six_sicd.RMAT_distRefLinePoly_set
    __swig_getmethods__["distRefLinePoly"] = _six_sicd.RMAT_distRefLinePoly_get
    if _newclass:
        distRefLinePoly = _swig_property(_six_sicd.RMAT_distRefLinePoly_get, _six_sicd.RMAT_distRefLinePoly_set)
    __swig_setmethods__["cosDCACOAPoly"] = _six_sicd.RMAT_cosDCACOAPoly_set
    __swig_getmethods__["cosDCACOAPoly"] = _six_sicd.RMAT_cosDCACOAPoly_get
    if _newclass:
        cosDCACOAPoly = _swig_property(_six_sicd.RMAT_cosDCACOAPoly_get, _six_sicd.RMAT_cosDCACOAPoly_set)
    __swig_setmethods__["kx1"] = _six_sicd.RMAT_kx1_set
    __swig_getmethods__["kx1"] = _six_sicd.RMAT_kx1_get
    if _newclass:
        kx1 = _swig_property(_six_sicd.RMAT_kx1_get, _six_sicd.RMAT_kx1_set)
    __swig_setmethods__["kx2"] = _six_sicd.RMAT_kx2_set
    __swig_getmethods__["kx2"] = _six_sicd.RMAT_kx2_get
    if _newclass:
        kx2 = _swig_property(_six_sicd.RMAT_kx2_get, _six_sicd.RMAT_kx2_set)
    __swig_setmethods__["ky1"] = _six_sicd.RMAT_ky1_set
    __swig_getmethods__["ky1"] = _six_sicd.RMAT_ky1_get
    if _newclass:
        ky1 = _swig_property(_six_sicd.RMAT_ky1_get, _six_sicd.RMAT_ky1_set)
    __swig_setmethods__["ky2"] = _six_sicd.RMAT_ky2_set
    __swig_getmethods__["ky2"] = _six_sicd.RMAT_ky2_get
    if _newclass:
        ky2 = _swig_property(_six_sicd.RMAT_ky2_get, _six_sicd.RMAT_ky2_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.RMAT_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.RMAT_dopConeAngleRef_get
    if _newclass:
        dopConeAngleRef = _swig_property(_six_sicd.RMAT_dopConeAngleRef_get, _six_sicd.RMAT_dopConeAngleRef_set)
    __swig_destroy__ = _six_sicd.delete_RMAT
    __del__ = lambda self: None
RMAT_swigregister = _six_sicd.RMAT_swigregister
RMAT_swigregister(RMAT)

class RMCR(_object):
    """Proxy of C++ six::sicd::RMCR class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMCR, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RMCR self) -> RMCR"""
        this = _six_sicd.new_RMCR()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["refPos"] = _six_sicd.RMCR_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.RMCR_refPos_get
    if _newclass:
        refPos = _swig_property(_six_sicd.RMCR_refPos_get, _six_sicd.RMCR_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.RMCR_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.RMCR_refVel_get
    if _newclass:
        refVel = _swig_property(_six_sicd.RMCR_refVel_get, _six_sicd.RMCR_refVel_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.RMCR_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.RMCR_dopConeAngleRef_get
    if _newclass:
        dopConeAngleRef = _swig_property(_six_sicd.RMCR_dopConeAngleRef_get, _six_sicd.RMCR_dopConeAngleRef_set)
    __swig_destroy__ = _six_sicd.delete_RMCR
    __del__ = lambda self: None
RMCR_swigregister = _six_sicd.RMCR_swigregister
RMCR_swigregister(RMCR)

class INCA(_object):
    """Proxy of C++ six::sicd::INCA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INCA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INCA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::INCA self) -> INCA"""
        this = _six_sicd.new_INCA()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["timeCAPoly"] = _six_sicd.INCA_timeCAPoly_set
    __swig_getmethods__["timeCAPoly"] = _six_sicd.INCA_timeCAPoly_get
    if _newclass:
        timeCAPoly = _swig_property(_six_sicd.INCA_timeCAPoly_get, _six_sicd.INCA_timeCAPoly_set)
    __swig_setmethods__["rangeCA"] = _six_sicd.INCA_rangeCA_set
    __swig_getmethods__["rangeCA"] = _six_sicd.INCA_rangeCA_get
    if _newclass:
        rangeCA = _swig_property(_six_sicd.INCA_rangeCA_get, _six_sicd.INCA_rangeCA_set)
    __swig_setmethods__["freqZero"] = _six_sicd.INCA_freqZero_set
    __swig_getmethods__["freqZero"] = _six_sicd.INCA_freqZero_get
    if _newclass:
        freqZero = _swig_property(_six_sicd.INCA_freqZero_get, _six_sicd.INCA_freqZero_set)
    __swig_setmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.INCA_dopplerRateScaleFactorPoly_set
    __swig_getmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.INCA_dopplerRateScaleFactorPoly_get
    if _newclass:
        dopplerRateScaleFactorPoly = _swig_property(_six_sicd.INCA_dopplerRateScaleFactorPoly_get, _six_sicd.INCA_dopplerRateScaleFactorPoly_set)
    __swig_setmethods__["dopplerCentroidPoly"] = _six_sicd.INCA_dopplerCentroidPoly_set
    __swig_getmethods__["dopplerCentroidPoly"] = _six_sicd.INCA_dopplerCentroidPoly_get
    if _newclass:
        dopplerCentroidPoly = _swig_property(_six_sicd.INCA_dopplerCentroidPoly_get, _six_sicd.INCA_dopplerCentroidPoly_set)
    __swig_setmethods__["dopplerCentroidCOA"] = _six_sicd.INCA_dopplerCentroidCOA_set
    __swig_getmethods__["dopplerCentroidCOA"] = _six_sicd.INCA_dopplerCentroidCOA_get
    if _newclass:
        dopplerCentroidCOA = _swig_property(_six_sicd.INCA_dopplerCentroidCOA_get, _six_sicd.INCA_dopplerCentroidCOA_set)
    __swig_destroy__ = _six_sicd.delete_INCA
    __del__ = lambda self: None
INCA_swigregister = _six_sicd.INCA_swigregister
INCA_swigregister(INCA)

class RMA(_object):
    """Proxy of C++ six::sicd::RMA class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMA, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RMA self) -> RMA"""
        this = _six_sicd.new_RMA()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["algoType"] = _six_sicd.RMA_algoType_set
    __swig_getmethods__["algoType"] = _six_sicd.RMA_algoType_get
    if _newclass:
        algoType = _swig_property(_six_sicd.RMA_algoType_get, _six_sicd.RMA_algoType_set)
    __swig_setmethods__["rmat"] = _six_sicd.RMA_rmat_set
    __swig_getmethods__["rmat"] = _six_sicd.RMA_rmat_get
    if _newclass:
        rmat = _swig_property(_six_sicd.RMA_rmat_get, _six_sicd.RMA_rmat_set)
    __swig_setmethods__["rmcr"] = _six_sicd.RMA_rmcr_set
    __swig_getmethods__["rmcr"] = _six_sicd.RMA_rmcr_get
    if _newclass:
        rmcr = _swig_property(_six_sicd.RMA_rmcr_get, _six_sicd.RMA_rmcr_set)
    __swig_setmethods__["inca"] = _six_sicd.RMA_inca_set
    __swig_getmethods__["inca"] = _six_sicd.RMA_inca_get
    if _newclass:
        inca = _swig_property(_six_sicd.RMA_inca_get, _six_sicd.RMA_inca_set)
    __swig_destroy__ = _six_sicd.delete_RMA
    __del__ = lambda self: None
RMA_swigregister = _six_sicd.RMA_swigregister
RMA_swigregister(RMA)

class RgAzComp(_object):
    """Proxy of C++ six::sicd::RgAzComp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RgAzComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RgAzComp, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(six::sicd::RgAzComp self) -> RgAzComp"""
        this = _six_sicd.new_RgAzComp()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["azSF"] = _six_sicd.RgAzComp_azSF_set
    __swig_getmethods__["azSF"] = _six_sicd.RgAzComp_azSF_get
    if _newclass:
        azSF = _swig_property(_six_sicd.RgAzComp_azSF_get, _six_sicd.RgAzComp_azSF_set)
    __swig_setmethods__["kazPoly"] = _six_sicd.RgAzComp_kazPoly_set
    __swig_getmethods__["kazPoly"] = _six_sicd.RgAzComp_kazPoly_get
    if _newclass:
        kazPoly = _swig_property(_six_sicd.RgAzComp_kazPoly_get, _six_sicd.RgAzComp_kazPoly_set)
    __swig_destroy__ = _six_sicd.delete_RgAzComp
    __del__ = lambda self: None
RgAzComp_swigregister = _six_sicd.RgAzComp_swigregister
RgAzComp_swigregister(RgAzComp)

class ComplexData(six_base.Data):
    """Proxy of C++ six::sicd::ComplexData class"""
    __swig_setmethods__ = {}
    for _s in [six_base.Data]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexData, name, value)
    __swig_getmethods__ = {}
    for _s in [six_base.Data]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collectionInformation"] = _six_sicd.ComplexData_collectionInformation_set
    __swig_getmethods__["collectionInformation"] = _six_sicd.ComplexData_collectionInformation_get
    if _newclass:
        collectionInformation = _swig_property(_six_sicd.ComplexData_collectionInformation_get, _six_sicd.ComplexData_collectionInformation_set)
    __swig_setmethods__["imageCreation"] = _six_sicd.ComplexData_imageCreation_set
    __swig_getmethods__["imageCreation"] = _six_sicd.ComplexData_imageCreation_get
    if _newclass:
        imageCreation = _swig_property(_six_sicd.ComplexData_imageCreation_get, _six_sicd.ComplexData_imageCreation_set)
    __swig_setmethods__["imageData"] = _six_sicd.ComplexData_imageData_set
    __swig_getmethods__["imageData"] = _six_sicd.ComplexData_imageData_get
    if _newclass:
        imageData = _swig_property(_six_sicd.ComplexData_imageData_get, _six_sicd.ComplexData_imageData_set)
    __swig_setmethods__["geoData"] = _six_sicd.ComplexData_geoData_set
    __swig_getmethods__["geoData"] = _six_sicd.ComplexData_geoData_get
    if _newclass:
        geoData = _swig_property(_six_sicd.ComplexData_geoData_get, _six_sicd.ComplexData_geoData_set)
    __swig_setmethods__["grid"] = _six_sicd.ComplexData_grid_set
    __swig_getmethods__["grid"] = _six_sicd.ComplexData_grid_get
    if _newclass:
        grid = _swig_property(_six_sicd.ComplexData_grid_get, _six_sicd.ComplexData_grid_set)
    __swig_setmethods__["timeline"] = _six_sicd.ComplexData_timeline_set
    __swig_getmethods__["timeline"] = _six_sicd.ComplexData_timeline_get
    if _newclass:
        timeline = _swig_property(_six_sicd.ComplexData_timeline_get, _six_sicd.ComplexData_timeline_set)
    __swig_setmethods__["position"] = _six_sicd.ComplexData_position_set
    __swig_getmethods__["position"] = _six_sicd.ComplexData_position_get
    if _newclass:
        position = _swig_property(_six_sicd.ComplexData_position_get, _six_sicd.ComplexData_position_set)
    __swig_setmethods__["radarCollection"] = _six_sicd.ComplexData_radarCollection_set
    __swig_getmethods__["radarCollection"] = _six_sicd.ComplexData_radarCollection_get
    if _newclass:
        radarCollection = _swig_property(_six_sicd.ComplexData_radarCollection_get, _six_sicd.ComplexData_radarCollection_set)
    __swig_setmethods__["imageFormation"] = _six_sicd.ComplexData_imageFormation_set
    __swig_getmethods__["imageFormation"] = _six_sicd.ComplexData_imageFormation_get
    if _newclass:
        imageFormation = _swig_property(_six_sicd.ComplexData_imageFormation_get, _six_sicd.ComplexData_imageFormation_set)
    __swig_setmethods__["scpcoa"] = _six_sicd.ComplexData_scpcoa_set
    __swig_getmethods__["scpcoa"] = _six_sicd.ComplexData_scpcoa_get
    if _newclass:
        scpcoa = _swig_property(_six_sicd.ComplexData_scpcoa_get, _six_sicd.ComplexData_scpcoa_set)
    __swig_setmethods__["radiometric"] = _six_sicd.ComplexData_radiometric_set
    __swig_getmethods__["radiometric"] = _six_sicd.ComplexData_radiometric_get
    if _newclass:
        radiometric = _swig_property(_six_sicd.ComplexData_radiometric_get, _six_sicd.ComplexData_radiometric_set)
    __swig_setmethods__["antenna"] = _six_sicd.ComplexData_antenna_set
    __swig_getmethods__["antenna"] = _six_sicd.ComplexData_antenna_get
    if _newclass:
        antenna = _swig_property(_six_sicd.ComplexData_antenna_get, _six_sicd.ComplexData_antenna_set)
    __swig_setmethods__["errorStatistics"] = _six_sicd.ComplexData_errorStatistics_set
    __swig_getmethods__["errorStatistics"] = _six_sicd.ComplexData_errorStatistics_get
    if _newclass:
        errorStatistics = _swig_property(_six_sicd.ComplexData_errorStatistics_get, _six_sicd.ComplexData_errorStatistics_set)
    __swig_setmethods__["matchInformation"] = _six_sicd.ComplexData_matchInformation_set
    __swig_getmethods__["matchInformation"] = _six_sicd.ComplexData_matchInformation_get
    if _newclass:
        matchInformation = _swig_property(_six_sicd.ComplexData_matchInformation_get, _six_sicd.ComplexData_matchInformation_set)
    __swig_setmethods__["pfa"] = _six_sicd.ComplexData_pfa_set
    __swig_getmethods__["pfa"] = _six_sicd.ComplexData_pfa_get
    if _newclass:
        pfa = _swig_property(_six_sicd.ComplexData_pfa_get, _six_sicd.ComplexData_pfa_set)
    __swig_setmethods__["rma"] = _six_sicd.ComplexData_rma_set
    __swig_getmethods__["rma"] = _six_sicd.ComplexData_rma_get
    if _newclass:
        rma = _swig_property(_six_sicd.ComplexData_rma_get, _six_sicd.ComplexData_rma_set)
    __swig_setmethods__["rgAzComp"] = _six_sicd.ComplexData_rgAzComp_set
    __swig_getmethods__["rgAzComp"] = _six_sicd.ComplexData_rgAzComp_get
    if _newclass:
        rgAzComp = _swig_property(_six_sicd.ComplexData_rgAzComp_get, _six_sicd.ComplexData_rgAzComp_set)

    def __init__(self):
        """__init__(six::sicd::ComplexData self) -> ComplexData"""
        this = _six_sicd.new_ComplexData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexData
    __del__ = lambda self: None

    def getDataType(self):
        """getDataType(ComplexData self) -> DataType"""
        return _six_sicd.ComplexData_getDataType(self)


    def clone(self):
        """clone(ComplexData self) -> Data"""
        return _six_sicd.ComplexData_clone(self)


    def getPixelType(self):
        """getPixelType(ComplexData self) -> PixelType"""
        return _six_sicd.ComplexData_getPixelType(self)


    def setPixelType(self, pixelType):
        """setPixelType(ComplexData self, PixelType pixelType)"""
        return _six_sicd.ComplexData_setPixelType(self, pixelType)


    def getNumRows(self):
        """getNumRows(ComplexData self) -> size_t"""
        return _six_sicd.ComplexData_getNumRows(self)


    def setNumRows(self, numRows):
        """setNumRows(ComplexData self, size_t numRows)"""
        return _six_sicd.ComplexData_setNumRows(self, numRows)


    def getNumCols(self):
        """getNumCols(ComplexData self) -> size_t"""
        return _six_sicd.ComplexData_getNumCols(self)


    def setNumCols(self, numCols):
        """setNumCols(ComplexData self, size_t numCols)"""
        return _six_sicd.ComplexData_setNumCols(self, numCols)


    def getImageCorners(self):
        """getImageCorners(ComplexData self) -> LatLonCorners"""
        return _six_sicd.ComplexData_getImageCorners(self)


    def setImageCorners(self, imageCorners):
        """setImageCorners(ComplexData self, LatLonCorners imageCorners)"""
        return _six_sicd.ComplexData_setImageCorners(self, imageCorners)


    def getName(self):
        """getName(ComplexData self) -> std::string"""
        return _six_sicd.ComplexData_getName(self)


    def setName(self, name):
        """setName(ComplexData self, std::string name)"""
        return _six_sicd.ComplexData_setName(self, name)


    def getSource(self):
        """getSource(ComplexData self) -> std::string"""
        return _six_sicd.ComplexData_getSource(self)


    def setSource(self, name):
        """setSource(ComplexData self, std::string name)"""
        return _six_sicd.ComplexData_setSource(self, name)


    def getCreationTime(self):
        """getCreationTime(ComplexData self) -> DateTime"""
        return _six_sicd.ComplexData_getCreationTime(self)


    def setCreationTime(self, creationTime):
        """setCreationTime(ComplexData self, DateTime creationTime)"""
        return _six_sicd.ComplexData_setCreationTime(self, creationTime)


    def getCollectionStartDateTime(self):
        """getCollectionStartDateTime(ComplexData self) -> DateTime"""
        return _six_sicd.ComplexData_getCollectionStartDateTime(self)


    def getClassification(self, *args):
        """
        getClassification(ComplexData self) -> Classification
        getClassification(ComplexData self) -> Classification
        """
        return _six_sicd.ComplexData_getClassification(self, *args)


    def getDisplayLUT(self):
        """getDisplayLUT(ComplexData self) -> six::LUT *"""
        return _six_sicd.ComplexData_getDisplayLUT(self)


    def getVendorID(self):
        """getVendorID(ComplexData self) -> std::string"""
        return _six_sicd.ComplexData_getVendorID(self)


    def getVersion(self):
        """getVersion(ComplexData self) -> std::string"""
        return _six_sicd.ComplexData_getVersion(self)


    def setVersion(self, version):
        """setVersion(ComplexData self, std::string const & version)"""
        return _six_sicd.ComplexData_setVersion(self, version)

ComplexData_swigregister = _six_sicd.ComplexData_swigregister
ComplexData_swigregister(ComplexData)

class ComplexXMLControl(six_base.XMLControl):
    """Proxy of C++ six::sicd::ComplexXMLControl class"""
    __swig_setmethods__ = {}
    for _s in [six_base.XMLControl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexXMLControl, name, value)
    __swig_getmethods__ = {}
    for _s in [six_base.XMLControl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexXMLControl, name)
    __repr__ = _swig_repr

    def __init__(self, log=None, ownLog=False):
        """
        __init__(six::sicd::ComplexXMLControl self, logging::Logger * log=None, bool ownLog=False) -> ComplexXMLControl
        __init__(six::sicd::ComplexXMLControl self, logging::Logger * log=None) -> ComplexXMLControl
        __init__(six::sicd::ComplexXMLControl self) -> ComplexXMLControl
        """
        this = _six_sicd.new_ComplexXMLControl(log, ownLog)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_ComplexXMLControl
    __del__ = lambda self: None
ComplexXMLControl_swigregister = _six_sicd.ComplexXMLControl_swigregister
ComplexXMLControl_swigregister(ComplexXMLControl)

class SixSicdUtilities(_object):
    """Proxy of C++ six::sicd::Utilities class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SixSicdUtilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SixSicdUtilities, name)
    __repr__ = _swig_repr

    def getSceneGeometry(data):
        """getSceneGeometry(ComplexData data) -> SceneGeometry"""
        return _six_sicd.SixSicdUtilities_getSceneGeometry(data)

    if _newclass:
        getSceneGeometry = staticmethod(getSceneGeometry)
    __swig_getmethods__["getSceneGeometry"] = lambda x: getSceneGeometry

    def getProjectionModel(data, geom):
        """getProjectionModel(ComplexData data, SceneGeometry geom) -> ProjectionModel"""
        return _six_sicd.SixSicdUtilities_getProjectionModel(data, geom)

    if _newclass:
        getProjectionModel = staticmethod(getProjectionModel)
    __swig_getmethods__["getProjectionModel"] = lambda x: getProjectionModel

    def getWidebandData(sicdPathname, schemaPaths, complexData, buffer):
        """getWidebandData(std::string const & sicdPathname, VectorString schemaPaths, ComplexData complexData, std::complex< float > * buffer)"""
        return _six_sicd.SixSicdUtilities_getWidebandData(sicdPathname, schemaPaths, complexData, buffer)

    if _newclass:
        getWidebandData = staticmethod(getWidebandData)
    __swig_getmethods__["getWidebandData"] = lambda x: getWidebandData

    def __init__(self):
        """__init__(six::sicd::Utilities self) -> SixSicdUtilities"""
        this = _six_sicd.new_SixSicdUtilities()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _six_sicd.delete_SixSicdUtilities
    __del__ = lambda self: None
SixSicdUtilities_swigregister = _six_sicd.SixSicdUtilities_swigregister
SixSicdUtilities_swigregister(SixSicdUtilities)

def SixSicdUtilities_getSceneGeometry(data):
    """SixSicdUtilities_getSceneGeometry(ComplexData data) -> SceneGeometry"""
    return _six_sicd.SixSicdUtilities_getSceneGeometry(data)

def SixSicdUtilities_getProjectionModel(data, geom):
    """SixSicdUtilities_getProjectionModel(ComplexData data, SceneGeometry geom) -> ProjectionModel"""
    return _six_sicd.SixSicdUtilities_getProjectionModel(data, geom)

def SixSicdUtilities_getWidebandData(sicdPathname, schemaPaths, complexData, buffer):
    """SixSicdUtilities_getWidebandData(std::string const & sicdPathname, VectorString schemaPaths, ComplexData complexData, std::complex< float > * buffer)"""
    return _six_sicd.SixSicdUtilities_getWidebandData(sicdPathname, schemaPaths, complexData, buffer)

class ScopedCloneableCollectionInformation(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::CollectionInformation)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableCollectionInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableCollectionInformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::CollectionInformation)> self, CollectionInformation ptr=None) -> ScopedCloneableCollectionInformation
        __init__(mem::ScopedCloneablePtr<(six::sicd::CollectionInformation)> self) -> ScopedCloneableCollectionInformation
        __init__(mem::ScopedCloneablePtr<(six::sicd::CollectionInformation)> self, ScopedCloneableCollectionInformation rhs) -> ScopedCloneableCollectionInformation
        """
        this = _six_sicd.new_ScopedCloneableCollectionInformation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableCollectionInformation self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableCollectionInformation self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableCollectionInformation self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableCollectionInformation self, CollectionInformation ptr=None)
        reset(ScopedCloneableCollectionInformation self)
        """
        return _six_sicd.ScopedCloneableCollectionInformation_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableCollectionInformation
    __del__ = lambda self: None
    __swig_setmethods__["collectorName"] = _six_sicd.ScopedCloneableCollectionInformation_collectorName_set
    __swig_getmethods__["collectorName"] = _six_sicd.ScopedCloneableCollectionInformation_collectorName_get
    if _newclass:
        collectorName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_collectorName_get, _six_sicd.ScopedCloneableCollectionInformation_collectorName_set)
    __swig_setmethods__["illuminatorName"] = _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_set
    __swig_getmethods__["illuminatorName"] = _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_get
    if _newclass:
        illuminatorName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_illuminatorName_get, _six_sicd.ScopedCloneableCollectionInformation_illuminatorName_set)
    __swig_setmethods__["coreName"] = _six_sicd.ScopedCloneableCollectionInformation_coreName_set
    __swig_getmethods__["coreName"] = _six_sicd.ScopedCloneableCollectionInformation_coreName_get
    if _newclass:
        coreName = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_coreName_get, _six_sicd.ScopedCloneableCollectionInformation_coreName_set)
    __swig_setmethods__["collectType"] = _six_sicd.ScopedCloneableCollectionInformation_collectType_set
    __swig_getmethods__["collectType"] = _six_sicd.ScopedCloneableCollectionInformation_collectType_get
    if _newclass:
        collectType = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_collectType_get, _six_sicd.ScopedCloneableCollectionInformation_collectType_set)
    __swig_setmethods__["radarMode"] = _six_sicd.ScopedCloneableCollectionInformation_radarMode_set
    __swig_getmethods__["radarMode"] = _six_sicd.ScopedCloneableCollectionInformation_radarMode_get
    if _newclass:
        radarMode = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_radarMode_get, _six_sicd.ScopedCloneableCollectionInformation_radarMode_set)
    __swig_setmethods__["radarModeID"] = _six_sicd.ScopedCloneableCollectionInformation_radarModeID_set
    __swig_getmethods__["radarModeID"] = _six_sicd.ScopedCloneableCollectionInformation_radarModeID_get
    if _newclass:
        radarModeID = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_radarModeID_get, _six_sicd.ScopedCloneableCollectionInformation_radarModeID_set)
    __swig_setmethods__["classification"] = _six_sicd.ScopedCloneableCollectionInformation_classification_set
    __swig_getmethods__["classification"] = _six_sicd.ScopedCloneableCollectionInformation_classification_get
    if _newclass:
        classification = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_classification_get, _six_sicd.ScopedCloneableCollectionInformation_classification_set)
    __swig_setmethods__["countryCodes"] = _six_sicd.ScopedCloneableCollectionInformation_countryCodes_set
    __swig_getmethods__["countryCodes"] = _six_sicd.ScopedCloneableCollectionInformation_countryCodes_get
    if _newclass:
        countryCodes = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_countryCodes_get, _six_sicd.ScopedCloneableCollectionInformation_countryCodes_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCloneableCollectionInformation_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCloneableCollectionInformation_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.ScopedCloneableCollectionInformation_parameters_get, _six_sicd.ScopedCloneableCollectionInformation_parameters_set)

    def clone(self):
        """clone(ScopedCloneableCollectionInformation self) -> CollectionInformation"""
        return _six_sicd.ScopedCloneableCollectionInformation_clone(self)


    def __eq__(self, other):
        """__eq__(ScopedCloneableCollectionInformation self, CollectionInformation other) -> bool"""
        return _six_sicd.ScopedCloneableCollectionInformation___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCloneableCollectionInformation self, CollectionInformation other) -> bool"""
        return _six_sicd.ScopedCloneableCollectionInformation___ne__(self, other)

ScopedCloneableCollectionInformation_swigregister = _six_sicd.ScopedCloneableCollectionInformation_swigregister
ScopedCloneableCollectionInformation_swigregister(ScopedCloneableCollectionInformation)

class ScopedCloneableImageCreation(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::ImageCreation)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableImageCreation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableImageCreation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageCreation)> self, ImageCreation ptr=None) -> ScopedCloneableImageCreation
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageCreation)> self) -> ScopedCloneableImageCreation
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageCreation)> self, ScopedCloneableImageCreation rhs) -> ScopedCloneableImageCreation
        """
        this = _six_sicd.new_ScopedCloneableImageCreation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableImageCreation self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableImageCreation self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableImageCreation self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableImageCreation self, ImageCreation ptr=None)
        reset(ScopedCloneableImageCreation self)
        """
        return _six_sicd.ScopedCloneableImageCreation_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableImageCreation
    __del__ = lambda self: None
    __swig_setmethods__["application"] = _six_sicd.ScopedCloneableImageCreation_application_set
    __swig_getmethods__["application"] = _six_sicd.ScopedCloneableImageCreation_application_get
    if _newclass:
        application = _swig_property(_six_sicd.ScopedCloneableImageCreation_application_get, _six_sicd.ScopedCloneableImageCreation_application_set)
    __swig_setmethods__["dateTime"] = _six_sicd.ScopedCloneableImageCreation_dateTime_set
    __swig_getmethods__["dateTime"] = _six_sicd.ScopedCloneableImageCreation_dateTime_get
    if _newclass:
        dateTime = _swig_property(_six_sicd.ScopedCloneableImageCreation_dateTime_get, _six_sicd.ScopedCloneableImageCreation_dateTime_set)
    __swig_setmethods__["site"] = _six_sicd.ScopedCloneableImageCreation_site_set
    __swig_getmethods__["site"] = _six_sicd.ScopedCloneableImageCreation_site_get
    if _newclass:
        site = _swig_property(_six_sicd.ScopedCloneableImageCreation_site_get, _six_sicd.ScopedCloneableImageCreation_site_set)
    __swig_setmethods__["profile"] = _six_sicd.ScopedCloneableImageCreation_profile_set
    __swig_getmethods__["profile"] = _six_sicd.ScopedCloneableImageCreation_profile_get
    if _newclass:
        profile = _swig_property(_six_sicd.ScopedCloneableImageCreation_profile_get, _six_sicd.ScopedCloneableImageCreation_profile_set)

    def clone(self):
        """clone(ScopedCloneableImageCreation self) -> ImageCreation"""
        return _six_sicd.ScopedCloneableImageCreation_clone(self)

ScopedCloneableImageCreation_swigregister = _six_sicd.ScopedCloneableImageCreation_swigregister
ScopedCloneableImageCreation_swigregister(ScopedCloneableImageCreation)

class ScopedCloneableImageData(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::ImageData)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableImageData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageData)> self, ImageData ptr=None) -> ScopedCloneableImageData
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageData)> self) -> ScopedCloneableImageData
        __init__(mem::ScopedCloneablePtr<(six::sicd::ImageData)> self, ScopedCloneableImageData rhs) -> ScopedCloneableImageData
        """
        this = _six_sicd.new_ScopedCloneableImageData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableImageData self) -> ImageData"""
        return _six_sicd.ScopedCloneableImageData_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableImageData self) -> ImageData"""
        return _six_sicd.ScopedCloneableImageData___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableImageData self) -> ImageData"""
        return _six_sicd.ScopedCloneableImageData___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableImageData self, ImageData ptr=None)
        reset(ScopedCloneableImageData self)
        """
        return _six_sicd.ScopedCloneableImageData_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableImageData
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableImageData self) -> ImageData"""
        return _six_sicd.ScopedCloneableImageData_clone(self)

    __swig_setmethods__["pixelType"] = _six_sicd.ScopedCloneableImageData_pixelType_set
    __swig_getmethods__["pixelType"] = _six_sicd.ScopedCloneableImageData_pixelType_get
    if _newclass:
        pixelType = _swig_property(_six_sicd.ScopedCloneableImageData_pixelType_get, _six_sicd.ScopedCloneableImageData_pixelType_set)
    __swig_setmethods__["amplitudeTable"] = _six_sicd.ScopedCloneableImageData_amplitudeTable_set
    __swig_getmethods__["amplitudeTable"] = _six_sicd.ScopedCloneableImageData_amplitudeTable_get
    if _newclass:
        amplitudeTable = _swig_property(_six_sicd.ScopedCloneableImageData_amplitudeTable_get, _six_sicd.ScopedCloneableImageData_amplitudeTable_set)
    __swig_setmethods__["numRows"] = _six_sicd.ScopedCloneableImageData_numRows_set
    __swig_getmethods__["numRows"] = _six_sicd.ScopedCloneableImageData_numRows_get
    if _newclass:
        numRows = _swig_property(_six_sicd.ScopedCloneableImageData_numRows_get, _six_sicd.ScopedCloneableImageData_numRows_set)
    __swig_setmethods__["numCols"] = _six_sicd.ScopedCloneableImageData_numCols_set
    __swig_getmethods__["numCols"] = _six_sicd.ScopedCloneableImageData_numCols_get
    if _newclass:
        numCols = _swig_property(_six_sicd.ScopedCloneableImageData_numCols_get, _six_sicd.ScopedCloneableImageData_numCols_set)
    __swig_setmethods__["firstRow"] = _six_sicd.ScopedCloneableImageData_firstRow_set
    __swig_getmethods__["firstRow"] = _six_sicd.ScopedCloneableImageData_firstRow_get
    if _newclass:
        firstRow = _swig_property(_six_sicd.ScopedCloneableImageData_firstRow_get, _six_sicd.ScopedCloneableImageData_firstRow_set)
    __swig_setmethods__["firstCol"] = _six_sicd.ScopedCloneableImageData_firstCol_set
    __swig_getmethods__["firstCol"] = _six_sicd.ScopedCloneableImageData_firstCol_get
    if _newclass:
        firstCol = _swig_property(_six_sicd.ScopedCloneableImageData_firstCol_get, _six_sicd.ScopedCloneableImageData_firstCol_set)
    __swig_setmethods__["fullImage"] = _six_sicd.ScopedCloneableImageData_fullImage_set
    __swig_getmethods__["fullImage"] = _six_sicd.ScopedCloneableImageData_fullImage_get
    if _newclass:
        fullImage = _swig_property(_six_sicd.ScopedCloneableImageData_fullImage_get, _six_sicd.ScopedCloneableImageData_fullImage_set)
    __swig_setmethods__["scpPixel"] = _six_sicd.ScopedCloneableImageData_scpPixel_set
    __swig_getmethods__["scpPixel"] = _six_sicd.ScopedCloneableImageData_scpPixel_get
    if _newclass:
        scpPixel = _swig_property(_six_sicd.ScopedCloneableImageData_scpPixel_get, _six_sicd.ScopedCloneableImageData_scpPixel_set)
    __swig_setmethods__["validData"] = _six_sicd.ScopedCloneableImageData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ScopedCloneableImageData_validData_get
    if _newclass:
        validData = _swig_property(_six_sicd.ScopedCloneableImageData_validData_get, _six_sicd.ScopedCloneableImageData_validData_set)
ScopedCloneableImageData_swigregister = _six_sicd.ScopedCloneableImageData_swigregister
ScopedCloneableImageData_swigregister(ScopedCloneableImageData)

class ScopedCloneableGeoData(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::GeoData)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGeoData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoData)> self, GeoData ptr=None) -> ScopedCloneableGeoData
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoData)> self) -> ScopedCloneableGeoData
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoData)> self, ScopedCloneableGeoData rhs) -> ScopedCloneableGeoData
        """
        this = _six_sicd.new_ScopedCloneableGeoData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableGeoData self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableGeoData self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableGeoData self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableGeoData self, GeoData ptr=None)
        reset(ScopedCloneableGeoData self)
        """
        return _six_sicd.ScopedCloneableGeoData_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGeoData
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableGeoData self) -> GeoData"""
        return _six_sicd.ScopedCloneableGeoData_clone(self)

    __swig_setmethods__["earthModel"] = _six_sicd.ScopedCloneableGeoData_earthModel_set
    __swig_getmethods__["earthModel"] = _six_sicd.ScopedCloneableGeoData_earthModel_get
    if _newclass:
        earthModel = _swig_property(_six_sicd.ScopedCloneableGeoData_earthModel_get, _six_sicd.ScopedCloneableGeoData_earthModel_set)
    __swig_setmethods__["scp"] = _six_sicd.ScopedCloneableGeoData_scp_set
    __swig_getmethods__["scp"] = _six_sicd.ScopedCloneableGeoData_scp_get
    if _newclass:
        scp = _swig_property(_six_sicd.ScopedCloneableGeoData_scp_get, _six_sicd.ScopedCloneableGeoData_scp_set)
    __swig_setmethods__["imageCorners"] = _six_sicd.ScopedCloneableGeoData_imageCorners_set
    __swig_getmethods__["imageCorners"] = _six_sicd.ScopedCloneableGeoData_imageCorners_get
    if _newclass:
        imageCorners = _swig_property(_six_sicd.ScopedCloneableGeoData_imageCorners_get, _six_sicd.ScopedCloneableGeoData_imageCorners_set)
    __swig_setmethods__["validData"] = _six_sicd.ScopedCloneableGeoData_validData_set
    __swig_getmethods__["validData"] = _six_sicd.ScopedCloneableGeoData_validData_get
    if _newclass:
        validData = _swig_property(_six_sicd.ScopedCloneableGeoData_validData_get, _six_sicd.ScopedCloneableGeoData_validData_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoData_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoData_geoInfos_get
    if _newclass:
        geoInfos = _swig_property(_six_sicd.ScopedCloneableGeoData_geoInfos_get, _six_sicd.ScopedCloneableGeoData_geoInfos_set)
ScopedCloneableGeoData_swigregister = _six_sicd.ScopedCloneableGeoData_swigregister
ScopedCloneableGeoData_swigregister(ScopedCloneableGeoData)

class ScopedCloneableGrid(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::Grid)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGrid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::Grid)> self, Grid ptr=None) -> ScopedCloneableGrid
        __init__(mem::ScopedCloneablePtr<(six::sicd::Grid)> self) -> ScopedCloneableGrid
        __init__(mem::ScopedCloneablePtr<(six::sicd::Grid)> self, ScopedCloneableGrid rhs) -> ScopedCloneableGrid
        """
        this = _six_sicd.new_ScopedCloneableGrid(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableGrid self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableGrid self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableGrid self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableGrid self, Grid ptr=None)
        reset(ScopedCloneableGrid self)
        """
        return _six_sicd.ScopedCloneableGrid_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGrid
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableGrid self) -> Grid"""
        return _six_sicd.ScopedCloneableGrid_clone(self)

    __swig_setmethods__["imagePlane"] = _six_sicd.ScopedCloneableGrid_imagePlane_set
    __swig_getmethods__["imagePlane"] = _six_sicd.ScopedCloneableGrid_imagePlane_get
    if _newclass:
        imagePlane = _swig_property(_six_sicd.ScopedCloneableGrid_imagePlane_get, _six_sicd.ScopedCloneableGrid_imagePlane_set)
    __swig_setmethods__["type"] = _six_sicd.ScopedCloneableGrid_type_set
    __swig_getmethods__["type"] = _six_sicd.ScopedCloneableGrid_type_get
    if _newclass:
        type = _swig_property(_six_sicd.ScopedCloneableGrid_type_get, _six_sicd.ScopedCloneableGrid_type_set)
    __swig_setmethods__["timeCOAPoly"] = _six_sicd.ScopedCloneableGrid_timeCOAPoly_set
    __swig_getmethods__["timeCOAPoly"] = _six_sicd.ScopedCloneableGrid_timeCOAPoly_get
    if _newclass:
        timeCOAPoly = _swig_property(_six_sicd.ScopedCloneableGrid_timeCOAPoly_get, _six_sicd.ScopedCloneableGrid_timeCOAPoly_set)
    __swig_setmethods__["row"] = _six_sicd.ScopedCloneableGrid_row_set
    __swig_getmethods__["row"] = _six_sicd.ScopedCloneableGrid_row_get
    if _newclass:
        row = _swig_property(_six_sicd.ScopedCloneableGrid_row_get, _six_sicd.ScopedCloneableGrid_row_set)
    __swig_setmethods__["col"] = _six_sicd.ScopedCloneableGrid_col_set
    __swig_getmethods__["col"] = _six_sicd.ScopedCloneableGrid_col_get
    if _newclass:
        col = _swig_property(_six_sicd.ScopedCloneableGrid_col_get, _six_sicd.ScopedCloneableGrid_col_set)
ScopedCloneableGrid_swigregister = _six_sicd.ScopedCloneableGrid_swigregister
ScopedCloneableGrid_swigregister(ScopedCloneableGrid)

class ScopedCloneableTimeline(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::Timeline)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableTimeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableTimeline, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::Timeline)> self, Timeline ptr=None) -> ScopedCloneableTimeline
        __init__(mem::ScopedCloneablePtr<(six::sicd::Timeline)> self) -> ScopedCloneableTimeline
        __init__(mem::ScopedCloneablePtr<(six::sicd::Timeline)> self, ScopedCloneableTimeline rhs) -> ScopedCloneableTimeline
        """
        this = _six_sicd.new_ScopedCloneableTimeline(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableTimeline self) -> Timeline"""
        return _six_sicd.ScopedCloneableTimeline_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableTimeline self) -> Timeline"""
        return _six_sicd.ScopedCloneableTimeline___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableTimeline self) -> Timeline"""
        return _six_sicd.ScopedCloneableTimeline___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableTimeline self, Timeline ptr=None)
        reset(ScopedCloneableTimeline self)
        """
        return _six_sicd.ScopedCloneableTimeline_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableTimeline
    __del__ = lambda self: None
    __swig_setmethods__["collectStart"] = _six_sicd.ScopedCloneableTimeline_collectStart_set
    __swig_getmethods__["collectStart"] = _six_sicd.ScopedCloneableTimeline_collectStart_get
    if _newclass:
        collectStart = _swig_property(_six_sicd.ScopedCloneableTimeline_collectStart_get, _six_sicd.ScopedCloneableTimeline_collectStart_set)
    __swig_setmethods__["collectDuration"] = _six_sicd.ScopedCloneableTimeline_collectDuration_set
    __swig_getmethods__["collectDuration"] = _six_sicd.ScopedCloneableTimeline_collectDuration_get
    if _newclass:
        collectDuration = _swig_property(_six_sicd.ScopedCloneableTimeline_collectDuration_get, _six_sicd.ScopedCloneableTimeline_collectDuration_set)
    __swig_setmethods__["interPulsePeriod"] = _six_sicd.ScopedCloneableTimeline_interPulsePeriod_set
    __swig_getmethods__["interPulsePeriod"] = _six_sicd.ScopedCloneableTimeline_interPulsePeriod_get
    if _newclass:
        interPulsePeriod = _swig_property(_six_sicd.ScopedCloneableTimeline_interPulsePeriod_get, _six_sicd.ScopedCloneableTimeline_interPulsePeriod_set)

    def clone(self):
        """clone(ScopedCloneableTimeline self) -> Timeline"""
        return _six_sicd.ScopedCloneableTimeline_clone(self)

ScopedCloneableTimeline_swigregister = _six_sicd.ScopedCloneableTimeline_swigregister
ScopedCloneableTimeline_swigregister(ScopedCloneableTimeline)

class ScopedCloneablePosition(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::Position)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneablePosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneablePosition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::Position)> self, Position ptr=None) -> ScopedCloneablePosition
        __init__(mem::ScopedCloneablePtr<(six::sicd::Position)> self) -> ScopedCloneablePosition
        __init__(mem::ScopedCloneablePtr<(six::sicd::Position)> self, ScopedCloneablePosition rhs) -> ScopedCloneablePosition
        """
        this = _six_sicd.new_ScopedCloneablePosition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneablePosition self) -> Position"""
        return _six_sicd.ScopedCloneablePosition_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneablePosition self) -> Position"""
        return _six_sicd.ScopedCloneablePosition___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneablePosition self) -> Position"""
        return _six_sicd.ScopedCloneablePosition___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneablePosition self, Position ptr=None)
        reset(ScopedCloneablePosition self)
        """
        return _six_sicd.ScopedCloneablePosition_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneablePosition
    __del__ = lambda self: None
    __swig_setmethods__["arpPoly"] = _six_sicd.ScopedCloneablePosition_arpPoly_set
    __swig_getmethods__["arpPoly"] = _six_sicd.ScopedCloneablePosition_arpPoly_get
    if _newclass:
        arpPoly = _swig_property(_six_sicd.ScopedCloneablePosition_arpPoly_get, _six_sicd.ScopedCloneablePosition_arpPoly_set)
    __swig_setmethods__["grpPoly"] = _six_sicd.ScopedCloneablePosition_grpPoly_set
    __swig_getmethods__["grpPoly"] = _six_sicd.ScopedCloneablePosition_grpPoly_get
    if _newclass:
        grpPoly = _swig_property(_six_sicd.ScopedCloneablePosition_grpPoly_get, _six_sicd.ScopedCloneablePosition_grpPoly_set)
    __swig_setmethods__["txAPCPoly"] = _six_sicd.ScopedCloneablePosition_txAPCPoly_set
    __swig_getmethods__["txAPCPoly"] = _six_sicd.ScopedCloneablePosition_txAPCPoly_get
    if _newclass:
        txAPCPoly = _swig_property(_six_sicd.ScopedCloneablePosition_txAPCPoly_get, _six_sicd.ScopedCloneablePosition_txAPCPoly_set)
    __swig_setmethods__["rcvAPC"] = _six_sicd.ScopedCloneablePosition_rcvAPC_set
    __swig_getmethods__["rcvAPC"] = _six_sicd.ScopedCloneablePosition_rcvAPC_get
    if _newclass:
        rcvAPC = _swig_property(_six_sicd.ScopedCloneablePosition_rcvAPC_get, _six_sicd.ScopedCloneablePosition_rcvAPC_set)

    def clone(self):
        """clone(ScopedCloneablePosition self) -> Position"""
        return _six_sicd.ScopedCloneablePosition_clone(self)

ScopedCloneablePosition_swigregister = _six_sicd.ScopedCloneablePosition_swigregister
ScopedCloneablePosition_swigregister(ScopedCloneablePosition)

class ScopedCloneableRadarCollection(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::RadarCollection)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableRadarCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableRadarCollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::RadarCollection)> self, RadarCollection ptr=None) -> ScopedCloneableRadarCollection
        __init__(mem::ScopedCloneablePtr<(six::sicd::RadarCollection)> self) -> ScopedCloneableRadarCollection
        __init__(mem::ScopedCloneablePtr<(six::sicd::RadarCollection)> self, ScopedCloneableRadarCollection rhs) -> ScopedCloneableRadarCollection
        """
        this = _six_sicd.new_ScopedCloneableRadarCollection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableRadarCollection self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableRadarCollection self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableRadarCollection self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableRadarCollection self, RadarCollection ptr=None)
        reset(ScopedCloneableRadarCollection self)
        """
        return _six_sicd.ScopedCloneableRadarCollection_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableRadarCollection
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableRadarCollection self) -> RadarCollection"""
        return _six_sicd.ScopedCloneableRadarCollection_clone(self)

    __swig_setmethods__["refFrequencyIndex"] = _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_set
    __swig_getmethods__["refFrequencyIndex"] = _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_get
    if _newclass:
        refFrequencyIndex = _swig_property(_six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_get, _six_sicd.ScopedCloneableRadarCollection_refFrequencyIndex_set)
    __swig_setmethods__["txFrequencyMin"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_set
    __swig_getmethods__["txFrequencyMin"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_get
    if _newclass:
        txFrequencyMin = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_get, _six_sicd.ScopedCloneableRadarCollection_txFrequencyMin_set)
    __swig_setmethods__["txFrequencyMax"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_set
    __swig_getmethods__["txFrequencyMax"] = _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_get
    if _newclass:
        txFrequencyMax = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_get, _six_sicd.ScopedCloneableRadarCollection_txFrequencyMax_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.ScopedCloneableRadarCollection_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.ScopedCloneableRadarCollection_txPolarization_get
    if _newclass:
        txPolarization = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txPolarization_get, _six_sicd.ScopedCloneableRadarCollection_txPolarization_set)
    __swig_setmethods__["polarizationHVAnglePoly"] = _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_set
    __swig_getmethods__["polarizationHVAnglePoly"] = _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_get
    if _newclass:
        polarizationHVAnglePoly = _swig_property(_six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_get, _six_sicd.ScopedCloneableRadarCollection_polarizationHVAnglePoly_set)
    __swig_setmethods__["txSequence"] = _six_sicd.ScopedCloneableRadarCollection_txSequence_set
    __swig_getmethods__["txSequence"] = _six_sicd.ScopedCloneableRadarCollection_txSequence_get
    if _newclass:
        txSequence = _swig_property(_six_sicd.ScopedCloneableRadarCollection_txSequence_get, _six_sicd.ScopedCloneableRadarCollection_txSequence_set)
    __swig_setmethods__["waveform"] = _six_sicd.ScopedCloneableRadarCollection_waveform_set
    __swig_getmethods__["waveform"] = _six_sicd.ScopedCloneableRadarCollection_waveform_get
    if _newclass:
        waveform = _swig_property(_six_sicd.ScopedCloneableRadarCollection_waveform_get, _six_sicd.ScopedCloneableRadarCollection_waveform_set)
    __swig_setmethods__["rcvChannels"] = _six_sicd.ScopedCloneableRadarCollection_rcvChannels_set
    __swig_getmethods__["rcvChannels"] = _six_sicd.ScopedCloneableRadarCollection_rcvChannels_get
    if _newclass:
        rcvChannels = _swig_property(_six_sicd.ScopedCloneableRadarCollection_rcvChannels_get, _six_sicd.ScopedCloneableRadarCollection_rcvChannels_set)
    __swig_setmethods__["area"] = _six_sicd.ScopedCloneableRadarCollection_area_set
    __swig_getmethods__["area"] = _six_sicd.ScopedCloneableRadarCollection_area_get
    if _newclass:
        area = _swig_property(_six_sicd.ScopedCloneableRadarCollection_area_get, _six_sicd.ScopedCloneableRadarCollection_area_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCloneableRadarCollection_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCloneableRadarCollection_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.ScopedCloneableRadarCollection_parameters_get, _six_sicd.ScopedCloneableRadarCollection_parameters_set)
ScopedCloneableRadarCollection_swigregister = _six_sicd.ScopedCloneableRadarCollection_swigregister
ScopedCloneableRadarCollection_swigregister(ScopedCloneableRadarCollection)

class ScopedCopyableImageFormation(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::ImageFormation)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableImageFormation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableImageFormation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageFormation)> self, ImageFormation ptr=None) -> ScopedCopyableImageFormation
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageFormation)> self) -> ScopedCopyableImageFormation
        __init__(mem::ScopedCopyablePtr<(six::sicd::ImageFormation)> self, ScopedCopyableImageFormation rhs) -> ScopedCopyableImageFormation
        """
        this = _six_sicd.new_ScopedCopyableImageFormation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableImageFormation self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableImageFormation self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableImageFormation self) -> ImageFormation"""
        return _six_sicd.ScopedCopyableImageFormation___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableImageFormation self, ImageFormation ptr=None)
        reset(ScopedCopyableImageFormation self)
        """
        return _six_sicd.ScopedCopyableImageFormation_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableImageFormation
    __del__ = lambda self: None
    __swig_setmethods__["segmentIdentifier"] = _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_set
    __swig_getmethods__["segmentIdentifier"] = _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_get
    if _newclass:
        segmentIdentifier = _swig_property(_six_sicd.ScopedCopyableImageFormation_segmentIdentifier_get, _six_sicd.ScopedCopyableImageFormation_segmentIdentifier_set)
    __swig_setmethods__["rcvChannelProcessed"] = _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_set
    __swig_getmethods__["rcvChannelProcessed"] = _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_get
    if _newclass:
        rcvChannelProcessed = _swig_property(_six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_get, _six_sicd.ScopedCopyableImageFormation_rcvChannelProcessed_set)
    __swig_setmethods__["txRcvPolarizationProc"] = _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_set
    __swig_getmethods__["txRcvPolarizationProc"] = _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_get
    if _newclass:
        txRcvPolarizationProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_get, _six_sicd.ScopedCopyableImageFormation_txRcvPolarizationProc_set)
    __swig_setmethods__["imageFormationAlgorithm"] = _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_set
    __swig_getmethods__["imageFormationAlgorithm"] = _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_get
    if _newclass:
        imageFormationAlgorithm = _swig_property(_six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_get, _six_sicd.ScopedCopyableImageFormation_imageFormationAlgorithm_set)
    __swig_setmethods__["tStartProc"] = _six_sicd.ScopedCopyableImageFormation_tStartProc_set
    __swig_getmethods__["tStartProc"] = _six_sicd.ScopedCopyableImageFormation_tStartProc_get
    if _newclass:
        tStartProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_tStartProc_get, _six_sicd.ScopedCopyableImageFormation_tStartProc_set)
    __swig_setmethods__["tEndProc"] = _six_sicd.ScopedCopyableImageFormation_tEndProc_set
    __swig_getmethods__["tEndProc"] = _six_sicd.ScopedCopyableImageFormation_tEndProc_get
    if _newclass:
        tEndProc = _swig_property(_six_sicd.ScopedCopyableImageFormation_tEndProc_get, _six_sicd.ScopedCopyableImageFormation_tEndProc_set)
    __swig_setmethods__["txFrequencyProcMin"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_set
    __swig_getmethods__["txFrequencyProcMin"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_get
    if _newclass:
        txFrequencyProcMin = _swig_property(_six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_get, _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMin_set)
    __swig_setmethods__["txFrequencyProcMax"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_set
    __swig_getmethods__["txFrequencyProcMax"] = _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_get
    if _newclass:
        txFrequencyProcMax = _swig_property(_six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_get, _six_sicd.ScopedCopyableImageFormation_txFrequencyProcMax_set)
    __swig_setmethods__["slowTimeBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_set
    __swig_getmethods__["slowTimeBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_get
    if _newclass:
        slowTimeBeamCompensation = _swig_property(_six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_get, _six_sicd.ScopedCopyableImageFormation_slowTimeBeamCompensation_set)
    __swig_setmethods__["imageBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_set
    __swig_getmethods__["imageBeamCompensation"] = _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_get
    if _newclass:
        imageBeamCompensation = _swig_property(_six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_get, _six_sicd.ScopedCopyableImageFormation_imageBeamCompensation_set)
    __swig_setmethods__["azimuthAutofocus"] = _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_set
    __swig_getmethods__["azimuthAutofocus"] = _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_get
    if _newclass:
        azimuthAutofocus = _swig_property(_six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_get, _six_sicd.ScopedCopyableImageFormation_azimuthAutofocus_set)
    __swig_setmethods__["rangeAutofocus"] = _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_set
    __swig_getmethods__["rangeAutofocus"] = _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_get
    if _newclass:
        rangeAutofocus = _swig_property(_six_sicd.ScopedCopyableImageFormation_rangeAutofocus_get, _six_sicd.ScopedCopyableImageFormation_rangeAutofocus_set)
    __swig_setmethods__["processing"] = _six_sicd.ScopedCopyableImageFormation_processing_set
    __swig_getmethods__["processing"] = _six_sicd.ScopedCopyableImageFormation_processing_get
    if _newclass:
        processing = _swig_property(_six_sicd.ScopedCopyableImageFormation_processing_get, _six_sicd.ScopedCopyableImageFormation_processing_set)
    __swig_setmethods__["polarizationCalibration"] = _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_set
    __swig_getmethods__["polarizationCalibration"] = _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_get
    if _newclass:
        polarizationCalibration = _swig_property(_six_sicd.ScopedCopyableImageFormation_polarizationCalibration_get, _six_sicd.ScopedCopyableImageFormation_polarizationCalibration_set)
ScopedCopyableImageFormation_swigregister = _six_sicd.ScopedCopyableImageFormation_swigregister
ScopedCopyableImageFormation_swigregister(ScopedCopyableImageFormation)

class ScopedCopyableSCPCOA(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::SCPCOA)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableSCPCOA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableSCPCOA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::SCPCOA)> self, SCPCOA ptr=None) -> ScopedCopyableSCPCOA
        __init__(mem::ScopedCopyablePtr<(six::sicd::SCPCOA)> self) -> ScopedCopyableSCPCOA
        __init__(mem::ScopedCopyablePtr<(six::sicd::SCPCOA)> self, ScopedCopyableSCPCOA rhs) -> ScopedCopyableSCPCOA
        """
        this = _six_sicd.new_ScopedCopyableSCPCOA(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableSCPCOA self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableSCPCOA self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableSCPCOA self) -> SCPCOA"""
        return _six_sicd.ScopedCopyableSCPCOA___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableSCPCOA self, SCPCOA ptr=None)
        reset(ScopedCopyableSCPCOA self)
        """
        return _six_sicd.ScopedCopyableSCPCOA_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableSCPCOA
    __del__ = lambda self: None
    __swig_setmethods__["scpTime"] = _six_sicd.ScopedCopyableSCPCOA_scpTime_set
    __swig_getmethods__["scpTime"] = _six_sicd.ScopedCopyableSCPCOA_scpTime_get
    if _newclass:
        scpTime = _swig_property(_six_sicd.ScopedCopyableSCPCOA_scpTime_get, _six_sicd.ScopedCopyableSCPCOA_scpTime_set)
    __swig_setmethods__["arpPos"] = _six_sicd.ScopedCopyableSCPCOA_arpPos_set
    __swig_getmethods__["arpPos"] = _six_sicd.ScopedCopyableSCPCOA_arpPos_get
    if _newclass:
        arpPos = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpPos_get, _six_sicd.ScopedCopyableSCPCOA_arpPos_set)
    __swig_setmethods__["arpVel"] = _six_sicd.ScopedCopyableSCPCOA_arpVel_set
    __swig_getmethods__["arpVel"] = _six_sicd.ScopedCopyableSCPCOA_arpVel_get
    if _newclass:
        arpVel = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpVel_get, _six_sicd.ScopedCopyableSCPCOA_arpVel_set)
    __swig_setmethods__["arpAcc"] = _six_sicd.ScopedCopyableSCPCOA_arpAcc_set
    __swig_getmethods__["arpAcc"] = _six_sicd.ScopedCopyableSCPCOA_arpAcc_get
    if _newclass:
        arpAcc = _swig_property(_six_sicd.ScopedCopyableSCPCOA_arpAcc_get, _six_sicd.ScopedCopyableSCPCOA_arpAcc_set)
    __swig_setmethods__["sideOfTrack"] = _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_get
    if _newclass:
        sideOfTrack = _swig_property(_six_sicd.ScopedCopyableSCPCOA_sideOfTrack_get, _six_sicd.ScopedCopyableSCPCOA_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _six_sicd.ScopedCopyableSCPCOA_slantRange_set
    __swig_getmethods__["slantRange"] = _six_sicd.ScopedCopyableSCPCOA_slantRange_get
    if _newclass:
        slantRange = _swig_property(_six_sicd.ScopedCopyableSCPCOA_slantRange_get, _six_sicd.ScopedCopyableSCPCOA_slantRange_set)
    __swig_setmethods__["groundRange"] = _six_sicd.ScopedCopyableSCPCOA_groundRange_set
    __swig_getmethods__["groundRange"] = _six_sicd.ScopedCopyableSCPCOA_groundRange_get
    if _newclass:
        groundRange = _swig_property(_six_sicd.ScopedCopyableSCPCOA_groundRange_get, _six_sicd.ScopedCopyableSCPCOA_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_get
    if _newclass:
        dopplerConeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_get, _six_sicd.ScopedCopyableSCPCOA_dopplerConeAngle_set)
    __swig_setmethods__["grazeAngle"] = _six_sicd.ScopedCopyableSCPCOA_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _six_sicd.ScopedCopyableSCPCOA_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_grazeAngle_get, _six_sicd.ScopedCopyableSCPCOA_grazeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_get
    if _newclass:
        incidenceAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_incidenceAngle_get, _six_sicd.ScopedCopyableSCPCOA_incidenceAngle_set)
    __swig_setmethods__["twistAngle"] = _six_sicd.ScopedCopyableSCPCOA_twistAngle_set
    __swig_getmethods__["twistAngle"] = _six_sicd.ScopedCopyableSCPCOA_twistAngle_get
    if _newclass:
        twistAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_twistAngle_get, _six_sicd.ScopedCopyableSCPCOA_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _six_sicd.ScopedCopyableSCPCOA_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _six_sicd.ScopedCopyableSCPCOA_slopeAngle_get
    if _newclass:
        slopeAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_slopeAngle_get, _six_sicd.ScopedCopyableSCPCOA_slopeAngle_set)
    __swig_setmethods__["azimAngle"] = _six_sicd.ScopedCopyableSCPCOA_azimAngle_set
    __swig_getmethods__["azimAngle"] = _six_sicd.ScopedCopyableSCPCOA_azimAngle_get
    if _newclass:
        azimAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_azimAngle_get, _six_sicd.ScopedCopyableSCPCOA_azimAngle_set)
    __swig_setmethods__["layoverAngle"] = _six_sicd.ScopedCopyableSCPCOA_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _six_sicd.ScopedCopyableSCPCOA_layoverAngle_get
    if _newclass:
        layoverAngle = _swig_property(_six_sicd.ScopedCopyableSCPCOA_layoverAngle_get, _six_sicd.ScopedCopyableSCPCOA_layoverAngle_set)
ScopedCopyableSCPCOA_swigregister = _six_sicd.ScopedCopyableSCPCOA_swigregister
ScopedCopyableSCPCOA_swigregister(ScopedCopyableSCPCOA)

class ScopedCopyableRadiometric(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::Radiometric)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRadiometric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRadiometric, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::Radiometric)> self, Radiometric ptr=None) -> ScopedCopyableRadiometric
        __init__(mem::ScopedCopyablePtr<(six::Radiometric)> self) -> ScopedCopyableRadiometric
        __init__(mem::ScopedCopyablePtr<(six::Radiometric)> self, ScopedCopyableRadiometric rhs) -> ScopedCopyableRadiometric
        """
        this = _six_sicd.new_ScopedCopyableRadiometric(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableRadiometric self) -> Radiometric"""
        return _six_sicd.ScopedCopyableRadiometric_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRadiometric self) -> Radiometric"""
        return _six_sicd.ScopedCopyableRadiometric___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRadiometric self) -> Radiometric"""
        return _six_sicd.ScopedCopyableRadiometric___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRadiometric self, Radiometric ptr=None)
        reset(ScopedCopyableRadiometric self)
        """
        return _six_sicd.ScopedCopyableRadiometric_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRadiometric
    __del__ = lambda self: None
    __swig_getmethods__["NL_ABSOLUTE"] = _six_sicd.ScopedCopyableRadiometric_NL_ABSOLUTE_get
    if _newclass:
        NL_ABSOLUTE = _swig_property(_six_sicd.ScopedCopyableRadiometric_NL_ABSOLUTE_get)
    __swig_getmethods__["NL_RELATIVE"] = _six_sicd.ScopedCopyableRadiometric_NL_RELATIVE_get
    if _newclass:
        NL_RELATIVE = _swig_property(_six_sicd.ScopedCopyableRadiometric_NL_RELATIVE_get)
    __swig_setmethods__["noiseLevel"] = _six_sicd.ScopedCopyableRadiometric_noiseLevel_set
    __swig_getmethods__["noiseLevel"] = _six_sicd.ScopedCopyableRadiometric_noiseLevel_get
    if _newclass:
        noiseLevel = _swig_property(_six_sicd.ScopedCopyableRadiometric_noiseLevel_get, _six_sicd.ScopedCopyableRadiometric_noiseLevel_set)
    __swig_setmethods__["rcsSFPoly"] = _six_sicd.ScopedCopyableRadiometric_rcsSFPoly_set
    __swig_getmethods__["rcsSFPoly"] = _six_sicd.ScopedCopyableRadiometric_rcsSFPoly_get
    if _newclass:
        rcsSFPoly = _swig_property(_six_sicd.ScopedCopyableRadiometric_rcsSFPoly_get, _six_sicd.ScopedCopyableRadiometric_rcsSFPoly_set)
    __swig_setmethods__["betaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_betaZeroSFPoly_set
    __swig_getmethods__["betaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_betaZeroSFPoly_get
    if _newclass:
        betaZeroSFPoly = _swig_property(_six_sicd.ScopedCopyableRadiometric_betaZeroSFPoly_get, _six_sicd.ScopedCopyableRadiometric_betaZeroSFPoly_set)
    __swig_setmethods__["sigmaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFPoly_set
    __swig_getmethods__["sigmaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFPoly_get
    if _newclass:
        sigmaZeroSFPoly = _swig_property(_six_sicd.ScopedCopyableRadiometric_sigmaZeroSFPoly_get, _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFPoly_set)
    __swig_setmethods__["sigmaZeroSFIncidenceMap"] = _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set
    __swig_getmethods__["sigmaZeroSFIncidenceMap"] = _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get
    if _newclass:
        sigmaZeroSFIncidenceMap = _swig_property(_six_sicd.ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_get, _six_sicd.ScopedCopyableRadiometric_sigmaZeroSFIncidenceMap_set)
    __swig_setmethods__["gammaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_gammaZeroSFPoly_set
    __swig_getmethods__["gammaZeroSFPoly"] = _six_sicd.ScopedCopyableRadiometric_gammaZeroSFPoly_get
    if _newclass:
        gammaZeroSFPoly = _swig_property(_six_sicd.ScopedCopyableRadiometric_gammaZeroSFPoly_get, _six_sicd.ScopedCopyableRadiometric_gammaZeroSFPoly_set)
    __swig_setmethods__["gammaZeroSFIncidenceMap"] = _six_sicd.ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set
    __swig_getmethods__["gammaZeroSFIncidenceMap"] = _six_sicd.ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get
    if _newclass:
        gammaZeroSFIncidenceMap = _swig_property(_six_sicd.ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_get, _six_sicd.ScopedCopyableRadiometric_gammaZeroSFIncidenceMap_set)
ScopedCopyableRadiometric_swigregister = _six_sicd.ScopedCopyableRadiometric_swigregister
ScopedCopyableRadiometric_swigregister(ScopedCopyableRadiometric)

class ScopedCopyableAntenna(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::Antenna)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableAntenna, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::Antenna)> self, Antenna ptr=None) -> ScopedCopyableAntenna
        __init__(mem::ScopedCopyablePtr<(six::sicd::Antenna)> self) -> ScopedCopyableAntenna
        __init__(mem::ScopedCopyablePtr<(six::sicd::Antenna)> self, ScopedCopyableAntenna rhs) -> ScopedCopyableAntenna
        """
        this = _six_sicd.new_ScopedCopyableAntenna(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableAntenna self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableAntenna self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableAntenna self) -> Antenna"""
        return _six_sicd.ScopedCopyableAntenna___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableAntenna self, Antenna ptr=None)
        reset(ScopedCopyableAntenna self)
        """
        return _six_sicd.ScopedCopyableAntenna_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableAntenna
    __del__ = lambda self: None
    __swig_setmethods__["tx"] = _six_sicd.ScopedCopyableAntenna_tx_set
    __swig_getmethods__["tx"] = _six_sicd.ScopedCopyableAntenna_tx_get
    if _newclass:
        tx = _swig_property(_six_sicd.ScopedCopyableAntenna_tx_get, _six_sicd.ScopedCopyableAntenna_tx_set)
    __swig_setmethods__["rcv"] = _six_sicd.ScopedCopyableAntenna_rcv_set
    __swig_getmethods__["rcv"] = _six_sicd.ScopedCopyableAntenna_rcv_get
    if _newclass:
        rcv = _swig_property(_six_sicd.ScopedCopyableAntenna_rcv_get, _six_sicd.ScopedCopyableAntenna_rcv_set)
    __swig_setmethods__["twoWay"] = _six_sicd.ScopedCopyableAntenna_twoWay_set
    __swig_getmethods__["twoWay"] = _six_sicd.ScopedCopyableAntenna_twoWay_get
    if _newclass:
        twoWay = _swig_property(_six_sicd.ScopedCopyableAntenna_twoWay_get, _six_sicd.ScopedCopyableAntenna_twoWay_set)
ScopedCopyableAntenna_swigregister = _six_sicd.ScopedCopyableAntenna_swigregister
ScopedCopyableAntenna_swigregister(ScopedCopyableAntenna)

class ScopedCopyableErrorStatistics(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::ErrorStatistics)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableErrorStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableErrorStatistics, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::ErrorStatistics)> self, ErrorStatistics ptr=None) -> ScopedCopyableErrorStatistics
        __init__(mem::ScopedCopyablePtr<(six::ErrorStatistics)> self) -> ScopedCopyableErrorStatistics
        __init__(mem::ScopedCopyablePtr<(six::ErrorStatistics)> self, ScopedCopyableErrorStatistics rhs) -> ScopedCopyableErrorStatistics
        """
        this = _six_sicd.new_ScopedCopyableErrorStatistics(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableErrorStatistics self) -> ErrorStatistics"""
        return _six_sicd.ScopedCopyableErrorStatistics_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableErrorStatistics self) -> ErrorStatistics"""
        return _six_sicd.ScopedCopyableErrorStatistics___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableErrorStatistics self) -> ErrorStatistics"""
        return _six_sicd.ScopedCopyableErrorStatistics___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableErrorStatistics self, ErrorStatistics ptr=None)
        reset(ScopedCopyableErrorStatistics self)
        """
        return _six_sicd.ScopedCopyableErrorStatistics_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableErrorStatistics
    __del__ = lambda self: None
    __swig_setmethods__["compositeSCP"] = _six_sicd.ScopedCopyableErrorStatistics_compositeSCP_set
    __swig_getmethods__["compositeSCP"] = _six_sicd.ScopedCopyableErrorStatistics_compositeSCP_get
    if _newclass:
        compositeSCP = _swig_property(_six_sicd.ScopedCopyableErrorStatistics_compositeSCP_get, _six_sicd.ScopedCopyableErrorStatistics_compositeSCP_set)
    __swig_setmethods__["components"] = _six_sicd.ScopedCopyableErrorStatistics_components_set
    __swig_getmethods__["components"] = _six_sicd.ScopedCopyableErrorStatistics_components_get
    if _newclass:
        components = _swig_property(_six_sicd.ScopedCopyableErrorStatistics_components_get, _six_sicd.ScopedCopyableErrorStatistics_components_set)
    __swig_setmethods__["additionalParameters"] = _six_sicd.ScopedCopyableErrorStatistics_additionalParameters_set
    __swig_getmethods__["additionalParameters"] = _six_sicd.ScopedCopyableErrorStatistics_additionalParameters_get
    if _newclass:
        additionalParameters = _swig_property(_six_sicd.ScopedCopyableErrorStatistics_additionalParameters_get, _six_sicd.ScopedCopyableErrorStatistics_additionalParameters_set)
ScopedCopyableErrorStatistics_swigregister = _six_sicd.ScopedCopyableErrorStatistics_swigregister
ScopedCopyableErrorStatistics_swigregister(ScopedCopyableErrorStatistics)

class ScopedCopyableMatchInformation(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::MatchInformation)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableMatchInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableMatchInformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchInformation)> self, MatchInformation ptr=None) -> ScopedCopyableMatchInformation
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchInformation)> self) -> ScopedCopyableMatchInformation
        __init__(mem::ScopedCopyablePtr<(six::sicd::MatchInformation)> self, ScopedCopyableMatchInformation rhs) -> ScopedCopyableMatchInformation
        """
        this = _six_sicd.new_ScopedCopyableMatchInformation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableMatchInformation self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableMatchInformation self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableMatchInformation self) -> MatchInformation"""
        return _six_sicd.ScopedCopyableMatchInformation___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableMatchInformation self, MatchInformation ptr=None)
        reset(ScopedCopyableMatchInformation self)
        """
        return _six_sicd.ScopedCopyableMatchInformation_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableMatchInformation
    __del__ = lambda self: None
    __swig_setmethods__["types"] = _six_sicd.ScopedCopyableMatchInformation_types_set
    __swig_getmethods__["types"] = _six_sicd.ScopedCopyableMatchInformation_types_get
    if _newclass:
        types = _swig_property(_six_sicd.ScopedCopyableMatchInformation_types_get, _six_sicd.ScopedCopyableMatchInformation_types_set)
ScopedCopyableMatchInformation_swigregister = _six_sicd.ScopedCopyableMatchInformation_swigregister
ScopedCopyableMatchInformation_swigregister(ScopedCopyableMatchInformation)

class ScopedCloneablePFA(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::PFA)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneablePFA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneablePFA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::PFA)> self, PFA ptr=None) -> ScopedCloneablePFA
        __init__(mem::ScopedCloneablePtr<(six::sicd::PFA)> self) -> ScopedCloneablePFA
        __init__(mem::ScopedCloneablePtr<(six::sicd::PFA)> self, ScopedCloneablePFA rhs) -> ScopedCloneablePFA
        """
        this = _six_sicd.new_ScopedCloneablePFA(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneablePFA self) -> PFA"""
        return _six_sicd.ScopedCloneablePFA_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneablePFA self) -> PFA"""
        return _six_sicd.ScopedCloneablePFA___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneablePFA self) -> PFA"""
        return _six_sicd.ScopedCloneablePFA___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneablePFA self, PFA ptr=None)
        reset(ScopedCloneablePFA self)
        """
        return _six_sicd.ScopedCloneablePFA_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneablePFA
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneablePFA self) -> PFA"""
        return _six_sicd.ScopedCloneablePFA_clone(self)

    __swig_setmethods__["focusPlaneNormal"] = _six_sicd.ScopedCloneablePFA_focusPlaneNormal_set
    __swig_getmethods__["focusPlaneNormal"] = _six_sicd.ScopedCloneablePFA_focusPlaneNormal_get
    if _newclass:
        focusPlaneNormal = _swig_property(_six_sicd.ScopedCloneablePFA_focusPlaneNormal_get, _six_sicd.ScopedCloneablePFA_focusPlaneNormal_set)
    __swig_setmethods__["imagePlaneNormal"] = _six_sicd.ScopedCloneablePFA_imagePlaneNormal_set
    __swig_getmethods__["imagePlaneNormal"] = _six_sicd.ScopedCloneablePFA_imagePlaneNormal_get
    if _newclass:
        imagePlaneNormal = _swig_property(_six_sicd.ScopedCloneablePFA_imagePlaneNormal_get, _six_sicd.ScopedCloneablePFA_imagePlaneNormal_set)
    __swig_setmethods__["polarAngleRefTime"] = _six_sicd.ScopedCloneablePFA_polarAngleRefTime_set
    __swig_getmethods__["polarAngleRefTime"] = _six_sicd.ScopedCloneablePFA_polarAngleRefTime_get
    if _newclass:
        polarAngleRefTime = _swig_property(_six_sicd.ScopedCloneablePFA_polarAngleRefTime_get, _six_sicd.ScopedCloneablePFA_polarAngleRefTime_set)
    __swig_setmethods__["polarAnglePoly"] = _six_sicd.ScopedCloneablePFA_polarAnglePoly_set
    __swig_getmethods__["polarAnglePoly"] = _six_sicd.ScopedCloneablePFA_polarAnglePoly_get
    if _newclass:
        polarAnglePoly = _swig_property(_six_sicd.ScopedCloneablePFA_polarAnglePoly_get, _six_sicd.ScopedCloneablePFA_polarAnglePoly_set)
    __swig_setmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set
    __swig_getmethods__["spatialFrequencyScaleFactorPoly"] = _six_sicd.ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get
    if _newclass:
        spatialFrequencyScaleFactorPoly = _swig_property(_six_sicd.ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_get, _six_sicd.ScopedCloneablePFA_spatialFrequencyScaleFactorPoly_set)
    __swig_setmethods__["krg1"] = _six_sicd.ScopedCloneablePFA_krg1_set
    __swig_getmethods__["krg1"] = _six_sicd.ScopedCloneablePFA_krg1_get
    if _newclass:
        krg1 = _swig_property(_six_sicd.ScopedCloneablePFA_krg1_get, _six_sicd.ScopedCloneablePFA_krg1_set)
    __swig_setmethods__["krg2"] = _six_sicd.ScopedCloneablePFA_krg2_set
    __swig_getmethods__["krg2"] = _six_sicd.ScopedCloneablePFA_krg2_get
    if _newclass:
        krg2 = _swig_property(_six_sicd.ScopedCloneablePFA_krg2_get, _six_sicd.ScopedCloneablePFA_krg2_set)
    __swig_setmethods__["kaz1"] = _six_sicd.ScopedCloneablePFA_kaz1_set
    __swig_getmethods__["kaz1"] = _six_sicd.ScopedCloneablePFA_kaz1_get
    if _newclass:
        kaz1 = _swig_property(_six_sicd.ScopedCloneablePFA_kaz1_get, _six_sicd.ScopedCloneablePFA_kaz1_set)
    __swig_setmethods__["kaz2"] = _six_sicd.ScopedCloneablePFA_kaz2_set
    __swig_getmethods__["kaz2"] = _six_sicd.ScopedCloneablePFA_kaz2_get
    if _newclass:
        kaz2 = _swig_property(_six_sicd.ScopedCloneablePFA_kaz2_get, _six_sicd.ScopedCloneablePFA_kaz2_set)
    __swig_setmethods__["slowTimeDeskew"] = _six_sicd.ScopedCloneablePFA_slowTimeDeskew_set
    __swig_getmethods__["slowTimeDeskew"] = _six_sicd.ScopedCloneablePFA_slowTimeDeskew_get
    if _newclass:
        slowTimeDeskew = _swig_property(_six_sicd.ScopedCloneablePFA_slowTimeDeskew_get, _six_sicd.ScopedCloneablePFA_slowTimeDeskew_set)
ScopedCloneablePFA_swigregister = _six_sicd.ScopedCloneablePFA_swigregister
ScopedCloneablePFA_swigregister(ScopedCloneablePFA)

class ScopedCopyableRMA(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RMA)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMA)> self, RMA ptr=None) -> ScopedCopyableRMA
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMA)> self) -> ScopedCopyableRMA
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMA)> self, ScopedCopyableRMA rhs) -> ScopedCopyableRMA
        """
        this = _six_sicd.new_ScopedCopyableRMA(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableRMA self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRMA self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRMA self) -> RMA"""
        return _six_sicd.ScopedCopyableRMA___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRMA self, RMA ptr=None)
        reset(ScopedCopyableRMA self)
        """
        return _six_sicd.ScopedCopyableRMA_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMA
    __del__ = lambda self: None
    __swig_setmethods__["algoType"] = _six_sicd.ScopedCopyableRMA_algoType_set
    __swig_getmethods__["algoType"] = _six_sicd.ScopedCopyableRMA_algoType_get
    if _newclass:
        algoType = _swig_property(_six_sicd.ScopedCopyableRMA_algoType_get, _six_sicd.ScopedCopyableRMA_algoType_set)
    __swig_setmethods__["rmat"] = _six_sicd.ScopedCopyableRMA_rmat_set
    __swig_getmethods__["rmat"] = _six_sicd.ScopedCopyableRMA_rmat_get
    if _newclass:
        rmat = _swig_property(_six_sicd.ScopedCopyableRMA_rmat_get, _six_sicd.ScopedCopyableRMA_rmat_set)
    __swig_setmethods__["rmcr"] = _six_sicd.ScopedCopyableRMA_rmcr_set
    __swig_getmethods__["rmcr"] = _six_sicd.ScopedCopyableRMA_rmcr_get
    if _newclass:
        rmcr = _swig_property(_six_sicd.ScopedCopyableRMA_rmcr_get, _six_sicd.ScopedCopyableRMA_rmcr_set)
    __swig_setmethods__["inca"] = _six_sicd.ScopedCopyableRMA_inca_set
    __swig_getmethods__["inca"] = _six_sicd.ScopedCopyableRMA_inca_get
    if _newclass:
        inca = _swig_property(_six_sicd.ScopedCopyableRMA_inca_get, _six_sicd.ScopedCopyableRMA_inca_set)
ScopedCopyableRMA_swigregister = _six_sicd.ScopedCopyableRMA_swigregister
ScopedCopyableRMA_swigregister(ScopedCopyableRMA)

class ScopedCopyableRgAzComp(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RgAzComp)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRgAzComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRgAzComp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RgAzComp)> self, RgAzComp ptr=None) -> ScopedCopyableRgAzComp
        __init__(mem::ScopedCopyablePtr<(six::sicd::RgAzComp)> self) -> ScopedCopyableRgAzComp
        __init__(mem::ScopedCopyablePtr<(six::sicd::RgAzComp)> self, ScopedCopyableRgAzComp rhs) -> ScopedCopyableRgAzComp
        """
        this = _six_sicd.new_ScopedCopyableRgAzComp(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableRgAzComp self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRgAzComp self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRgAzComp self) -> RgAzComp"""
        return _six_sicd.ScopedCopyableRgAzComp___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRgAzComp self, RgAzComp ptr=None)
        reset(ScopedCopyableRgAzComp self)
        """
        return _six_sicd.ScopedCopyableRgAzComp_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRgAzComp
    __del__ = lambda self: None
    __swig_setmethods__["azSF"] = _six_sicd.ScopedCopyableRgAzComp_azSF_set
    __swig_getmethods__["azSF"] = _six_sicd.ScopedCopyableRgAzComp_azSF_get
    if _newclass:
        azSF = _swig_property(_six_sicd.ScopedCopyableRgAzComp_azSF_get, _six_sicd.ScopedCopyableRgAzComp_azSF_set)
    __swig_setmethods__["kazPoly"] = _six_sicd.ScopedCopyableRgAzComp_kazPoly_set
    __swig_getmethods__["kazPoly"] = _six_sicd.ScopedCopyableRgAzComp_kazPoly_get
    if _newclass:
        kazPoly = _swig_property(_six_sicd.ScopedCopyableRgAzComp_kazPoly_get, _six_sicd.ScopedCopyableRgAzComp_kazPoly_set)
ScopedCopyableRgAzComp_swigregister = _six_sicd.ScopedCopyableRgAzComp_swigregister
ScopedCopyableRgAzComp_swigregister(ScopedCopyableRgAzComp)

class ScopedCloneableGeoInfo(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::GeoInfo)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableGeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableGeoInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)> self, GeoInfo ptr=None) -> ScopedCloneableGeoInfo
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)> self) -> ScopedCloneableGeoInfo
        __init__(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)> self, ScopedCloneableGeoInfo rhs) -> ScopedCloneableGeoInfo
        """
        this = _six_sicd.new_ScopedCloneableGeoInfo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableGeoInfo self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableGeoInfo self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableGeoInfo self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableGeoInfo self, GeoInfo ptr=None)
        reset(ScopedCloneableGeoInfo self)
        """
        return _six_sicd.ScopedCloneableGeoInfo_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableGeoInfo
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableGeoInfo self) -> GeoInfo"""
        return _six_sicd.ScopedCloneableGeoInfo_clone(self)

    __swig_setmethods__["name"] = _six_sicd.ScopedCloneableGeoInfo_name_set
    __swig_getmethods__["name"] = _six_sicd.ScopedCloneableGeoInfo_name_get
    if _newclass:
        name = _swig_property(_six_sicd.ScopedCloneableGeoInfo_name_get, _six_sicd.ScopedCloneableGeoInfo_name_set)
    __swig_setmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoInfo_geoInfos_set
    __swig_getmethods__["geoInfos"] = _six_sicd.ScopedCloneableGeoInfo_geoInfos_get
    if _newclass:
        geoInfos = _swig_property(_six_sicd.ScopedCloneableGeoInfo_geoInfos_get, _six_sicd.ScopedCloneableGeoInfo_geoInfos_set)
    __swig_setmethods__["desc"] = _six_sicd.ScopedCloneableGeoInfo_desc_set
    __swig_getmethods__["desc"] = _six_sicd.ScopedCloneableGeoInfo_desc_get
    if _newclass:
        desc = _swig_property(_six_sicd.ScopedCloneableGeoInfo_desc_get, _six_sicd.ScopedCloneableGeoInfo_desc_set)
    __swig_setmethods__["geometryLatLon"] = _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_set
    __swig_getmethods__["geometryLatLon"] = _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_get
    if _newclass:
        geometryLatLon = _swig_property(_six_sicd.ScopedCloneableGeoInfo_geometryLatLon_get, _six_sicd.ScopedCloneableGeoInfo_geometryLatLon_set)
ScopedCloneableGeoInfo_swigregister = _six_sicd.ScopedCloneableGeoInfo_swigregister
ScopedCloneableGeoInfo_swigregister(ScopedCloneableGeoInfo)

class VectorScopedCloneableGeoInfo(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableGeoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableGeoInfo, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCloneableGeoInfo self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCloneableGeoInfo self) -> bool"""
        return _six_sicd.VectorScopedCloneableGeoInfo___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCloneableGeoInfo self) -> bool"""
        return _six_sicd.VectorScopedCloneableGeoInfo___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo___len__(self)


    def pop(self):
        """pop(VectorScopedCloneableGeoInfo self) -> ScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j) -> VectorScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j, VectorScopedCloneableGeoInfo v)
        __setslice__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type j)"""
        return _six_sicd.VectorScopedCloneableGeoInfo___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i)
        __delitem__(VectorScopedCloneableGeoInfo self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCloneableGeoInfo self, PySliceObject * slice) -> VectorScopedCloneableGeoInfo
        __getitem__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i) -> ScopedCloneableGeoInfo
        """
        return _six_sicd.VectorScopedCloneableGeoInfo___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCloneableGeoInfo self, PySliceObject * slice, VectorScopedCloneableGeoInfo v)
        __setitem__(VectorScopedCloneableGeoInfo self, PySliceObject * slice)
        __setitem__(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::difference_type i, ScopedCloneableGeoInfo x)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo___setitem__(self, *args)


    def append(self, x):
        """append(VectorScopedCloneableGeoInfo self, ScopedCloneableGeoInfo x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_append(self, x)


    def empty(self):
        """empty(VectorScopedCloneableGeoInfo self) -> bool"""
        return _six_sicd.VectorScopedCloneableGeoInfo_empty(self)


    def size(self):
        """size(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_size(self)


    def clear(self):
        """clear(VectorScopedCloneableGeoInfo self)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_clear(self)


    def swap(self, v):
        """swap(VectorScopedCloneableGeoInfo self, VectorScopedCloneableGeoInfo v)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::allocator_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_get_allocator(self)


    def begin(self):
        """begin(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_begin(self)


    def end(self):
        """end(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_rbegin(self)


    def rend(self):
        """rend(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableGeoInfo_rend(self)


    def pop_back(self):
        """pop_back(VectorScopedCloneableGeoInfo self)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator
        erase(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> self) -> VectorScopedCloneableGeoInfo
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> self, VectorScopedCloneableGeoInfo arg2) -> VectorScopedCloneableGeoInfo
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type size) -> VectorScopedCloneableGeoInfo
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::GeoInfo)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type size, ScopedCloneableGeoInfo value) -> VectorScopedCloneableGeoInfo
        """
        this = _six_sicd.new_VectorScopedCloneableGeoInfo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCloneableGeoInfo self, ScopedCloneableGeoInfo x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_push_back(self, x)


    def front(self):
        """front(VectorScopedCloneableGeoInfo self) -> ScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo_front(self)


    def back(self):
        """back(VectorScopedCloneableGeoInfo self) -> ScopedCloneableGeoInfo"""
        return _six_sicd.VectorScopedCloneableGeoInfo_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type n, ScopedCloneableGeoInfo x)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type new_size)
        resize(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type new_size, ScopedCloneableGeoInfo x)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator pos, ScopedCloneableGeoInfo x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator
        insert(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type n, ScopedCloneableGeoInfo x)
        """
        return _six_sicd.VectorScopedCloneableGeoInfo_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCloneableGeoInfo self, std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type n)"""
        return _six_sicd.VectorScopedCloneableGeoInfo_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCloneableGeoInfo self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::GeoInfo > >::size_type"""
        return _six_sicd.VectorScopedCloneableGeoInfo_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableGeoInfo
    __del__ = lambda self: None
VectorScopedCloneableGeoInfo_swigregister = _six_sicd.VectorScopedCloneableGeoInfo_swigregister
VectorScopedCloneableGeoInfo_swigregister(VectorScopedCloneableGeoInfo)

class VectorLatLon(_object):
    """Proxy of C++ std::vector<(scene::LatLon)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorLatLon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorLatLon, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorLatLon self) -> SwigPyIterator"""
        return _six_sicd.VectorLatLon_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorLatLon self) -> bool"""
        return _six_sicd.VectorLatLon___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorLatLon self) -> bool"""
        return _six_sicd.VectorLatLon___bool__(self)


    def __len__(self):
        """__len__(VectorLatLon self) -> std::vector< scene::LatLon >::size_type"""
        return _six_sicd.VectorLatLon___len__(self)


    def pop(self):
        """pop(VectorLatLon self) -> LatLon"""
        return _six_sicd.VectorLatLon_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, std::vector< scene::LatLon >::difference_type j) -> VectorLatLon"""
        return _six_sicd.VectorLatLon___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, std::vector< scene::LatLon >::difference_type j, VectorLatLon v)
        __setslice__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, std::vector< scene::LatLon >::difference_type j)
        """
        return _six_sicd.VectorLatLon___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, std::vector< scene::LatLon >::difference_type j)"""
        return _six_sicd.VectorLatLon___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i)
        __delitem__(VectorLatLon self, PySliceObject * slice)
        """
        return _six_sicd.VectorLatLon___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorLatLon self, PySliceObject * slice) -> VectorLatLon
        __getitem__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i) -> LatLon
        """
        return _six_sicd.VectorLatLon___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorLatLon self, PySliceObject * slice, VectorLatLon v)
        __setitem__(VectorLatLon self, PySliceObject * slice)
        __setitem__(VectorLatLon self, std::vector< scene::LatLon >::difference_type i, LatLon x)
        """
        return _six_sicd.VectorLatLon___setitem__(self, *args)


    def append(self, x):
        """append(VectorLatLon self, LatLon x)"""
        return _six_sicd.VectorLatLon_append(self, x)


    def empty(self):
        """empty(VectorLatLon self) -> bool"""
        return _six_sicd.VectorLatLon_empty(self)


    def size(self):
        """size(VectorLatLon self) -> std::vector< scene::LatLon >::size_type"""
        return _six_sicd.VectorLatLon_size(self)


    def clear(self):
        """clear(VectorLatLon self)"""
        return _six_sicd.VectorLatLon_clear(self)


    def swap(self, v):
        """swap(VectorLatLon self, VectorLatLon v)"""
        return _six_sicd.VectorLatLon_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorLatLon self) -> std::vector< scene::LatLon >::allocator_type"""
        return _six_sicd.VectorLatLon_get_allocator(self)


    def begin(self):
        """begin(VectorLatLon self) -> std::vector< scene::LatLon >::iterator"""
        return _six_sicd.VectorLatLon_begin(self)


    def end(self):
        """end(VectorLatLon self) -> std::vector< scene::LatLon >::iterator"""
        return _six_sicd.VectorLatLon_end(self)


    def rbegin(self):
        """rbegin(VectorLatLon self) -> std::vector< scene::LatLon >::reverse_iterator"""
        return _six_sicd.VectorLatLon_rbegin(self)


    def rend(self):
        """rend(VectorLatLon self) -> std::vector< scene::LatLon >::reverse_iterator"""
        return _six_sicd.VectorLatLon_rend(self)


    def pop_back(self):
        """pop_back(VectorLatLon self)"""
        return _six_sicd.VectorLatLon_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorLatLon self, std::vector< scene::LatLon >::iterator pos) -> std::vector< scene::LatLon >::iterator
        erase(VectorLatLon self, std::vector< scene::LatLon >::iterator first, std::vector< scene::LatLon >::iterator last) -> std::vector< scene::LatLon >::iterator
        """
        return _six_sicd.VectorLatLon_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(scene::LatLon)> self) -> VectorLatLon
        __init__(std::vector<(scene::LatLon)> self, VectorLatLon arg2) -> VectorLatLon
        __init__(std::vector<(scene::LatLon)> self, std::vector< scene::LatLon >::size_type size) -> VectorLatLon
        __init__(std::vector<(scene::LatLon)> self, std::vector< scene::LatLon >::size_type size, LatLon value) -> VectorLatLon
        """
        this = _six_sicd.new_VectorLatLon(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorLatLon self, LatLon x)"""
        return _six_sicd.VectorLatLon_push_back(self, x)


    def front(self):
        """front(VectorLatLon self) -> LatLon"""
        return _six_sicd.VectorLatLon_front(self)


    def back(self):
        """back(VectorLatLon self) -> LatLon"""
        return _six_sicd.VectorLatLon_back(self)


    def assign(self, n, x):
        """assign(VectorLatLon self, std::vector< scene::LatLon >::size_type n, LatLon x)"""
        return _six_sicd.VectorLatLon_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorLatLon self, std::vector< scene::LatLon >::size_type new_size)
        resize(VectorLatLon self, std::vector< scene::LatLon >::size_type new_size, LatLon x)
        """
        return _six_sicd.VectorLatLon_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorLatLon self, std::vector< scene::LatLon >::iterator pos, LatLon x) -> std::vector< scene::LatLon >::iterator
        insert(VectorLatLon self, std::vector< scene::LatLon >::iterator pos, std::vector< scene::LatLon >::size_type n, LatLon x)
        """
        return _six_sicd.VectorLatLon_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorLatLon self, std::vector< scene::LatLon >::size_type n)"""
        return _six_sicd.VectorLatLon_reserve(self, n)


    def capacity(self):
        """capacity(VectorLatLon self) -> std::vector< scene::LatLon >::size_type"""
        return _six_sicd.VectorLatLon_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorLatLon
    __del__ = lambda self: None
VectorLatLon_swigregister = _six_sicd.VectorLatLon_swigregister
VectorLatLon_swigregister(VectorLatLon)

class ScopedCopyableAntennaParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::AntennaParameters)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableAntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableAntennaParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::AntennaParameters)> self, AntennaParameters ptr=None) -> ScopedCopyableAntennaParameters
        __init__(mem::ScopedCopyablePtr<(six::sicd::AntennaParameters)> self) -> ScopedCopyableAntennaParameters
        __init__(mem::ScopedCopyablePtr<(six::sicd::AntennaParameters)> self, ScopedCopyableAntennaParameters rhs) -> ScopedCopyableAntennaParameters
        """
        this = _six_sicd.new_ScopedCopyableAntennaParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableAntennaParameters self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableAntennaParameters self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableAntennaParameters self) -> AntennaParameters"""
        return _six_sicd.ScopedCopyableAntennaParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableAntennaParameters self, AntennaParameters ptr=None)
        reset(ScopedCopyableAntennaParameters self)
        """
        return _six_sicd.ScopedCopyableAntennaParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableAntennaParameters
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableAntennaParameters self, AntennaParameters other) -> bool"""
        return _six_sicd.ScopedCopyableAntennaParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableAntennaParameters self, AntennaParameters other) -> bool"""
        return _six_sicd.ScopedCopyableAntennaParameters___ne__(self, other)

    __swig_setmethods__["xAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_set
    __swig_getmethods__["xAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_get
    if _newclass:
        xAxisPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_get, _six_sicd.ScopedCopyableAntennaParameters_xAxisPoly_set)
    __swig_setmethods__["yAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_set
    __swig_getmethods__["yAxisPoly"] = _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_get
    if _newclass:
        yAxisPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_get, _six_sicd.ScopedCopyableAntennaParameters_yAxisPoly_set)
    __swig_setmethods__["frequencyZero"] = _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_set
    __swig_getmethods__["frequencyZero"] = _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_get
    if _newclass:
        frequencyZero = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_frequencyZero_get, _six_sicd.ScopedCopyableAntennaParameters_frequencyZero_set)
    __swig_setmethods__["electricalBoresight"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_set
    __swig_getmethods__["electricalBoresight"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_get
    if _newclass:
        electricalBoresight = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_get, _six_sicd.ScopedCopyableAntennaParameters_electricalBoresight_set)
    __swig_setmethods__["halfPowerBeamwidths"] = _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_set
    __swig_getmethods__["halfPowerBeamwidths"] = _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_get
    if _newclass:
        halfPowerBeamwidths = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_get, _six_sicd.ScopedCopyableAntennaParameters_halfPowerBeamwidths_set)
    __swig_setmethods__["array"] = _six_sicd.ScopedCopyableAntennaParameters_array_set
    __swig_getmethods__["array"] = _six_sicd.ScopedCopyableAntennaParameters_array_get
    if _newclass:
        array = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_array_get, _six_sicd.ScopedCopyableAntennaParameters_array_set)
    __swig_setmethods__["element"] = _six_sicd.ScopedCopyableAntennaParameters_element_set
    __swig_getmethods__["element"] = _six_sicd.ScopedCopyableAntennaParameters_element_get
    if _newclass:
        element = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_element_get, _six_sicd.ScopedCopyableAntennaParameters_element_set)
    __swig_setmethods__["gainBSPoly"] = _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_set
    __swig_getmethods__["gainBSPoly"] = _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_get
    if _newclass:
        gainBSPoly = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_get, _six_sicd.ScopedCopyableAntennaParameters_gainBSPoly_set)
    __swig_setmethods__["electricalBoresightFrequencyShift"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set
    __swig_getmethods__["electricalBoresightFrequencyShift"] = _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get
    if _newclass:
        electricalBoresightFrequencyShift = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_get, _six_sicd.ScopedCopyableAntennaParameters_electricalBoresightFrequencyShift_set)
    __swig_setmethods__["mainlobeFrequencyDilation"] = _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set
    __swig_getmethods__["mainlobeFrequencyDilation"] = _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get
    if _newclass:
        mainlobeFrequencyDilation = _swig_property(_six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_get, _six_sicd.ScopedCopyableAntennaParameters_mainlobeFrequencyDilation_set)
ScopedCopyableAntennaParameters_swigregister = _six_sicd.ScopedCopyableAntennaParameters_swigregister
ScopedCopyableAntennaParameters_swigregister(ScopedCopyableAntennaParameters)

class ScopedCopyableElectricalBoresight(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::ElectricalBoresight)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableElectricalBoresight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableElectricalBoresight, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::ElectricalBoresight)> self, ElectricalBoresight ptr=None) -> ScopedCopyableElectricalBoresight
        __init__(mem::ScopedCopyablePtr<(six::sicd::ElectricalBoresight)> self) -> ScopedCopyableElectricalBoresight
        __init__(mem::ScopedCopyablePtr<(six::sicd::ElectricalBoresight)> self, ScopedCopyableElectricalBoresight rhs) -> ScopedCopyableElectricalBoresight
        """
        this = _six_sicd.new_ScopedCopyableElectricalBoresight(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableElectricalBoresight self) -> ElectricalBoresight"""
        return _six_sicd.ScopedCopyableElectricalBoresight___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableElectricalBoresight self, ElectricalBoresight ptr=None)
        reset(ScopedCopyableElectricalBoresight self)
        """
        return _six_sicd.ScopedCopyableElectricalBoresight_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableElectricalBoresight
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableElectricalBoresight self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ScopedCopyableElectricalBoresight___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableElectricalBoresight self, ElectricalBoresight other) -> bool"""
        return _six_sicd.ScopedCopyableElectricalBoresight___ne__(self, other)

    __swig_setmethods__["dcxPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_set
    __swig_getmethods__["dcxPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_get
    if _newclass:
        dcxPoly = _swig_property(_six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_get, _six_sicd.ScopedCopyableElectricalBoresight_dcxPoly_set)
    __swig_setmethods__["dcyPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_set
    __swig_getmethods__["dcyPoly"] = _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_get
    if _newclass:
        dcyPoly = _swig_property(_six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_get, _six_sicd.ScopedCopyableElectricalBoresight_dcyPoly_set)
ScopedCopyableElectricalBoresight_swigregister = _six_sicd.ScopedCopyableElectricalBoresight_swigregister
ScopedCopyableElectricalBoresight_swigregister(ScopedCopyableElectricalBoresight)

class ScopedCopyableHalfPowerBeamwidths(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::HalfPowerBeamwidths)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableHalfPowerBeamwidths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableHalfPowerBeamwidths, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::HalfPowerBeamwidths)> self, HalfPowerBeamwidths ptr=None) -> ScopedCopyableHalfPowerBeamwidths
        __init__(mem::ScopedCopyablePtr<(six::sicd::HalfPowerBeamwidths)> self) -> ScopedCopyableHalfPowerBeamwidths
        __init__(mem::ScopedCopyablePtr<(six::sicd::HalfPowerBeamwidths)> self, ScopedCopyableHalfPowerBeamwidths rhs) -> ScopedCopyableHalfPowerBeamwidths
        """
        this = _six_sicd.new_ScopedCopyableHalfPowerBeamwidths(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableHalfPowerBeamwidths self) -> HalfPowerBeamwidths"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableHalfPowerBeamwidths self, HalfPowerBeamwidths ptr=None)
        reset(ScopedCopyableHalfPowerBeamwidths self)
        """
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableHalfPowerBeamwidths
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableHalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableHalfPowerBeamwidths self, HalfPowerBeamwidths other) -> bool"""
        return _six_sicd.ScopedCopyableHalfPowerBeamwidths___ne__(self, other)

    __swig_setmethods__["dcx"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_set
    __swig_getmethods__["dcx"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_get
    if _newclass:
        dcx = _swig_property(_six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_get, _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcx_set)
    __swig_setmethods__["dcy"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_set
    __swig_getmethods__["dcy"] = _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_get
    if _newclass:
        dcy = _swig_property(_six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_get, _six_sicd.ScopedCopyableHalfPowerBeamwidths_dcy_set)
ScopedCopyableHalfPowerBeamwidths_swigregister = _six_sicd.ScopedCopyableHalfPowerBeamwidths_swigregister
ScopedCopyableHalfPowerBeamwidths_swigregister(ScopedCopyableHalfPowerBeamwidths)

class ScopedCopyableGainAndPhasePolys(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::GainAndPhasePolys)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableGainAndPhasePolys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableGainAndPhasePolys, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::GainAndPhasePolys)> self, GainAndPhasePolys ptr=None) -> ScopedCopyableGainAndPhasePolys
        __init__(mem::ScopedCopyablePtr<(six::sicd::GainAndPhasePolys)> self) -> ScopedCopyableGainAndPhasePolys
        __init__(mem::ScopedCopyablePtr<(six::sicd::GainAndPhasePolys)> self, ScopedCopyableGainAndPhasePolys rhs) -> ScopedCopyableGainAndPhasePolys
        """
        this = _six_sicd.new_ScopedCopyableGainAndPhasePolys(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableGainAndPhasePolys self) -> GainAndPhasePolys"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableGainAndPhasePolys self, GainAndPhasePolys ptr=None)
        reset(ScopedCopyableGainAndPhasePolys self)
        """
        return _six_sicd.ScopedCopyableGainAndPhasePolys_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableGainAndPhasePolys
    __del__ = lambda self: None

    def __eq__(self, other):
        """__eq__(ScopedCopyableGainAndPhasePolys self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCopyableGainAndPhasePolys self, GainAndPhasePolys other) -> bool"""
        return _six_sicd.ScopedCopyableGainAndPhasePolys___ne__(self, other)

    __swig_setmethods__["gainPoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_set
    __swig_getmethods__["gainPoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_get
    if _newclass:
        gainPoly = _swig_property(_six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_get, _six_sicd.ScopedCopyableGainAndPhasePolys_gainPoly_set)
    __swig_setmethods__["phasePoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_set
    __swig_getmethods__["phasePoly"] = _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_get
    if _newclass:
        phasePoly = _swig_property(_six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_get, _six_sicd.ScopedCopyableGainAndPhasePolys_phasePoly_set)
ScopedCopyableGainAndPhasePolys_swigregister = _six_sicd.ScopedCopyableGainAndPhasePolys_swigregister
ScopedCopyableGainAndPhasePolys_swigregister(ScopedCopyableGainAndPhasePolys)

class ScopedCopyableWeightType(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::WeightType)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableWeightType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableWeightType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::WeightType)> self, WeightType ptr=None) -> ScopedCopyableWeightType
        __init__(mem::ScopedCopyablePtr<(six::sicd::WeightType)> self) -> ScopedCopyableWeightType
        __init__(mem::ScopedCopyablePtr<(six::sicd::WeightType)> self, ScopedCopyableWeightType rhs) -> ScopedCopyableWeightType
        """
        this = _six_sicd.new_ScopedCopyableWeightType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableWeightType self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableWeightType self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableWeightType self) -> WeightType"""
        return _six_sicd.ScopedCopyableWeightType___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableWeightType self, WeightType ptr=None)
        reset(ScopedCopyableWeightType self)
        """
        return _six_sicd.ScopedCopyableWeightType_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableWeightType
    __del__ = lambda self: None
    __swig_setmethods__["windowName"] = _six_sicd.ScopedCopyableWeightType_windowName_set
    __swig_getmethods__["windowName"] = _six_sicd.ScopedCopyableWeightType_windowName_get
    if _newclass:
        windowName = _swig_property(_six_sicd.ScopedCopyableWeightType_windowName_get, _six_sicd.ScopedCopyableWeightType_windowName_set)
    __swig_setmethods__["parameters"] = _six_sicd.ScopedCopyableWeightType_parameters_set
    __swig_getmethods__["parameters"] = _six_sicd.ScopedCopyableWeightType_parameters_get
    if _newclass:
        parameters = _swig_property(_six_sicd.ScopedCopyableWeightType_parameters_get, _six_sicd.ScopedCopyableWeightType_parameters_set)
ScopedCopyableWeightType_swigregister = _six_sicd.ScopedCopyableWeightType_swigregister
ScopedCopyableWeightType_swigregister(ScopedCopyableWeightType)

class VectorPolyXYZ(_object):
    """Proxy of C++ std::vector<(PolyXYZ)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPolyXYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPolyXYZ, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorPolyXYZ self) -> SwigPyIterator"""
        return _six_sicd.VectorPolyXYZ_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorPolyXYZ self) -> bool"""
        return _six_sicd.VectorPolyXYZ___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorPolyXYZ self) -> bool"""
        return _six_sicd.VectorPolyXYZ___bool__(self)


    def __len__(self):
        """__len__(VectorPolyXYZ self) -> std::vector< PolyXYZ >::size_type"""
        return _six_sicd.VectorPolyXYZ___len__(self)


    def pop(self):
        """pop(VectorPolyXYZ self) -> std::vector< PolyXYZ >::value_type"""
        return _six_sicd.VectorPolyXYZ_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorPolyXYZ self, std::vector< PolyXYZ >::difference_type i, std::vector< PolyXYZ >::difference_type j) -> VectorPolyXYZ"""
        return _six_sicd.VectorPolyXYZ___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorPolyXYZ self, std::vector< PolyXYZ >::difference_type i, std::vector< PolyXYZ >::difference_type j, VectorPolyXYZ v)
        __setslice__(VectorPolyXYZ self, std::vector< PolyXYZ >::difference_type i, std::vector< PolyXYZ >::difference_type j)
        """
        return _six_sicd.VectorPolyXYZ___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorPolyXYZ self, std::vector< PolyXYZ >::difference_type i, std::vector< PolyXYZ >::difference_type j)"""
        return _six_sicd.VectorPolyXYZ___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorPolyXYZ self, std::vector< PolyXYZ >::difference_type i)
        __delitem__(VectorPolyXYZ self, PySliceObject * slice)
        """
        return _six_sicd.VectorPolyXYZ___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorPolyXYZ self, PySliceObject * slice) -> VectorPolyXYZ
        __getitem__(VectorPolyXYZ self, std::vector< PolyXYZ >::difference_type i) -> std::vector< PolyXYZ >::value_type const &
        """
        return _six_sicd.VectorPolyXYZ___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorPolyXYZ self, PySliceObject * slice, VectorPolyXYZ v)
        __setitem__(VectorPolyXYZ self, PySliceObject * slice)
        __setitem__(VectorPolyXYZ self, std::vector< PolyXYZ >::difference_type i, std::vector< PolyXYZ >::value_type const & x)
        """
        return _six_sicd.VectorPolyXYZ___setitem__(self, *args)


    def append(self, x):
        """append(VectorPolyXYZ self, std::vector< PolyXYZ >::value_type const & x)"""
        return _six_sicd.VectorPolyXYZ_append(self, x)


    def empty(self):
        """empty(VectorPolyXYZ self) -> bool"""
        return _six_sicd.VectorPolyXYZ_empty(self)


    def size(self):
        """size(VectorPolyXYZ self) -> std::vector< PolyXYZ >::size_type"""
        return _six_sicd.VectorPolyXYZ_size(self)


    def clear(self):
        """clear(VectorPolyXYZ self)"""
        return _six_sicd.VectorPolyXYZ_clear(self)


    def swap(self, v):
        """swap(VectorPolyXYZ self, VectorPolyXYZ v)"""
        return _six_sicd.VectorPolyXYZ_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorPolyXYZ self) -> std::vector< PolyXYZ >::allocator_type"""
        return _six_sicd.VectorPolyXYZ_get_allocator(self)


    def begin(self):
        """begin(VectorPolyXYZ self) -> std::vector< PolyXYZ >::iterator"""
        return _six_sicd.VectorPolyXYZ_begin(self)


    def end(self):
        """end(VectorPolyXYZ self) -> std::vector< PolyXYZ >::iterator"""
        return _six_sicd.VectorPolyXYZ_end(self)


    def rbegin(self):
        """rbegin(VectorPolyXYZ self) -> std::vector< PolyXYZ >::reverse_iterator"""
        return _six_sicd.VectorPolyXYZ_rbegin(self)


    def rend(self):
        """rend(VectorPolyXYZ self) -> std::vector< PolyXYZ >::reverse_iterator"""
        return _six_sicd.VectorPolyXYZ_rend(self)


    def pop_back(self):
        """pop_back(VectorPolyXYZ self)"""
        return _six_sicd.VectorPolyXYZ_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorPolyXYZ self, std::vector< PolyXYZ >::iterator pos) -> std::vector< PolyXYZ >::iterator
        erase(VectorPolyXYZ self, std::vector< PolyXYZ >::iterator first, std::vector< PolyXYZ >::iterator last) -> std::vector< PolyXYZ >::iterator
        """
        return _six_sicd.VectorPolyXYZ_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(PolyXYZ)> self) -> VectorPolyXYZ
        __init__(std::vector<(PolyXYZ)> self, VectorPolyXYZ arg2) -> VectorPolyXYZ
        __init__(std::vector<(PolyXYZ)> self, std::vector< PolyXYZ >::size_type size) -> VectorPolyXYZ
        __init__(std::vector<(PolyXYZ)> self, std::vector< PolyXYZ >::size_type size, std::vector< PolyXYZ >::value_type const & value) -> VectorPolyXYZ
        """
        this = _six_sicd.new_VectorPolyXYZ(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorPolyXYZ self, std::vector< PolyXYZ >::value_type const & x)"""
        return _six_sicd.VectorPolyXYZ_push_back(self, x)


    def front(self):
        """front(VectorPolyXYZ self) -> std::vector< PolyXYZ >::value_type const &"""
        return _six_sicd.VectorPolyXYZ_front(self)


    def back(self):
        """back(VectorPolyXYZ self) -> std::vector< PolyXYZ >::value_type const &"""
        return _six_sicd.VectorPolyXYZ_back(self)


    def assign(self, n, x):
        """assign(VectorPolyXYZ self, std::vector< PolyXYZ >::size_type n, std::vector< PolyXYZ >::value_type const & x)"""
        return _six_sicd.VectorPolyXYZ_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorPolyXYZ self, std::vector< PolyXYZ >::size_type new_size)
        resize(VectorPolyXYZ self, std::vector< PolyXYZ >::size_type new_size, std::vector< PolyXYZ >::value_type const & x)
        """
        return _six_sicd.VectorPolyXYZ_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorPolyXYZ self, std::vector< PolyXYZ >::iterator pos, std::vector< PolyXYZ >::value_type const & x) -> std::vector< PolyXYZ >::iterator
        insert(VectorPolyXYZ self, std::vector< PolyXYZ >::iterator pos, std::vector< PolyXYZ >::size_type n, std::vector< PolyXYZ >::value_type const & x)
        """
        return _six_sicd.VectorPolyXYZ_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorPolyXYZ self, std::vector< PolyXYZ >::size_type n)"""
        return _six_sicd.VectorPolyXYZ_reserve(self, n)


    def capacity(self):
        """capacity(VectorPolyXYZ self) -> std::vector< PolyXYZ >::size_type"""
        return _six_sicd.VectorPolyXYZ_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorPolyXYZ
    __del__ = lambda self: None
VectorPolyXYZ_swigregister = _six_sicd.VectorPolyXYZ_swigregister
VectorPolyXYZ_swigregister(VectorPolyXYZ)

class ScopedCloneableAreaDirectionParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::AreaDirectionParameters)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableAreaDirectionParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableAreaDirectionParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::AreaDirectionParameters)> self, AreaDirectionParameters ptr=None) -> ScopedCloneableAreaDirectionParameters
        __init__(mem::ScopedCopyablePtr<(six::sicd::AreaDirectionParameters)> self) -> ScopedCloneableAreaDirectionParameters
        __init__(mem::ScopedCopyablePtr<(six::sicd::AreaDirectionParameters)> self, ScopedCloneableAreaDirectionParameters rhs) -> ScopedCloneableAreaDirectionParameters
        """
        this = _six_sicd.new_ScopedCloneableAreaDirectionParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableAreaDirectionParameters self, AreaDirectionParameters ptr=None)
        reset(ScopedCloneableAreaDirectionParameters self)
        """
        return _six_sicd.ScopedCloneableAreaDirectionParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableAreaDirectionParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableAreaDirectionParameters self) -> AreaDirectionParameters"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters_clone(self)

    __swig_setmethods__["unitVector"] = _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_set
    __swig_getmethods__["unitVector"] = _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_get
    if _newclass:
        unitVector = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_get, _six_sicd.ScopedCloneableAreaDirectionParameters_unitVector_set)
    __swig_setmethods__["spacing"] = _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_set
    __swig_getmethods__["spacing"] = _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_get
    if _newclass:
        spacing = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_spacing_get, _six_sicd.ScopedCloneableAreaDirectionParameters_spacing_set)
    __swig_setmethods__["elements"] = _six_sicd.ScopedCloneableAreaDirectionParameters_elements_set
    __swig_getmethods__["elements"] = _six_sicd.ScopedCloneableAreaDirectionParameters_elements_get
    if _newclass:
        elements = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_elements_get, _six_sicd.ScopedCloneableAreaDirectionParameters_elements_set)
    __swig_setmethods__["first"] = _six_sicd.ScopedCloneableAreaDirectionParameters_first_set
    __swig_getmethods__["first"] = _six_sicd.ScopedCloneableAreaDirectionParameters_first_get
    if _newclass:
        first = _swig_property(_six_sicd.ScopedCloneableAreaDirectionParameters_first_get, _six_sicd.ScopedCloneableAreaDirectionParameters_first_set)

    def __eq__(self, other):
        """__eq__(ScopedCloneableAreaDirectionParameters self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___eq__(self, other)


    def __ne__(self, other):
        """__ne__(ScopedCloneableAreaDirectionParameters self, AreaDirectionParameters other) -> bool"""
        return _six_sicd.ScopedCloneableAreaDirectionParameters___ne__(self, other)

ScopedCloneableAreaDirectionParameters_swigregister = _six_sicd.ScopedCloneableAreaDirectionParameters_swigregister
ScopedCloneableAreaDirectionParameters_swigregister(ScopedCloneableAreaDirectionParameters)

class ScopedCloneableSegment(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::Segment)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableSegment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::Segment)> self, Segment ptr=None) -> ScopedCloneableSegment
        __init__(mem::ScopedCloneablePtr<(six::sicd::Segment)> self) -> ScopedCloneableSegment
        __init__(mem::ScopedCloneablePtr<(six::sicd::Segment)> self, ScopedCloneableSegment rhs) -> ScopedCloneableSegment
        """
        this = _six_sicd.new_ScopedCloneableSegment(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableSegment self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableSegment self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableSegment self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableSegment self, Segment ptr=None)
        reset(ScopedCloneableSegment self)
        """
        return _six_sicd.ScopedCloneableSegment_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableSegment
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableSegment self) -> Segment"""
        return _six_sicd.ScopedCloneableSegment_clone(self)


    def getNumLines(self):
        """getNumLines(ScopedCloneableSegment self) -> int"""
        return _six_sicd.ScopedCloneableSegment_getNumLines(self)


    def getNumSamples(self):
        """getNumSamples(ScopedCloneableSegment self) -> int"""
        return _six_sicd.ScopedCloneableSegment_getNumSamples(self)

    __swig_setmethods__["startLine"] = _six_sicd.ScopedCloneableSegment_startLine_set
    __swig_getmethods__["startLine"] = _six_sicd.ScopedCloneableSegment_startLine_get
    if _newclass:
        startLine = _swig_property(_six_sicd.ScopedCloneableSegment_startLine_get, _six_sicd.ScopedCloneableSegment_startLine_set)
    __swig_setmethods__["startSample"] = _six_sicd.ScopedCloneableSegment_startSample_set
    __swig_getmethods__["startSample"] = _six_sicd.ScopedCloneableSegment_startSample_get
    if _newclass:
        startSample = _swig_property(_six_sicd.ScopedCloneableSegment_startSample_get, _six_sicd.ScopedCloneableSegment_startSample_set)
    __swig_setmethods__["endLine"] = _six_sicd.ScopedCloneableSegment_endLine_set
    __swig_getmethods__["endLine"] = _six_sicd.ScopedCloneableSegment_endLine_get
    if _newclass:
        endLine = _swig_property(_six_sicd.ScopedCloneableSegment_endLine_get, _six_sicd.ScopedCloneableSegment_endLine_set)
    __swig_setmethods__["endSample"] = _six_sicd.ScopedCloneableSegment_endSample_set
    __swig_getmethods__["endSample"] = _six_sicd.ScopedCloneableSegment_endSample_get
    if _newclass:
        endSample = _swig_property(_six_sicd.ScopedCloneableSegment_endSample_get, _six_sicd.ScopedCloneableSegment_endSample_set)
    __swig_setmethods__["identifier"] = _six_sicd.ScopedCloneableSegment_identifier_set
    __swig_getmethods__["identifier"] = _six_sicd.ScopedCloneableSegment_identifier_get
    if _newclass:
        identifier = _swig_property(_six_sicd.ScopedCloneableSegment_identifier_get, _six_sicd.ScopedCloneableSegment_identifier_set)
ScopedCloneableSegment_swigregister = _six_sicd.ScopedCloneableSegment_swigregister
ScopedCloneableSegment_swigregister(ScopedCloneableSegment)

class ScopedCloneableTxStep(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::TxStep)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableTxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableTxStep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::TxStep)> self, TxStep ptr=None) -> ScopedCloneableTxStep
        __init__(mem::ScopedCloneablePtr<(six::sicd::TxStep)> self) -> ScopedCloneableTxStep
        __init__(mem::ScopedCloneablePtr<(six::sicd::TxStep)> self, ScopedCloneableTxStep rhs) -> ScopedCloneableTxStep
        """
        this = _six_sicd.new_ScopedCloneableTxStep(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableTxStep self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableTxStep self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableTxStep self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableTxStep self, TxStep ptr=None)
        reset(ScopedCloneableTxStep self)
        """
        return _six_sicd.ScopedCloneableTxStep_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableTxStep
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableTxStep self) -> TxStep"""
        return _six_sicd.ScopedCloneableTxStep_clone(self)

    __swig_setmethods__["waveformIndex"] = _six_sicd.ScopedCloneableTxStep_waveformIndex_set
    __swig_getmethods__["waveformIndex"] = _six_sicd.ScopedCloneableTxStep_waveformIndex_get
    if _newclass:
        waveformIndex = _swig_property(_six_sicd.ScopedCloneableTxStep_waveformIndex_get, _six_sicd.ScopedCloneableTxStep_waveformIndex_set)
    __swig_setmethods__["txPolarization"] = _six_sicd.ScopedCloneableTxStep_txPolarization_set
    __swig_getmethods__["txPolarization"] = _six_sicd.ScopedCloneableTxStep_txPolarization_get
    if _newclass:
        txPolarization = _swig_property(_six_sicd.ScopedCloneableTxStep_txPolarization_get, _six_sicd.ScopedCloneableTxStep_txPolarization_set)
ScopedCloneableTxStep_swigregister = _six_sicd.ScopedCloneableTxStep_swigregister
ScopedCloneableTxStep_swigregister(ScopedCloneableTxStep)

class ScopedCloneableWaveformParameters(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableWaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableWaveformParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)> self, WaveformParameters ptr=None) -> ScopedCloneableWaveformParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)> self) -> ScopedCloneableWaveformParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)> self, ScopedCloneableWaveformParameters rhs) -> ScopedCloneableWaveformParameters
        """
        this = _six_sicd.new_ScopedCloneableWaveformParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableWaveformParameters self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableWaveformParameters self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableWaveformParameters self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableWaveformParameters self, WaveformParameters ptr=None)
        reset(ScopedCloneableWaveformParameters self)
        """
        return _six_sicd.ScopedCloneableWaveformParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableWaveformParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableWaveformParameters self) -> WaveformParameters"""
        return _six_sicd.ScopedCloneableWaveformParameters_clone(self)

    __swig_setmethods__["txPulseLength"] = _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_set
    __swig_getmethods__["txPulseLength"] = _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_get
    if _newclass:
        txPulseLength = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txPulseLength_get, _six_sicd.ScopedCloneableWaveformParameters_txPulseLength_set)
    __swig_setmethods__["txRFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_set
    __swig_getmethods__["txRFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_get
    if _newclass:
        txRFBandwidth = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_get, _six_sicd.ScopedCloneableWaveformParameters_txRFBandwidth_set)
    __swig_setmethods__["txFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_set
    __swig_getmethods__["txFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_get
    if _newclass:
        txFrequencyStart = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_get, _six_sicd.ScopedCloneableWaveformParameters_txFrequencyStart_set)
    __swig_setmethods__["txFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_txFMRate_set
    __swig_getmethods__["txFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_txFMRate_get
    if _newclass:
        txFMRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_txFMRate_get, _six_sicd.ScopedCloneableWaveformParameters_txFMRate_set)
    __swig_setmethods__["rcvDemodType"] = _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_set
    __swig_getmethods__["rcvDemodType"] = _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_get
    if _newclass:
        rcvDemodType = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_get, _six_sicd.ScopedCloneableWaveformParameters_rcvDemodType_set)
    __swig_setmethods__["rcvWindowLength"] = _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_set
    __swig_getmethods__["rcvWindowLength"] = _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_get
    if _newclass:
        rcvWindowLength = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_get, _six_sicd.ScopedCloneableWaveformParameters_rcvWindowLength_set)
    __swig_setmethods__["adcSampleRate"] = _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_set
    __swig_getmethods__["adcSampleRate"] = _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_get
    if _newclass:
        adcSampleRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_get, _six_sicd.ScopedCloneableWaveformParameters_adcSampleRate_set)
    __swig_setmethods__["rcvIFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_set
    __swig_getmethods__["rcvIFBandwidth"] = _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_get
    if _newclass:
        rcvIFBandwidth = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_get, _six_sicd.ScopedCloneableWaveformParameters_rcvIFBandwidth_set)
    __swig_setmethods__["rcvFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_set
    __swig_getmethods__["rcvFrequencyStart"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_get
    if _newclass:
        rcvFrequencyStart = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_get, _six_sicd.ScopedCloneableWaveformParameters_rcvFrequencyStart_set)
    __swig_setmethods__["rcvFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_set
    __swig_getmethods__["rcvFMRate"] = _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_get
    if _newclass:
        rcvFMRate = _swig_property(_six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_get, _six_sicd.ScopedCloneableWaveformParameters_rcvFMRate_set)
ScopedCloneableWaveformParameters_swigregister = _six_sicd.ScopedCloneableWaveformParameters_swigregister
ScopedCloneableWaveformParameters_swigregister(ScopedCloneableWaveformParameters)

class ScopedCloneableArea(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::Area)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::Area)> self, Area ptr=None) -> ScopedCloneableArea
        __init__(mem::ScopedCloneablePtr<(six::sicd::Area)> self) -> ScopedCloneableArea
        __init__(mem::ScopedCloneablePtr<(six::sicd::Area)> self, ScopedCloneableArea rhs) -> ScopedCloneableArea
        """
        this = _six_sicd.new_ScopedCloneableArea(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableArea self) -> Area"""
        return _six_sicd.ScopedCloneableArea_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableArea self) -> Area"""
        return _six_sicd.ScopedCloneableArea___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableArea self) -> Area"""
        return _six_sicd.ScopedCloneableArea___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableArea self, Area ptr=None)
        reset(ScopedCloneableArea self)
        """
        return _six_sicd.ScopedCloneableArea_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableArea
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableArea self) -> Area"""
        return _six_sicd.ScopedCloneableArea_clone(self)

    __swig_setmethods__["acpCorners"] = _six_sicd.ScopedCloneableArea_acpCorners_set
    __swig_getmethods__["acpCorners"] = _six_sicd.ScopedCloneableArea_acpCorners_get
    if _newclass:
        acpCorners = _swig_property(_six_sicd.ScopedCloneableArea_acpCorners_get, _six_sicd.ScopedCloneableArea_acpCorners_set)
    __swig_setmethods__["plane"] = _six_sicd.ScopedCloneableArea_plane_set
    __swig_getmethods__["plane"] = _six_sicd.ScopedCloneableArea_plane_get
    if _newclass:
        plane = _swig_property(_six_sicd.ScopedCloneableArea_plane_get, _six_sicd.ScopedCloneableArea_plane_set)
ScopedCloneableArea_swigregister = _six_sicd.ScopedCloneableArea_swigregister
ScopedCloneableArea_swigregister(ScopedCloneableArea)

class ScopedCloneableChannelParameters(_object):
    """Proxy of C++ mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCloneableChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCloneableChannelParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)> self, ChannelParameters ptr=None) -> ScopedCloneableChannelParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)> self) -> ScopedCloneableChannelParameters
        __init__(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)> self, ScopedCloneableChannelParameters rhs) -> ScopedCloneableChannelParameters
        """
        this = _six_sicd.new_ScopedCloneableChannelParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCloneableChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters_get(self)


    def __ref__(self):
        """__ref__(ScopedCloneableChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCloneableChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCloneableChannelParameters self, ChannelParameters ptr=None)
        reset(ScopedCloneableChannelParameters self)
        """
        return _six_sicd.ScopedCloneableChannelParameters_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCloneableChannelParameters
    __del__ = lambda self: None

    def clone(self):
        """clone(ScopedCloneableChannelParameters self) -> ChannelParameters"""
        return _six_sicd.ScopedCloneableChannelParameters_clone(self)

    __swig_setmethods__["txRcvPolarization"] = _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_set
    __swig_getmethods__["txRcvPolarization"] = _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_get
    if _newclass:
        txRcvPolarization = _swig_property(_six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_get, _six_sicd.ScopedCloneableChannelParameters_txRcvPolarization_set)
    __swig_setmethods__["rcvAPCIndex"] = _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_set
    __swig_getmethods__["rcvAPCIndex"] = _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_get
    if _newclass:
        rcvAPCIndex = _swig_property(_six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_get, _six_sicd.ScopedCloneableChannelParameters_rcvAPCIndex_set)
ScopedCloneableChannelParameters_swigregister = _six_sicd.ScopedCloneableChannelParameters_swigregister
ScopedCloneableChannelParameters_swigregister(ScopedCloneableChannelParameters)

class VectorScopedCloneableWaveformParameters(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableWaveformParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableWaveformParameters, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCloneableWaveformParameters self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCloneableWaveformParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCloneableWaveformParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___len__(self)


    def pop(self):
        """pop(VectorScopedCloneableWaveformParameters self) -> ScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j) -> VectorScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j, VectorScopedCloneableWaveformParameters v)
        __setslice__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type j)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i)
        __delitem__(VectorScopedCloneableWaveformParameters self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCloneableWaveformParameters self, PySliceObject * slice) -> VectorScopedCloneableWaveformParameters
        __getitem__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i) -> ScopedCloneableWaveformParameters
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCloneableWaveformParameters self, PySliceObject * slice, VectorScopedCloneableWaveformParameters v)
        __setitem__(VectorScopedCloneableWaveformParameters self, PySliceObject * slice)
        __setitem__(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::difference_type i, ScopedCloneableWaveformParameters x)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters___setitem__(self, *args)


    def append(self, x):
        """append(VectorScopedCloneableWaveformParameters self, ScopedCloneableWaveformParameters x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_append(self, x)


    def empty(self):
        """empty(VectorScopedCloneableWaveformParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_empty(self)


    def size(self):
        """size(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_size(self)


    def clear(self):
        """clear(VectorScopedCloneableWaveformParameters self)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_clear(self)


    def swap(self, v):
        """swap(VectorScopedCloneableWaveformParameters self, VectorScopedCloneableWaveformParameters v)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::allocator_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_get_allocator(self)


    def begin(self):
        """begin(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_begin(self)


    def end(self):
        """end(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_rbegin(self)


    def rend(self):
        """rend(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_rend(self)


    def pop_back(self):
        """pop_back(VectorScopedCloneableWaveformParameters self)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator
        erase(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> self) -> VectorScopedCloneableWaveformParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> self, VectorScopedCloneableWaveformParameters arg2) -> VectorScopedCloneableWaveformParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type size) -> VectorScopedCloneableWaveformParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::WaveformParameters)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type size, ScopedCloneableWaveformParameters value) -> VectorScopedCloneableWaveformParameters
        """
        this = _six_sicd.new_VectorScopedCloneableWaveformParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCloneableWaveformParameters self, ScopedCloneableWaveformParameters x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_push_back(self, x)


    def front(self):
        """front(VectorScopedCloneableWaveformParameters self) -> ScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_front(self)


    def back(self):
        """back(VectorScopedCloneableWaveformParameters self) -> ScopedCloneableWaveformParameters"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type n, ScopedCloneableWaveformParameters x)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type new_size)
        resize(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type new_size, ScopedCloneableWaveformParameters x)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator pos, ScopedCloneableWaveformParameters x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator
        insert(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type n, ScopedCloneableWaveformParameters x)
        """
        return _six_sicd.VectorScopedCloneableWaveformParameters_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCloneableWaveformParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type n)"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCloneableWaveformParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::WaveformParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableWaveformParameters_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableWaveformParameters
    __del__ = lambda self: None
VectorScopedCloneableWaveformParameters_swigregister = _six_sicd.VectorScopedCloneableWaveformParameters_swigregister
VectorScopedCloneableWaveformParameters_swigregister(VectorScopedCloneableWaveformParameters)

class VectorScopedCloneableTxStep(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableTxStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableTxStep, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCloneableTxStep self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCloneableTxStep_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCloneableTxStep self) -> bool"""
        return _six_sicd.VectorScopedCloneableTxStep___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCloneableTxStep self) -> bool"""
        return _six_sicd.VectorScopedCloneableTxStep___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type"""
        return _six_sicd.VectorScopedCloneableTxStep___len__(self)


    def pop(self):
        """pop(VectorScopedCloneableTxStep self) -> ScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j) -> VectorScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j, VectorScopedCloneableTxStep v)
        __setslice__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j)
        """
        return _six_sicd.VectorScopedCloneableTxStep___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type j)"""
        return _six_sicd.VectorScopedCloneableTxStep___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i)
        __delitem__(VectorScopedCloneableTxStep self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCloneableTxStep___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCloneableTxStep self, PySliceObject * slice) -> VectorScopedCloneableTxStep
        __getitem__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i) -> ScopedCloneableTxStep
        """
        return _six_sicd.VectorScopedCloneableTxStep___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCloneableTxStep self, PySliceObject * slice, VectorScopedCloneableTxStep v)
        __setitem__(VectorScopedCloneableTxStep self, PySliceObject * slice)
        __setitem__(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::difference_type i, ScopedCloneableTxStep x)
        """
        return _six_sicd.VectorScopedCloneableTxStep___setitem__(self, *args)


    def append(self, x):
        """append(VectorScopedCloneableTxStep self, ScopedCloneableTxStep x)"""
        return _six_sicd.VectorScopedCloneableTxStep_append(self, x)


    def empty(self):
        """empty(VectorScopedCloneableTxStep self) -> bool"""
        return _six_sicd.VectorScopedCloneableTxStep_empty(self)


    def size(self):
        """size(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type"""
        return _six_sicd.VectorScopedCloneableTxStep_size(self)


    def clear(self):
        """clear(VectorScopedCloneableTxStep self)"""
        return _six_sicd.VectorScopedCloneableTxStep_clear(self)


    def swap(self, v):
        """swap(VectorScopedCloneableTxStep self, VectorScopedCloneableTxStep v)"""
        return _six_sicd.VectorScopedCloneableTxStep_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::allocator_type"""
        return _six_sicd.VectorScopedCloneableTxStep_get_allocator(self)


    def begin(self):
        """begin(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_begin(self)


    def end(self):
        """end(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_rbegin(self)


    def rend(self):
        """rend(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableTxStep_rend(self)


    def pop_back(self):
        """pop_back(VectorScopedCloneableTxStep self)"""
        return _six_sicd.VectorScopedCloneableTxStep_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator
        erase(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator
        """
        return _six_sicd.VectorScopedCloneableTxStep_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> self) -> VectorScopedCloneableTxStep
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> self, VectorScopedCloneableTxStep arg2) -> VectorScopedCloneableTxStep
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type size) -> VectorScopedCloneableTxStep
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::TxStep)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type size, ScopedCloneableTxStep value) -> VectorScopedCloneableTxStep
        """
        this = _six_sicd.new_VectorScopedCloneableTxStep(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCloneableTxStep self, ScopedCloneableTxStep x)"""
        return _six_sicd.VectorScopedCloneableTxStep_push_back(self, x)


    def front(self):
        """front(VectorScopedCloneableTxStep self) -> ScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep_front(self)


    def back(self):
        """back(VectorScopedCloneableTxStep self) -> ScopedCloneableTxStep"""
        return _six_sicd.VectorScopedCloneableTxStep_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type n, ScopedCloneableTxStep x)"""
        return _six_sicd.VectorScopedCloneableTxStep_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type new_size)
        resize(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type new_size, ScopedCloneableTxStep x)
        """
        return _six_sicd.VectorScopedCloneableTxStep_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator pos, ScopedCloneableTxStep x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator
        insert(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type n, ScopedCloneableTxStep x)
        """
        return _six_sicd.VectorScopedCloneableTxStep_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCloneableTxStep self, std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type n)"""
        return _six_sicd.VectorScopedCloneableTxStep_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCloneableTxStep self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::TxStep > >::size_type"""
        return _six_sicd.VectorScopedCloneableTxStep_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableTxStep
    __del__ = lambda self: None
VectorScopedCloneableTxStep_swigregister = _six_sicd.VectorScopedCloneableTxStep_swigregister
VectorScopedCloneableTxStep_swigregister(VectorScopedCloneableTxStep)

class vectorScopedClonableSegment(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorScopedClonableSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorScopedClonableSegment, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vectorScopedClonableSegment self) -> SwigPyIterator"""
        return _six_sicd.vectorScopedClonableSegment_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vectorScopedClonableSegment self) -> bool"""
        return _six_sicd.vectorScopedClonableSegment___nonzero__(self)


    def __bool__(self):
        """__bool__(vectorScopedClonableSegment self) -> bool"""
        return _six_sicd.vectorScopedClonableSegment___bool__(self)


    def __len__(self):
        """__len__(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type"""
        return _six_sicd.vectorScopedClonableSegment___len__(self)


    def pop(self):
        """pop(vectorScopedClonableSegment self) -> ScopedCloneableSegment"""
        return _six_sicd.vectorScopedClonableSegment_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j) -> vectorScopedClonableSegment"""
        return _six_sicd.vectorScopedClonableSegment___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j, vectorScopedClonableSegment v)
        __setslice__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j)
        """
        return _six_sicd.vectorScopedClonableSegment___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type j)"""
        return _six_sicd.vectorScopedClonableSegment___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i)
        __delitem__(vectorScopedClonableSegment self, PySliceObject * slice)
        """
        return _six_sicd.vectorScopedClonableSegment___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vectorScopedClonableSegment self, PySliceObject * slice) -> vectorScopedClonableSegment
        __getitem__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i) -> ScopedCloneableSegment
        """
        return _six_sicd.vectorScopedClonableSegment___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vectorScopedClonableSegment self, PySliceObject * slice, vectorScopedClonableSegment v)
        __setitem__(vectorScopedClonableSegment self, PySliceObject * slice)
        __setitem__(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::difference_type i, ScopedCloneableSegment x)
        """
        return _six_sicd.vectorScopedClonableSegment___setitem__(self, *args)


    def append(self, x):
        """append(vectorScopedClonableSegment self, ScopedCloneableSegment x)"""
        return _six_sicd.vectorScopedClonableSegment_append(self, x)


    def empty(self):
        """empty(vectorScopedClonableSegment self) -> bool"""
        return _six_sicd.vectorScopedClonableSegment_empty(self)


    def size(self):
        """size(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type"""
        return _six_sicd.vectorScopedClonableSegment_size(self)


    def clear(self):
        """clear(vectorScopedClonableSegment self)"""
        return _six_sicd.vectorScopedClonableSegment_clear(self)


    def swap(self, v):
        """swap(vectorScopedClonableSegment self, vectorScopedClonableSegment v)"""
        return _six_sicd.vectorScopedClonableSegment_swap(self, v)


    def get_allocator(self):
        """get_allocator(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::allocator_type"""
        return _six_sicd.vectorScopedClonableSegment_get_allocator(self)


    def begin(self):
        """begin(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator"""
        return _six_sicd.vectorScopedClonableSegment_begin(self)


    def end(self):
        """end(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator"""
        return _six_sicd.vectorScopedClonableSegment_end(self)


    def rbegin(self):
        """rbegin(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::reverse_iterator"""
        return _six_sicd.vectorScopedClonableSegment_rbegin(self)


    def rend(self):
        """rend(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::reverse_iterator"""
        return _six_sicd.vectorScopedClonableSegment_rend(self)


    def pop_back(self):
        """pop_back(vectorScopedClonableSegment self)"""
        return _six_sicd.vectorScopedClonableSegment_pop_back(self)


    def erase(self, *args):
        """
        erase(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator
        erase(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator
        """
        return _six_sicd.vectorScopedClonableSegment_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> self) -> vectorScopedClonableSegment
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> self, vectorScopedClonableSegment arg2) -> vectorScopedClonableSegment
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type size) -> vectorScopedClonableSegment
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::Segment)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type size, ScopedCloneableSegment value) -> vectorScopedClonableSegment
        """
        this = _six_sicd.new_vectorScopedClonableSegment(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vectorScopedClonableSegment self, ScopedCloneableSegment x)"""
        return _six_sicd.vectorScopedClonableSegment_push_back(self, x)


    def front(self):
        """front(vectorScopedClonableSegment self) -> ScopedCloneableSegment"""
        return _six_sicd.vectorScopedClonableSegment_front(self)


    def back(self):
        """back(vectorScopedClonableSegment self) -> ScopedCloneableSegment"""
        return _six_sicd.vectorScopedClonableSegment_back(self)


    def assign(self, n, x):
        """assign(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type n, ScopedCloneableSegment x)"""
        return _six_sicd.vectorScopedClonableSegment_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type new_size)
        resize(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type new_size, ScopedCloneableSegment x)
        """
        return _six_sicd.vectorScopedClonableSegment_resize(self, *args)


    def insert(self, *args):
        """
        insert(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator pos, ScopedCloneableSegment x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator
        insert(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type n, ScopedCloneableSegment x)
        """
        return _six_sicd.vectorScopedClonableSegment_insert(self, *args)


    def reserve(self, n):
        """reserve(vectorScopedClonableSegment self, std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type n)"""
        return _six_sicd.vectorScopedClonableSegment_reserve(self, n)


    def capacity(self):
        """capacity(vectorScopedClonableSegment self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::Segment > >::size_type"""
        return _six_sicd.vectorScopedClonableSegment_capacity(self)

    __swig_destroy__ = _six_sicd.delete_vectorScopedClonableSegment
    __del__ = lambda self: None
vectorScopedClonableSegment_swigregister = _six_sicd.vectorScopedClonableSegment_swigregister
vectorScopedClonableSegment_swigregister(vectorScopedClonableSegment)

class VectorScopedCloneableChannelParameters(_object):
    """Proxy of C++ std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCloneableChannelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCloneableChannelParameters, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCloneableChannelParameters self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCloneableChannelParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableChannelParameters___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCloneableChannelParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableChannelParameters___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters___len__(self)


    def pop(self):
        """pop(VectorScopedCloneableChannelParameters self) -> ScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j) -> VectorScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j, VectorScopedCloneableChannelParameters v)
        __setslice__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type j)"""
        return _six_sicd.VectorScopedCloneableChannelParameters___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i)
        __delitem__(VectorScopedCloneableChannelParameters self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCloneableChannelParameters self, PySliceObject * slice) -> VectorScopedCloneableChannelParameters
        __getitem__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i) -> ScopedCloneableChannelParameters
        """
        return _six_sicd.VectorScopedCloneableChannelParameters___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCloneableChannelParameters self, PySliceObject * slice, VectorScopedCloneableChannelParameters v)
        __setitem__(VectorScopedCloneableChannelParameters self, PySliceObject * slice)
        __setitem__(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::difference_type i, ScopedCloneableChannelParameters x)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters___setitem__(self, *args)


    def append(self, x):
        """append(VectorScopedCloneableChannelParameters self, ScopedCloneableChannelParameters x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_append(self, x)


    def empty(self):
        """empty(VectorScopedCloneableChannelParameters self) -> bool"""
        return _six_sicd.VectorScopedCloneableChannelParameters_empty(self)


    def size(self):
        """size(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_size(self)


    def clear(self):
        """clear(VectorScopedCloneableChannelParameters self)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_clear(self)


    def swap(self, v):
        """swap(VectorScopedCloneableChannelParameters self, VectorScopedCloneableChannelParameters v)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::allocator_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_get_allocator(self)


    def begin(self):
        """begin(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_begin(self)


    def end(self):
        """end(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_rbegin(self)


    def rend(self):
        """rend(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::reverse_iterator"""
        return _six_sicd.VectorScopedCloneableChannelParameters_rend(self)


    def pop_back(self):
        """pop_back(VectorScopedCloneableChannelParameters self)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator pos) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator
        erase(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator first, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator last) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> self) -> VectorScopedCloneableChannelParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> self, VectorScopedCloneableChannelParameters arg2) -> VectorScopedCloneableChannelParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type size) -> VectorScopedCloneableChannelParameters
        __init__(std::vector<(mem::ScopedCloneablePtr<(six::sicd::ChannelParameters)>)> self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type size, ScopedCloneableChannelParameters value) -> VectorScopedCloneableChannelParameters
        """
        this = _six_sicd.new_VectorScopedCloneableChannelParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCloneableChannelParameters self, ScopedCloneableChannelParameters x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_push_back(self, x)


    def front(self):
        """front(VectorScopedCloneableChannelParameters self) -> ScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters_front(self)


    def back(self):
        """back(VectorScopedCloneableChannelParameters self) -> ScopedCloneableChannelParameters"""
        return _six_sicd.VectorScopedCloneableChannelParameters_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type n, ScopedCloneableChannelParameters x)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type new_size)
        resize(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type new_size, ScopedCloneableChannelParameters x)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator pos, ScopedCloneableChannelParameters x) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator
        insert(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::iterator pos, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type n, ScopedCloneableChannelParameters x)
        """
        return _six_sicd.VectorScopedCloneableChannelParameters_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCloneableChannelParameters self, std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type n)"""
        return _six_sicd.VectorScopedCloneableChannelParameters_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCloneableChannelParameters self) -> std::vector< mem::ScopedCloneablePtr< six::sicd::ChannelParameters > >::size_type"""
        return _six_sicd.VectorScopedCloneableChannelParameters_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCloneableChannelParameters
    __del__ = lambda self: None
VectorScopedCloneableChannelParameters_swigregister = _six_sicd.VectorScopedCloneableChannelParameters_swigregister
VectorScopedCloneableChannelParameters_swigregister(VectorScopedCloneableChannelParameters)

class VectorInt(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorInt self) -> SwigPyIterator"""
        return _six_sicd.VectorInt_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorInt self) -> bool"""
        return _six_sicd.VectorInt___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorInt self) -> bool"""
        return _six_sicd.VectorInt___bool__(self)


    def __len__(self):
        """__len__(VectorInt self) -> std::vector< int >::size_type"""
        return _six_sicd.VectorInt___len__(self)


    def pop(self):
        """pop(VectorInt self) -> std::vector< int >::value_type"""
        return _six_sicd.VectorInt_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> VectorInt"""
        return _six_sicd.VectorInt___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, VectorInt v)
        __setslice__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _six_sicd.VectorInt___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _six_sicd.VectorInt___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorInt self, std::vector< int >::difference_type i)
        __delitem__(VectorInt self, PySliceObject * slice)
        """
        return _six_sicd.VectorInt___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorInt self, PySliceObject * slice) -> VectorInt
        __getitem__(VectorInt self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _six_sicd.VectorInt___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorInt self, PySliceObject * slice, VectorInt v)
        __setitem__(VectorInt self, PySliceObject * slice)
        __setitem__(VectorInt self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _six_sicd.VectorInt___setitem__(self, *args)


    def append(self, x):
        """append(VectorInt self, std::vector< int >::value_type const & x)"""
        return _six_sicd.VectorInt_append(self, x)


    def empty(self):
        """empty(VectorInt self) -> bool"""
        return _six_sicd.VectorInt_empty(self)


    def size(self):
        """size(VectorInt self) -> std::vector< int >::size_type"""
        return _six_sicd.VectorInt_size(self)


    def clear(self):
        """clear(VectorInt self)"""
        return _six_sicd.VectorInt_clear(self)


    def swap(self, v):
        """swap(VectorInt self, VectorInt v)"""
        return _six_sicd.VectorInt_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorInt self) -> std::vector< int >::allocator_type"""
        return _six_sicd.VectorInt_get_allocator(self)


    def begin(self):
        """begin(VectorInt self) -> std::vector< int >::iterator"""
        return _six_sicd.VectorInt_begin(self)


    def end(self):
        """end(VectorInt self) -> std::vector< int >::iterator"""
        return _six_sicd.VectorInt_end(self)


    def rbegin(self):
        """rbegin(VectorInt self) -> std::vector< int >::reverse_iterator"""
        return _six_sicd.VectorInt_rbegin(self)


    def rend(self):
        """rend(VectorInt self) -> std::vector< int >::reverse_iterator"""
        return _six_sicd.VectorInt_rend(self)


    def pop_back(self):
        """pop_back(VectorInt self)"""
        return _six_sicd.VectorInt_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorInt self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(VectorInt self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _six_sicd.VectorInt_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> VectorInt
        __init__(std::vector<(int)> self, VectorInt arg2) -> VectorInt
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> VectorInt
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> VectorInt
        """
        this = _six_sicd.new_VectorInt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorInt self, std::vector< int >::value_type const & x)"""
        return _six_sicd.VectorInt_push_back(self, x)


    def front(self):
        """front(VectorInt self) -> std::vector< int >::value_type const &"""
        return _six_sicd.VectorInt_front(self)


    def back(self):
        """back(VectorInt self) -> std::vector< int >::value_type const &"""
        return _six_sicd.VectorInt_back(self)


    def assign(self, n, x):
        """assign(VectorInt self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _six_sicd.VectorInt_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorInt self, std::vector< int >::size_type new_size)
        resize(VectorInt self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _six_sicd.VectorInt_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorInt self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(VectorInt self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _six_sicd.VectorInt_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorInt self, std::vector< int >::size_type n)"""
        return _six_sicd.VectorInt_reserve(self, n)


    def capacity(self):
        """capacity(VectorInt self) -> std::vector< int >::size_type"""
        return _six_sicd.VectorInt_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _six_sicd.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class ScopedCopyableRcvChannelProcessed(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RcvChannelProcessed)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRcvChannelProcessed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRcvChannelProcessed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvChannelProcessed)> self, RcvChannelProcessed ptr=None) -> ScopedCopyableRcvChannelProcessed
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvChannelProcessed)> self) -> ScopedCopyableRcvChannelProcessed
        __init__(mem::ScopedCopyablePtr<(six::sicd::RcvChannelProcessed)> self, ScopedCopyableRcvChannelProcessed rhs) -> ScopedCopyableRcvChannelProcessed
        """
        this = _six_sicd.new_ScopedCopyableRcvChannelProcessed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRcvChannelProcessed self) -> RcvChannelProcessed"""
        return _six_sicd.ScopedCopyableRcvChannelProcessed___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRcvChannelProcessed self, RcvChannelProcessed ptr=None)
        reset(ScopedCopyableRcvChannelProcessed self)
        """
        return _six_sicd.ScopedCopyableRcvChannelProcessed_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRcvChannelProcessed
    __del__ = lambda self: None
    __swig_setmethods__["numChannelsProcessed"] = _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set
    __swig_getmethods__["numChannelsProcessed"] = _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get
    if _newclass:
        numChannelsProcessed = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_get, _six_sicd.ScopedCopyableRcvChannelProcessed_numChannelsProcessed_set)
    __swig_setmethods__["prfScaleFactor"] = _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_set
    __swig_getmethods__["prfScaleFactor"] = _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_get
    if _newclass:
        prfScaleFactor = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_get, _six_sicd.ScopedCopyableRcvChannelProcessed_prfScaleFactor_set)
    __swig_setmethods__["channelIndex"] = _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_set
    __swig_getmethods__["channelIndex"] = _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_get
    if _newclass:
        channelIndex = _swig_property(_six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_get, _six_sicd.ScopedCopyableRcvChannelProcessed_channelIndex_set)
ScopedCopyableRcvChannelProcessed_swigregister = _six_sicd.ScopedCopyableRcvChannelProcessed_swigregister
ScopedCopyableRcvChannelProcessed_swigregister(ScopedCopyableRcvChannelProcessed)

class VectorProcessing(_object):
    """Proxy of C++ std::vector<(six::sicd::Processing)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorProcessing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorProcessing, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorProcessing self) -> SwigPyIterator"""
        return _six_sicd.VectorProcessing_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorProcessing self) -> bool"""
        return _six_sicd.VectorProcessing___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorProcessing self) -> bool"""
        return _six_sicd.VectorProcessing___bool__(self)


    def __len__(self):
        """__len__(VectorProcessing self) -> std::vector< six::sicd::Processing >::size_type"""
        return _six_sicd.VectorProcessing___len__(self)


    def pop(self):
        """pop(VectorProcessing self) -> Processing"""
        return _six_sicd.VectorProcessing_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, std::vector< six::sicd::Processing >::difference_type j) -> VectorProcessing"""
        return _six_sicd.VectorProcessing___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, std::vector< six::sicd::Processing >::difference_type j, VectorProcessing v)
        __setslice__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, std::vector< six::sicd::Processing >::difference_type j)
        """
        return _six_sicd.VectorProcessing___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, std::vector< six::sicd::Processing >::difference_type j)"""
        return _six_sicd.VectorProcessing___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i)
        __delitem__(VectorProcessing self, PySliceObject * slice)
        """
        return _six_sicd.VectorProcessing___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorProcessing self, PySliceObject * slice) -> VectorProcessing
        __getitem__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i) -> Processing
        """
        return _six_sicd.VectorProcessing___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorProcessing self, PySliceObject * slice, VectorProcessing v)
        __setitem__(VectorProcessing self, PySliceObject * slice)
        __setitem__(VectorProcessing self, std::vector< six::sicd::Processing >::difference_type i, Processing x)
        """
        return _six_sicd.VectorProcessing___setitem__(self, *args)


    def append(self, x):
        """append(VectorProcessing self, Processing x)"""
        return _six_sicd.VectorProcessing_append(self, x)


    def empty(self):
        """empty(VectorProcessing self) -> bool"""
        return _six_sicd.VectorProcessing_empty(self)


    def size(self):
        """size(VectorProcessing self) -> std::vector< six::sicd::Processing >::size_type"""
        return _six_sicd.VectorProcessing_size(self)


    def clear(self):
        """clear(VectorProcessing self)"""
        return _six_sicd.VectorProcessing_clear(self)


    def swap(self, v):
        """swap(VectorProcessing self, VectorProcessing v)"""
        return _six_sicd.VectorProcessing_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorProcessing self) -> std::vector< six::sicd::Processing >::allocator_type"""
        return _six_sicd.VectorProcessing_get_allocator(self)


    def begin(self):
        """begin(VectorProcessing self) -> std::vector< six::sicd::Processing >::iterator"""
        return _six_sicd.VectorProcessing_begin(self)


    def end(self):
        """end(VectorProcessing self) -> std::vector< six::sicd::Processing >::iterator"""
        return _six_sicd.VectorProcessing_end(self)


    def rbegin(self):
        """rbegin(VectorProcessing self) -> std::vector< six::sicd::Processing >::reverse_iterator"""
        return _six_sicd.VectorProcessing_rbegin(self)


    def rend(self):
        """rend(VectorProcessing self) -> std::vector< six::sicd::Processing >::reverse_iterator"""
        return _six_sicd.VectorProcessing_rend(self)


    def pop_back(self):
        """pop_back(VectorProcessing self)"""
        return _six_sicd.VectorProcessing_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorProcessing self, std::vector< six::sicd::Processing >::iterator pos) -> std::vector< six::sicd::Processing >::iterator
        erase(VectorProcessing self, std::vector< six::sicd::Processing >::iterator first, std::vector< six::sicd::Processing >::iterator last) -> std::vector< six::sicd::Processing >::iterator
        """
        return _six_sicd.VectorProcessing_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::sicd::Processing)> self) -> VectorProcessing
        __init__(std::vector<(six::sicd::Processing)> self, VectorProcessing arg2) -> VectorProcessing
        __init__(std::vector<(six::sicd::Processing)> self, std::vector< six::sicd::Processing >::size_type size) -> VectorProcessing
        __init__(std::vector<(six::sicd::Processing)> self, std::vector< six::sicd::Processing >::size_type size, Processing value) -> VectorProcessing
        """
        this = _six_sicd.new_VectorProcessing(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorProcessing self, Processing x)"""
        return _six_sicd.VectorProcessing_push_back(self, x)


    def front(self):
        """front(VectorProcessing self) -> Processing"""
        return _six_sicd.VectorProcessing_front(self)


    def back(self):
        """back(VectorProcessing self) -> Processing"""
        return _six_sicd.VectorProcessing_back(self)


    def assign(self, n, x):
        """assign(VectorProcessing self, std::vector< six::sicd::Processing >::size_type n, Processing x)"""
        return _six_sicd.VectorProcessing_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorProcessing self, std::vector< six::sicd::Processing >::size_type new_size)
        resize(VectorProcessing self, std::vector< six::sicd::Processing >::size_type new_size, Processing x)
        """
        return _six_sicd.VectorProcessing_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorProcessing self, std::vector< six::sicd::Processing >::iterator pos, Processing x) -> std::vector< six::sicd::Processing >::iterator
        insert(VectorProcessing self, std::vector< six::sicd::Processing >::iterator pos, std::vector< six::sicd::Processing >::size_type n, Processing x)
        """
        return _six_sicd.VectorProcessing_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorProcessing self, std::vector< six::sicd::Processing >::size_type n)"""
        return _six_sicd.VectorProcessing_reserve(self, n)


    def capacity(self):
        """capacity(VectorProcessing self) -> std::vector< six::sicd::Processing >::size_type"""
        return _six_sicd.VectorProcessing_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorProcessing
    __del__ = lambda self: None
VectorProcessing_swigregister = _six_sicd.VectorProcessing_swigregister
VectorProcessing_swigregister(VectorProcessing)

class ScopedCopyablePolarizationCalibration(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::PolarizationCalibration)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyablePolarizationCalibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyablePolarizationCalibration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::PolarizationCalibration)> self, PolarizationCalibration ptr=None) -> ScopedCopyablePolarizationCalibration
        __init__(mem::ScopedCopyablePtr<(six::sicd::PolarizationCalibration)> self) -> ScopedCopyablePolarizationCalibration
        __init__(mem::ScopedCopyablePtr<(six::sicd::PolarizationCalibration)> self, ScopedCopyablePolarizationCalibration rhs) -> ScopedCopyablePolarizationCalibration
        """
        this = _six_sicd.new_ScopedCopyablePolarizationCalibration(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyablePolarizationCalibration self) -> PolarizationCalibration"""
        return _six_sicd.ScopedCopyablePolarizationCalibration___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyablePolarizationCalibration self, PolarizationCalibration ptr=None)
        reset(ScopedCopyablePolarizationCalibration self)
        """
        return _six_sicd.ScopedCopyablePolarizationCalibration_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyablePolarizationCalibration
    __del__ = lambda self: None
    __swig_setmethods__["hvAngleCompensationApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set
    __swig_getmethods__["hvAngleCompensationApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get
    if _newclass:
        hvAngleCompensationApplied = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_get, _six_sicd.ScopedCopyablePolarizationCalibration_hvAngleCompensationApplied_set)
    __swig_setmethods__["distortionCorrectionApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set
    __swig_getmethods__["distortionCorrectionApplied"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get
    if _newclass:
        distortionCorrectionApplied = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_get, _six_sicd.ScopedCopyablePolarizationCalibration_distortionCorrectionApplied_set)
    __swig_setmethods__["distortion"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortion_set
    __swig_getmethods__["distortion"] = _six_sicd.ScopedCopyablePolarizationCalibration_distortion_get
    if _newclass:
        distortion = _swig_property(_six_sicd.ScopedCopyablePolarizationCalibration_distortion_get, _six_sicd.ScopedCopyablePolarizationCalibration_distortion_set)
ScopedCopyablePolarizationCalibration_swigregister = _six_sicd.ScopedCopyablePolarizationCalibration_swigregister
ScopedCopyablePolarizationCalibration_swigregister(ScopedCopyablePolarizationCalibration)

class ScopedCopyablePosVelError(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::PosVelError)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyablePosVelError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyablePosVelError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::PosVelError)> self, PosVelError ptr=None) -> ScopedCopyablePosVelError
        __init__(mem::ScopedCopyablePtr<(six::PosVelError)> self) -> ScopedCopyablePosVelError
        __init__(mem::ScopedCopyablePtr<(six::PosVelError)> self, ScopedCopyablePosVelError rhs) -> ScopedCopyablePosVelError
        """
        this = _six_sicd.new_ScopedCopyablePosVelError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyablePosVelError self) -> PosVelError"""
        return _six_sicd.ScopedCopyablePosVelError_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyablePosVelError self) -> PosVelError"""
        return _six_sicd.ScopedCopyablePosVelError___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyablePosVelError self) -> PosVelError"""
        return _six_sicd.ScopedCopyablePosVelError___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyablePosVelError self, PosVelError ptr=None)
        reset(ScopedCopyablePosVelError self)
        """
        return _six_sicd.ScopedCopyablePosVelError_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyablePosVelError
    __del__ = lambda self: None
    __swig_setmethods__["frame"] = _six_sicd.ScopedCopyablePosVelError_frame_set
    __swig_getmethods__["frame"] = _six_sicd.ScopedCopyablePosVelError_frame_get
    if _newclass:
        frame = _swig_property(_six_sicd.ScopedCopyablePosVelError_frame_get, _six_sicd.ScopedCopyablePosVelError_frame_set)
    __swig_setmethods__["p1"] = _six_sicd.ScopedCopyablePosVelError_p1_set
    __swig_getmethods__["p1"] = _six_sicd.ScopedCopyablePosVelError_p1_get
    if _newclass:
        p1 = _swig_property(_six_sicd.ScopedCopyablePosVelError_p1_get, _six_sicd.ScopedCopyablePosVelError_p1_set)
    __swig_setmethods__["p2"] = _six_sicd.ScopedCopyablePosVelError_p2_set
    __swig_getmethods__["p2"] = _six_sicd.ScopedCopyablePosVelError_p2_get
    if _newclass:
        p2 = _swig_property(_six_sicd.ScopedCopyablePosVelError_p2_get, _six_sicd.ScopedCopyablePosVelError_p2_set)
    __swig_setmethods__["p3"] = _six_sicd.ScopedCopyablePosVelError_p3_set
    __swig_getmethods__["p3"] = _six_sicd.ScopedCopyablePosVelError_p3_get
    if _newclass:
        p3 = _swig_property(_six_sicd.ScopedCopyablePosVelError_p3_get, _six_sicd.ScopedCopyablePosVelError_p3_set)
    __swig_setmethods__["v1"] = _six_sicd.ScopedCopyablePosVelError_v1_set
    __swig_getmethods__["v1"] = _six_sicd.ScopedCopyablePosVelError_v1_get
    if _newclass:
        v1 = _swig_property(_six_sicd.ScopedCopyablePosVelError_v1_get, _six_sicd.ScopedCopyablePosVelError_v1_set)
    __swig_setmethods__["v2"] = _six_sicd.ScopedCopyablePosVelError_v2_set
    __swig_getmethods__["v2"] = _six_sicd.ScopedCopyablePosVelError_v2_get
    if _newclass:
        v2 = _swig_property(_six_sicd.ScopedCopyablePosVelError_v2_get, _six_sicd.ScopedCopyablePosVelError_v2_set)
    __swig_setmethods__["v3"] = _six_sicd.ScopedCopyablePosVelError_v3_set
    __swig_getmethods__["v3"] = _six_sicd.ScopedCopyablePosVelError_v3_get
    if _newclass:
        v3 = _swig_property(_six_sicd.ScopedCopyablePosVelError_v3_get, _six_sicd.ScopedCopyablePosVelError_v3_set)
    __swig_setmethods__["corrCoefs"] = _six_sicd.ScopedCopyablePosVelError_corrCoefs_set
    __swig_getmethods__["corrCoefs"] = _six_sicd.ScopedCopyablePosVelError_corrCoefs_get
    if _newclass:
        corrCoefs = _swig_property(_six_sicd.ScopedCopyablePosVelError_corrCoefs_get, _six_sicd.ScopedCopyablePosVelError_corrCoefs_set)
    __swig_setmethods__["positionDecorr"] = _six_sicd.ScopedCopyablePosVelError_positionDecorr_set
    __swig_getmethods__["positionDecorr"] = _six_sicd.ScopedCopyablePosVelError_positionDecorr_get
    if _newclass:
        positionDecorr = _swig_property(_six_sicd.ScopedCopyablePosVelError_positionDecorr_get, _six_sicd.ScopedCopyablePosVelError_positionDecorr_set)
ScopedCopyablePosVelError_swigregister = _six_sicd.ScopedCopyablePosVelError_swigregister
ScopedCopyablePosVelError_swigregister(ScopedCopyablePosVelError)

class ScopedCopyableRadarSensor(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::RadarSensor)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRadarSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRadarSensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::RadarSensor)> self, RadarSensor ptr=None) -> ScopedCopyableRadarSensor
        __init__(mem::ScopedCopyablePtr<(six::RadarSensor)> self) -> ScopedCopyableRadarSensor
        __init__(mem::ScopedCopyablePtr<(six::RadarSensor)> self, ScopedCopyableRadarSensor rhs) -> ScopedCopyableRadarSensor
        """
        this = _six_sicd.new_ScopedCopyableRadarSensor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableRadarSensor self) -> RadarSensor"""
        return _six_sicd.ScopedCopyableRadarSensor_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRadarSensor self) -> RadarSensor"""
        return _six_sicd.ScopedCopyableRadarSensor___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRadarSensor self) -> RadarSensor"""
        return _six_sicd.ScopedCopyableRadarSensor___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRadarSensor self, RadarSensor ptr=None)
        reset(ScopedCopyableRadarSensor self)
        """
        return _six_sicd.ScopedCopyableRadarSensor_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRadarSensor
    __del__ = lambda self: None
    __swig_setmethods__["rangeBias"] = _six_sicd.ScopedCopyableRadarSensor_rangeBias_set
    __swig_getmethods__["rangeBias"] = _six_sicd.ScopedCopyableRadarSensor_rangeBias_get
    if _newclass:
        rangeBias = _swig_property(_six_sicd.ScopedCopyableRadarSensor_rangeBias_get, _six_sicd.ScopedCopyableRadarSensor_rangeBias_set)
    __swig_setmethods__["clockFreqSF"] = _six_sicd.ScopedCopyableRadarSensor_clockFreqSF_set
    __swig_getmethods__["clockFreqSF"] = _six_sicd.ScopedCopyableRadarSensor_clockFreqSF_get
    if _newclass:
        clockFreqSF = _swig_property(_six_sicd.ScopedCopyableRadarSensor_clockFreqSF_get, _six_sicd.ScopedCopyableRadarSensor_clockFreqSF_set)
    __swig_setmethods__["transmitFreqSF"] = _six_sicd.ScopedCopyableRadarSensor_transmitFreqSF_set
    __swig_getmethods__["transmitFreqSF"] = _six_sicd.ScopedCopyableRadarSensor_transmitFreqSF_get
    if _newclass:
        transmitFreqSF = _swig_property(_six_sicd.ScopedCopyableRadarSensor_transmitFreqSF_get, _six_sicd.ScopedCopyableRadarSensor_transmitFreqSF_set)
    __swig_setmethods__["rangeBiasDecorr"] = _six_sicd.ScopedCopyableRadarSensor_rangeBiasDecorr_set
    __swig_getmethods__["rangeBiasDecorr"] = _six_sicd.ScopedCopyableRadarSensor_rangeBiasDecorr_get
    if _newclass:
        rangeBiasDecorr = _swig_property(_six_sicd.ScopedCopyableRadarSensor_rangeBiasDecorr_get, _six_sicd.ScopedCopyableRadarSensor_rangeBiasDecorr_set)
ScopedCopyableRadarSensor_swigregister = _six_sicd.ScopedCopyableRadarSensor_swigregister
ScopedCopyableRadarSensor_swigregister(ScopedCopyableRadarSensor)

class ScopedCopyableTropoError(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::TropoError)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTropoError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTropoError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::TropoError)> self, TropoError ptr=None) -> ScopedCopyableTropoError
        __init__(mem::ScopedCopyablePtr<(six::TropoError)> self) -> ScopedCopyableTropoError
        __init__(mem::ScopedCopyablePtr<(six::TropoError)> self, ScopedCopyableTropoError rhs) -> ScopedCopyableTropoError
        """
        this = _six_sicd.new_ScopedCopyableTropoError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableTropoError self) -> TropoError"""
        return _six_sicd.ScopedCopyableTropoError_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableTropoError self) -> TropoError"""
        return _six_sicd.ScopedCopyableTropoError___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableTropoError self) -> TropoError"""
        return _six_sicd.ScopedCopyableTropoError___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableTropoError self, TropoError ptr=None)
        reset(ScopedCopyableTropoError self)
        """
        return _six_sicd.ScopedCopyableTropoError_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableTropoError
    __del__ = lambda self: None
    __swig_setmethods__["tropoRangeVertical"] = _six_sicd.ScopedCopyableTropoError_tropoRangeVertical_set
    __swig_getmethods__["tropoRangeVertical"] = _six_sicd.ScopedCopyableTropoError_tropoRangeVertical_get
    if _newclass:
        tropoRangeVertical = _swig_property(_six_sicd.ScopedCopyableTropoError_tropoRangeVertical_get, _six_sicd.ScopedCopyableTropoError_tropoRangeVertical_set)
    __swig_setmethods__["tropoRangeSlant"] = _six_sicd.ScopedCopyableTropoError_tropoRangeSlant_set
    __swig_getmethods__["tropoRangeSlant"] = _six_sicd.ScopedCopyableTropoError_tropoRangeSlant_get
    if _newclass:
        tropoRangeSlant = _swig_property(_six_sicd.ScopedCopyableTropoError_tropoRangeSlant_get, _six_sicd.ScopedCopyableTropoError_tropoRangeSlant_set)
    __swig_setmethods__["tropoRangeDecorr"] = _six_sicd.ScopedCopyableTropoError_tropoRangeDecorr_set
    __swig_getmethods__["tropoRangeDecorr"] = _six_sicd.ScopedCopyableTropoError_tropoRangeDecorr_get
    if _newclass:
        tropoRangeDecorr = _swig_property(_six_sicd.ScopedCopyableTropoError_tropoRangeDecorr_get, _six_sicd.ScopedCopyableTropoError_tropoRangeDecorr_set)
ScopedCopyableTropoError_swigregister = _six_sicd.ScopedCopyableTropoError_swigregister
ScopedCopyableTropoError_swigregister(ScopedCopyableTropoError)

class ScopedCopyableIonoError(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::IonoError)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableIonoError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableIonoError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::IonoError)> self, IonoError ptr=None) -> ScopedCopyableIonoError
        __init__(mem::ScopedCopyablePtr<(six::IonoError)> self) -> ScopedCopyableIonoError
        __init__(mem::ScopedCopyablePtr<(six::IonoError)> self, ScopedCopyableIonoError rhs) -> ScopedCopyableIonoError
        """
        this = _six_sicd.new_ScopedCopyableIonoError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableIonoError self) -> IonoError"""
        return _six_sicd.ScopedCopyableIonoError_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableIonoError self) -> IonoError"""
        return _six_sicd.ScopedCopyableIonoError___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableIonoError self) -> IonoError"""
        return _six_sicd.ScopedCopyableIonoError___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableIonoError self, IonoError ptr=None)
        reset(ScopedCopyableIonoError self)
        """
        return _six_sicd.ScopedCopyableIonoError_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableIonoError
    __del__ = lambda self: None
    __swig_setmethods__["ionoRangeVertical"] = _six_sicd.ScopedCopyableIonoError_ionoRangeVertical_set
    __swig_getmethods__["ionoRangeVertical"] = _six_sicd.ScopedCopyableIonoError_ionoRangeVertical_get
    if _newclass:
        ionoRangeVertical = _swig_property(_six_sicd.ScopedCopyableIonoError_ionoRangeVertical_get, _six_sicd.ScopedCopyableIonoError_ionoRangeVertical_set)
    __swig_setmethods__["ionoRangeRateVertical"] = _six_sicd.ScopedCopyableIonoError_ionoRangeRateVertical_set
    __swig_getmethods__["ionoRangeRateVertical"] = _six_sicd.ScopedCopyableIonoError_ionoRangeRateVertical_get
    if _newclass:
        ionoRangeRateVertical = _swig_property(_six_sicd.ScopedCopyableIonoError_ionoRangeRateVertical_get, _six_sicd.ScopedCopyableIonoError_ionoRangeRateVertical_set)
    __swig_setmethods__["ionoRgRgRateCC"] = _six_sicd.ScopedCopyableIonoError_ionoRgRgRateCC_set
    __swig_getmethods__["ionoRgRgRateCC"] = _six_sicd.ScopedCopyableIonoError_ionoRgRgRateCC_get
    if _newclass:
        ionoRgRgRateCC = _swig_property(_six_sicd.ScopedCopyableIonoError_ionoRgRgRateCC_get, _six_sicd.ScopedCopyableIonoError_ionoRgRgRateCC_set)
    __swig_setmethods__["ionoRangeVertDecorr"] = _six_sicd.ScopedCopyableIonoError_ionoRangeVertDecorr_set
    __swig_getmethods__["ionoRangeVertDecorr"] = _six_sicd.ScopedCopyableIonoError_ionoRangeVertDecorr_get
    if _newclass:
        ionoRangeVertDecorr = _swig_property(_six_sicd.ScopedCopyableIonoError_ionoRangeVertDecorr_get, _six_sicd.ScopedCopyableIonoError_ionoRangeVertDecorr_set)
ScopedCopyableIonoError_swigregister = _six_sicd.ScopedCopyableIonoError_swigregister
ScopedCopyableIonoError_swigregister(ScopedCopyableIonoError)

class ScopedCopyableCompositeSCP(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::CompositeSCP)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableCompositeSCP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableCompositeSCP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::CompositeSCP)> self, CompositeSCP ptr=None) -> ScopedCopyableCompositeSCP
        __init__(mem::ScopedCopyablePtr<(six::CompositeSCP)> self) -> ScopedCopyableCompositeSCP
        __init__(mem::ScopedCopyablePtr<(six::CompositeSCP)> self, ScopedCopyableCompositeSCP rhs) -> ScopedCopyableCompositeSCP
        """
        this = _six_sicd.new_ScopedCopyableCompositeSCP(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableCompositeSCP self) -> CompositeSCP"""
        return _six_sicd.ScopedCopyableCompositeSCP_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableCompositeSCP self) -> CompositeSCP"""
        return _six_sicd.ScopedCopyableCompositeSCP___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableCompositeSCP self) -> CompositeSCP"""
        return _six_sicd.ScopedCopyableCompositeSCP___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableCompositeSCP self, CompositeSCP ptr=None)
        reset(ScopedCopyableCompositeSCP self)
        """
        return _six_sicd.ScopedCopyableCompositeSCP_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableCompositeSCP
    __del__ = lambda self: None
    __swig_setmethods__["scpType"] = _six_sicd.ScopedCopyableCompositeSCP_scpType_set
    __swig_getmethods__["scpType"] = _six_sicd.ScopedCopyableCompositeSCP_scpType_get
    if _newclass:
        scpType = _swig_property(_six_sicd.ScopedCopyableCompositeSCP_scpType_get, _six_sicd.ScopedCopyableCompositeSCP_scpType_set)
    __swig_setmethods__["xErr"] = _six_sicd.ScopedCopyableCompositeSCP_xErr_set
    __swig_getmethods__["xErr"] = _six_sicd.ScopedCopyableCompositeSCP_xErr_get
    if _newclass:
        xErr = _swig_property(_six_sicd.ScopedCopyableCompositeSCP_xErr_get, _six_sicd.ScopedCopyableCompositeSCP_xErr_set)
    __swig_setmethods__["yErr"] = _six_sicd.ScopedCopyableCompositeSCP_yErr_set
    __swig_getmethods__["yErr"] = _six_sicd.ScopedCopyableCompositeSCP_yErr_get
    if _newclass:
        yErr = _swig_property(_six_sicd.ScopedCopyableCompositeSCP_yErr_get, _six_sicd.ScopedCopyableCompositeSCP_yErr_set)
    __swig_setmethods__["xyErr"] = _six_sicd.ScopedCopyableCompositeSCP_xyErr_set
    __swig_getmethods__["xyErr"] = _six_sicd.ScopedCopyableCompositeSCP_xyErr_get
    if _newclass:
        xyErr = _swig_property(_six_sicd.ScopedCopyableCompositeSCP_xyErr_get, _six_sicd.ScopedCopyableCompositeSCP_xyErr_set)
ScopedCopyableCompositeSCP_swigregister = _six_sicd.ScopedCopyableCompositeSCP_swigregister
ScopedCopyableCompositeSCP_swigregister(ScopedCopyableCompositeSCP)

class ScopedCopyableComponents(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::Components)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableComponents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableComponents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::Components)> self, Components ptr=None) -> ScopedCopyableComponents
        __init__(mem::ScopedCopyablePtr<(six::Components)> self) -> ScopedCopyableComponents
        __init__(mem::ScopedCopyablePtr<(six::Components)> self, ScopedCopyableComponents rhs) -> ScopedCopyableComponents
        """
        this = _six_sicd.new_ScopedCopyableComponents(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableComponents self) -> Components"""
        return _six_sicd.ScopedCopyableComponents_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableComponents self) -> Components"""
        return _six_sicd.ScopedCopyableComponents___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableComponents self) -> Components"""
        return _six_sicd.ScopedCopyableComponents___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableComponents self, Components ptr=None)
        reset(ScopedCopyableComponents self)
        """
        return _six_sicd.ScopedCopyableComponents_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableComponents
    __del__ = lambda self: None
    __swig_setmethods__["posVelError"] = _six_sicd.ScopedCopyableComponents_posVelError_set
    __swig_getmethods__["posVelError"] = _six_sicd.ScopedCopyableComponents_posVelError_get
    if _newclass:
        posVelError = _swig_property(_six_sicd.ScopedCopyableComponents_posVelError_get, _six_sicd.ScopedCopyableComponents_posVelError_set)
    __swig_setmethods__["radarSensor"] = _six_sicd.ScopedCopyableComponents_radarSensor_set
    __swig_getmethods__["radarSensor"] = _six_sicd.ScopedCopyableComponents_radarSensor_get
    if _newclass:
        radarSensor = _swig_property(_six_sicd.ScopedCopyableComponents_radarSensor_get, _six_sicd.ScopedCopyableComponents_radarSensor_set)
    __swig_setmethods__["tropoError"] = _six_sicd.ScopedCopyableComponents_tropoError_set
    __swig_getmethods__["tropoError"] = _six_sicd.ScopedCopyableComponents_tropoError_get
    if _newclass:
        tropoError = _swig_property(_six_sicd.ScopedCopyableComponents_tropoError_get, _six_sicd.ScopedCopyableComponents_tropoError_set)
    __swig_setmethods__["ionoError"] = _six_sicd.ScopedCopyableComponents_ionoError_set
    __swig_getmethods__["ionoError"] = _six_sicd.ScopedCopyableComponents_ionoError_get
    if _newclass:
        ionoError = _swig_property(_six_sicd.ScopedCopyableComponents_ionoError_get, _six_sicd.ScopedCopyableComponents_ionoError_set)
ScopedCopyableComponents_swigregister = _six_sicd.ScopedCopyableComponents_swigregister
ScopedCopyableComponents_swigregister(ScopedCopyableComponents)

class VectorMatchCollect(_object):
    """Proxy of C++ std::vector<(six::sicd::MatchCollect)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorMatchCollect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorMatchCollect, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorMatchCollect self) -> SwigPyIterator"""
        return _six_sicd.VectorMatchCollect_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorMatchCollect self) -> bool"""
        return _six_sicd.VectorMatchCollect___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorMatchCollect self) -> bool"""
        return _six_sicd.VectorMatchCollect___bool__(self)


    def __len__(self):
        """__len__(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::size_type"""
        return _six_sicd.VectorMatchCollect___len__(self)


    def pop(self):
        """pop(VectorMatchCollect self) -> MatchCollect"""
        return _six_sicd.VectorMatchCollect_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, std::vector< six::sicd::MatchCollect >::difference_type j) -> VectorMatchCollect"""
        return _six_sicd.VectorMatchCollect___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, std::vector< six::sicd::MatchCollect >::difference_type j, VectorMatchCollect v)
        __setslice__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, std::vector< six::sicd::MatchCollect >::difference_type j)
        """
        return _six_sicd.VectorMatchCollect___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, std::vector< six::sicd::MatchCollect >::difference_type j)"""
        return _six_sicd.VectorMatchCollect___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i)
        __delitem__(VectorMatchCollect self, PySliceObject * slice)
        """
        return _six_sicd.VectorMatchCollect___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorMatchCollect self, PySliceObject * slice) -> VectorMatchCollect
        __getitem__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i) -> MatchCollect
        """
        return _six_sicd.VectorMatchCollect___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorMatchCollect self, PySliceObject * slice, VectorMatchCollect v)
        __setitem__(VectorMatchCollect self, PySliceObject * slice)
        __setitem__(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::difference_type i, MatchCollect x)
        """
        return _six_sicd.VectorMatchCollect___setitem__(self, *args)


    def append(self, x):
        """append(VectorMatchCollect self, MatchCollect x)"""
        return _six_sicd.VectorMatchCollect_append(self, x)


    def empty(self):
        """empty(VectorMatchCollect self) -> bool"""
        return _six_sicd.VectorMatchCollect_empty(self)


    def size(self):
        """size(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::size_type"""
        return _six_sicd.VectorMatchCollect_size(self)


    def clear(self):
        """clear(VectorMatchCollect self)"""
        return _six_sicd.VectorMatchCollect_clear(self)


    def swap(self, v):
        """swap(VectorMatchCollect self, VectorMatchCollect v)"""
        return _six_sicd.VectorMatchCollect_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::allocator_type"""
        return _six_sicd.VectorMatchCollect_get_allocator(self)


    def begin(self):
        """begin(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::iterator"""
        return _six_sicd.VectorMatchCollect_begin(self)


    def end(self):
        """end(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::iterator"""
        return _six_sicd.VectorMatchCollect_end(self)


    def rbegin(self):
        """rbegin(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::reverse_iterator"""
        return _six_sicd.VectorMatchCollect_rbegin(self)


    def rend(self):
        """rend(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::reverse_iterator"""
        return _six_sicd.VectorMatchCollect_rend(self)


    def pop_back(self):
        """pop_back(VectorMatchCollect self)"""
        return _six_sicd.VectorMatchCollect_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::iterator pos) -> std::vector< six::sicd::MatchCollect >::iterator
        erase(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::iterator first, std::vector< six::sicd::MatchCollect >::iterator last) -> std::vector< six::sicd::MatchCollect >::iterator
        """
        return _six_sicd.VectorMatchCollect_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::sicd::MatchCollect)> self) -> VectorMatchCollect
        __init__(std::vector<(six::sicd::MatchCollect)> self, VectorMatchCollect arg2) -> VectorMatchCollect
        __init__(std::vector<(six::sicd::MatchCollect)> self, std::vector< six::sicd::MatchCollect >::size_type size) -> VectorMatchCollect
        __init__(std::vector<(six::sicd::MatchCollect)> self, std::vector< six::sicd::MatchCollect >::size_type size, MatchCollect value) -> VectorMatchCollect
        """
        this = _six_sicd.new_VectorMatchCollect(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorMatchCollect self, MatchCollect x)"""
        return _six_sicd.VectorMatchCollect_push_back(self, x)


    def front(self):
        """front(VectorMatchCollect self) -> MatchCollect"""
        return _six_sicd.VectorMatchCollect_front(self)


    def back(self):
        """back(VectorMatchCollect self) -> MatchCollect"""
        return _six_sicd.VectorMatchCollect_back(self)


    def assign(self, n, x):
        """assign(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::size_type n, MatchCollect x)"""
        return _six_sicd.VectorMatchCollect_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::size_type new_size)
        resize(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::size_type new_size, MatchCollect x)
        """
        return _six_sicd.VectorMatchCollect_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::iterator pos, MatchCollect x) -> std::vector< six::sicd::MatchCollect >::iterator
        insert(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::iterator pos, std::vector< six::sicd::MatchCollect >::size_type n, MatchCollect x)
        """
        return _six_sicd.VectorMatchCollect_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorMatchCollect self, std::vector< six::sicd::MatchCollect >::size_type n)"""
        return _six_sicd.VectorMatchCollect_reserve(self, n)


    def capacity(self):
        """capacity(VectorMatchCollect self) -> std::vector< six::sicd::MatchCollect >::size_type"""
        return _six_sicd.VectorMatchCollect_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorMatchCollect
    __del__ = lambda self: None
VectorMatchCollect_swigregister = _six_sicd.VectorMatchCollect_swigregister
VectorMatchCollect_swigregister(VectorMatchCollect)

class VectorScopedCopyableMatchType(_object):
    """Proxy of C++ std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScopedCopyableMatchType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScopedCopyableMatchType, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorScopedCopyableMatchType self) -> SwigPyIterator"""
        return _six_sicd.VectorScopedCopyableMatchType_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorScopedCopyableMatchType self) -> bool"""
        return _six_sicd.VectorScopedCopyableMatchType___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorScopedCopyableMatchType self) -> bool"""
        return _six_sicd.VectorScopedCopyableMatchType___bool__(self)


    def __len__(self):
        """__len__(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type"""
        return _six_sicd.VectorScopedCopyableMatchType___len__(self)


    def pop(self):
        """pop(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type"""
        return _six_sicd.VectorScopedCopyableMatchType_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j) -> VectorScopedCopyableMatchType"""
        return _six_sicd.VectorScopedCopyableMatchType___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j, VectorScopedCopyableMatchType v)
        __setslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j)
        """
        return _six_sicd.VectorScopedCopyableMatchType___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type j)"""
        return _six_sicd.VectorScopedCopyableMatchType___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i)
        __delitem__(VectorScopedCopyableMatchType self, PySliceObject * slice)
        """
        return _six_sicd.VectorScopedCopyableMatchType___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorScopedCopyableMatchType self, PySliceObject * slice) -> VectorScopedCopyableMatchType
        __getitem__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &
        """
        return _six_sicd.VectorScopedCopyableMatchType___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorScopedCopyableMatchType self, PySliceObject * slice, VectorScopedCopyableMatchType v)
        __setitem__(VectorScopedCopyableMatchType self, PySliceObject * slice)
        __setitem__(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::difference_type i, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const & x)
        """
        return _six_sicd.VectorScopedCopyableMatchType___setitem__(self, *args)


    def append(self, x):
        """append(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const & x)"""
        return _six_sicd.VectorScopedCopyableMatchType_append(self, x)


    def empty(self):
        """empty(VectorScopedCopyableMatchType self) -> bool"""
        return _six_sicd.VectorScopedCopyableMatchType_empty(self)


    def size(self):
        """size(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type"""
        return _six_sicd.VectorScopedCopyableMatchType_size(self)


    def clear(self):
        """clear(VectorScopedCopyableMatchType self)"""
        return _six_sicd.VectorScopedCopyableMatchType_clear(self)


    def swap(self, v):
        """swap(VectorScopedCopyableMatchType self, VectorScopedCopyableMatchType v)"""
        return _six_sicd.VectorScopedCopyableMatchType_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::allocator_type"""
        return _six_sicd.VectorScopedCopyableMatchType_get_allocator(self)


    def begin(self):
        """begin(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_begin(self)


    def end(self):
        """end(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_end(self)


    def rbegin(self):
        """rbegin(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::reverse_iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_rbegin(self)


    def rend(self):
        """rend(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::reverse_iterator"""
        return _six_sicd.VectorScopedCopyableMatchType_rend(self)


    def pop_back(self):
        """pop_back(VectorScopedCopyableMatchType self)"""
        return _six_sicd.VectorScopedCopyableMatchType_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator pos) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator
        erase(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator first, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator last) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator
        """
        return _six_sicd.VectorScopedCopyableMatchType_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> self) -> VectorScopedCopyableMatchType
        __init__(std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> self, VectorScopedCopyableMatchType arg2) -> VectorScopedCopyableMatchType
        __init__(std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type size) -> VectorScopedCopyableMatchType
        __init__(std::vector<(mem::ScopedCopyablePtr<(six::sicd::MatchType)>)> self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type size, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const & value) -> VectorScopedCopyableMatchType
        """
        this = _six_sicd.new_VectorScopedCopyableMatchType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const & x)"""
        return _six_sicd.VectorScopedCopyableMatchType_push_back(self, x)


    def front(self):
        """front(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &"""
        return _six_sicd.VectorScopedCopyableMatchType_front(self)


    def back(self):
        """back(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const &"""
        return _six_sicd.VectorScopedCopyableMatchType_back(self)


    def assign(self, n, x):
        """assign(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type n, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const & x)"""
        return _six_sicd.VectorScopedCopyableMatchType_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type new_size)
        resize(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type new_size, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const & x)
        """
        return _six_sicd.VectorScopedCopyableMatchType_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator pos, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const & x) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator
        insert(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::iterator pos, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type n, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::value_type const & x)
        """
        return _six_sicd.VectorScopedCopyableMatchType_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorScopedCopyableMatchType self, std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type n)"""
        return _six_sicd.VectorScopedCopyableMatchType_reserve(self, n)


    def capacity(self):
        """capacity(VectorScopedCopyableMatchType self) -> std::vector< mem::ScopedCopyablePtr< six::sicd::MatchType > >::size_type"""
        return _six_sicd.VectorScopedCopyableMatchType_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorScopedCopyableMatchType
    __del__ = lambda self: None
VectorScopedCopyableMatchType_swigregister = _six_sicd.VectorScopedCopyableMatchType_swigregister
VectorScopedCopyableMatchType_swigregister(VectorScopedCopyableMatchType)

class ScopedCopyableRMAT(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RMAT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMAT, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMAT)> self, RMAT ptr=None) -> ScopedCopyableRMAT
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMAT)> self) -> ScopedCopyableRMAT
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMAT)> self, ScopedCopyableRMAT rhs) -> ScopedCopyableRMAT
        """
        this = _six_sicd.new_ScopedCopyableRMAT(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableRMAT self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRMAT self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRMAT self) -> RMAT"""
        return _six_sicd.ScopedCopyableRMAT___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRMAT self, RMAT ptr=None)
        reset(ScopedCopyableRMAT self)
        """
        return _six_sicd.ScopedCopyableRMAT_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMAT
    __del__ = lambda self: None
    __swig_setmethods__["refTime"] = _six_sicd.ScopedCopyableRMAT_refTime_set
    __swig_getmethods__["refTime"] = _six_sicd.ScopedCopyableRMAT_refTime_get
    if _newclass:
        refTime = _swig_property(_six_sicd.ScopedCopyableRMAT_refTime_get, _six_sicd.ScopedCopyableRMAT_refTime_set)
    __swig_setmethods__["refPos"] = _six_sicd.ScopedCopyableRMAT_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.ScopedCopyableRMAT_refPos_get
    if _newclass:
        refPos = _swig_property(_six_sicd.ScopedCopyableRMAT_refPos_get, _six_sicd.ScopedCopyableRMAT_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.ScopedCopyableRMAT_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.ScopedCopyableRMAT_refVel_get
    if _newclass:
        refVel = _swig_property(_six_sicd.ScopedCopyableRMAT_refVel_get, _six_sicd.ScopedCopyableRMAT_refVel_set)
    __swig_setmethods__["distRefLinePoly"] = _six_sicd.ScopedCopyableRMAT_distRefLinePoly_set
    __swig_getmethods__["distRefLinePoly"] = _six_sicd.ScopedCopyableRMAT_distRefLinePoly_get
    if _newclass:
        distRefLinePoly = _swig_property(_six_sicd.ScopedCopyableRMAT_distRefLinePoly_get, _six_sicd.ScopedCopyableRMAT_distRefLinePoly_set)
    __swig_setmethods__["cosDCACOAPoly"] = _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_set
    __swig_getmethods__["cosDCACOAPoly"] = _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_get
    if _newclass:
        cosDCACOAPoly = _swig_property(_six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_get, _six_sicd.ScopedCopyableRMAT_cosDCACOAPoly_set)
    __swig_setmethods__["kx1"] = _six_sicd.ScopedCopyableRMAT_kx1_set
    __swig_getmethods__["kx1"] = _six_sicd.ScopedCopyableRMAT_kx1_get
    if _newclass:
        kx1 = _swig_property(_six_sicd.ScopedCopyableRMAT_kx1_get, _six_sicd.ScopedCopyableRMAT_kx1_set)
    __swig_setmethods__["kx2"] = _six_sicd.ScopedCopyableRMAT_kx2_set
    __swig_getmethods__["kx2"] = _six_sicd.ScopedCopyableRMAT_kx2_get
    if _newclass:
        kx2 = _swig_property(_six_sicd.ScopedCopyableRMAT_kx2_get, _six_sicd.ScopedCopyableRMAT_kx2_set)
    __swig_setmethods__["ky1"] = _six_sicd.ScopedCopyableRMAT_ky1_set
    __swig_getmethods__["ky1"] = _six_sicd.ScopedCopyableRMAT_ky1_get
    if _newclass:
        ky1 = _swig_property(_six_sicd.ScopedCopyableRMAT_ky1_get, _six_sicd.ScopedCopyableRMAT_ky1_set)
    __swig_setmethods__["ky2"] = _six_sicd.ScopedCopyableRMAT_ky2_set
    __swig_getmethods__["ky2"] = _six_sicd.ScopedCopyableRMAT_ky2_get
    if _newclass:
        ky2 = _swig_property(_six_sicd.ScopedCopyableRMAT_ky2_get, _six_sicd.ScopedCopyableRMAT_ky2_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_get
    if _newclass:
        dopConeAngleRef = _swig_property(_six_sicd.ScopedCopyableRMAT_dopConeAngleRef_get, _six_sicd.ScopedCopyableRMAT_dopConeAngleRef_set)
ScopedCopyableRMAT_swigregister = _six_sicd.ScopedCopyableRMAT_swigregister
ScopedCopyableRMAT_swigregister(ScopedCopyableRMAT)

class ScopedCopyableRMCR(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::RMCR)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableRMCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableRMCR, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMCR)> self, RMCR ptr=None) -> ScopedCopyableRMCR
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMCR)> self) -> ScopedCopyableRMCR
        __init__(mem::ScopedCopyablePtr<(six::sicd::RMCR)> self, ScopedCopyableRMCR rhs) -> ScopedCopyableRMCR
        """
        this = _six_sicd.new_ScopedCopyableRMCR(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableRMCR self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableRMCR self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableRMCR self) -> RMCR"""
        return _six_sicd.ScopedCopyableRMCR___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableRMCR self, RMCR ptr=None)
        reset(ScopedCopyableRMCR self)
        """
        return _six_sicd.ScopedCopyableRMCR_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableRMCR
    __del__ = lambda self: None
    __swig_setmethods__["refPos"] = _six_sicd.ScopedCopyableRMCR_refPos_set
    __swig_getmethods__["refPos"] = _six_sicd.ScopedCopyableRMCR_refPos_get
    if _newclass:
        refPos = _swig_property(_six_sicd.ScopedCopyableRMCR_refPos_get, _six_sicd.ScopedCopyableRMCR_refPos_set)
    __swig_setmethods__["refVel"] = _six_sicd.ScopedCopyableRMCR_refVel_set
    __swig_getmethods__["refVel"] = _six_sicd.ScopedCopyableRMCR_refVel_get
    if _newclass:
        refVel = _swig_property(_six_sicd.ScopedCopyableRMCR_refVel_get, _six_sicd.ScopedCopyableRMCR_refVel_set)
    __swig_setmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_set
    __swig_getmethods__["dopConeAngleRef"] = _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_get
    if _newclass:
        dopConeAngleRef = _swig_property(_six_sicd.ScopedCopyableRMCR_dopConeAngleRef_get, _six_sicd.ScopedCopyableRMCR_dopConeAngleRef_set)
ScopedCopyableRMCR_swigregister = _six_sicd.ScopedCopyableRMCR_swigregister
ScopedCopyableRMCR_swigregister(ScopedCopyableRMCR)

class ScopedCopyableINCA(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(six::sicd::INCA)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableINCA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableINCA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(six::sicd::INCA)> self, INCA ptr=None) -> ScopedCopyableINCA
        __init__(mem::ScopedCopyablePtr<(six::sicd::INCA)> self) -> ScopedCopyableINCA
        __init__(mem::ScopedCopyablePtr<(six::sicd::INCA)> self, ScopedCopyableINCA rhs) -> ScopedCopyableINCA
        """
        this = _six_sicd.new_ScopedCopyableINCA(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self):
        """get(ScopedCopyableINCA self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA_get(self)


    def __ref__(self):
        """__ref__(ScopedCopyableINCA self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA___ref__(self)


    def __deref__(self):
        """__deref__(ScopedCopyableINCA self) -> INCA"""
        return _six_sicd.ScopedCopyableINCA___deref__(self)


    def reset(self, ptr=None):
        """
        reset(ScopedCopyableINCA self, INCA ptr=None)
        reset(ScopedCopyableINCA self)
        """
        return _six_sicd.ScopedCopyableINCA_reset(self, ptr)

    __swig_destroy__ = _six_sicd.delete_ScopedCopyableINCA
    __del__ = lambda self: None
    __swig_setmethods__["timeCAPoly"] = _six_sicd.ScopedCopyableINCA_timeCAPoly_set
    __swig_getmethods__["timeCAPoly"] = _six_sicd.ScopedCopyableINCA_timeCAPoly_get
    if _newclass:
        timeCAPoly = _swig_property(_six_sicd.ScopedCopyableINCA_timeCAPoly_get, _six_sicd.ScopedCopyableINCA_timeCAPoly_set)
    __swig_setmethods__["rangeCA"] = _six_sicd.ScopedCopyableINCA_rangeCA_set
    __swig_getmethods__["rangeCA"] = _six_sicd.ScopedCopyableINCA_rangeCA_get
    if _newclass:
        rangeCA = _swig_property(_six_sicd.ScopedCopyableINCA_rangeCA_get, _six_sicd.ScopedCopyableINCA_rangeCA_set)
    __swig_setmethods__["freqZero"] = _six_sicd.ScopedCopyableINCA_freqZero_set
    __swig_getmethods__["freqZero"] = _six_sicd.ScopedCopyableINCA_freqZero_get
    if _newclass:
        freqZero = _swig_property(_six_sicd.ScopedCopyableINCA_freqZero_get, _six_sicd.ScopedCopyableINCA_freqZero_set)
    __swig_setmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_set
    __swig_getmethods__["dopplerRateScaleFactorPoly"] = _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_get
    if _newclass:
        dopplerRateScaleFactorPoly = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_get, _six_sicd.ScopedCopyableINCA_dopplerRateScaleFactorPoly_set)
    __swig_setmethods__["dopplerCentroidPoly"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_set
    __swig_getmethods__["dopplerCentroidPoly"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_get
    if _newclass:
        dopplerCentroidPoly = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_get, _six_sicd.ScopedCopyableINCA_dopplerCentroidPoly_set)
    __swig_setmethods__["dopplerCentroidCOA"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_set
    __swig_getmethods__["dopplerCentroidCOA"] = _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_get
    if _newclass:
        dopplerCentroidCOA = _swig_property(_six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_get, _six_sicd.ScopedCopyableINCA_dopplerCentroidCOA_set)
ScopedCopyableINCA_swigregister = _six_sicd.ScopedCopyableINCA_swigregister
ScopedCopyableINCA_swigregister(ScopedCopyableINCA)

class VectorTimelineSet(_object):
    """Proxy of C++ std::vector<(p.six::sicd::TimelineSet)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorTimelineSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorTimelineSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VectorTimelineSet self) -> SwigPyIterator"""
        return _six_sicd.VectorTimelineSet_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VectorTimelineSet self) -> bool"""
        return _six_sicd.VectorTimelineSet___nonzero__(self)


    def __bool__(self):
        """__bool__(VectorTimelineSet self) -> bool"""
        return _six_sicd.VectorTimelineSet___bool__(self)


    def __len__(self):
        """__len__(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet * >::size_type"""
        return _six_sicd.VectorTimelineSet___len__(self)


    def pop(self):
        """pop(VectorTimelineSet self) -> TimelineSet"""
        return _six_sicd.VectorTimelineSet_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::difference_type i, std::vector< six::sicd::TimelineSet * >::difference_type j) -> VectorTimelineSet"""
        return _six_sicd.VectorTimelineSet___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::difference_type i, std::vector< six::sicd::TimelineSet * >::difference_type j, VectorTimelineSet v)
        __setslice__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::difference_type i, std::vector< six::sicd::TimelineSet * >::difference_type j)
        """
        return _six_sicd.VectorTimelineSet___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::difference_type i, std::vector< six::sicd::TimelineSet * >::difference_type j)"""
        return _six_sicd.VectorTimelineSet___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::difference_type i)
        __delitem__(VectorTimelineSet self, PySliceObject * slice)
        """
        return _six_sicd.VectorTimelineSet___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VectorTimelineSet self, PySliceObject * slice) -> VectorTimelineSet
        __getitem__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::difference_type i) -> TimelineSet
        """
        return _six_sicd.VectorTimelineSet___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VectorTimelineSet self, PySliceObject * slice, VectorTimelineSet v)
        __setitem__(VectorTimelineSet self, PySliceObject * slice)
        __setitem__(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::difference_type i, TimelineSet x)
        """
        return _six_sicd.VectorTimelineSet___setitem__(self, *args)


    def append(self, x):
        """append(VectorTimelineSet self, TimelineSet x)"""
        return _six_sicd.VectorTimelineSet_append(self, x)


    def empty(self):
        """empty(VectorTimelineSet self) -> bool"""
        return _six_sicd.VectorTimelineSet_empty(self)


    def size(self):
        """size(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet * >::size_type"""
        return _six_sicd.VectorTimelineSet_size(self)


    def clear(self):
        """clear(VectorTimelineSet self)"""
        return _six_sicd.VectorTimelineSet_clear(self)


    def swap(self, v):
        """swap(VectorTimelineSet self, VectorTimelineSet v)"""
        return _six_sicd.VectorTimelineSet_swap(self, v)


    def get_allocator(self):
        """get_allocator(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet * >::allocator_type"""
        return _six_sicd.VectorTimelineSet_get_allocator(self)


    def begin(self):
        """begin(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet * >::iterator"""
        return _six_sicd.VectorTimelineSet_begin(self)


    def end(self):
        """end(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet * >::iterator"""
        return _six_sicd.VectorTimelineSet_end(self)


    def rbegin(self):
        """rbegin(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet * >::reverse_iterator"""
        return _six_sicd.VectorTimelineSet_rbegin(self)


    def rend(self):
        """rend(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet * >::reverse_iterator"""
        return _six_sicd.VectorTimelineSet_rend(self)


    def pop_back(self):
        """pop_back(VectorTimelineSet self)"""
        return _six_sicd.VectorTimelineSet_pop_back(self)


    def erase(self, *args):
        """
        erase(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::iterator pos) -> std::vector< six::sicd::TimelineSet * >::iterator
        erase(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::iterator first, std::vector< six::sicd::TimelineSet * >::iterator last) -> std::vector< six::sicd::TimelineSet * >::iterator
        """
        return _six_sicd.VectorTimelineSet_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.six::sicd::TimelineSet)> self) -> VectorTimelineSet
        __init__(std::vector<(p.six::sicd::TimelineSet)> self, VectorTimelineSet arg2) -> VectorTimelineSet
        __init__(std::vector<(p.six::sicd::TimelineSet)> self, std::vector< six::sicd::TimelineSet * >::size_type size) -> VectorTimelineSet
        __init__(std::vector<(p.six::sicd::TimelineSet)> self, std::vector< six::sicd::TimelineSet * >::size_type size, TimelineSet value) -> VectorTimelineSet
        """
        this = _six_sicd.new_VectorTimelineSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(VectorTimelineSet self, TimelineSet x)"""
        return _six_sicd.VectorTimelineSet_push_back(self, x)


    def front(self):
        """front(VectorTimelineSet self) -> TimelineSet"""
        return _six_sicd.VectorTimelineSet_front(self)


    def back(self):
        """back(VectorTimelineSet self) -> TimelineSet"""
        return _six_sicd.VectorTimelineSet_back(self)


    def assign(self, n, x):
        """assign(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::size_type n, TimelineSet x)"""
        return _six_sicd.VectorTimelineSet_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::size_type new_size)
        resize(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::size_type new_size, TimelineSet x)
        """
        return _six_sicd.VectorTimelineSet_resize(self, *args)


    def insert(self, *args):
        """
        insert(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::iterator pos, TimelineSet x) -> std::vector< six::sicd::TimelineSet * >::iterator
        insert(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::iterator pos, std::vector< six::sicd::TimelineSet * >::size_type n, TimelineSet x)
        """
        return _six_sicd.VectorTimelineSet_insert(self, *args)


    def reserve(self, n):
        """reserve(VectorTimelineSet self, std::vector< six::sicd::TimelineSet * >::size_type n)"""
        return _six_sicd.VectorTimelineSet_reserve(self, n)


    def capacity(self):
        """capacity(VectorTimelineSet self) -> std::vector< six::sicd::TimelineSet * >::size_type"""
        return _six_sicd.VectorTimelineSet_capacity(self)

    __swig_destroy__ = _six_sicd.delete_VectorTimelineSet
    __del__ = lambda self: None
VectorTimelineSet_swigregister = _six_sicd.VectorTimelineSet_swigregister
VectorTimelineSet_swigregister(VectorTimelineSet)


def getWidebandData(sicdPathname, schemaPaths, complexData, arrayBuffer):
    """getWidebandData(std::string sicdPathname, VectorString schemaPaths, ComplexData complexData, long arrayBuffer)"""
    return _six_sicd.getWidebandData(sicdPathname, schemaPaths, complexData, arrayBuffer)
import numpy as np
from six_base import VectorString

def read(inputPathname, schemaPaths = VectorString()):
    complexData = getComplexData(inputPathname, schemaPaths)
    
    #Numpy has no concept of complex integers, so dtype will always be complex64
    widebandData = np.empty(shape = (complexData.getNumRows(), complexData.getNumCols()), dtype = "complex64")
    widebandBuffer, ro = widebandData.__array_interface__["data"]
    
    getWidebandData(inputPathname, schemaPaths, complexData, widebandBuffer)
    
    return widebandData, complexData

# This file is compatible with both classic and new-style classes.


