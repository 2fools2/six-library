# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _six
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import coda_except
import math_poly
import math_linear
import scene
import coda_types
class DateTime(_object):
    """Proxy of C++ DateTime class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTime, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _six.delete_DateTime
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> DateTime
        __init__(self, nitf_DateTime dateTime) -> DateTime
        __init__(self, double timeInMillis) -> DateTime
        __init__(self, string dateString, string dateFormat) -> DateTime
        __init__(self, int year, int month, int dayOfMonth, int hour=0, int minute=0, 
            double second=0.0) -> DateTime
        __init__(self, int year, int month, int dayOfMonth, int hour=0, int minute=0) -> DateTime
        __init__(self, int year, int month, int dayOfMonth, int hour=0) -> DateTime
        __init__(self, int year, int month, int dayOfMonth) -> DateTime
        __init__(self, DateTime rhs) -> DateTime
        """
        this = _six.new_DateTime(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(*args):
        """__lt__(self, DateTime rhs) -> bool"""
        return _six.DateTime___lt__(*args)

    def __le__(*args):
        """__le__(self, DateTime rhs) -> bool"""
        return _six.DateTime___le__(*args)

    def __gt__(*args):
        """__gt__(self, DateTime rhs) -> bool"""
        return _six.DateTime___gt__(*args)

    def __ge__(*args):
        """__ge__(self, DateTime rhs) -> bool"""
        return _six.DateTime___ge__(*args)

    def __eq__(*args):
        """__eq__(self, DateTime rhs) -> bool"""
        return _six.DateTime___eq__(*args)

    def __ne__(*args):
        """__ne__(self, DateTime rhs) -> bool"""
        return _six.DateTime___ne__(*args)

    def getNative(*args):
        """
        getNative(self) -> nitf_DateTime
        getNative(self) -> nitf_DateTime
        """
        return _six.DateTime_getNative(*args)

    def format(*args):
        """
        format(self, string format, char outBuf, size_t maxSize)
        format(self, string format, string str)
        format(self, string format) -> string
        """
        return _six.DateTime_format(*args)

    def getYear(*args):
        """getYear(self) -> int"""
        return _six.DateTime_getYear(*args)

    def getMonth(*args):
        """getMonth(self) -> int"""
        return _six.DateTime_getMonth(*args)

    def getDayOfMonth(*args):
        """getDayOfMonth(self) -> int"""
        return _six.DateTime_getDayOfMonth(*args)

    def getDayOfWeek(*args):
        """getDayOfWeek(self) -> int"""
        return _six.DateTime_getDayOfWeek(*args)

    def getDayOfYear(*args):
        """getDayOfYear(self) -> int"""
        return _six.DateTime_getDayOfYear(*args)

    def getHour(*args):
        """getHour(self) -> int"""
        return _six.DateTime_getHour(*args)

    def getMinute(*args):
        """getMinute(self) -> int"""
        return _six.DateTime_getMinute(*args)

    def getSecond(*args):
        """getSecond(self) -> double"""
        return _six.DateTime_getSecond(*args)

    def getTimeInMillis(*args):
        """getTimeInMillis(self) -> double"""
        return _six.DateTime_getTimeInMillis(*args)

    def setYear(*args):
        """setYear(self, int year)"""
        return _six.DateTime_setYear(*args)

    def setMonth(*args):
        """setMonth(self, int month)"""
        return _six.DateTime_setMonth(*args)

    def setDayOfMonth(*args):
        """setDayOfMonth(self, int dayOfMonth)"""
        return _six.DateTime_setDayOfMonth(*args)

    def setHour(*args):
        """setHour(self, int hour)"""
        return _six.DateTime_setHour(*args)

    def setMinute(*args):
        """setMinute(self, int minute)"""
        return _six.DateTime_setMinute(*args)

    def setSecond(*args):
        """setSecond(self, double second)"""
        return _six.DateTime_setSecond(*args)

    def setTimeInMillis(*args):
        """setTimeInMillis(self, double timeInMillis)"""
        return _six.DateTime_setTimeInMillis(*args)

DateTime_swigregister = _six.DateTime_swigregister
DateTime_swigregister(DateTime)

class AppliedType(_object):
    """Proxy of C++ AppliedType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppliedType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppliedType, name)
    __repr__ = _swig_repr
    IS_FALSE = _six.AppliedType_IS_FALSE
    IS_TRUE = _six.AppliedType_IS_TRUE
    NOT_SET = _six.AppliedType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> AppliedType
        __init__(self, string s) -> AppliedType
        __init__(self, int i) -> AppliedType
        """
        this = _six.new_AppliedType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_AppliedType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.AppliedType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, AppliedType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.AppliedType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, AppliedType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.AppliedType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, AppliedType o) -> bool"""
        return _six.AppliedType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, AppliedType o) -> bool"""
        return _six.AppliedType___gt__(*args)

    def __le__(*args):
        """__le__(self, AppliedType o) -> bool"""
        return _six.AppliedType___le__(*args)

    def __ge__(*args):
        """__ge__(self, AppliedType o) -> bool"""
        return _six.AppliedType___ge__(*args)

    __swig_setmethods__["value"] = _six.AppliedType_value_set
    __swig_getmethods__["value"] = _six.AppliedType_value_get
    if _newclass:value = _swig_property(_six.AppliedType_value_get, _six.AppliedType_value_set)
AppliedType_swigregister = _six.AppliedType_swigregister
AppliedType_swigregister(AppliedType)
cvar = _six.cvar
NOT_SET_VALUE = cvar.NOT_SET_VALUE

class AutofocusType(_object):
    """Proxy of C++ AutofocusType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutofocusType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutofocusType, name)
    __repr__ = _swig_repr
    NO = _six.AutofocusType_NO
    GLOBAL = _six.AutofocusType_GLOBAL
    SV = _six.AutofocusType_SV
    NOT_SET = _six.AutofocusType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> AutofocusType
        __init__(self, string s) -> AutofocusType
        __init__(self, int i) -> AutofocusType
        """
        this = _six.new_AutofocusType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_AutofocusType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.AutofocusType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, AutofocusType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.AutofocusType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, AutofocusType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.AutofocusType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, AutofocusType o) -> bool"""
        return _six.AutofocusType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, AutofocusType o) -> bool"""
        return _six.AutofocusType___gt__(*args)

    def __le__(*args):
        """__le__(self, AutofocusType o) -> bool"""
        return _six.AutofocusType___le__(*args)

    def __ge__(*args):
        """__ge__(self, AutofocusType o) -> bool"""
        return _six.AutofocusType___ge__(*args)

    __swig_setmethods__["value"] = _six.AutofocusType_value_set
    __swig_getmethods__["value"] = _six.AutofocusType_value_get
    if _newclass:value = _swig_property(_six.AutofocusType_value_get, _six.AutofocusType_value_set)
AutofocusType_swigregister = _six.AutofocusType_swigregister
AutofocusType_swigregister(AutofocusType)

class BooleanType(_object):
    """Proxy of C++ BooleanType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BooleanType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BooleanType, name)
    __repr__ = _swig_repr
    IS_FALSE = _six.BooleanType_IS_FALSE
    IS_TRUE = _six.BooleanType_IS_TRUE
    NOT_SET = _six.BooleanType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> BooleanType
        __init__(self, string s) -> BooleanType
        __init__(self, int i) -> BooleanType
        """
        this = _six.new_BooleanType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_BooleanType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.BooleanType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, BooleanType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.BooleanType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, BooleanType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.BooleanType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, BooleanType o) -> bool"""
        return _six.BooleanType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, BooleanType o) -> bool"""
        return _six.BooleanType___gt__(*args)

    def __le__(*args):
        """__le__(self, BooleanType o) -> bool"""
        return _six.BooleanType___le__(*args)

    def __ge__(*args):
        """__ge__(self, BooleanType o) -> bool"""
        return _six.BooleanType___ge__(*args)

    __swig_setmethods__["value"] = _six.BooleanType_value_set
    __swig_getmethods__["value"] = _six.BooleanType_value_get
    if _newclass:value = _swig_property(_six.BooleanType_value_get, _six.BooleanType_value_set)
BooleanType_swigregister = _six.BooleanType_swigregister
BooleanType_swigregister(BooleanType)

class ByteSwapping(_object):
    """Proxy of C++ ByteSwapping class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteSwapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteSwapping, name)
    __repr__ = _swig_repr
    SWAP_OFF = _six.ByteSwapping_SWAP_OFF
    SWAP_ON = _six.ByteSwapping_SWAP_ON
    SWAP_AUTO = _six.ByteSwapping_SWAP_AUTO
    NOT_SET = _six.ByteSwapping_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> ByteSwapping
        __init__(self, string s) -> ByteSwapping
        __init__(self, int i) -> ByteSwapping
        """
        this = _six.new_ByteSwapping(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_ByteSwapping
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.ByteSwapping_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, ByteSwapping o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.ByteSwapping___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, ByteSwapping o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.ByteSwapping___ne__(*args)

    def __lt__(*args):
        """__lt__(self, ByteSwapping o) -> bool"""
        return _six.ByteSwapping___lt__(*args)

    def __gt__(*args):
        """__gt__(self, ByteSwapping o) -> bool"""
        return _six.ByteSwapping___gt__(*args)

    def __le__(*args):
        """__le__(self, ByteSwapping o) -> bool"""
        return _six.ByteSwapping___le__(*args)

    def __ge__(*args):
        """__ge__(self, ByteSwapping o) -> bool"""
        return _six.ByteSwapping___ge__(*args)

    __swig_setmethods__["value"] = _six.ByteSwapping_value_set
    __swig_getmethods__["value"] = _six.ByteSwapping_value_get
    if _newclass:value = _swig_property(_six.ByteSwapping_value_get, _six.ByteSwapping_value_set)
ByteSwapping_swigregister = _six.ByteSwapping_swigregister
ByteSwapping_swigregister(ByteSwapping)

class CollectType(_object):
    """Proxy of C++ CollectType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectType, name)
    __repr__ = _swig_repr
    MONOSTATIC = _six.CollectType_MONOSTATIC
    BISTATIC = _six.CollectType_BISTATIC
    NOT_SET = _six.CollectType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> CollectType
        __init__(self, string s) -> CollectType
        __init__(self, int i) -> CollectType
        """
        this = _six.new_CollectType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_CollectType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.CollectType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, CollectType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.CollectType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, CollectType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.CollectType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, CollectType o) -> bool"""
        return _six.CollectType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, CollectType o) -> bool"""
        return _six.CollectType___gt__(*args)

    def __le__(*args):
        """__le__(self, CollectType o) -> bool"""
        return _six.CollectType___le__(*args)

    def __ge__(*args):
        """__ge__(self, CollectType o) -> bool"""
        return _six.CollectType___ge__(*args)

    __swig_setmethods__["value"] = _six.CollectType_value_set
    __swig_getmethods__["value"] = _six.CollectType_value_get
    if _newclass:value = _swig_property(_six.CollectType_value_get, _six.CollectType_value_set)
CollectType_swigregister = _six.CollectType_swigregister
CollectType_swigregister(CollectType)

class ComplexImageGridType(_object):
    """Proxy of C++ ComplexImageGridType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexImageGridType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexImageGridType, name)
    __repr__ = _swig_repr
    RGAZIM = _six.ComplexImageGridType_RGAZIM
    RGZERO = _six.ComplexImageGridType_RGZERO
    XRGYCR = _six.ComplexImageGridType_XRGYCR
    XCTYAT = _six.ComplexImageGridType_XCTYAT
    PLANE = _six.ComplexImageGridType_PLANE
    NOT_SET = _six.ComplexImageGridType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> ComplexImageGridType
        __init__(self, string s) -> ComplexImageGridType
        __init__(self, int i) -> ComplexImageGridType
        """
        this = _six.new_ComplexImageGridType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_ComplexImageGridType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.ComplexImageGridType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, ComplexImageGridType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.ComplexImageGridType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, ComplexImageGridType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.ComplexImageGridType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, ComplexImageGridType o) -> bool"""
        return _six.ComplexImageGridType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, ComplexImageGridType o) -> bool"""
        return _six.ComplexImageGridType___gt__(*args)

    def __le__(*args):
        """__le__(self, ComplexImageGridType o) -> bool"""
        return _six.ComplexImageGridType___le__(*args)

    def __ge__(*args):
        """__ge__(self, ComplexImageGridType o) -> bool"""
        return _six.ComplexImageGridType___ge__(*args)

    __swig_setmethods__["value"] = _six.ComplexImageGridType_value_set
    __swig_getmethods__["value"] = _six.ComplexImageGridType_value_get
    if _newclass:value = _swig_property(_six.ComplexImageGridType_value_get, _six.ComplexImageGridType_value_set)
ComplexImageGridType_swigregister = _six.ComplexImageGridType_swigregister
ComplexImageGridType_swigregister(ComplexImageGridType)

class ComplexImagePlaneType(_object):
    """Proxy of C++ ComplexImagePlaneType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexImagePlaneType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexImagePlaneType, name)
    __repr__ = _swig_repr
    OTHER = _six.ComplexImagePlaneType_OTHER
    SLANT = _six.ComplexImagePlaneType_SLANT
    GROUND = _six.ComplexImagePlaneType_GROUND
    NOT_SET = _six.ComplexImagePlaneType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> ComplexImagePlaneType
        __init__(self, string s) -> ComplexImagePlaneType
        __init__(self, int i) -> ComplexImagePlaneType
        """
        this = _six.new_ComplexImagePlaneType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_ComplexImagePlaneType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.ComplexImagePlaneType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, ComplexImagePlaneType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.ComplexImagePlaneType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, ComplexImagePlaneType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.ComplexImagePlaneType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, ComplexImagePlaneType o) -> bool"""
        return _six.ComplexImagePlaneType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, ComplexImagePlaneType o) -> bool"""
        return _six.ComplexImagePlaneType___gt__(*args)

    def __le__(*args):
        """__le__(self, ComplexImagePlaneType o) -> bool"""
        return _six.ComplexImagePlaneType___le__(*args)

    def __ge__(*args):
        """__ge__(self, ComplexImagePlaneType o) -> bool"""
        return _six.ComplexImagePlaneType___ge__(*args)

    __swig_setmethods__["value"] = _six.ComplexImagePlaneType_value_set
    __swig_getmethods__["value"] = _six.ComplexImagePlaneType_value_get
    if _newclass:value = _swig_property(_six.ComplexImagePlaneType_value_get, _six.ComplexImagePlaneType_value_set)
ComplexImagePlaneType_swigregister = _six.ComplexImagePlaneType_swigregister
ComplexImagePlaneType_swigregister(ComplexImagePlaneType)

class DataType(_object):
    """Proxy of C++ DataType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType, name)
    __repr__ = _swig_repr
    COMPLEX = _six.DataType_COMPLEX
    DERIVED = _six.DataType_DERIVED
    NOT_SET = _six.DataType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> DataType
        __init__(self, string s) -> DataType
        __init__(self, int i) -> DataType
        """
        this = _six.new_DataType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_DataType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.DataType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, DataType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.DataType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, DataType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.DataType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, DataType o) -> bool"""
        return _six.DataType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, DataType o) -> bool"""
        return _six.DataType___gt__(*args)

    def __le__(*args):
        """__le__(self, DataType o) -> bool"""
        return _six.DataType___le__(*args)

    def __ge__(*args):
        """__ge__(self, DataType o) -> bool"""
        return _six.DataType___ge__(*args)

    __swig_setmethods__["value"] = _six.DataType_value_set
    __swig_getmethods__["value"] = _six.DataType_value_get
    if _newclass:value = _swig_property(_six.DataType_value_get, _six.DataType_value_set)
DataType_swigregister = _six.DataType_swigregister
DataType_swigregister(DataType)

class DecimationMethod(_object):
    """Proxy of C++ DecimationMethod class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecimationMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecimationMethod, name)
    __repr__ = _swig_repr
    NEAREST_NEIGHBOR = _six.DecimationMethod_NEAREST_NEIGHBOR
    BILINEAR = _six.DecimationMethod_BILINEAR
    BRIGHTEST_PIXEL = _six.DecimationMethod_BRIGHTEST_PIXEL
    LAGRANGE = _six.DecimationMethod_LAGRANGE
    NOT_SET = _six.DecimationMethod_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> DecimationMethod
        __init__(self, string s) -> DecimationMethod
        __init__(self, int i) -> DecimationMethod
        """
        this = _six.new_DecimationMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_DecimationMethod
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.DecimationMethod_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, DecimationMethod o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.DecimationMethod___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, DecimationMethod o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.DecimationMethod___ne__(*args)

    def __lt__(*args):
        """__lt__(self, DecimationMethod o) -> bool"""
        return _six.DecimationMethod___lt__(*args)

    def __gt__(*args):
        """__gt__(self, DecimationMethod o) -> bool"""
        return _six.DecimationMethod___gt__(*args)

    def __le__(*args):
        """__le__(self, DecimationMethod o) -> bool"""
        return _six.DecimationMethod___le__(*args)

    def __ge__(*args):
        """__ge__(self, DecimationMethod o) -> bool"""
        return _six.DecimationMethod___ge__(*args)

    __swig_setmethods__["value"] = _six.DecimationMethod_value_set
    __swig_getmethods__["value"] = _six.DecimationMethod_value_get
    if _newclass:value = _swig_property(_six.DecimationMethod_value_get, _six.DecimationMethod_value_set)
DecimationMethod_swigregister = _six.DecimationMethod_swigregister
DecimationMethod_swigregister(DecimationMethod)

class DemodType(_object):
    """Proxy of C++ DemodType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DemodType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DemodType, name)
    __repr__ = _swig_repr
    STRETCH = _six.DemodType_STRETCH
    CHIRP = _six.DemodType_CHIRP
    NOT_SET = _six.DemodType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> DemodType
        __init__(self, string s) -> DemodType
        __init__(self, int i) -> DemodType
        """
        this = _six.new_DemodType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_DemodType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.DemodType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, DemodType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.DemodType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, DemodType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.DemodType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, DemodType o) -> bool"""
        return _six.DemodType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, DemodType o) -> bool"""
        return _six.DemodType___gt__(*args)

    def __le__(*args):
        """__le__(self, DemodType o) -> bool"""
        return _six.DemodType___le__(*args)

    def __ge__(*args):
        """__ge__(self, DemodType o) -> bool"""
        return _six.DemodType___ge__(*args)

    __swig_setmethods__["value"] = _six.DemodType_value_set
    __swig_getmethods__["value"] = _six.DemodType_value_get
    if _newclass:value = _swig_property(_six.DemodType_value_get, _six.DemodType_value_set)
DemodType_swigregister = _six.DemodType_swigregister
DemodType_swigregister(DemodType)

class DisplayType(_object):
    """Proxy of C++ DisplayType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayType, name)
    __repr__ = _swig_repr
    COLOR = _six.DisplayType_COLOR
    MONO = _six.DisplayType_MONO
    NOT_SET = _six.DisplayType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> DisplayType
        __init__(self, string s) -> DisplayType
        __init__(self, int i) -> DisplayType
        """
        this = _six.new_DisplayType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_DisplayType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.DisplayType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, DisplayType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.DisplayType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, DisplayType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.DisplayType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, DisplayType o) -> bool"""
        return _six.DisplayType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, DisplayType o) -> bool"""
        return _six.DisplayType___gt__(*args)

    def __le__(*args):
        """__le__(self, DisplayType o) -> bool"""
        return _six.DisplayType___le__(*args)

    def __ge__(*args):
        """__ge__(self, DisplayType o) -> bool"""
        return _six.DisplayType___ge__(*args)

    __swig_setmethods__["value"] = _six.DisplayType_value_set
    __swig_getmethods__["value"] = _six.DisplayType_value_get
    if _newclass:value = _swig_property(_six.DisplayType_value_get, _six.DisplayType_value_set)
DisplayType_swigregister = _six.DisplayType_swigregister
DisplayType_swigregister(DisplayType)

class DualPolarizationType(_object):
    """Proxy of C++ DualPolarizationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualPolarizationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DualPolarizationType, name)
    __repr__ = _swig_repr
    OTHER = _six.DualPolarizationType_OTHER
    V_V = _six.DualPolarizationType_V_V
    V_H = _six.DualPolarizationType_V_H
    H_V = _six.DualPolarizationType_H_V
    H_H = _six.DualPolarizationType_H_H
    RHC_RHC = _six.DualPolarizationType_RHC_RHC
    RHC_LHC = _six.DualPolarizationType_RHC_LHC
    LHC_RHC = _six.DualPolarizationType_LHC_RHC
    LHC_LHC = _six.DualPolarizationType_LHC_LHC
    NOT_SET = _six.DualPolarizationType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> DualPolarizationType
        __init__(self, string s) -> DualPolarizationType
        __init__(self, int i) -> DualPolarizationType
        """
        this = _six.new_DualPolarizationType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_DualPolarizationType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.DualPolarizationType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, DualPolarizationType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.DualPolarizationType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, DualPolarizationType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.DualPolarizationType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, DualPolarizationType o) -> bool"""
        return _six.DualPolarizationType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, DualPolarizationType o) -> bool"""
        return _six.DualPolarizationType___gt__(*args)

    def __le__(*args):
        """__le__(self, DualPolarizationType o) -> bool"""
        return _six.DualPolarizationType___le__(*args)

    def __ge__(*args):
        """__ge__(self, DualPolarizationType o) -> bool"""
        return _six.DualPolarizationType___ge__(*args)

    __swig_setmethods__["value"] = _six.DualPolarizationType_value_set
    __swig_getmethods__["value"] = _six.DualPolarizationType_value_get
    if _newclass:value = _swig_property(_six.DualPolarizationType_value_get, _six.DualPolarizationType_value_set)
DualPolarizationType_swigregister = _six.DualPolarizationType_swigregister
DualPolarizationType_swigregister(DualPolarizationType)

class EarthModelType(_object):
    """Proxy of C++ EarthModelType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EarthModelType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EarthModelType, name)
    __repr__ = _swig_repr
    WGS84 = _six.EarthModelType_WGS84
    NOT_SET = _six.EarthModelType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> EarthModelType
        __init__(self, string s) -> EarthModelType
        __init__(self, int i) -> EarthModelType
        """
        this = _six.new_EarthModelType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_EarthModelType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.EarthModelType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, EarthModelType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.EarthModelType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, EarthModelType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.EarthModelType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, EarthModelType o) -> bool"""
        return _six.EarthModelType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, EarthModelType o) -> bool"""
        return _six.EarthModelType___gt__(*args)

    def __le__(*args):
        """__le__(self, EarthModelType o) -> bool"""
        return _six.EarthModelType___le__(*args)

    def __ge__(*args):
        """__ge__(self, EarthModelType o) -> bool"""
        return _six.EarthModelType___ge__(*args)

    __swig_setmethods__["value"] = _six.EarthModelType_value_set
    __swig_getmethods__["value"] = _six.EarthModelType_value_get
    if _newclass:value = _swig_property(_six.EarthModelType_value_get, _six.EarthModelType_value_set)
EarthModelType_swigregister = _six.EarthModelType_swigregister
EarthModelType_swigregister(EarthModelType)

class FFTSign(_object):
    """Proxy of C++ FFTSign class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTSign, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFTSign, name)
    __repr__ = _swig_repr
    NEG = _six.FFTSign_NEG
    POS = _six.FFTSign_POS
    NOT_SET = _six.FFTSign_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> FFTSign
        __init__(self, string s) -> FFTSign
        __init__(self, int i) -> FFTSign
        """
        this = _six.new_FFTSign(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_FFTSign
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.FFTSign_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, FFTSign o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.FFTSign___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, FFTSign o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.FFTSign___ne__(*args)

    def __lt__(*args):
        """__lt__(self, FFTSign o) -> bool"""
        return _six.FFTSign___lt__(*args)

    def __gt__(*args):
        """__gt__(self, FFTSign o) -> bool"""
        return _six.FFTSign___gt__(*args)

    def __le__(*args):
        """__le__(self, FFTSign o) -> bool"""
        return _six.FFTSign___le__(*args)

    def __ge__(*args):
        """__ge__(self, FFTSign o) -> bool"""
        return _six.FFTSign___ge__(*args)

    __swig_setmethods__["value"] = _six.FFTSign_value_set
    __swig_getmethods__["value"] = _six.FFTSign_value_get
    if _newclass:value = _swig_property(_six.FFTSign_value_get, _six.FFTSign_value_set)
FFTSign_swigregister = _six.FFTSign_swigregister
FFTSign_swigregister(FFTSign)

class ImageBeamCompensationType(_object):
    """Proxy of C++ ImageBeamCompensationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageBeamCompensationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageBeamCompensationType, name)
    __repr__ = _swig_repr
    NO = _six.ImageBeamCompensationType_NO
    SV = _six.ImageBeamCompensationType_SV
    NOT_SET = _six.ImageBeamCompensationType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> ImageBeamCompensationType
        __init__(self, string s) -> ImageBeamCompensationType
        __init__(self, int i) -> ImageBeamCompensationType
        """
        this = _six.new_ImageBeamCompensationType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_ImageBeamCompensationType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.ImageBeamCompensationType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, ImageBeamCompensationType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.ImageBeamCompensationType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, ImageBeamCompensationType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.ImageBeamCompensationType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, ImageBeamCompensationType o) -> bool"""
        return _six.ImageBeamCompensationType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, ImageBeamCompensationType o) -> bool"""
        return _six.ImageBeamCompensationType___gt__(*args)

    def __le__(*args):
        """__le__(self, ImageBeamCompensationType o) -> bool"""
        return _six.ImageBeamCompensationType___le__(*args)

    def __ge__(*args):
        """__ge__(self, ImageBeamCompensationType o) -> bool"""
        return _six.ImageBeamCompensationType___ge__(*args)

    __swig_setmethods__["value"] = _six.ImageBeamCompensationType_value_set
    __swig_getmethods__["value"] = _six.ImageBeamCompensationType_value_get
    if _newclass:value = _swig_property(_six.ImageBeamCompensationType_value_get, _six.ImageBeamCompensationType_value_set)
ImageBeamCompensationType_swigregister = _six.ImageBeamCompensationType_swigregister
ImageBeamCompensationType_swigregister(ImageBeamCompensationType)

class ImageFormationType(_object):
    """Proxy of C++ ImageFormationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageFormationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageFormationType, name)
    __repr__ = _swig_repr
    OTHER = _six.ImageFormationType_OTHER
    PFA = _six.ImageFormationType_PFA
    RMA = _six.ImageFormationType_RMA
    RGAZCOMP = _six.ImageFormationType_RGAZCOMP
    NOT_SET = _six.ImageFormationType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> ImageFormationType
        __init__(self, string s) -> ImageFormationType
        __init__(self, int i) -> ImageFormationType
        """
        this = _six.new_ImageFormationType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_ImageFormationType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.ImageFormationType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, ImageFormationType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.ImageFormationType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, ImageFormationType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.ImageFormationType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, ImageFormationType o) -> bool"""
        return _six.ImageFormationType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, ImageFormationType o) -> bool"""
        return _six.ImageFormationType___gt__(*args)

    def __le__(*args):
        """__le__(self, ImageFormationType o) -> bool"""
        return _six.ImageFormationType___le__(*args)

    def __ge__(*args):
        """__ge__(self, ImageFormationType o) -> bool"""
        return _six.ImageFormationType___ge__(*args)

    __swig_setmethods__["value"] = _six.ImageFormationType_value_set
    __swig_getmethods__["value"] = _six.ImageFormationType_value_get
    if _newclass:value = _swig_property(_six.ImageFormationType_value_get, _six.ImageFormationType_value_set)
ImageFormationType_swigregister = _six.ImageFormationType_swigregister
ImageFormationType_swigregister(ImageFormationType)

class MagnificationMethod(_object):
    """Proxy of C++ MagnificationMethod class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagnificationMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagnificationMethod, name)
    __repr__ = _swig_repr
    NEAREST_NEIGHBOR = _six.MagnificationMethod_NEAREST_NEIGHBOR
    BILINEAR = _six.MagnificationMethod_BILINEAR
    NOT_SET = _six.MagnificationMethod_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> MagnificationMethod
        __init__(self, string s) -> MagnificationMethod
        __init__(self, int i) -> MagnificationMethod
        """
        this = _six.new_MagnificationMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_MagnificationMethod
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.MagnificationMethod_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, MagnificationMethod o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.MagnificationMethod___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, MagnificationMethod o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.MagnificationMethod___ne__(*args)

    def __lt__(*args):
        """__lt__(self, MagnificationMethod o) -> bool"""
        return _six.MagnificationMethod___lt__(*args)

    def __gt__(*args):
        """__gt__(self, MagnificationMethod o) -> bool"""
        return _six.MagnificationMethod___gt__(*args)

    def __le__(*args):
        """__le__(self, MagnificationMethod o) -> bool"""
        return _six.MagnificationMethod___le__(*args)

    def __ge__(*args):
        """__ge__(self, MagnificationMethod o) -> bool"""
        return _six.MagnificationMethod___ge__(*args)

    __swig_setmethods__["value"] = _six.MagnificationMethod_value_set
    __swig_getmethods__["value"] = _six.MagnificationMethod_value_get
    if _newclass:value = _swig_property(_six.MagnificationMethod_value_get, _six.MagnificationMethod_value_set)
MagnificationMethod_swigregister = _six.MagnificationMethod_swigregister
MagnificationMethod_swigregister(MagnificationMethod)

class OrientationType(_object):
    """Proxy of C++ OrientationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrientationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrientationType, name)
    __repr__ = _swig_repr
    UP = _six.OrientationType_UP
    DOWN = _six.OrientationType_DOWN
    LEFT = _six.OrientationType_LEFT
    RIGHT = _six.OrientationType_RIGHT
    ARBITRARY = _six.OrientationType_ARBITRARY
    NOT_SET = _six.OrientationType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> OrientationType
        __init__(self, string s) -> OrientationType
        __init__(self, int i) -> OrientationType
        """
        this = _six.new_OrientationType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_OrientationType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.OrientationType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, OrientationType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.OrientationType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, OrientationType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.OrientationType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, OrientationType o) -> bool"""
        return _six.OrientationType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, OrientationType o) -> bool"""
        return _six.OrientationType___gt__(*args)

    def __le__(*args):
        """__le__(self, OrientationType o) -> bool"""
        return _six.OrientationType___le__(*args)

    def __ge__(*args):
        """__ge__(self, OrientationType o) -> bool"""
        return _six.OrientationType___ge__(*args)

    __swig_setmethods__["value"] = _six.OrientationType_value_set
    __swig_getmethods__["value"] = _six.OrientationType_value_get
    if _newclass:value = _swig_property(_six.OrientationType_value_get, _six.OrientationType_value_set)
OrientationType_swigregister = _six.OrientationType_swigregister
OrientationType_swigregister(OrientationType)

class PixelType(_object):
    """Proxy of C++ PixelType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelType, name)
    __repr__ = _swig_repr
    RE32F_IM32F = _six.PixelType_RE32F_IM32F
    RE16I_IM16I = _six.PixelType_RE16I_IM16I
    AMP8I_PHS8I = _six.PixelType_AMP8I_PHS8I
    MONO8I = _six.PixelType_MONO8I
    MONO8LU = _six.PixelType_MONO8LU
    MONO16I = _six.PixelType_MONO16I
    RGB8LU = _six.PixelType_RGB8LU
    RGB24I = _six.PixelType_RGB24I
    NOT_SET = _six.PixelType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> PixelType
        __init__(self, string s) -> PixelType
        __init__(self, int i) -> PixelType
        """
        this = _six.new_PixelType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_PixelType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.PixelType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, PixelType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.PixelType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, PixelType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.PixelType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, PixelType o) -> bool"""
        return _six.PixelType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, PixelType o) -> bool"""
        return _six.PixelType___gt__(*args)

    def __le__(*args):
        """__le__(self, PixelType o) -> bool"""
        return _six.PixelType___le__(*args)

    def __ge__(*args):
        """__ge__(self, PixelType o) -> bool"""
        return _six.PixelType___ge__(*args)

    __swig_setmethods__["value"] = _six.PixelType_value_set
    __swig_getmethods__["value"] = _six.PixelType_value_get
    if _newclass:value = _swig_property(_six.PixelType_value_get, _six.PixelType_value_set)
PixelType_swigregister = _six.PixelType_swigregister
PixelType_swigregister(PixelType)

class PolarizationSequenceType(_object):
    """Proxy of C++ PolarizationSequenceType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationSequenceType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationSequenceType, name)
    __repr__ = _swig_repr
    OTHER = _six.PolarizationSequenceType_OTHER
    V = _six.PolarizationSequenceType_V
    H = _six.PolarizationSequenceType_H
    RHC = _six.PolarizationSequenceType_RHC
    LHC = _six.PolarizationSequenceType_LHC
    UNKNOWN = _six.PolarizationSequenceType_UNKNOWN
    SEQUENCE = _six.PolarizationSequenceType_SEQUENCE
    NOT_SET = _six.PolarizationSequenceType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> PolarizationSequenceType
        __init__(self, string str) -> PolarizationSequenceType
        __init__(self, int intValue) -> PolarizationSequenceType
        """
        this = _six.new_PolarizationSequenceType(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(*args):
        """toString(self) -> string"""
        return _six.PolarizationSequenceType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, PolarizationSequenceType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.PolarizationSequenceType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, PolarizationSequenceType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.PolarizationSequenceType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, PolarizationSequenceType o) -> bool"""
        return _six.PolarizationSequenceType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, PolarizationSequenceType o) -> bool"""
        return _six.PolarizationSequenceType___gt__(*args)

    def __le__(*args):
        """__le__(self, PolarizationSequenceType o) -> bool"""
        return _six.PolarizationSequenceType___le__(*args)

    def __ge__(*args):
        """__ge__(self, PolarizationSequenceType o) -> bool"""
        return _six.PolarizationSequenceType___ge__(*args)

    __swig_setmethods__["value"] = _six.PolarizationSequenceType_value_set
    __swig_getmethods__["value"] = _six.PolarizationSequenceType_value_get
    if _newclass:value = _swig_property(_six.PolarizationSequenceType_value_get, _six.PolarizationSequenceType_value_set)
    __swig_destroy__ = _six.delete_PolarizationSequenceType
    __del__ = lambda self : None;
PolarizationSequenceType_swigregister = _six.PolarizationSequenceType_swigregister
PolarizationSequenceType_swigregister(PolarizationSequenceType)

class PolarizationType(_object):
    """Proxy of C++ PolarizationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationType, name)
    __repr__ = _swig_repr
    OTHER = _six.PolarizationType_OTHER
    V = _six.PolarizationType_V
    H = _six.PolarizationType_H
    RHC = _six.PolarizationType_RHC
    LHC = _six.PolarizationType_LHC
    NOT_SET = _six.PolarizationType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> PolarizationType
        __init__(self, string str) -> PolarizationType
        __init__(self, int intValue) -> PolarizationType
        """
        this = _six.new_PolarizationType(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(*args):
        """toString(self) -> string"""
        return _six.PolarizationType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, PolarizationType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.PolarizationType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, PolarizationType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.PolarizationType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, PolarizationType o) -> bool"""
        return _six.PolarizationType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, PolarizationType o) -> bool"""
        return _six.PolarizationType___gt__(*args)

    def __le__(*args):
        """__le__(self, PolarizationType o) -> bool"""
        return _six.PolarizationType___le__(*args)

    def __ge__(*args):
        """__ge__(self, PolarizationType o) -> bool"""
        return _six.PolarizationType___ge__(*args)

    __swig_setmethods__["value"] = _six.PolarizationType_value_set
    __swig_getmethods__["value"] = _six.PolarizationType_value_get
    if _newclass:value = _swig_property(_six.PolarizationType_value_get, _six.PolarizationType_value_set)
    __swig_destroy__ = _six.delete_PolarizationType
    __del__ = lambda self : None;
PolarizationType_swigregister = _six.PolarizationType_swigregister
PolarizationType_swigregister(PolarizationType)

class ProjectionType(_object):
    """Proxy of C++ ProjectionType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectionType, name)
    __repr__ = _swig_repr
    PLANE = _six.ProjectionType_PLANE
    GEOGRAPHIC = _six.ProjectionType_GEOGRAPHIC
    CYLINDRICAL = _six.ProjectionType_CYLINDRICAL
    POLYNOMIAL = _six.ProjectionType_POLYNOMIAL
    NOT_SET = _six.ProjectionType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> ProjectionType
        __init__(self, string s) -> ProjectionType
        __init__(self, int i) -> ProjectionType
        """
        this = _six.new_ProjectionType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_ProjectionType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.ProjectionType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, ProjectionType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.ProjectionType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, ProjectionType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.ProjectionType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, ProjectionType o) -> bool"""
        return _six.ProjectionType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, ProjectionType o) -> bool"""
        return _six.ProjectionType___gt__(*args)

    def __le__(*args):
        """__le__(self, ProjectionType o) -> bool"""
        return _six.ProjectionType___le__(*args)

    def __ge__(*args):
        """__ge__(self, ProjectionType o) -> bool"""
        return _six.ProjectionType___ge__(*args)

    __swig_setmethods__["value"] = _six.ProjectionType_value_set
    __swig_getmethods__["value"] = _six.ProjectionType_value_get
    if _newclass:value = _swig_property(_six.ProjectionType_value_get, _six.ProjectionType_value_set)
ProjectionType_swigregister = _six.ProjectionType_swigregister
ProjectionType_swigregister(ProjectionType)

class RMAlgoType(_object):
    """Proxy of C++ RMAlgoType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMAlgoType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMAlgoType, name)
    __repr__ = _swig_repr
    OMEGA_K = _six.RMAlgoType_OMEGA_K
    CSA = _six.RMAlgoType_CSA
    RG_DOP = _six.RMAlgoType_RG_DOP
    NOT_SET = _six.RMAlgoType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> RMAlgoType
        __init__(self, string s) -> RMAlgoType
        __init__(self, int i) -> RMAlgoType
        """
        this = _six.new_RMAlgoType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_RMAlgoType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.RMAlgoType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, RMAlgoType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.RMAlgoType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, RMAlgoType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.RMAlgoType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, RMAlgoType o) -> bool"""
        return _six.RMAlgoType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, RMAlgoType o) -> bool"""
        return _six.RMAlgoType___gt__(*args)

    def __le__(*args):
        """__le__(self, RMAlgoType o) -> bool"""
        return _six.RMAlgoType___le__(*args)

    def __ge__(*args):
        """__ge__(self, RMAlgoType o) -> bool"""
        return _six.RMAlgoType___ge__(*args)

    __swig_setmethods__["value"] = _six.RMAlgoType_value_set
    __swig_getmethods__["value"] = _six.RMAlgoType_value_get
    if _newclass:value = _swig_property(_six.RMAlgoType_value_get, _six.RMAlgoType_value_set)
RMAlgoType_swigregister = _six.RMAlgoType_swigregister
RMAlgoType_swigregister(RMAlgoType)

class RadarModeType(_object):
    """Proxy of C++ RadarModeType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarModeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarModeType, name)
    __repr__ = _swig_repr
    SPOTLIGHT = _six.RadarModeType_SPOTLIGHT
    STRIPMAP = _six.RadarModeType_STRIPMAP
    DYNAMIC_STRIPMAP = _six.RadarModeType_DYNAMIC_STRIPMAP
    SCANSAR = _six.RadarModeType_SCANSAR
    NOT_SET = _six.RadarModeType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> RadarModeType
        __init__(self, string s) -> RadarModeType
        __init__(self, int i) -> RadarModeType
        """
        this = _six.new_RadarModeType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_RadarModeType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.RadarModeType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, RadarModeType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.RadarModeType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, RadarModeType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.RadarModeType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, RadarModeType o) -> bool"""
        return _six.RadarModeType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, RadarModeType o) -> bool"""
        return _six.RadarModeType___gt__(*args)

    def __le__(*args):
        """__le__(self, RadarModeType o) -> bool"""
        return _six.RadarModeType___le__(*args)

    def __ge__(*args):
        """__ge__(self, RadarModeType o) -> bool"""
        return _six.RadarModeType___ge__(*args)

    __swig_setmethods__["value"] = _six.RadarModeType_value_set
    __swig_getmethods__["value"] = _six.RadarModeType_value_get
    if _newclass:value = _swig_property(_six.RadarModeType_value_get, _six.RadarModeType_value_set)
RadarModeType_swigregister = _six.RadarModeType_swigregister
RadarModeType_swigregister(RadarModeType)

class RegionType(_object):
    """Proxy of C++ RegionType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegionType, name)
    __repr__ = _swig_repr
    SUB_REGION = _six.RegionType_SUB_REGION
    GEOGRAPHIC_INFO = _six.RegionType_GEOGRAPHIC_INFO
    NOT_SET = _six.RegionType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> RegionType
        __init__(self, string s) -> RegionType
        __init__(self, int i) -> RegionType
        """
        this = _six.new_RegionType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_RegionType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.RegionType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, RegionType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.RegionType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, RegionType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.RegionType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, RegionType o) -> bool"""
        return _six.RegionType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, RegionType o) -> bool"""
        return _six.RegionType___gt__(*args)

    def __le__(*args):
        """__le__(self, RegionType o) -> bool"""
        return _six.RegionType___le__(*args)

    def __ge__(*args):
        """__ge__(self, RegionType o) -> bool"""
        return _six.RegionType___ge__(*args)

    __swig_setmethods__["value"] = _six.RegionType_value_set
    __swig_getmethods__["value"] = _six.RegionType_value_get
    if _newclass:value = _swig_property(_six.RegionType_value_get, _six.RegionType_value_set)
RegionType_swigregister = _six.RegionType_swigregister
RegionType_swigregister(RegionType)

class RowColEnum(_object):
    """Proxy of C++ RowColEnum class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowColEnum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowColEnum, name)
    __repr__ = _swig_repr
    ROW = _six.RowColEnum_ROW
    COL = _six.RowColEnum_COL
    NOT_SET = _six.RowColEnum_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> RowColEnum
        __init__(self, string s) -> RowColEnum
        __init__(self, int i) -> RowColEnum
        """
        this = _six.new_RowColEnum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_RowColEnum
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.RowColEnum_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, RowColEnum o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.RowColEnum___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, RowColEnum o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.RowColEnum___ne__(*args)

    def __lt__(*args):
        """__lt__(self, RowColEnum o) -> bool"""
        return _six.RowColEnum___lt__(*args)

    def __gt__(*args):
        """__gt__(self, RowColEnum o) -> bool"""
        return _six.RowColEnum___gt__(*args)

    def __le__(*args):
        """__le__(self, RowColEnum o) -> bool"""
        return _six.RowColEnum___le__(*args)

    def __ge__(*args):
        """__ge__(self, RowColEnum o) -> bool"""
        return _six.RowColEnum___ge__(*args)

    __swig_setmethods__["value"] = _six.RowColEnum_value_set
    __swig_getmethods__["value"] = _six.RowColEnum_value_get
    if _newclass:value = _swig_property(_six.RowColEnum_value_get, _six.RowColEnum_value_set)
RowColEnum_swigregister = _six.RowColEnum_swigregister
RowColEnum_swigregister(RowColEnum)

class SCPType(_object):
    """Proxy of C++ SCPType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCPType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCPType, name)
    __repr__ = _swig_repr
    SCP_ROW_COL = _six.SCPType_SCP_ROW_COL
    SCP_RG_AZ = _six.SCPType_SCP_RG_AZ
    NOT_SET = _six.SCPType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> SCPType
        __init__(self, string s) -> SCPType
        __init__(self, int i) -> SCPType
        """
        this = _six.new_SCPType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_SCPType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.SCPType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, SCPType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.SCPType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, SCPType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.SCPType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, SCPType o) -> bool"""
        return _six.SCPType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, SCPType o) -> bool"""
        return _six.SCPType___gt__(*args)

    def __le__(*args):
        """__le__(self, SCPType o) -> bool"""
        return _six.SCPType___le__(*args)

    def __ge__(*args):
        """__ge__(self, SCPType o) -> bool"""
        return _six.SCPType___ge__(*args)

    __swig_setmethods__["value"] = _six.SCPType_value_set
    __swig_getmethods__["value"] = _six.SCPType_value_get
    if _newclass:value = _swig_property(_six.SCPType_value_get, _six.SCPType_value_set)
SCPType_swigregister = _six.SCPType_swigregister
SCPType_swigregister(SCPType)

class SideOfTrackType(_object):
    """Proxy of C++ SideOfTrackType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideOfTrackType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SideOfTrackType, name)
    __repr__ = _swig_repr
    LEFT = _six.SideOfTrackType_LEFT
    RIGHT = _six.SideOfTrackType_RIGHT
    NOT_SET = _six.SideOfTrackType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> SideOfTrackType
        __init__(self, string s) -> SideOfTrackType
        __init__(self, int i) -> SideOfTrackType
        """
        this = _six.new_SideOfTrackType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_SideOfTrackType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.SideOfTrackType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, SideOfTrackType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.SideOfTrackType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, SideOfTrackType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.SideOfTrackType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, SideOfTrackType o) -> bool"""
        return _six.SideOfTrackType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, SideOfTrackType o) -> bool"""
        return _six.SideOfTrackType___gt__(*args)

    def __le__(*args):
        """__le__(self, SideOfTrackType o) -> bool"""
        return _six.SideOfTrackType___le__(*args)

    def __ge__(*args):
        """__ge__(self, SideOfTrackType o) -> bool"""
        return _six.SideOfTrackType___ge__(*args)

    __swig_setmethods__["value"] = _six.SideOfTrackType_value_set
    __swig_getmethods__["value"] = _six.SideOfTrackType_value_get
    if _newclass:value = _swig_property(_six.SideOfTrackType_value_get, _six.SideOfTrackType_value_set)
SideOfTrackType_swigregister = _six.SideOfTrackType_swigregister
SideOfTrackType_swigregister(SideOfTrackType)

class SlowTimeBeamCompensationType(_object):
    """Proxy of C++ SlowTimeBeamCompensationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlowTimeBeamCompensationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlowTimeBeamCompensationType, name)
    __repr__ = _swig_repr
    NO = _six.SlowTimeBeamCompensationType_NO
    GLOBAL = _six.SlowTimeBeamCompensationType_GLOBAL
    SV = _six.SlowTimeBeamCompensationType_SV
    NOT_SET = _six.SlowTimeBeamCompensationType_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> SlowTimeBeamCompensationType
        __init__(self, string s) -> SlowTimeBeamCompensationType
        __init__(self, int i) -> SlowTimeBeamCompensationType
        """
        this = _six.new_SlowTimeBeamCompensationType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_SlowTimeBeamCompensationType
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.SlowTimeBeamCompensationType_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, SlowTimeBeamCompensationType o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.SlowTimeBeamCompensationType___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, SlowTimeBeamCompensationType o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.SlowTimeBeamCompensationType___ne__(*args)

    def __lt__(*args):
        """__lt__(self, SlowTimeBeamCompensationType o) -> bool"""
        return _six.SlowTimeBeamCompensationType___lt__(*args)

    def __gt__(*args):
        """__gt__(self, SlowTimeBeamCompensationType o) -> bool"""
        return _six.SlowTimeBeamCompensationType___gt__(*args)

    def __le__(*args):
        """__le__(self, SlowTimeBeamCompensationType o) -> bool"""
        return _six.SlowTimeBeamCompensationType___le__(*args)

    def __ge__(*args):
        """__ge__(self, SlowTimeBeamCompensationType o) -> bool"""
        return _six.SlowTimeBeamCompensationType___ge__(*args)

    __swig_setmethods__["value"] = _six.SlowTimeBeamCompensationType_value_set
    __swig_getmethods__["value"] = _six.SlowTimeBeamCompensationType_value_get
    if _newclass:value = _swig_property(_six.SlowTimeBeamCompensationType_value_get, _six.SlowTimeBeamCompensationType_value_set)
SlowTimeBeamCompensationType_swigregister = _six.SlowTimeBeamCompensationType_swigregister
SlowTimeBeamCompensationType_swigregister(SlowTimeBeamCompensationType)

class XYZEnum(_object):
    """Proxy of C++ XYZEnum class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZEnum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZEnum, name)
    __repr__ = _swig_repr
    X = _six.XYZEnum_X
    Y = _six.XYZEnum_Y
    Z = _six.XYZEnum_Z
    NOT_SET = _six.XYZEnum_NOT_SET
    def __init__(self, *args): 
        """
        __init__(self) -> XYZEnum
        __init__(self, string s) -> XYZEnum
        __init__(self, int i) -> XYZEnum
        """
        this = _six.new_XYZEnum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_XYZEnum
    __del__ = lambda self : None;
    def toString(*args):
        """toString(self) -> string"""
        return _six.XYZEnum_toString(*args)

    def __eq__(*args):
        """
        __eq__(self, XYZEnum o) -> bool
        __eq__(self, int o) -> bool
        """
        return _six.XYZEnum___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, XYZEnum o) -> bool
        __ne__(self, int o) -> bool
        """
        return _six.XYZEnum___ne__(*args)

    def __lt__(*args):
        """__lt__(self, XYZEnum o) -> bool"""
        return _six.XYZEnum___lt__(*args)

    def __gt__(*args):
        """__gt__(self, XYZEnum o) -> bool"""
        return _six.XYZEnum___gt__(*args)

    def __le__(*args):
        """__le__(self, XYZEnum o) -> bool"""
        return _six.XYZEnum___le__(*args)

    def __ge__(*args):
        """__ge__(self, XYZEnum o) -> bool"""
        return _six.XYZEnum___ge__(*args)

    __swig_setmethods__["value"] = _six.XYZEnum_value_set
    __swig_getmethods__["value"] = _six.XYZEnum_value_get
    if _newclass:value = _swig_property(_six.XYZEnum_value_get, _six.XYZEnum_value_set)
XYZEnum_swigregister = _six.XYZEnum_swigregister
XYZEnum_swigregister(XYZEnum)

SIX_LIB_VERSION = _six.SIX_LIB_VERSION
SIX_MAJOR_VERSION_NUMBER = _six.SIX_MAJOR_VERSION_NUMBER
SIX_MINOR_VERSION_NUMBER = _six.SIX_MINOR_VERSION_NUMBER
SIX_MICRO_VERSION_NUMBER = _six.SIX_MICRO_VERSION_NUMBER
class DESValidationException(coda_except.Exception):
    """Proxy of C++ DESValidationException class"""
    __swig_setmethods__ = {}
    for _s in [coda_except.Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DESValidationException, name, value)
    __swig_getmethods__ = {}
    for _s in [coda_except.Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DESValidationException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DESValidationException
        __init__(self, Context c) -> DESValidationException
        __init__(self, string msg) -> DESValidationException
        __init__(self, Throwable t, Context c) -> DESValidationException
        """
        this = _six.new_DESValidationException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_DESValidationException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> string"""
        return _six.DESValidationException_getType(*args)

DESValidationException_swigregister = _six.DESValidationException_swigregister
DESValidationException_swigregister(DESValidationException)
SCHEMA_PATH = cvar.SCHEMA_PATH

class DecorrType(_object):
    """Proxy of C++ DecorrType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecorrType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecorrType, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double ccz=0, double dr=0) -> DecorrType
        __init__(self, double ccz=0) -> DecorrType
        __init__(self) -> DecorrType
        __init__(self, DecorrType dt) -> DecorrType
        """
        this = _six.new_DecorrType(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, DecorrType rhs) -> bool"""
        return _six.DecorrType___eq__(*args)

    __swig_setmethods__["corrCoefZero"] = _six.DecorrType_corrCoefZero_set
    __swig_getmethods__["corrCoefZero"] = _six.DecorrType_corrCoefZero_get
    if _newclass:corrCoefZero = _swig_property(_six.DecorrType_corrCoefZero_get, _six.DecorrType_corrCoefZero_set)
    __swig_setmethods__["decorrRate"] = _six.DecorrType_decorrRate_set
    __swig_getmethods__["decorrRate"] = _six.DecorrType_decorrRate_get
    if _newclass:decorrRate = _swig_property(_six.DecorrType_decorrRate_get, _six.DecorrType_decorrRate_set)
    __swig_destroy__ = _six.delete_DecorrType
    __del__ = lambda self : None;
DecorrType_swigregister = _six.DecorrType_swigregister
DecorrType_swigregister(DecorrType)

class Constants(_object):
    """Proxy of C++ Constants class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constants, name)
    __repr__ = _swig_repr
    ILOC_MAX = _six.Constants_ILOC_MAX
    def getNumBytesPerPixel(*args):
        """getNumBytesPerPixel(PixelType type) -> int"""
        return _six.Constants_getNumBytesPerPixel(*args)

    if _newclass:getNumBytesPerPixel = staticmethod(getNumBytesPerPixel)
    __swig_getmethods__["getNumBytesPerPixel"] = lambda x: getNumBytesPerPixel
    def __init__(self, *args): 
        """__init__(self) -> Constants"""
        this = _six.new_Constants(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_Constants
    __del__ = lambda self : None;
Constants_swigregister = _six.Constants_swigregister
Constants_swigregister(Constants)
Constants.IS_SIZE_MAX = _six.cvar.Constants_IS_SIZE_MAX
Constants.GT_SIZE_MAX = _six.cvar.Constants_GT_SIZE_MAX
Constants.GT_XML_KEY = _six.cvar.Constants_GT_XML_KEY
Constants.GT_XML_TAG = _six.cvar.Constants_GT_XML_TAG
Constants.DES_VERSION = _six.cvar.Constants_DES_VERSION
Constants.DES_VERSION_STR = _six.cvar.Constants_DES_VERSION_STR
Constants.DES_USER_DEFINED_SUBHEADER_TAG = _six.cvar.Constants_DES_USER_DEFINED_SUBHEADER_TAG
Constants.DES_USER_DEFINED_SUBHEADER_ID = _six.cvar.Constants_DES_USER_DEFINED_SUBHEADER_ID
Constants.DES_USER_DEFINED_SUBHEADER_LENGTH = _six.cvar.Constants_DES_USER_DEFINED_SUBHEADER_LENGTH

def Constants_getNumBytesPerPixel(*args):
  """Constants_getNumBytesPerPixel(PixelType type) -> int"""
  return _six.Constants_getNumBytesPerPixel(*args)

class ReferencePoint(_object):
    """Proxy of C++ ReferencePoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferencePoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferencePoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ecef"] = _six.ReferencePoint_ecef_set
    __swig_getmethods__["ecef"] = _six.ReferencePoint_ecef_get
    if _newclass:ecef = _swig_property(_six.ReferencePoint_ecef_get, _six.ReferencePoint_ecef_set)
    __swig_setmethods__["rowCol"] = _six.ReferencePoint_rowCol_set
    __swig_getmethods__["rowCol"] = _six.ReferencePoint_rowCol_get
    if _newclass:rowCol = _swig_property(_six.ReferencePoint_rowCol_get, _six.ReferencePoint_rowCol_set)
    __swig_setmethods__["name"] = _six.ReferencePoint_name_set
    __swig_getmethods__["name"] = _six.ReferencePoint_name_get
    if _newclass:name = _swig_property(_six.ReferencePoint_name_get, _six.ReferencePoint_name_set)
    def __init__(self, *args): 
        """
        __init__(self, double x=0, double y=0, double z=0, double row=0, double col=0) -> ReferencePoint
        __init__(self, double x=0, double y=0, double z=0, double row=0) -> ReferencePoint
        __init__(self, double x=0, double y=0, double z=0) -> ReferencePoint
        __init__(self, double x=0, double y=0) -> ReferencePoint
        __init__(self, double x=0) -> ReferencePoint
        __init__(self) -> ReferencePoint
        __init__(self, Vector3 xyz, RowColDouble rcd) -> ReferencePoint
        """
        this = _six.new_ReferencePoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, ReferencePoint x) -> bool"""
        return _six.ReferencePoint___eq__(*args)

    def __ne__(*args):
        """__ne__(self, ReferencePoint x) -> bool"""
        return _six.ReferencePoint___ne__(*args)

    __swig_destroy__ = _six.delete_ReferencePoint
    __del__ = lambda self : None;
ReferencePoint_swigregister = _six.ReferencePoint_swigregister
ReferencePoint_swigregister(ReferencePoint)

class SCP(_object):
    """Proxy of C++ SCP class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ecf"] = _six.SCP_ecf_set
    __swig_getmethods__["ecf"] = _six.SCP_ecf_get
    if _newclass:ecf = _swig_property(_six.SCP_ecf_get, _six.SCP_ecf_set)
    __swig_setmethods__["llh"] = _six.SCP_llh_set
    __swig_getmethods__["llh"] = _six.SCP_llh_get
    if _newclass:llh = _swig_property(_six.SCP_llh_get, _six.SCP_llh_set)
    def __init__(self, *args): 
        """__init__(self) -> SCP"""
        this = _six.new_SCP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_SCP
    __del__ = lambda self : None;
SCP_swigregister = _six.SCP_swigregister
SCP_swigregister(SCP)

class AmplitudeTable(_object):
    """Proxy of C++ AmplitudeTable class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmplitudeTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AmplitudeTable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> AmplitudeTable"""
        this = _six.new_AmplitudeTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_AmplitudeTable
    __del__ = lambda self : None;
AmplitudeTable_swigregister = _six.AmplitudeTable_swigregister
AmplitudeTable_swigregister(AmplitudeTable)

class MissingRequiredException(coda_except.Exception):
    """Proxy of C++ MissingRequiredException class"""
    __swig_setmethods__ = {}
    for _s in [coda_except.Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MissingRequiredException, name, value)
    __swig_getmethods__ = {}
    for _s in [coda_except.Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MissingRequiredException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MissingRequiredException
        __init__(self, Context c) -> MissingRequiredException
        __init__(self, string msg) -> MissingRequiredException
        __init__(self, Throwable t, Context c) -> MissingRequiredException
        """
        this = _six.new_MissingRequiredException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_MissingRequiredException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> string"""
        return _six.MissingRequiredException_getType(*args)

MissingRequiredException_swigregister = _six.MissingRequiredException_swigregister
MissingRequiredException_swigregister(MissingRequiredException)

class UninitializedValueException(coda_except.Exception):
    """Proxy of C++ UninitializedValueException class"""
    __swig_setmethods__ = {}
    for _s in [coda_except.Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UninitializedValueException, name, value)
    __swig_getmethods__ = {}
    for _s in [coda_except.Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UninitializedValueException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UninitializedValueException
        __init__(self, Context c) -> UninitializedValueException
        __init__(self, string msg) -> UninitializedValueException
        __init__(self, Throwable t, Context c) -> UninitializedValueException
        """
        this = _six.new_UninitializedValueException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_UninitializedValueException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> string"""
        return _six.UninitializedValueException_getType(*args)

UninitializedValueException_swigregister = _six.UninitializedValueException_swigregister
UninitializedValueException_swigregister(UninitializedValueException)

class Init(_object):
    """Proxy of C++ Init class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Init, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Init, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Init"""
        this = _six.new_Init(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_Init
    __del__ = lambda self : None;
Init_swigregister = _six.Init_swigregister
Init_swigregister(Init)

class Classification(_object):
    """Proxy of C++ Classification class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Classification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Classification, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _six.delete_Classification
    __del__ = lambda self : None;
    def getLevel(*args):
        """getLevel(self) -> string"""
        return _six.Classification_getLevel(*args)

    def isUnclassified(*args):
        """isUnclassified(self) -> bool"""
        return _six.Classification_isUnclassified(*args)

    def setSecurity(*args):
        """setSecurity(self, string prefix, logging::Logger log, nitf::FileSecurity security)"""
        return _six.Classification_setSecurity(*args)

    def put(*args):
        """put(self, std::ostream os) -> std::ostream"""
        return _six.Classification_put(*args)

    __swig_setmethods__["fileOptions"] = _six.Classification_fileOptions_set
    __swig_getmethods__["fileOptions"] = _six.Classification_fileOptions_get
    if _newclass:fileOptions = _swig_property(_six.Classification_fileOptions_get, _six.Classification_fileOptions_set)
Classification_swigregister = _six.Classification_swigregister
Classification_swigregister(Classification)

class CorrCoefs(_object):
    """Proxy of C++ CorrCoefs class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CorrCoefs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CorrCoefs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> CorrCoefs"""
        this = _six.new_CorrCoefs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["p1p2"] = _six.CorrCoefs_p1p2_set
    __swig_getmethods__["p1p2"] = _six.CorrCoefs_p1p2_get
    if _newclass:p1p2 = _swig_property(_six.CorrCoefs_p1p2_get, _six.CorrCoefs_p1p2_set)
    __swig_setmethods__["p1p3"] = _six.CorrCoefs_p1p3_set
    __swig_getmethods__["p1p3"] = _six.CorrCoefs_p1p3_get
    if _newclass:p1p3 = _swig_property(_six.CorrCoefs_p1p3_get, _six.CorrCoefs_p1p3_set)
    __swig_setmethods__["p1v1"] = _six.CorrCoefs_p1v1_set
    __swig_getmethods__["p1v1"] = _six.CorrCoefs_p1v1_get
    if _newclass:p1v1 = _swig_property(_six.CorrCoefs_p1v1_get, _six.CorrCoefs_p1v1_set)
    __swig_setmethods__["p1v2"] = _six.CorrCoefs_p1v2_set
    __swig_getmethods__["p1v2"] = _six.CorrCoefs_p1v2_get
    if _newclass:p1v2 = _swig_property(_six.CorrCoefs_p1v2_get, _six.CorrCoefs_p1v2_set)
    __swig_setmethods__["p1v3"] = _six.CorrCoefs_p1v3_set
    __swig_getmethods__["p1v3"] = _six.CorrCoefs_p1v3_get
    if _newclass:p1v3 = _swig_property(_six.CorrCoefs_p1v3_get, _six.CorrCoefs_p1v3_set)
    __swig_setmethods__["p2p3"] = _six.CorrCoefs_p2p3_set
    __swig_getmethods__["p2p3"] = _six.CorrCoefs_p2p3_get
    if _newclass:p2p3 = _swig_property(_six.CorrCoefs_p2p3_get, _six.CorrCoefs_p2p3_set)
    __swig_setmethods__["p2v1"] = _six.CorrCoefs_p2v1_set
    __swig_getmethods__["p2v1"] = _six.CorrCoefs_p2v1_get
    if _newclass:p2v1 = _swig_property(_six.CorrCoefs_p2v1_get, _six.CorrCoefs_p2v1_set)
    __swig_setmethods__["p2v2"] = _six.CorrCoefs_p2v2_set
    __swig_getmethods__["p2v2"] = _six.CorrCoefs_p2v2_get
    if _newclass:p2v2 = _swig_property(_six.CorrCoefs_p2v2_get, _six.CorrCoefs_p2v2_set)
    __swig_setmethods__["p2v3"] = _six.CorrCoefs_p2v3_set
    __swig_getmethods__["p2v3"] = _six.CorrCoefs_p2v3_get
    if _newclass:p2v3 = _swig_property(_six.CorrCoefs_p2v3_get, _six.CorrCoefs_p2v3_set)
    __swig_setmethods__["p3v1"] = _six.CorrCoefs_p3v1_set
    __swig_getmethods__["p3v1"] = _six.CorrCoefs_p3v1_get
    if _newclass:p3v1 = _swig_property(_six.CorrCoefs_p3v1_get, _six.CorrCoefs_p3v1_set)
    __swig_setmethods__["p3v2"] = _six.CorrCoefs_p3v2_set
    __swig_getmethods__["p3v2"] = _six.CorrCoefs_p3v2_get
    if _newclass:p3v2 = _swig_property(_six.CorrCoefs_p3v2_get, _six.CorrCoefs_p3v2_set)
    __swig_setmethods__["p3v3"] = _six.CorrCoefs_p3v3_set
    __swig_getmethods__["p3v3"] = _six.CorrCoefs_p3v3_get
    if _newclass:p3v3 = _swig_property(_six.CorrCoefs_p3v3_get, _six.CorrCoefs_p3v3_set)
    __swig_setmethods__["v1v2"] = _six.CorrCoefs_v1v2_set
    __swig_getmethods__["v1v2"] = _six.CorrCoefs_v1v2_get
    if _newclass:v1v2 = _swig_property(_six.CorrCoefs_v1v2_get, _six.CorrCoefs_v1v2_set)
    __swig_setmethods__["v1v3"] = _six.CorrCoefs_v1v3_set
    __swig_getmethods__["v1v3"] = _six.CorrCoefs_v1v3_get
    if _newclass:v1v3 = _swig_property(_six.CorrCoefs_v1v3_get, _six.CorrCoefs_v1v3_set)
    __swig_setmethods__["v2v3"] = _six.CorrCoefs_v2v3_set
    __swig_getmethods__["v2v3"] = _six.CorrCoefs_v2v3_get
    if _newclass:v2v3 = _swig_property(_six.CorrCoefs_v2v3_get, _six.CorrCoefs_v2v3_set)
    __swig_destroy__ = _six.delete_CorrCoefs
    __del__ = lambda self : None;
CorrCoefs_swigregister = _six.CorrCoefs_swigregister
CorrCoefs_swigregister(CorrCoefs)

class PosVelError(_object):
    """Proxy of C++ PosVelError class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosVelError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PosVelError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> PosVelError"""
        this = _six.new_PosVelError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["frame"] = _six.PosVelError_frame_set
    __swig_getmethods__["frame"] = _six.PosVelError_frame_get
    if _newclass:frame = _swig_property(_six.PosVelError_frame_get, _six.PosVelError_frame_set)
    __swig_setmethods__["p1"] = _six.PosVelError_p1_set
    __swig_getmethods__["p1"] = _six.PosVelError_p1_get
    if _newclass:p1 = _swig_property(_six.PosVelError_p1_get, _six.PosVelError_p1_set)
    __swig_setmethods__["p2"] = _six.PosVelError_p2_set
    __swig_getmethods__["p2"] = _six.PosVelError_p2_get
    if _newclass:p2 = _swig_property(_six.PosVelError_p2_get, _six.PosVelError_p2_set)
    __swig_setmethods__["p3"] = _six.PosVelError_p3_set
    __swig_getmethods__["p3"] = _six.PosVelError_p3_get
    if _newclass:p3 = _swig_property(_six.PosVelError_p3_get, _six.PosVelError_p3_set)
    __swig_setmethods__["v1"] = _six.PosVelError_v1_set
    __swig_getmethods__["v1"] = _six.PosVelError_v1_get
    if _newclass:v1 = _swig_property(_six.PosVelError_v1_get, _six.PosVelError_v1_set)
    __swig_setmethods__["v2"] = _six.PosVelError_v2_set
    __swig_getmethods__["v2"] = _six.PosVelError_v2_get
    if _newclass:v2 = _swig_property(_six.PosVelError_v2_get, _six.PosVelError_v2_set)
    __swig_setmethods__["v3"] = _six.PosVelError_v3_set
    __swig_getmethods__["v3"] = _six.PosVelError_v3_get
    if _newclass:v3 = _swig_property(_six.PosVelError_v3_get, _six.PosVelError_v3_set)
    __swig_setmethods__["corrCoefs"] = _six.PosVelError_corrCoefs_set
    __swig_getmethods__["corrCoefs"] = _six.PosVelError_corrCoefs_get
    if _newclass:corrCoefs = _swig_property(_six.PosVelError_corrCoefs_get, _six.PosVelError_corrCoefs_set)
    __swig_setmethods__["positionDecorr"] = _six.PosVelError_positionDecorr_set
    __swig_getmethods__["positionDecorr"] = _six.PosVelError_positionDecorr_get
    if _newclass:positionDecorr = _swig_property(_six.PosVelError_positionDecorr_get, _six.PosVelError_positionDecorr_set)
    __swig_destroy__ = _six.delete_PosVelError
    __del__ = lambda self : None;
PosVelError_swigregister = _six.PosVelError_swigregister
PosVelError_swigregister(PosVelError)

class RadarSensor(_object):
    """Proxy of C++ RadarSensor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarSensor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rangeBias"] = _six.RadarSensor_rangeBias_set
    __swig_getmethods__["rangeBias"] = _six.RadarSensor_rangeBias_get
    if _newclass:rangeBias = _swig_property(_six.RadarSensor_rangeBias_get, _six.RadarSensor_rangeBias_set)
    __swig_setmethods__["clockFreqSF"] = _six.RadarSensor_clockFreqSF_set
    __swig_getmethods__["clockFreqSF"] = _six.RadarSensor_clockFreqSF_get
    if _newclass:clockFreqSF = _swig_property(_six.RadarSensor_clockFreqSF_get, _six.RadarSensor_clockFreqSF_set)
    __swig_setmethods__["transmitFreqSF"] = _six.RadarSensor_transmitFreqSF_set
    __swig_getmethods__["transmitFreqSF"] = _six.RadarSensor_transmitFreqSF_get
    if _newclass:transmitFreqSF = _swig_property(_six.RadarSensor_transmitFreqSF_get, _six.RadarSensor_transmitFreqSF_set)
    __swig_setmethods__["rangeBiasDecorr"] = _six.RadarSensor_rangeBiasDecorr_set
    __swig_getmethods__["rangeBiasDecorr"] = _six.RadarSensor_rangeBiasDecorr_get
    if _newclass:rangeBiasDecorr = _swig_property(_six.RadarSensor_rangeBiasDecorr_get, _six.RadarSensor_rangeBiasDecorr_set)
    def __init__(self, *args): 
        """__init__(self) -> RadarSensor"""
        this = _six.new_RadarSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_RadarSensor
    __del__ = lambda self : None;
RadarSensor_swigregister = _six.RadarSensor_swigregister
RadarSensor_swigregister(RadarSensor)

class TropoError(_object):
    """Proxy of C++ TropoError class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TropoError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TropoError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tropoRangeVertical"] = _six.TropoError_tropoRangeVertical_set
    __swig_getmethods__["tropoRangeVertical"] = _six.TropoError_tropoRangeVertical_get
    if _newclass:tropoRangeVertical = _swig_property(_six.TropoError_tropoRangeVertical_get, _six.TropoError_tropoRangeVertical_set)
    __swig_setmethods__["tropoRangeSlant"] = _six.TropoError_tropoRangeSlant_set
    __swig_getmethods__["tropoRangeSlant"] = _six.TropoError_tropoRangeSlant_get
    if _newclass:tropoRangeSlant = _swig_property(_six.TropoError_tropoRangeSlant_get, _six.TropoError_tropoRangeSlant_set)
    __swig_setmethods__["tropoRangeDecorr"] = _six.TropoError_tropoRangeDecorr_set
    __swig_getmethods__["tropoRangeDecorr"] = _six.TropoError_tropoRangeDecorr_get
    if _newclass:tropoRangeDecorr = _swig_property(_six.TropoError_tropoRangeDecorr_get, _six.TropoError_tropoRangeDecorr_set)
    def __init__(self, *args): 
        """__init__(self) -> TropoError"""
        this = _six.new_TropoError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_TropoError
    __del__ = lambda self : None;
TropoError_swigregister = _six.TropoError_swigregister
TropoError_swigregister(TropoError)

class IonoError(_object):
    """Proxy of C++ IonoError class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IonoError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IonoError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ionoRangeVertical"] = _six.IonoError_ionoRangeVertical_set
    __swig_getmethods__["ionoRangeVertical"] = _six.IonoError_ionoRangeVertical_get
    if _newclass:ionoRangeVertical = _swig_property(_six.IonoError_ionoRangeVertical_get, _six.IonoError_ionoRangeVertical_set)
    __swig_setmethods__["ionoRangeRateVertical"] = _six.IonoError_ionoRangeRateVertical_set
    __swig_getmethods__["ionoRangeRateVertical"] = _six.IonoError_ionoRangeRateVertical_get
    if _newclass:ionoRangeRateVertical = _swig_property(_six.IonoError_ionoRangeRateVertical_get, _six.IonoError_ionoRangeRateVertical_set)
    __swig_setmethods__["ionoRgRgRateCC"] = _six.IonoError_ionoRgRgRateCC_set
    __swig_getmethods__["ionoRgRgRateCC"] = _six.IonoError_ionoRgRgRateCC_get
    if _newclass:ionoRgRgRateCC = _swig_property(_six.IonoError_ionoRgRgRateCC_get, _six.IonoError_ionoRgRgRateCC_set)
    __swig_setmethods__["ionoRangeVertDecorr"] = _six.IonoError_ionoRangeVertDecorr_set
    __swig_getmethods__["ionoRangeVertDecorr"] = _six.IonoError_ionoRangeVertDecorr_get
    if _newclass:ionoRangeVertDecorr = _swig_property(_six.IonoError_ionoRangeVertDecorr_get, _six.IonoError_ionoRangeVertDecorr_set)
    def __init__(self, *args): 
        """__init__(self) -> IonoError"""
        this = _six.new_IonoError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_IonoError
    __del__ = lambda self : None;
IonoError_swigregister = _six.IonoError_swigregister
IonoError_swigregister(IonoError)

class Components(_object):
    """Proxy of C++ Components class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Components, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Components, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Components"""
        this = _six.new_Components(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["posVelError"] = _six.Components_posVelError_set
    __swig_getmethods__["posVelError"] = _six.Components_posVelError_get
    if _newclass:posVelError = _swig_property(_six.Components_posVelError_get, _six.Components_posVelError_set)
    __swig_setmethods__["radarSensor"] = _six.Components_radarSensor_set
    __swig_getmethods__["radarSensor"] = _six.Components_radarSensor_get
    if _newclass:radarSensor = _swig_property(_six.Components_radarSensor_get, _six.Components_radarSensor_set)
    __swig_setmethods__["tropoError"] = _six.Components_tropoError_set
    __swig_getmethods__["tropoError"] = _six.Components_tropoError_get
    if _newclass:tropoError = _swig_property(_six.Components_tropoError_get, _six.Components_tropoError_set)
    __swig_setmethods__["ionoError"] = _six.Components_ionoError_set
    __swig_getmethods__["ionoError"] = _six.Components_ionoError_get
    if _newclass:ionoError = _swig_property(_six.Components_ionoError_get, _six.Components_ionoError_set)
    __swig_destroy__ = _six.delete_Components
    __del__ = lambda self : None;
Components_swigregister = _six.Components_swigregister
Components_swigregister(Components)

class CompositeSCP(_object):
    """Proxy of C++ CompositeSCP class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeSCP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeSCP, name)
    __repr__ = _swig_repr
    ROW_COL = _six.CompositeSCP_ROW_COL
    RG_AZ = _six.CompositeSCP_RG_AZ
    def __init__(self, *args): 
        """
        __init__(self, SCPType scpTypeIn=RG_AZ) -> CompositeSCP
        __init__(self) -> CompositeSCP
        """
        this = _six.new_CompositeSCP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["scpType"] = _six.CompositeSCP_scpType_set
    __swig_getmethods__["scpType"] = _six.CompositeSCP_scpType_get
    if _newclass:scpType = _swig_property(_six.CompositeSCP_scpType_get, _six.CompositeSCP_scpType_set)
    __swig_setmethods__["xErr"] = _six.CompositeSCP_xErr_set
    __swig_getmethods__["xErr"] = _six.CompositeSCP_xErr_get
    if _newclass:xErr = _swig_property(_six.CompositeSCP_xErr_get, _six.CompositeSCP_xErr_set)
    __swig_setmethods__["yErr"] = _six.CompositeSCP_yErr_set
    __swig_getmethods__["yErr"] = _six.CompositeSCP_yErr_get
    if _newclass:yErr = _swig_property(_six.CompositeSCP_yErr_get, _six.CompositeSCP_yErr_set)
    __swig_setmethods__["xyErr"] = _six.CompositeSCP_xyErr_set
    __swig_getmethods__["xyErr"] = _six.CompositeSCP_xyErr_get
    if _newclass:xyErr = _swig_property(_six.CompositeSCP_xyErr_get, _six.CompositeSCP_xyErr_set)
    __swig_destroy__ = _six.delete_CompositeSCP
    __del__ = lambda self : None;
CompositeSCP_swigregister = _six.CompositeSCP_swigregister
CompositeSCP_swigregister(CompositeSCP)

class ErrorStatistics(_object):
    """Proxy of C++ ErrorStatistics class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorStatistics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["compositeSCP"] = _six.ErrorStatistics_compositeSCP_set
    __swig_getmethods__["compositeSCP"] = _six.ErrorStatistics_compositeSCP_get
    if _newclass:compositeSCP = _swig_property(_six.ErrorStatistics_compositeSCP_get, _six.ErrorStatistics_compositeSCP_set)
    __swig_setmethods__["components"] = _six.ErrorStatistics_components_set
    __swig_getmethods__["components"] = _six.ErrorStatistics_components_get
    if _newclass:components = _swig_property(_six.ErrorStatistics_components_get, _six.ErrorStatistics_components_set)
    __swig_setmethods__["additionalParameters"] = _six.ErrorStatistics_additionalParameters_set
    __swig_getmethods__["additionalParameters"] = _six.ErrorStatistics_additionalParameters_get
    if _newclass:additionalParameters = _swig_property(_six.ErrorStatistics_additionalParameters_get, _six.ErrorStatistics_additionalParameters_set)
    def __init__(self, *args): 
        """__init__(self) -> ErrorStatistics"""
        this = _six.new_ErrorStatistics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_ErrorStatistics
    __del__ = lambda self : None;
ErrorStatistics_swigregister = _six.ErrorStatistics_swigregister
ErrorStatistics_swigregister(ErrorStatistics)

class NoiseLevel(_object):
    """Proxy of C++ NoiseLevel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseLevel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> NoiseLevel"""
        this = _six.new_NoiseLevel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["noiseType"] = _six.NoiseLevel_noiseType_set
    __swig_getmethods__["noiseType"] = _six.NoiseLevel_noiseType_get
    if _newclass:noiseType = _swig_property(_six.NoiseLevel_noiseType_get, _six.NoiseLevel_noiseType_set)
    __swig_setmethods__["noisePoly"] = _six.NoiseLevel_noisePoly_set
    __swig_getmethods__["noisePoly"] = _six.NoiseLevel_noisePoly_get
    if _newclass:noisePoly = _swig_property(_six.NoiseLevel_noisePoly_get, _six.NoiseLevel_noisePoly_set)
    __swig_destroy__ = _six.delete_NoiseLevel
    __del__ = lambda self : None;
NoiseLevel_swigregister = _six.NoiseLevel_swigregister
NoiseLevel_swigregister(NoiseLevel)

class Radiometric(_object):
    """Proxy of C++ Radiometric class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Radiometric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Radiometric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Radiometric"""
        this = _six.new_Radiometric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["noiseLevel"] = _six.Radiometric_noiseLevel_set
    __swig_getmethods__["noiseLevel"] = _six.Radiometric_noiseLevel_get
    if _newclass:noiseLevel = _swig_property(_six.Radiometric_noiseLevel_get, _six.Radiometric_noiseLevel_set)
    __swig_setmethods__["rcsSFPoly"] = _six.Radiometric_rcsSFPoly_set
    __swig_getmethods__["rcsSFPoly"] = _six.Radiometric_rcsSFPoly_get
    if _newclass:rcsSFPoly = _swig_property(_six.Radiometric_rcsSFPoly_get, _six.Radiometric_rcsSFPoly_set)
    __swig_setmethods__["betaZeroSFPoly"] = _six.Radiometric_betaZeroSFPoly_set
    __swig_getmethods__["betaZeroSFPoly"] = _six.Radiometric_betaZeroSFPoly_get
    if _newclass:betaZeroSFPoly = _swig_property(_six.Radiometric_betaZeroSFPoly_get, _six.Radiometric_betaZeroSFPoly_set)
    __swig_setmethods__["sigmaZeroSFPoly"] = _six.Radiometric_sigmaZeroSFPoly_set
    __swig_getmethods__["sigmaZeroSFPoly"] = _six.Radiometric_sigmaZeroSFPoly_get
    if _newclass:sigmaZeroSFPoly = _swig_property(_six.Radiometric_sigmaZeroSFPoly_get, _six.Radiometric_sigmaZeroSFPoly_set)
    __swig_setmethods__["sigmaZeroSFIncidenceMap"] = _six.Radiometric_sigmaZeroSFIncidenceMap_set
    __swig_getmethods__["sigmaZeroSFIncidenceMap"] = _six.Radiometric_sigmaZeroSFIncidenceMap_get
    if _newclass:sigmaZeroSFIncidenceMap = _swig_property(_six.Radiometric_sigmaZeroSFIncidenceMap_get, _six.Radiometric_sigmaZeroSFIncidenceMap_set)
    __swig_setmethods__["gammaZeroSFPoly"] = _six.Radiometric_gammaZeroSFPoly_set
    __swig_getmethods__["gammaZeroSFPoly"] = _six.Radiometric_gammaZeroSFPoly_get
    if _newclass:gammaZeroSFPoly = _swig_property(_six.Radiometric_gammaZeroSFPoly_get, _six.Radiometric_gammaZeroSFPoly_set)
    __swig_setmethods__["gammaZeroSFIncidenceMap"] = _six.Radiometric_gammaZeroSFIncidenceMap_set
    __swig_getmethods__["gammaZeroSFIncidenceMap"] = _six.Radiometric_gammaZeroSFIncidenceMap_get
    if _newclass:gammaZeroSFIncidenceMap = _swig_property(_six.Radiometric_gammaZeroSFIncidenceMap_get, _six.Radiometric_gammaZeroSFIncidenceMap_set)
    __swig_destroy__ = _six.delete_Radiometric
    __del__ = lambda self : None;
Radiometric_swigregister = _six.Radiometric_swigregister
Radiometric_swigregister(Radiometric)
Radiometric.NL_ABSOLUTE = _six.cvar.Radiometric_NL_ABSOLUTE
Radiometric.NL_RELATIVE = _six.cvar.Radiometric_NL_RELATIVE

class Data(_object):
    """Proxy of C++ Data class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _six.delete_Data
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> Data"""
        return _six.Data_clone(*args)

    def getDataType(*args):
        """getDataType(self) -> DataType"""
        return _six.Data_getDataType(*args)

    def getPixelType(*args):
        """getPixelType(self) -> PixelType"""
        return _six.Data_getPixelType(*args)

    def setPixelType(*args):
        """setPixelType(self, PixelType pixelType)"""
        return _six.Data_setPixelType(*args)

    def getNumRows(*args):
        """getNumRows(self) -> size_t"""
        return _six.Data_getNumRows(*args)

    def setNumRows(*args):
        """setNumRows(self, size_t numRows)"""
        return _six.Data_setNumRows(*args)

    def getNumCols(*args):
        """getNumCols(self) -> size_t"""
        return _six.Data_getNumCols(*args)

    def setNumCols(*args):
        """setNumCols(self, size_t numCols)"""
        return _six.Data_setNumCols(*args)

    def getImageCorners(*args):
        """getImageCorners(self) -> LatLonCorners"""
        return _six.Data_getImageCorners(*args)

    def setImageCorners(*args):
        """setImageCorners(self, LatLonCorners corners)"""
        return _six.Data_setImageCorners(*args)

    def getName(*args):
        """getName(self) -> string"""
        return _six.Data_getName(*args)

    def setName(*args):
        """setName(self, string name)"""
        return _six.Data_setName(*args)

    def getSource(*args):
        """getSource(self) -> string"""
        return _six.Data_getSource(*args)

    def setSource(*args):
        """setSource(self, string name)"""
        return _six.Data_setSource(*args)

    def getCreationTime(*args):
        """getCreationTime(self) -> DateTime"""
        return _six.Data_getCreationTime(*args)

    def setCreationTime(*args):
        """setCreationTime(self, DateTime creationTime)"""
        return _six.Data_setCreationTime(*args)

    def getCollectionStartDateTime(*args):
        """getCollectionStartDateTime(self) -> DateTime"""
        return _six.Data_getCollectionStartDateTime(*args)

    def getNumBytesPerPixel(*args):
        """getNumBytesPerPixel(self) -> size_t"""
        return _six.Data_getNumBytesPerPixel(*args)

    def getNumChannels(*args):
        """getNumChannels(self) -> size_t"""
        return _six.Data_getNumChannels(*args)

    def getClassification(*args):
        """
        getClassification(self) -> Classification
        getClassification(self) -> Classification
        """
        return _six.Data_getClassification(*args)

    def getDisplayLUT(*args):
        """getDisplayLUT(self)"""
        return _six.Data_getDisplayLUT(*args)

    def getVendorID(*args):
        """getVendorID(self) -> string"""
        return _six.Data_getVendorID(*args)

    def getVersion(*args):
        """getVersion(self) -> string"""
        return _six.Data_getVersion(*args)

    def setVersion(*args):
        """setVersion(self, string version)"""
        return _six.Data_setVersion(*args)

    def asComplexData(*args):
        """asComplexData(self) -> six::sicd::ComplexData"""
        return _six.Data_asComplexData(*args)

Data_swigregister = _six.Data_swigregister
Data_swigregister(Data)

class XMLControl(_object):
    """Proxy of C++ XMLControl class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLControl, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _six.delete_XMLControl
    __del__ = lambda self : None;
    def setLogger(*args):
        """
        setLogger(self, logging::Logger log, bool ownLog=False)
        setLogger(self, logging::Logger log)
        """
        return _six.XMLControl_setLogger(*args)

    def toXML(*args):
        """toXML(self, Data data, VectorString schemaPaths) -> xml::lite::Document"""
        return _six.XMLControl_toXML(*args)

    def fromXML(*args):
        """fromXML(self, xml::lite::Document doc, VectorString schemaPaths) -> Data"""
        return _six.XMLControl_fromXML(*args)

    def dataTypeToString(*args):
        """
        dataTypeToString(DataType dataType, bool appendXML=True) -> string
        dataTypeToString(DataType dataType) -> string
        """
        return _six.XMLControl_dataTypeToString(*args)

    if _newclass:dataTypeToString = staticmethod(dataTypeToString)
    __swig_getmethods__["dataTypeToString"] = lambda x: dataTypeToString
XMLControl_swigregister = _six.XMLControl_swigregister
XMLControl_swigregister(XMLControl)

def XMLControl_dataTypeToString(*args):
  """
    dataTypeToString(DataType dataType, bool appendXML=True) -> string
    XMLControl_dataTypeToString(DataType dataType) -> string
    """
  return _six.XMLControl_dataTypeToString(*args)


def remapZeroTo360(*args):
  """remapZeroTo360(double degree) -> double"""
  return _six.remapZeroTo360(*args)

def loadPluginDir(*args):
  """loadPluginDir(string pluginDir)"""
  return _six.loadPluginDir(*args)

def getErrors(*args):
  """
    getErrors(ErrorStatistics errorStats, RgAzDouble sampleSpacing, 
        Errors errors)
    """
  return _six.getErrors(*args)
class Options(_object):
    """Proxy of C++ Options class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Options, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> Options"""
        this = _six.new_Options(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_Options
    __del__ = lambda self : None;
    def getParameter(*args):
        """
        getParameter(self, string option) -> Parameter
        getParameter(self, string option, Parameter defaultValue) -> Parameter
        """
        return _six.Options_getParameter(*args)

    def setParameter(*args):
        """setParameter(self, string option, Parameter value)"""
        return _six.Options_setParameter(*args)

    def hasParameter(*args):
        """hasParameter(self, string option) -> bool"""
        return _six.Options_hasParameter(*args)

    def begin(*args):
        """begin(self) -> ParameterIter"""
        return _six.Options_begin(*args)

    def end(*args):
        """end(self) -> ParameterIter"""
        return _six.Options_end(*args)

Options_swigregister = _six.Options_swigregister
Options_swigregister(Options)

class VectorString(_object):
    """Proxy of C++ VectorString class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _six.VectorString_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _six.VectorString___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _six.VectorString___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _six.VectorString_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorString"""
        return _six.VectorString___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, VectorString v)"""
        return _six.VectorString___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _six.VectorString___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _six.VectorString___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _six.VectorString___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _six.VectorString___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _six.VectorString_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _six.VectorString_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _six.VectorString_size(*args)

    def clear(*args):
        """clear(self)"""
        return _six.VectorString_clear(*args)

    def swap(*args):
        """swap(self, VectorString v)"""
        return _six.VectorString_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _six.VectorString_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _six.VectorString_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _six.VectorString_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _six.VectorString_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _six.VectorString_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _six.VectorString_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _six.VectorString_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorString
        __init__(self, VectorString ?) -> VectorString
        __init__(self, size_type size) -> VectorString
        __init__(self, size_type size, value_type value) -> VectorString
        """
        this = _six.new_VectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _six.VectorString_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _six.VectorString_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _six.VectorString_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _six.VectorString_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _six.VectorString_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _six.VectorString_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _six.VectorString_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _six.VectorString_capacity(*args)

    __swig_destroy__ = _six.delete_VectorString
    __del__ = lambda self : None;
VectorString_swigregister = _six.VectorString_swigregister
VectorString_swigregister(VectorString)

class LatLonCorners(_object):
    """Proxy of C++ LatLonCorners class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatLonCorners, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LatLonCorners, name)
    __repr__ = _swig_repr
    NUM_CORNERS = _six.LatLonCorners_NUM_CORNERS
    UPPER_LEFT = _six.LatLonCorners_UPPER_LEFT
    FIRST_ROW_FIRST_COL = _six.LatLonCorners_FIRST_ROW_FIRST_COL
    UPPER_RIGHT = _six.LatLonCorners_UPPER_RIGHT
    FIRST_ROW_LAST_COL = _six.LatLonCorners_FIRST_ROW_LAST_COL
    LOWER_RIGHT = _six.LatLonCorners_LOWER_RIGHT
    LAST_ROW_LAST_COL = _six.LatLonCorners_LAST_ROW_LAST_COL
    LOWER_LEFT = _six.LatLonCorners_LOWER_LEFT
    LAST_ROW_FIRST_COL = _six.LatLonCorners_LAST_ROW_FIRST_COL
    def getCorner(*args):
        """
        getCorner(self, size_t idx) -> LatLon
        getCorner(self, size_t idx) -> LatLon
        """
        return _six.LatLonCorners_getCorner(*args)

    __swig_setmethods__["upperLeft"] = _six.LatLonCorners_upperLeft_set
    __swig_getmethods__["upperLeft"] = _six.LatLonCorners_upperLeft_get
    if _newclass:upperLeft = _swig_property(_six.LatLonCorners_upperLeft_get, _six.LatLonCorners_upperLeft_set)
    __swig_setmethods__["upperRight"] = _six.LatLonCorners_upperRight_set
    __swig_getmethods__["upperRight"] = _six.LatLonCorners_upperRight_get
    if _newclass:upperRight = _swig_property(_six.LatLonCorners_upperRight_get, _six.LatLonCorners_upperRight_set)
    __swig_setmethods__["lowerRight"] = _six.LatLonCorners_lowerRight_set
    __swig_getmethods__["lowerRight"] = _six.LatLonCorners_lowerRight_get
    if _newclass:lowerRight = _swig_property(_six.LatLonCorners_lowerRight_get, _six.LatLonCorners_lowerRight_set)
    __swig_setmethods__["lowerLeft"] = _six.LatLonCorners_lowerLeft_set
    __swig_getmethods__["lowerLeft"] = _six.LatLonCorners_lowerLeft_get
    if _newclass:lowerLeft = _swig_property(_six.LatLonCorners_lowerLeft_get, _six.LatLonCorners_lowerLeft_set)
    def __init__(self, *args): 
        """__init__(self) -> LatLonCorners"""
        this = _six.new_LatLonCorners(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _six.delete_LatLonCorners
    __del__ = lambda self : None;
LatLonCorners_swigregister = _six.LatLonCorners_swigregister
LatLonCorners_swigregister(LatLonCorners)


def readXML(*args):
  """readXML(char filename) -> PyObject"""
  return _six.readXML(*args)

def readImages(*args):
  """readImages(char filename) -> PyObject"""
  return _six.readImages(*args)


