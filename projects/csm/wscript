import sys, os

DIRS = 'external'

def options(opt):
    opt.recurse(DIRS)

def configure(conf):
    conf.recurse(DIRS)

def build(bld):
    bld.recurse(DIRS)

    variant = bld.env['VARIANT'] or 'default'
    env = bld.all_envs[variant].derive()

    # See previous revisions for special compiler and linker flags that were
    # needed to work properly with Socet GXP 3.2 on Windows

    #build our plugin
    lib = bld(features = 'cxx cshlib',
              includes='include',
              target='SIXPlugin[U]', name='SIXPlugin',
              source=bld.path.find_dir('source').ant_glob('*.cpp'),
              env=env.derive(), path=bld.path,
              use='six.sicd-c++ six.sidd-c++ CSMAPI',
              install_path=os.path.join(env['install_sharedir'], 'CSM', 'plugins'))

def distclean(context):
    context.recurse(DIRS)
