import sys, os

options = distclean = configure = lambda x: None

def build(bld):
    variant = bld.env['VARIANT'] or 'default'
    env = bld.all_envs[variant].derive()
    pEnv = env.derive()

    # do this here for windows only
    if sys.platform=='win32':
        if pEnv['cshlib_PATTERN'].startswith('lib'):
            pEnv['cshlib_PATTERN'] = pEnv['cshlib_PATTERN'][3:]
    # do this here for unix only
    else:
        if not pEnv['cshlib_PATTERN'].startswith('lib'):
            pEnv['cshlib_PATTERN'] = 'lib' + pEnv['cshlib_PATTERN']

    #build the external lib
    bld(features = 'cxx cshlib', includes='include',
        source='source/TSMPlugin.cpp',
        target='TSMAPI', name='TSMAPI',
        export_includes='include',
        env=pEnv.derive(), path=bld.path.find_dir('external/TSM'),
        install_path='${PREFIX}/lib')
    
    #build VTS
    exe = bld.program(includes='include ../TSM/include',
              target='vts', name='vts',
              source=bld.path.find_dir('external/VTS/source').ant_glob('*.cpp'),
              libpath=[os.path.join(bld.bldnode.abspath(), 'projects', 'csm', 'external', 'TSM')],
              use='TSMAPI',
              uselib='CSTD CRUN DL',
              env=pEnv.derive(),
              path=bld.path.find_dir('external/VTS'),
              install_path='${PREFIX}/bin')

    pEnv2 = env.derive()
    if pEnv2['cshlib_PATTERN'].startswith('lib'):
        pEnv2['cshlib_PATTERN'] = pEnv2['cshlib_PATTERN'][3:]

    # Flags needed for Socet GXP build on Windows 
    if pEnv2['VARIANT'] == 'win64-release':
        #64 bit release build
        #C:\Python26\python.exe waf configure --prefix=install-64 --enable-64bit --with-crt=MD
        pEnv2['CXXDEFINES'] = pEnv2['CXXDEFINES'] + ['WIN32','WIN64','NDEBUG','_WINDOWS','_USRDLL','PINHOLE_LIBRARY','_WINDLL','_UNICODE','UNICODE']
        pEnv2['LINKFLAGS'] = pEnv2['LINKFLAGS'] + ['/SUBSYSTEM:WINDOWS', '/OPT:REF', '/OPT:ICF', '/DYNAMICBASE', '/NXCOMPAT', '/MACHINE:X64', '/ERRORREPORT:PROMPT']
    elif pEnv2['VARIANT'] == 'win32-release':
        #32 bit release build
        #C:\Python26\python.exe waf configure --prefix=install-32 --enable-32bit --with-crt=MD
        pEnv2['CXXDEFINES'] = pEnv2['CXXDEFINES'] + ['WIN32','NDEBUG','_WINDOWS','_USRDLL','_USE_32BIT_TIME_T','PINHOLE_LIBRARY','_WINDLL','_UNICODE','UNICODE']
        pEnv2['LINKFLAGS'] = pEnv2['LINKFLAGS'] + ['/SUBSYSTEM:WINDOWS', '/OPT:REF', '/OPT:ICF', '/DYNAMICBASE', '/NXCOMPAT', '/MACHINE:X86', '/ERRORREPORT:PROMPT']
    elif pEnv2['VARIANT'] == 'win64-debug':
        #64 bit debug build
        #C:\Python26\python.exe waf configure --prefix=install-64-debug --enable-64bit --enable-debugging --with-crt=MD
        pEnv2['CXXDEFINES'] = pEnv2['CXXDEFINES'] + ['WIN32','WIN64','_DEBUG','_WINDOWS','_USRDLL','PINHOLE_LIBRARY','_WINDLL','_UNICODE','UNICODE']
        pEnv2['LINKFLAGS'] = pEnv2['LINKFLAGS'] + ['/DEBUG', '/SUBSYSTEM:WINDOWS', '/DYNAMICBASE', '/NXCOMPAT', '/MACHINE:X64', '/ERRORREPORT:PROMPT']
    elif pEnv2['VARIANT'] == 'win32-debug':
        #32 bit debug build 
        #C:\Python26\python.exe waf configure --prefix=install-32-debug --enable-32bit --enable-debugging --with-crt=MD
        pEnv2['CXXDEFINES'] = pEnv2['CXXDEFINES'] + ['WIN32','_DEBUG','_WINDOWS','_USRDLL','_USE_32BIT_TIME_T','PINHOLE_LIBRARY','_WINDLL','_UNICODE','UNICODE']
        pEnv2['LINKFLAGS'] = pEnv2['LINKFLAGS'] + ['/DEBUG', '/SUBSYSTEM:WINDOWS', '/DYNAMICBASE', '/NXCOMPAT', '/MACHINE:X86', '/ERRORREPORT:PROMPT']
             
    #build our plugin
    lib = bld(features = 'cxx cshlib', includes='sicd/include external/TSM/include',
              target='SICDPlugin[U]', name='SICDPlugin',
              source=bld.path.find_dir('sicd/source').ant_glob('*.cpp'),
              libpath=[os.path.join(bld.bldnode.abspath(), 'projects', 'csm', 'external', 'TSM')],
              export_includes='include',
              env=pEnv2.derive(), path=bld.path,
              use='six.sicd-c++ six.sidd-c++ TSMAPI',
              install_path='${PREFIX}/share/CSM/plugins')
    
    #build our plugin
    lib = bld(features = 'cxx cshlib', includes='sidd/include external/TSM/include',
              target='SIDDPlugin[U]', name='SIDDPlugin',
              source=bld.path.find_dir('sidd/source').ant_glob('*.cpp'),
              libpath=[os.path.join(bld.bldnode.abspath(), 'projects', 'csm', 'external', 'TSM')],
              export_includes='include',
              env=pEnv2.derive(), path=bld.path,
              use='six.sicd-c++ six.sidd-c++ TSMAPI',
              install_path='${PREFIX}/share/CSM/plugins')
