import sys

set_options = distclean = configure = lambda x: None

def build(bld):
    env = bld.env_of_name(bld.env['VARIANT'] or 'default')


    pEnv = env.copy()

    # do this here for windows only
    if sys.platform=='win32':
        if pEnv['shlib_PATTERN'].startswith('lib'):
            pEnv['shlib_PATTERN'] = pEnv['shlib_PATTERN'][3:]
    # do this here for unix only
    else:
        if not pEnv['shlib_PATTERN'].startswith('lib'):
            pEnv['shlib_PATTERN'] = 'lib' + pEnv['shlib_PATTERN']

    #build the external lib
    bld.new_task_gen('cxx', 'shlib', includes='include',
                     source='source/TSMPlugin.cpp',
                     target='TSMAPI', name='TSMAPI',
                     export_incdirs='include',
                     env=pEnv.copy(), path=bld.path.find_dir('external/TSM'),
                     install_path='${PREFIX}/lib')
    
    #build VTS
    exe = bld.new_task_gen('cxx', 'program', includes='include ../TSM/include',
                           target='vts', name='vts',
                           libpath=[bld.bldnode.abspath() + '/' + bld.lst_variants[0] + '/projects/csm/external/TSM'],
                           libs='TSMAPI',
                           uselib_local='',
                           uselib='CSTD CRUN DL',
                           env=pEnv.copy(),
                           path=bld.path.find_dir('external/VTS'),
                           install_path='${PREFIX}/bin')
    exe.find_sources_in_dirs('source')

    pEnv2 = env.copy()
    if pEnv2['shlib_PATTERN'].startswith('lib'):
        pEnv2['shlib_PATTERN'] = pEnv2['shlib_PATTERN'][3:]

    # Flags needed for Socet GXP build on Windows 
    if pEnv2['VARIANT'] == 'win32-release':
        if 'IS64BIT' in pEnv2 and pEnv2['IS64BIT'] == True:
            #64 bit release build
            #C:\Python26\python.exe waf configure --prefix=install-64 --enable-64bit --with-crt=MD
            pEnv2['CXXDEFINES'] = pEnv2['CXXDEFINES'] + ['WIN32','WIN64','NDEBUG','_WINDOWS','_USRDLL','PINHOLE_LIBRARY','_WINDLL','_UNICODE','UNICODE']
            pEnv2['LINKFLAGS'] = pEnv2['LINKFLAGS'] + ['/SUBSYSTEM:WINDOWS', '/OPT:REF', '/OPT:ICF', '/DYNAMICBASE', '/NXCOMPAT', '/MACHINE:X64', '/ERRORREPORT:PROMPT']
        else:
            #32 bit release build
            #C:\Python26\python.exe waf configure --prefix=install-32 --enable-32bit --with-crt=MD
            pEnv2['CXXDEFINES'] = pEnv2['CXXDEFINES'] + ['WIN32','NDEBUG','_WINDOWS','_USRDLL','_USE_32BIT_TIME_T','PINHOLE_LIBRARY','_WINDLL','_UNICODE','UNICODE']
            pEnv2['LINKFLAGS'] = pEnv2['LINKFLAGS'] + ['/SUBSYSTEM:WINDOWS', '/OPT:REF', '/OPT:ICF', '/DYNAMICBASE', '/NXCOMPAT', '/MACHINE:X86', '/ERRORREPORT:PROMPT']
    elif pEnv2['VARIANT'] == 'win32-debug':
        if 'IS64BIT' in pEnv2 and pEnv2['IS64BIT'] == True:
            #64 bit debug build
            #C:\Python26\python.exe waf configure --prefix=install-64-debug --enable-64bit --enable-debugging --with-crt=MD
            pEnv2['CXXDEFINES'] = pEnv2['CXXDEFINES'] + ['WIN32','WIN64','_DEBUG','_WINDOWS','_USRDLL','PINHOLE_LIBRARY','_WINDLL','_UNICODE','UNICODE']
            pEnv2['LINKFLAGS'] = pEnv2['LINKFLAGS'] + ['/DEBUG', '/SUBSYSTEM:WINDOWS', '/DYNAMICBASE', '/NXCOMPAT', '/MACHINE:X64', '/ERRORREPORT:PROMPT']
        else:
            #32 bit debug build 
            #C:\Python26\python.exe waf configure --prefix=install-32-debug --enable-32bit --enable-debugging --with-crt=MD
            pEnv2['CXXDEFINES'] = pEnv2['CXXDEFINES'] + ['WIN32','_DEBUG','_WINDOWS','_USRDLL','_USE_32BIT_TIME_T','PINHOLE_LIBRARY','_WINDLL','_UNICODE','UNICODE']
            pEnv2['LINKFLAGS'] = pEnv2['LINKFLAGS'] + ['/DEBUG', '/SUBSYSTEM:WINDOWS', '/DYNAMICBASE', '/NXCOMPAT', '/MACHINE:X86', '/ERRORREPORT:PROMPT']
             
    #build our plugin
    lib = bld.new_task_gen('cxx', 'shlib', includes='sicd/include external/TSM/include',
                           target='SICDPlugin[U]', name='SICDPlugin',
                           libpath=[bld.bldnode.abspath() + '/' + bld.lst_variants[0] + '/projects/csm/external/TSM'],
                           libs='TSMAPI',
                           export_incdirs='include',
                           env=pEnv2.copy(), path=bld.path,
                           uselib_local='six.sicd-c++ six.sidd-c++',
                           install_path='${PREFIX}/share/CSM/plugins')
    lib.find_sources_in_dirs('sicd/source')
    
    #build our plugin
    lib = bld.new_task_gen('cxx', 'shlib', includes='sidd/include external/TSM/include',
                           target='SIDDPlugin[U]', name='SIDDPlugin',
                           libpath=[bld.bldnode.abspath() + '/' + bld.lst_variants[0] + '/projects/csm/external/TSM'],
                           libs='TSMAPI',
                           export_incdirs='include',
                           env=pEnv2.copy(), path=bld.path,
                           uselib_local='six.sicd-c++ six.sidd-c++',
                           install_path='${PREFIX}/share/CSM/plugins')
    lib.find_sources_in_dirs('sidd/source')
    
