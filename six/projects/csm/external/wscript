import sys, os, shutil
from build import unzipper
from waflib import Options

def options(opt):
    opt.add_option('--disable-csm', action='store_false', dest='enable_csm', default=True,
                   help='turn off CSM support')

def configure(conf):
    if Options.options.enable_csm:
        # NOTE: This was downloaded from https://github.com/johnpdpkarp/csm on
        #       2013.07.03.  Updates that occurred after the VTS release we got
        #       from Leonard Tomko seem to still be considered CSM 3.0.1.
        unzipper(os.path.join(conf.path.abspath(), 'csm-3.0.1_2013.07.03.zip'),
                 conf.path.abspath())

        # NOTE: Originally checked in the VTS zip file that was received from
        #       Leonard Tomko that corresponded to CSM 3.0.1.  However, this
        #       did not compile against the "latest" 3.0.1 from GitHub so
        #       needed to make a few local mods to vts.cpp.  Since I was
        #       re-zipping anyway, trimmed this down to just the header and
        #       source files that were needed
        unzipper(os.path.join(conf.path.abspath(), 'vts_301_0.zip'),
                 conf.path.abspath())
        conf.env['HAVE_CSM'] = True
        conf.env['INCLUDES_CSM'] = os.path.join(conf.path.abspath(), 'csm-master') 

def build(bld):
    if 'HAVE_CSM' in bld.env:
        csmDir = 'csm-master'
        bld(features = 'cxx cshlib',
            target='CSMAPI', name='CSMAPI',
            includes='.',
            export_includes='.',
            source=bld.path.find_dir(csmDir).ant_glob('*.cpp'),
            path=bld.path.find_dir(csmDir),
            install_path=bld.env['install_libdir'])

        # NOTE: With this approach, our vts binary will be dependent on the
        #       CSMAPI shared library.  If we wanted to eliminate the
        #       dependency, we could recompile in the CSM source code that we
        #       need to use.
        vtsDir = 'vts_301_0'
        bld.program(target='vts', name='vts',
                    includes='include',
                    source=bld.path.find_dir(os.path.join(vtsDir, 'source')).ant_glob('*.cpp'),
                    use='CSMAPI THREAD DL sys-c++',
                    path=bld.path.find_dir(vtsDir),
                    install_path=bld.env['install_bindir'])

def distclean(context):
    # remove the unzipped directory
    dirs = filter(lambda x: os.path.exists(os.path.join(context.path.abspath(), x)), 
                  ['csm-master', 'vts_301_0'])
    for d in dirs:
        try:
            shutil.rmtree(os.path.join(context.path.abspath(), d), ignore_errors=True)
        except:{}
