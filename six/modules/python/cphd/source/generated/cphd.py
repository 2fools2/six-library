# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cphd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cphd')
    _cphd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cphd', [dirname(__file__)])
        except ImportError:
            import _cphd
            return _cphd
        try:
            _mod = imp.load_module('_cphd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cphd = swig_import_helper()
    del swig_import_helper
else:
    import _cphd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cphd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _cphd.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _cphd.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _cphd.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _cphd.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _cphd.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cphd.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cphd.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _cphd.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cphd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import coda.coda_sys
import coda.coda_types
import coda.mem
import pysix.six_sicd
import coda.math_poly
import coda.math_linear
import coda.coda_except
import pysix.six_base
import pysix.scene
import coda.coda_io
class SampleType(_object):
    """Proxy of C++ cphd::SampleType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleType, name)
    __repr__ = _swig_repr
    RE32F_IM32F = _cphd.SampleType_RE32F_IM32F
    RE16I_IM16I = _cphd.SampleType_RE16I_IM16I
    RE08I_IM08I = _cphd.SampleType_RE08I_IM08I
    NOT_SET = _cphd.SampleType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::SampleType self) -> SampleType
        __init__(cphd::SampleType self, std::string const & s) -> SampleType
        __init__(cphd::SampleType self, int i) -> SampleType
        """
        this = _cphd.new_SampleType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(SampleType self) -> std::string"""
        return _cphd.SampleType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(SampleType self, SampleType o) -> bool
        __eq__(SampleType self, int const & o) -> bool
        """
        return _cphd.SampleType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(SampleType self, SampleType o) -> bool
        __ne__(SampleType self, int const & o) -> bool
        """
        return _cphd.SampleType___ne__(self, *args)


    def __lt__(self, o: 'SampleType') -> "bool":
        """__lt__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___lt__(self, o)


    def __gt__(self, o: 'SampleType') -> "bool":
        """__gt__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___gt__(self, o)


    def __le__(self, o: 'SampleType') -> "bool":
        """__le__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___le__(self, o)


    def __ge__(self, o: 'SampleType') -> "bool":
        """__ge__(SampleType self, SampleType o) -> bool"""
        return _cphd.SampleType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.SampleType_value_set
    __swig_getmethods__["value"] = _cphd.SampleType_value_get
    if _newclass:
        value = _swig_property(_cphd.SampleType_value_get, _cphd.SampleType_value_set)
    __swig_destroy__ = _cphd.delete_SampleType
    __del__ = lambda self: None
SampleType_swigregister = _cphd.SampleType_swigregister
SampleType_swigregister(SampleType)
cvar = _cphd.cvar
NOT_SET_VALUE = cvar.NOT_SET_VALUE

class DomainType(_object):
    """Proxy of C++ cphd::DomainType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DomainType, name)
    __repr__ = _swig_repr
    FX = _cphd.DomainType_FX
    TOA = _cphd.DomainType_TOA
    NOT_SET = _cphd.DomainType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::DomainType self) -> DomainType
        __init__(cphd::DomainType self, std::string const & s) -> DomainType
        __init__(cphd::DomainType self, int i) -> DomainType
        """
        this = _cphd.new_DomainType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(DomainType self) -> std::string"""
        return _cphd.DomainType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(DomainType self, DomainType o) -> bool
        __eq__(DomainType self, int const & o) -> bool
        """
        return _cphd.DomainType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(DomainType self, DomainType o) -> bool
        __ne__(DomainType self, int const & o) -> bool
        """
        return _cphd.DomainType___ne__(self, *args)


    def __lt__(self, o: 'DomainType') -> "bool":
        """__lt__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___lt__(self, o)


    def __gt__(self, o: 'DomainType') -> "bool":
        """__gt__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___gt__(self, o)


    def __le__(self, o: 'DomainType') -> "bool":
        """__le__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___le__(self, o)


    def __ge__(self, o: 'DomainType') -> "bool":
        """__ge__(DomainType self, DomainType o) -> bool"""
        return _cphd.DomainType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.DomainType_value_set
    __swig_getmethods__["value"] = _cphd.DomainType_value_get
    if _newclass:
        value = _swig_property(_cphd.DomainType_value_get, _cphd.DomainType_value_set)
    __swig_destroy__ = _cphd.delete_DomainType
    __del__ = lambda self: None
DomainType_swigregister = _cphd.DomainType_swigregister
DomainType_swigregister(DomainType)

class PhaseSGN(_object):
    """Proxy of C++ cphd::PhaseSGN class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhaseSGN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhaseSGN, name)
    __repr__ = _swig_repr
    MINUS_1 = _cphd.PhaseSGN_MINUS_1
    PLUS_1 = _cphd.PhaseSGN_PLUS_1
    NOT_SET = _cphd.PhaseSGN_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::PhaseSGN self) -> PhaseSGN
        __init__(cphd::PhaseSGN self, std::string const & s) -> PhaseSGN
        __init__(cphd::PhaseSGN self, int i) -> PhaseSGN
        """
        this = _cphd.new_PhaseSGN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(PhaseSGN self) -> std::string"""
        return _cphd.PhaseSGN_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(PhaseSGN self, PhaseSGN o) -> bool
        __eq__(PhaseSGN self, int const & o) -> bool
        """
        return _cphd.PhaseSGN___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(PhaseSGN self, PhaseSGN o) -> bool
        __ne__(PhaseSGN self, int const & o) -> bool
        """
        return _cphd.PhaseSGN___ne__(self, *args)


    def __lt__(self, o: 'PhaseSGN') -> "bool":
        """__lt__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___lt__(self, o)


    def __gt__(self, o: 'PhaseSGN') -> "bool":
        """__gt__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___gt__(self, o)


    def __le__(self, o: 'PhaseSGN') -> "bool":
        """__le__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___le__(self, o)


    def __ge__(self, o: 'PhaseSGN') -> "bool":
        """__ge__(PhaseSGN self, PhaseSGN o) -> bool"""
        return _cphd.PhaseSGN___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.PhaseSGN_value_set
    __swig_getmethods__["value"] = _cphd.PhaseSGN_value_get
    if _newclass:
        value = _swig_property(_cphd.PhaseSGN_value_get, _cphd.PhaseSGN_value_set)
    __swig_destroy__ = _cphd.delete_PhaseSGN
    __del__ = lambda self: None
PhaseSGN_swigregister = _cphd.PhaseSGN_swigregister
PhaseSGN_swigregister(PhaseSGN)

class RefHeight(_object):
    """Proxy of C++ cphd::RefHeight class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefHeight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefHeight, name)
    __repr__ = _swig_repr
    IARP = _cphd.RefHeight_IARP
    ZERO = _cphd.RefHeight_ZERO
    NOT_SET = _cphd.RefHeight_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::RefHeight self) -> RefHeight
        __init__(cphd::RefHeight self, std::string const & s) -> RefHeight
        __init__(cphd::RefHeight self, int i) -> RefHeight
        """
        this = _cphd.new_RefHeight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(RefHeight self) -> std::string"""
        return _cphd.RefHeight_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(RefHeight self, RefHeight o) -> bool
        __eq__(RefHeight self, int const & o) -> bool
        """
        return _cphd.RefHeight___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(RefHeight self, RefHeight o) -> bool
        __ne__(RefHeight self, int const & o) -> bool
        """
        return _cphd.RefHeight___ne__(self, *args)


    def __lt__(self, o: 'RefHeight') -> "bool":
        """__lt__(RefHeight self, RefHeight o) -> bool"""
        return _cphd.RefHeight___lt__(self, o)


    def __gt__(self, o: 'RefHeight') -> "bool":
        """__gt__(RefHeight self, RefHeight o) -> bool"""
        return _cphd.RefHeight___gt__(self, o)


    def __le__(self, o: 'RefHeight') -> "bool":
        """__le__(RefHeight self, RefHeight o) -> bool"""
        return _cphd.RefHeight___le__(self, o)


    def __ge__(self, o: 'RefHeight') -> "bool":
        """__ge__(RefHeight self, RefHeight o) -> bool"""
        return _cphd.RefHeight___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.RefHeight_value_set
    __swig_getmethods__["value"] = _cphd.RefHeight_value_get
    if _newclass:
        value = _swig_property(_cphd.RefHeight_value_get, _cphd.RefHeight_value_set)
    __swig_destroy__ = _cphd.delete_RefHeight
    __del__ = lambda self: None
RefHeight_swigregister = _cphd.RefHeight_swigregister
RefHeight_swigregister(RefHeight)

class EarthModelType(_object):
    """Proxy of C++ cphd::EarthModelType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EarthModelType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EarthModelType, name)
    __repr__ = _swig_repr
    WGS_84 = _cphd.EarthModelType_WGS_84
    NOT_SET = _cphd.EarthModelType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::EarthModelType self) -> EarthModelType
        __init__(cphd::EarthModelType self, std::string const & s) -> EarthModelType
        __init__(cphd::EarthModelType self, int i) -> EarthModelType
        """
        this = _cphd.new_EarthModelType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(EarthModelType self) -> std::string"""
        return _cphd.EarthModelType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(EarthModelType self, EarthModelType o) -> bool
        __eq__(EarthModelType self, int const & o) -> bool
        """
        return _cphd.EarthModelType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(EarthModelType self, EarthModelType o) -> bool
        __ne__(EarthModelType self, int const & o) -> bool
        """
        return _cphd.EarthModelType___ne__(self, *args)


    def __lt__(self, o: 'EarthModelType') -> "bool":
        """__lt__(EarthModelType self, EarthModelType o) -> bool"""
        return _cphd.EarthModelType___lt__(self, o)


    def __gt__(self, o: 'EarthModelType') -> "bool":
        """__gt__(EarthModelType self, EarthModelType o) -> bool"""
        return _cphd.EarthModelType___gt__(self, o)


    def __le__(self, o: 'EarthModelType') -> "bool":
        """__le__(EarthModelType self, EarthModelType o) -> bool"""
        return _cphd.EarthModelType___le__(self, o)


    def __ge__(self, o: 'EarthModelType') -> "bool":
        """__ge__(EarthModelType self, EarthModelType o) -> bool"""
        return _cphd.EarthModelType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.EarthModelType_value_set
    __swig_getmethods__["value"] = _cphd.EarthModelType_value_get
    if _newclass:
        value = _swig_property(_cphd.EarthModelType_value_get, _cphd.EarthModelType_value_set)
    __swig_destroy__ = _cphd.delete_EarthModelType
    __del__ = lambda self: None
EarthModelType_swigregister = _cphd.EarthModelType_swigregister
EarthModelType_swigregister(EarthModelType)

class SignalArrayFormat(_object):
    """Proxy of C++ cphd::SignalArrayFormat class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignalArrayFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignalArrayFormat, name)
    __repr__ = _swig_repr
    CI2 = _cphd.SignalArrayFormat_CI2
    CI4 = _cphd.SignalArrayFormat_CI4
    CF8 = _cphd.SignalArrayFormat_CF8
    NOT_SET = _cphd.SignalArrayFormat_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::SignalArrayFormat self) -> SignalArrayFormat
        __init__(cphd::SignalArrayFormat self, std::string const & s) -> SignalArrayFormat
        __init__(cphd::SignalArrayFormat self, int i) -> SignalArrayFormat
        """
        this = _cphd.new_SignalArrayFormat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(SignalArrayFormat self) -> std::string"""
        return _cphd.SignalArrayFormat_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(SignalArrayFormat self, SignalArrayFormat o) -> bool
        __eq__(SignalArrayFormat self, int const & o) -> bool
        """
        return _cphd.SignalArrayFormat___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(SignalArrayFormat self, SignalArrayFormat o) -> bool
        __ne__(SignalArrayFormat self, int const & o) -> bool
        """
        return _cphd.SignalArrayFormat___ne__(self, *args)


    def __lt__(self, o: 'SignalArrayFormat') -> "bool":
        """__lt__(SignalArrayFormat self, SignalArrayFormat o) -> bool"""
        return _cphd.SignalArrayFormat___lt__(self, o)


    def __gt__(self, o: 'SignalArrayFormat') -> "bool":
        """__gt__(SignalArrayFormat self, SignalArrayFormat o) -> bool"""
        return _cphd.SignalArrayFormat___gt__(self, o)


    def __le__(self, o: 'SignalArrayFormat') -> "bool":
        """__le__(SignalArrayFormat self, SignalArrayFormat o) -> bool"""
        return _cphd.SignalArrayFormat___le__(self, o)


    def __ge__(self, o: 'SignalArrayFormat') -> "bool":
        """__ge__(SignalArrayFormat self, SignalArrayFormat o) -> bool"""
        return _cphd.SignalArrayFormat___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.SignalArrayFormat_value_set
    __swig_getmethods__["value"] = _cphd.SignalArrayFormat_value_get
    if _newclass:
        value = _swig_property(_cphd.SignalArrayFormat_value_get, _cphd.SignalArrayFormat_value_set)
    __swig_destroy__ = _cphd.delete_SignalArrayFormat
    __del__ = lambda self: None
SignalArrayFormat_swigregister = _cphd.SignalArrayFormat_swigregister
SignalArrayFormat_swigregister(SignalArrayFormat)

class SRPType(_object):
    """Proxy of C++ cphd::SRPType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SRPType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SRPType, name)
    __repr__ = _swig_repr
    FIXEDPT = _cphd.SRPType_FIXEDPT
    PVTPOLY = _cphd.SRPType_PVTPOLY
    PVVPOLY = _cphd.SRPType_PVVPOLY
    STEPPED = _cphd.SRPType_STEPPED
    NOT_SET = _cphd.SRPType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::SRPType self) -> SRPType
        __init__(cphd::SRPType self, std::string const & s) -> SRPType
        __init__(cphd::SRPType self, int i) -> SRPType
        """
        this = _cphd.new_SRPType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(SRPType self) -> std::string"""
        return _cphd.SRPType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(SRPType self, SRPType o) -> bool
        __eq__(SRPType self, int const & o) -> bool
        """
        return _cphd.SRPType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(SRPType self, SRPType o) -> bool
        __ne__(SRPType self, int const & o) -> bool
        """
        return _cphd.SRPType___ne__(self, *args)


    def __lt__(self, o: 'SRPType') -> "bool":
        """__lt__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___lt__(self, o)


    def __gt__(self, o: 'SRPType') -> "bool":
        """__gt__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___gt__(self, o)


    def __le__(self, o: 'SRPType') -> "bool":
        """__le__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___le__(self, o)


    def __ge__(self, o: 'SRPType') -> "bool":
        """__ge__(SRPType self, SRPType o) -> bool"""
        return _cphd.SRPType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.SRPType_value_set
    __swig_getmethods__["value"] = _cphd.SRPType_value_get
    if _newclass:
        value = _swig_property(_cphd.SRPType_value_get, _cphd.SRPType_value_set)
    __swig_destroy__ = _cphd.delete_SRPType
    __del__ = lambda self: None
SRPType_swigregister = _cphd.SRPType_swigregister
SRPType_swigregister(SRPType)

class PolarizationType(_object):
    """Proxy of C++ cphd::PolarizationType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationType, name)
    __repr__ = _swig_repr
    X = _cphd.PolarizationType_X
    Y = _cphd.PolarizationType_Y
    V = _cphd.PolarizationType_V
    H = _cphd.PolarizationType_H
    RHC = _cphd.PolarizationType_RHC
    LHC = _cphd.PolarizationType_LHC
    UNSPECIFIED = _cphd.PolarizationType_UNSPECIFIED
    NOT_SET = _cphd.PolarizationType_NOT_SET

    def __init__(self, *args):
        """
        __init__(cphd::PolarizationType self) -> PolarizationType
        __init__(cphd::PolarizationType self, std::string const & s) -> PolarizationType
        __init__(cphd::PolarizationType self, int i) -> PolarizationType
        """
        this = _cphd.new_PolarizationType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self) -> "std::string":
        """toString(PolarizationType self) -> std::string"""
        return _cphd.PolarizationType_toString(self)


    def __eq__(self, *args) -> "bool":
        """
        __eq__(PolarizationType self, PolarizationType o) -> bool
        __eq__(PolarizationType self, int const & o) -> bool
        """
        return _cphd.PolarizationType___eq__(self, *args)


    def __ne__(self, *args) -> "bool":
        """
        __ne__(PolarizationType self, PolarizationType o) -> bool
        __ne__(PolarizationType self, int const & o) -> bool
        """
        return _cphd.PolarizationType___ne__(self, *args)


    def __lt__(self, o: 'PolarizationType') -> "bool":
        """__lt__(PolarizationType self, PolarizationType o) -> bool"""
        return _cphd.PolarizationType___lt__(self, o)


    def __gt__(self, o: 'PolarizationType') -> "bool":
        """__gt__(PolarizationType self, PolarizationType o) -> bool"""
        return _cphd.PolarizationType___gt__(self, o)


    def __le__(self, o: 'PolarizationType') -> "bool":
        """__le__(PolarizationType self, PolarizationType o) -> bool"""
        return _cphd.PolarizationType___le__(self, o)


    def __ge__(self, o: 'PolarizationType') -> "bool":
        """__ge__(PolarizationType self, PolarizationType o) -> bool"""
        return _cphd.PolarizationType___ge__(self, o)

    __swig_setmethods__["value"] = _cphd.PolarizationType_value_set
    __swig_getmethods__["value"] = _cphd.PolarizationType_value_get
    if _newclass:
        value = _swig_property(_cphd.PolarizationType_value_get, _cphd.PolarizationType_value_set)
    __swig_destroy__ = _cphd.delete_PolarizationType
    __del__ = lambda self: None
PolarizationType_swigregister = _cphd.PolarizationType_swigregister
PolarizationType_swigregister(PolarizationType)

class MetadataBase(_object):
    """Proxy of C++ cphd::MetadataBase class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cphd.delete_MetadataBase
    __del__ = lambda self: None

    def getNumChannels(self) -> "size_t":
        """getNumChannels(MetadataBase self) -> size_t"""
        return _cphd.MetadataBase_getNumChannels(self)


    def getNumVectors(self, channel: 'size_t') -> "size_t":
        """getNumVectors(MetadataBase self, size_t channel) -> size_t"""
        return _cphd.MetadataBase_getNumVectors(self, channel)


    def getNumSamples(self, channel: 'size_t') -> "size_t":
        """getNumSamples(MetadataBase self, size_t channel) -> size_t"""
        return _cphd.MetadataBase_getNumSamples(self, channel)


    def getNumBytesPerSample(self) -> "size_t":
        """getNumBytesPerSample(MetadataBase self) -> size_t"""
        return _cphd.MetadataBase_getNumBytesPerSample(self)


    def getCompressedSignalSize(self, channel: 'size_t') -> "size_t":
        """getCompressedSignalSize(MetadataBase self, size_t channel) -> size_t"""
        return _cphd.MetadataBase_getCompressedSignalSize(self, channel)


    def isCompressed(self) -> "bool":
        """isCompressed(MetadataBase self) -> bool"""
        return _cphd.MetadataBase_isCompressed(self)


    def getDomainType(self) -> "cphd::DomainType":
        """getDomainType(MetadataBase self) -> DomainType"""
        return _cphd.MetadataBase_getDomainType(self)


    def isFX(self) -> "bool":
        """isFX(MetadataBase self) -> bool"""
        return _cphd.MetadataBase_isFX(self)


    def isTOA(self) -> "bool":
        """isTOA(MetadataBase self) -> bool"""
        return _cphd.MetadataBase_isTOA(self)

MetadataBase_swigregister = _cphd.MetadataBase_swigregister
MetadataBase_swigregister(MetadataBase)

class FileHeader(_object):
    """Proxy of C++ cphd::FileHeader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::FileHeader self) -> FileHeader"""
        this = _cphd.new_FileHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_FileHeader
    __del__ = lambda self: None

    def read(self, inStream: 'SeekableInputStream') -> "void":
        """read(FileHeader self, SeekableInputStream inStream)"""
        return _cphd.FileHeader_read(self, inStream)


    def toString(self) -> "std::string":
        """toString(FileHeader self) -> std::string"""
        return _cphd.FileHeader_toString(self)


    def getVersion(self) -> "std::string":
        """getVersion(FileHeader self) -> std::string"""
        return _cphd.FileHeader_getVersion(self)


    def setVersion(self, version: 'std::string const &') -> "void":
        """setVersion(FileHeader self, std::string const & version)"""
        return _cphd.FileHeader_setVersion(self, version)


    def set(self, *args) -> "size_t":
        """
        set(FileHeader self) -> size_t
        set(FileHeader self, sys::Off_T xmlBlockSize, sys::Off_T supportBlockSize, sys::Off_T pvpBlockSize, sys::Off_T signalBlockSize) -> size_t
        """
        return _cphd.FileHeader_set(self, *args)


    def setXMLBlockSize(self, size: 'sys::Off_T') -> "void":
        """setXMLBlockSize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setXMLBlockSize(self, size)


    def setPvpBlockSize(self, size: 'sys::Off_T') -> "void":
        """setPvpBlockSize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setPvpBlockSize(self, size)


    def setSignalBlockSize(self, size: 'sys::Off_T') -> "void":
        """setSignalBlockSize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setSignalBlockSize(self, size)


    def setXMLBlockByteOffset(self, offset: 'sys::Off_T') -> "void":
        """setXMLBlockByteOffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setXMLBlockByteOffset(self, offset)


    def setPvpBlockByteOffset(self, offset: 'sys::Off_T') -> "void":
        """setPvpBlockByteOffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setPvpBlockByteOffset(self, offset)


    def setSignalBlockByteOffset(self, offset: 'sys::Off_T') -> "void":
        """setSignalBlockByteOffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setSignalBlockByteOffset(self, offset)


    def setClassification(self, str: 'std::string const &') -> "void":
        """setClassification(FileHeader self, std::string const & str)"""
        return _cphd.FileHeader_setClassification(self, str)


    def setReleaseInfo(self, str: 'std::string const &') -> "void":
        """setReleaseInfo(FileHeader self, std::string const & str)"""
        return _cphd.FileHeader_setReleaseInfo(self, str)


    def getXMLBlockSize(self) -> "sys::Off_T":
        """getXMLBlockSize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getXMLBlockSize(self)


    def getPvpBlockSize(self) -> "sys::Off_T":
        """getPvpBlockSize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getPvpBlockSize(self)


    def getSignalBlockSize(self) -> "sys::Off_T":
        """getSignalBlockSize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getSignalBlockSize(self)


    def getXMLBlockByteOffset(self) -> "sys::Off_T":
        """getXMLBlockByteOffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getXMLBlockByteOffset(self)


    def getPvpBlockByteOffset(self) -> "sys::Off_T":
        """getPvpBlockByteOffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getPvpBlockByteOffset(self)


    def getSignalBlockByteOffset(self) -> "sys::Off_T":
        """getSignalBlockByteOffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getSignalBlockByteOffset(self)


    def getClassification(self) -> "std::string":
        """getClassification(FileHeader self) -> std::string"""
        return _cphd.FileHeader_getClassification(self)


    def getReleaseInfo(self) -> "std::string":
        """getReleaseInfo(FileHeader self) -> std::string"""
        return _cphd.FileHeader_getReleaseInfo(self)


    def getPvpPadBytes(self) -> "sys::Off_T":
        """getPvpPadBytes(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getPvpPadBytes(self)


    def setSupportBlockSize(self, size: 'sys::Off_T') -> "void":
        """setSupportBlockSize(FileHeader self, sys::Off_T size)"""
        return _cphd.FileHeader_setSupportBlockSize(self, size)


    def setSupportBlockByteOffset(self, offset: 'sys::Off_T') -> "void":
        """setSupportBlockByteOffset(FileHeader self, sys::Off_T offset)"""
        return _cphd.FileHeader_setSupportBlockByteOffset(self, offset)


    def getSupportBlockSize(self) -> "sys::Off_T":
        """getSupportBlockSize(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getSupportBlockSize(self)


    def getSupportBlockByteOffset(self) -> "sys::Off_T":
        """getSupportBlockByteOffset(FileHeader self) -> sys::Off_T"""
        return _cphd.FileHeader_getSupportBlockByteOffset(self)


    def __str__(self) -> "std::string":
        """__str__(FileHeader self) -> std::string"""
        return _cphd.FileHeader___str__(self)

FileHeader_swigregister = _cphd.FileHeader_swigregister
FileHeader_swigregister(FileHeader)
FileHeader.DEFAULT_VERSION = _cphd.cvar.FileHeader_DEFAULT_VERSION

class Timeline(_object):
    """Proxy of C++ cphd::Timeline class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timeline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timeline, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Timeline self) -> Timeline"""
        this = _cphd.new_Timeline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Timeline') -> "bool":
        """__eq__(Timeline self, Timeline other) -> bool"""
        return _cphd.Timeline___eq__(self, other)


    def __ne__(self, other: 'Timeline') -> "bool":
        """__ne__(Timeline self, Timeline other) -> bool"""
        return _cphd.Timeline___ne__(self, other)

    __swig_setmethods__["collectionStart"] = _cphd.Timeline_collectionStart_set
    __swig_getmethods__["collectionStart"] = _cphd.Timeline_collectionStart_get
    if _newclass:
        collectionStart = _swig_property(_cphd.Timeline_collectionStart_get, _cphd.Timeline_collectionStart_set)
    __swig_setmethods__["rcvCollectionStart"] = _cphd.Timeline_rcvCollectionStart_set
    __swig_getmethods__["rcvCollectionStart"] = _cphd.Timeline_rcvCollectionStart_get
    if _newclass:
        rcvCollectionStart = _swig_property(_cphd.Timeline_rcvCollectionStart_get, _cphd.Timeline_rcvCollectionStart_set)
    __swig_setmethods__["txTime1"] = _cphd.Timeline_txTime1_set
    __swig_getmethods__["txTime1"] = _cphd.Timeline_txTime1_get
    if _newclass:
        txTime1 = _swig_property(_cphd.Timeline_txTime1_get, _cphd.Timeline_txTime1_set)
    __swig_setmethods__["txTime2"] = _cphd.Timeline_txTime2_set
    __swig_getmethods__["txTime2"] = _cphd.Timeline_txTime2_get
    if _newclass:
        txTime2 = _swig_property(_cphd.Timeline_txTime2_get, _cphd.Timeline_txTime2_set)
    __swig_destroy__ = _cphd.delete_Timeline
    __del__ = lambda self: None
Timeline_swigregister = _cphd.Timeline_swigregister
Timeline_swigregister(Timeline)

class FxBand(_object):
    """Proxy of C++ cphd::FxBand class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FxBand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FxBand, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::FxBand self) -> FxBand"""
        this = _cphd.new_FxBand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'FxBand') -> "bool":
        """__eq__(FxBand self, FxBand other) -> bool"""
        return _cphd.FxBand___eq__(self, other)


    def __ne__(self, other: 'FxBand') -> "bool":
        """__ne__(FxBand self, FxBand other) -> bool"""
        return _cphd.FxBand___ne__(self, other)

    __swig_setmethods__["fxMin"] = _cphd.FxBand_fxMin_set
    __swig_getmethods__["fxMin"] = _cphd.FxBand_fxMin_get
    if _newclass:
        fxMin = _swig_property(_cphd.FxBand_fxMin_get, _cphd.FxBand_fxMin_set)
    __swig_setmethods__["fxMax"] = _cphd.FxBand_fxMax_set
    __swig_getmethods__["fxMax"] = _cphd.FxBand_fxMax_get
    if _newclass:
        fxMax = _swig_property(_cphd.FxBand_fxMax_get, _cphd.FxBand_fxMax_set)
    __swig_destroy__ = _cphd.delete_FxBand
    __del__ = lambda self: None
FxBand_swigregister = _cphd.FxBand_swigregister
FxBand_swigregister(FxBand)

class TOASwath(_object):
    """Proxy of C++ cphd::TOASwath class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOASwath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TOASwath, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TOASwath self) -> TOASwath"""
        this = _cphd.new_TOASwath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TOASwath') -> "bool":
        """__eq__(TOASwath self, TOASwath other) -> bool"""
        return _cphd.TOASwath___eq__(self, other)


    def __ne__(self, other: 'TOASwath') -> "bool":
        """__ne__(TOASwath self, TOASwath other) -> bool"""
        return _cphd.TOASwath___ne__(self, other)

    __swig_setmethods__["toaMin"] = _cphd.TOASwath_toaMin_set
    __swig_getmethods__["toaMin"] = _cphd.TOASwath_toaMin_get
    if _newclass:
        toaMin = _swig_property(_cphd.TOASwath_toaMin_get, _cphd.TOASwath_toaMin_set)
    __swig_setmethods__["toaMax"] = _cphd.TOASwath_toaMax_set
    __swig_getmethods__["toaMax"] = _cphd.TOASwath_toaMax_get
    if _newclass:
        toaMax = _swig_property(_cphd.TOASwath_toaMax_get, _cphd.TOASwath_toaMax_set)
    __swig_destroy__ = _cphd.delete_TOASwath
    __del__ = lambda self: None
TOASwath_swigregister = _cphd.TOASwath_swigregister
TOASwath_swigregister(TOASwath)

class TropoParameters(_object):
    """Proxy of C++ cphd::TropoParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TropoParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TropoParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TropoParameters self) -> TropoParameters"""
        this = _cphd.new_TropoParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TropoParameters') -> "bool":
        """__eq__(TropoParameters self, TropoParameters other) -> bool"""
        return _cphd.TropoParameters___eq__(self, other)


    def __ne__(self, other: 'TropoParameters') -> "bool":
        """__ne__(TropoParameters self, TropoParameters other) -> bool"""
        return _cphd.TropoParameters___ne__(self, other)

    __swig_setmethods__["n0"] = _cphd.TropoParameters_n0_set
    __swig_getmethods__["n0"] = _cphd.TropoParameters_n0_get
    if _newclass:
        n0 = _swig_property(_cphd.TropoParameters_n0_get, _cphd.TropoParameters_n0_set)
    __swig_setmethods__["refHeight"] = _cphd.TropoParameters_refHeight_set
    __swig_getmethods__["refHeight"] = _cphd.TropoParameters_refHeight_get
    if _newclass:
        refHeight = _swig_property(_cphd.TropoParameters_refHeight_get, _cphd.TropoParameters_refHeight_set)
    __swig_destroy__ = _cphd.delete_TropoParameters
    __del__ = lambda self: None
TropoParameters_swigregister = _cphd.TropoParameters_swigregister
TropoParameters_swigregister(TropoParameters)

class IonoParameters(_object):
    """Proxy of C++ cphd::IonoParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IonoParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IonoParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::IonoParameters self) -> IonoParameters"""
        this = _cphd.new_IonoParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'IonoParameters') -> "bool":
        """__eq__(IonoParameters self, IonoParameters other) -> bool"""
        return _cphd.IonoParameters___eq__(self, other)


    def __ne__(self, other: 'IonoParameters') -> "bool":
        """__ne__(IonoParameters self, IonoParameters other) -> bool"""
        return _cphd.IonoParameters___ne__(self, other)

    __swig_setmethods__["tecv"] = _cphd.IonoParameters_tecv_set
    __swig_getmethods__["tecv"] = _cphd.IonoParameters_tecv_get
    if _newclass:
        tecv = _swig_property(_cphd.IonoParameters_tecv_get, _cphd.IonoParameters_tecv_set)
    __swig_setmethods__["f2Height"] = _cphd.IonoParameters_f2Height_set
    __swig_getmethods__["f2Height"] = _cphd.IonoParameters_f2Height_get
    if _newclass:
        f2Height = _swig_property(_cphd.IonoParameters_f2Height_get, _cphd.IonoParameters_f2Height_set)
    __swig_destroy__ = _cphd.delete_IonoParameters
    __del__ = lambda self: None
IonoParameters_swigregister = _cphd.IonoParameters_swigregister
IonoParameters_swigregister(IonoParameters)

class Global(_object):
    """Proxy of C++ cphd::Global class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Global, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Global, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Global self) -> Global"""
        this = _cphd.new_Global()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Global') -> "bool":
        """__eq__(Global self, Global other) -> bool"""
        return _cphd.Global___eq__(self, other)


    def __ne__(self, other: 'Global') -> "bool":
        """__ne__(Global self, Global other) -> bool"""
        return _cphd.Global___ne__(self, other)


    def getDomainType(self) -> "cphd::DomainType":
        """getDomainType(Global self) -> DomainType"""
        return _cphd.Global_getDomainType(self)

    __swig_setmethods__["domainType"] = _cphd.Global_domainType_set
    __swig_getmethods__["domainType"] = _cphd.Global_domainType_get
    if _newclass:
        domainType = _swig_property(_cphd.Global_domainType_get, _cphd.Global_domainType_set)
    __swig_setmethods__["sgn"] = _cphd.Global_sgn_set
    __swig_getmethods__["sgn"] = _cphd.Global_sgn_get
    if _newclass:
        sgn = _swig_property(_cphd.Global_sgn_get, _cphd.Global_sgn_set)
    __swig_setmethods__["timeline"] = _cphd.Global_timeline_set
    __swig_getmethods__["timeline"] = _cphd.Global_timeline_get
    if _newclass:
        timeline = _swig_property(_cphd.Global_timeline_get, _cphd.Global_timeline_set)
    __swig_setmethods__["fxBand"] = _cphd.Global_fxBand_set
    __swig_getmethods__["fxBand"] = _cphd.Global_fxBand_get
    if _newclass:
        fxBand = _swig_property(_cphd.Global_fxBand_get, _cphd.Global_fxBand_set)
    __swig_setmethods__["toaSwath"] = _cphd.Global_toaSwath_set
    __swig_getmethods__["toaSwath"] = _cphd.Global_toaSwath_get
    if _newclass:
        toaSwath = _swig_property(_cphd.Global_toaSwath_get, _cphd.Global_toaSwath_set)
    __swig_setmethods__["tropoParameters"] = _cphd.Global_tropoParameters_set
    __swig_getmethods__["tropoParameters"] = _cphd.Global_tropoParameters_get
    if _newclass:
        tropoParameters = _swig_property(_cphd.Global_tropoParameters_get, _cphd.Global_tropoParameters_set)
    __swig_setmethods__["ionoParameters"] = _cphd.Global_ionoParameters_set
    __swig_getmethods__["ionoParameters"] = _cphd.Global_ionoParameters_get
    if _newclass:
        ionoParameters = _swig_property(_cphd.Global_ionoParameters_get, _cphd.Global_ionoParameters_set)
    __swig_destroy__ = _cphd.delete_Global
    __del__ = lambda self: None
Global_swigregister = _cphd.Global_swigregister
Global_swigregister(Global)

class IARP(_object):
    """Proxy of C++ cphd::IARP class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IARP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IARP, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::IARP self) -> IARP"""
        this = _cphd.new_IARP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'IARP') -> "bool":
        """__eq__(IARP self, IARP other) -> bool"""
        return _cphd.IARP___eq__(self, other)


    def __ne__(self, other: 'IARP') -> "bool":
        """__ne__(IARP self, IARP other) -> bool"""
        return _cphd.IARP___ne__(self, other)

    __swig_setmethods__["ecf"] = _cphd.IARP_ecf_set
    __swig_getmethods__["ecf"] = _cphd.IARP_ecf_get
    if _newclass:
        ecf = _swig_property(_cphd.IARP_ecf_get, _cphd.IARP_ecf_set)
    __swig_setmethods__["llh"] = _cphd.IARP_llh_set
    __swig_getmethods__["llh"] = _cphd.IARP_llh_get
    if _newclass:
        llh = _swig_property(_cphd.IARP_llh_get, _cphd.IARP_llh_set)
    __swig_destroy__ = _cphd.delete_IARP
    __del__ = lambda self: None
IARP_swigregister = _cphd.IARP_swigregister
IARP_swigregister(IARP)

class Planar(_object):
    """Proxy of C++ cphd::Planar class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Planar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Planar, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Planar self) -> Planar"""
        this = _cphd.new_Planar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Planar') -> "bool":
        """__eq__(Planar self, Planar other) -> bool"""
        return _cphd.Planar___eq__(self, other)


    def __ne__(self, other: 'Planar') -> "bool":
        """__ne__(Planar self, Planar other) -> bool"""
        return _cphd.Planar___ne__(self, other)

    __swig_setmethods__["uIax"] = _cphd.Planar_uIax_set
    __swig_getmethods__["uIax"] = _cphd.Planar_uIax_get
    if _newclass:
        uIax = _swig_property(_cphd.Planar_uIax_get, _cphd.Planar_uIax_set)
    __swig_setmethods__["uIay"] = _cphd.Planar_uIay_set
    __swig_getmethods__["uIay"] = _cphd.Planar_uIay_get
    if _newclass:
        uIay = _swig_property(_cphd.Planar_uIay_get, _cphd.Planar_uIay_set)
    __swig_destroy__ = _cphd.delete_Planar
    __del__ = lambda self: None
Planar_swigregister = _cphd.Planar_swigregister
Planar_swigregister(Planar)

class HAE(_object):
    """Proxy of C++ cphd::HAE class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HAE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HAE, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::HAE self) -> HAE"""
        this = _cphd.new_HAE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'HAE') -> "bool":
        """__eq__(HAE self, HAE other) -> bool"""
        return _cphd.HAE___eq__(self, other)


    def __ne__(self, other: 'HAE') -> "bool":
        """__ne__(HAE self, HAE other) -> bool"""
        return _cphd.HAE___ne__(self, other)

    __swig_setmethods__["uIax"] = _cphd.HAE_uIax_set
    __swig_getmethods__["uIax"] = _cphd.HAE_uIax_get
    if _newclass:
        uIax = _swig_property(_cphd.HAE_uIax_get, _cphd.HAE_uIax_set)
    __swig_setmethods__["uIay"] = _cphd.HAE_uIay_set
    __swig_getmethods__["uIay"] = _cphd.HAE_uIay_get
    if _newclass:
        uIay = _swig_property(_cphd.HAE_uIay_get, _cphd.HAE_uIay_set)
    __swig_destroy__ = _cphd.delete_HAE
    __del__ = lambda self: None
HAE_swigregister = _cphd.HAE_swigregister
HAE_swigregister(HAE)

class ReferenceSurface(_object):
    """Proxy of C++ cphd::ReferenceSurface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceSurface, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ReferenceSurface self) -> ReferenceSurface"""
        this = _cphd.new_ReferenceSurface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ReferenceSurface') -> "bool":
        """__eq__(ReferenceSurface self, ReferenceSurface other) -> bool"""
        return _cphd.ReferenceSurface___eq__(self, other)


    def __ne__(self, other: 'ReferenceSurface') -> "bool":
        """__ne__(ReferenceSurface self, ReferenceSurface other) -> bool"""
        return _cphd.ReferenceSurface___ne__(self, other)

    __swig_setmethods__["planar"] = _cphd.ReferenceSurface_planar_set
    __swig_getmethods__["planar"] = _cphd.ReferenceSurface_planar_get
    if _newclass:
        planar = _swig_property(_cphd.ReferenceSurface_planar_get, _cphd.ReferenceSurface_planar_set)
    __swig_setmethods__["hae"] = _cphd.ReferenceSurface_hae_set
    __swig_getmethods__["hae"] = _cphd.ReferenceSurface_hae_get
    if _newclass:
        hae = _swig_property(_cphd.ReferenceSurface_hae_get, _cphd.ReferenceSurface_hae_set)
    __swig_destroy__ = _cphd.delete_ReferenceSurface
    __del__ = lambda self: None
ReferenceSurface_swigregister = _cphd.ReferenceSurface_swigregister
ReferenceSurface_swigregister(ReferenceSurface)

class AreaType(_object):
    """Proxy of C++ cphd::AreaType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AreaType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AreaType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AreaType self) -> AreaType"""
        this = _cphd.new_AreaType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AreaType') -> "bool":
        """__eq__(AreaType self, AreaType other) -> bool"""
        return _cphd.AreaType___eq__(self, other)


    def __ne__(self, other: 'AreaType') -> "bool":
        """__ne__(AreaType self, AreaType other) -> bool"""
        return _cphd.AreaType___ne__(self, other)

    __swig_setmethods__["x1y1"] = _cphd.AreaType_x1y1_set
    __swig_getmethods__["x1y1"] = _cphd.AreaType_x1y1_get
    if _newclass:
        x1y1 = _swig_property(_cphd.AreaType_x1y1_get, _cphd.AreaType_x1y1_set)
    __swig_setmethods__["x2y2"] = _cphd.AreaType_x2y2_set
    __swig_getmethods__["x2y2"] = _cphd.AreaType_x2y2_get
    if _newclass:
        x2y2 = _swig_property(_cphd.AreaType_x2y2_get, _cphd.AreaType_x2y2_set)
    __swig_setmethods__["polygon"] = _cphd.AreaType_polygon_set
    __swig_getmethods__["polygon"] = _cphd.AreaType_polygon_get
    if _newclass:
        polygon = _swig_property(_cphd.AreaType_polygon_get, _cphd.AreaType_polygon_set)
    __swig_destroy__ = _cphd.delete_AreaType
    __del__ = lambda self: None
AreaType_swigregister = _cphd.AreaType_swigregister
AreaType_swigregister(AreaType)

class LineSample(_object):
    """Proxy of C++ cphd::LineSample class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineSample, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::LineSample self) -> LineSample"""
        this = _cphd.new_LineSample()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'LineSample') -> "bool":
        """__eq__(LineSample self, LineSample other) -> bool"""
        return _cphd.LineSample___eq__(self, other)


    def __ne__(self, other: 'LineSample') -> "bool":
        """__ne__(LineSample self, LineSample other) -> bool"""
        return _cphd.LineSample___ne__(self, other)


    def getIndex(self) -> "size_t":
        """getIndex(LineSample self) -> size_t"""
        return _cphd.LineSample_getIndex(self)


    def setIndex(self, idx: 'size_t') -> "void":
        """setIndex(LineSample self, size_t idx)"""
        return _cphd.LineSample_setIndex(self, idx)

    __swig_setmethods__["line"] = _cphd.LineSample_line_set
    __swig_getmethods__["line"] = _cphd.LineSample_line_get
    if _newclass:
        line = _swig_property(_cphd.LineSample_line_get, _cphd.LineSample_line_set)
    __swig_setmethods__["sample"] = _cphd.LineSample_sample_set
    __swig_getmethods__["sample"] = _cphd.LineSample_sample_get
    if _newclass:
        sample = _swig_property(_cphd.LineSample_sample_get, _cphd.LineSample_sample_set)
    __swig_destroy__ = _cphd.delete_LineSample
    __del__ = lambda self: None
LineSample_swigregister = _cphd.LineSample_swigregister
LineSample_swigregister(LineSample)

class ImageAreaXExtent(_object):
    """Proxy of C++ cphd::ImageAreaXExtent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageAreaXExtent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageAreaXExtent, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImageAreaXExtent self) -> ImageAreaXExtent"""
        this = _cphd.new_ImageAreaXExtent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ImageAreaXExtent') -> "bool":
        """__eq__(ImageAreaXExtent self, ImageAreaXExtent other) -> bool"""
        return _cphd.ImageAreaXExtent___eq__(self, other)


    def __ne__(self, other: 'ImageAreaXExtent') -> "bool":
        """__ne__(ImageAreaXExtent self, ImageAreaXExtent other) -> bool"""
        return _cphd.ImageAreaXExtent___ne__(self, other)

    __swig_setmethods__["lineSpacing"] = _cphd.ImageAreaXExtent_lineSpacing_set
    __swig_getmethods__["lineSpacing"] = _cphd.ImageAreaXExtent_lineSpacing_get
    if _newclass:
        lineSpacing = _swig_property(_cphd.ImageAreaXExtent_lineSpacing_get, _cphd.ImageAreaXExtent_lineSpacing_set)
    __swig_setmethods__["firstLine"] = _cphd.ImageAreaXExtent_firstLine_set
    __swig_getmethods__["firstLine"] = _cphd.ImageAreaXExtent_firstLine_get
    if _newclass:
        firstLine = _swig_property(_cphd.ImageAreaXExtent_firstLine_get, _cphd.ImageAreaXExtent_firstLine_set)
    __swig_setmethods__["numLines"] = _cphd.ImageAreaXExtent_numLines_set
    __swig_getmethods__["numLines"] = _cphd.ImageAreaXExtent_numLines_get
    if _newclass:
        numLines = _swig_property(_cphd.ImageAreaXExtent_numLines_get, _cphd.ImageAreaXExtent_numLines_set)
    __swig_destroy__ = _cphd.delete_ImageAreaXExtent
    __del__ = lambda self: None
ImageAreaXExtent_swigregister = _cphd.ImageAreaXExtent_swigregister
ImageAreaXExtent_swigregister(ImageAreaXExtent)

class ImageAreaYExtent(_object):
    """Proxy of C++ cphd::ImageAreaYExtent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageAreaYExtent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageAreaYExtent, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImageAreaYExtent self) -> ImageAreaYExtent"""
        this = _cphd.new_ImageAreaYExtent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ImageAreaYExtent') -> "bool":
        """__eq__(ImageAreaYExtent self, ImageAreaYExtent other) -> bool"""
        return _cphd.ImageAreaYExtent___eq__(self, other)


    def __ne__(self, other: 'ImageAreaYExtent') -> "bool":
        """__ne__(ImageAreaYExtent self, ImageAreaYExtent other) -> bool"""
        return _cphd.ImageAreaYExtent___ne__(self, other)

    __swig_setmethods__["sampleSpacing"] = _cphd.ImageAreaYExtent_sampleSpacing_set
    __swig_getmethods__["sampleSpacing"] = _cphd.ImageAreaYExtent_sampleSpacing_get
    if _newclass:
        sampleSpacing = _swig_property(_cphd.ImageAreaYExtent_sampleSpacing_get, _cphd.ImageAreaYExtent_sampleSpacing_set)
    __swig_setmethods__["firstSample"] = _cphd.ImageAreaYExtent_firstSample_set
    __swig_getmethods__["firstSample"] = _cphd.ImageAreaYExtent_firstSample_get
    if _newclass:
        firstSample = _swig_property(_cphd.ImageAreaYExtent_firstSample_get, _cphd.ImageAreaYExtent_firstSample_set)
    __swig_setmethods__["numSamples"] = _cphd.ImageAreaYExtent_numSamples_set
    __swig_getmethods__["numSamples"] = _cphd.ImageAreaYExtent_numSamples_get
    if _newclass:
        numSamples = _swig_property(_cphd.ImageAreaYExtent_numSamples_get, _cphd.ImageAreaYExtent_numSamples_set)
    __swig_destroy__ = _cphd.delete_ImageAreaYExtent
    __del__ = lambda self: None
ImageAreaYExtent_swigregister = _cphd.ImageAreaYExtent_swigregister
ImageAreaYExtent_swigregister(ImageAreaYExtent)

class Segment(_object):
    """Proxy of C++ cphd::Segment class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Segment self) -> Segment"""
        this = _cphd.new_Segment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Segment') -> "bool":
        """__eq__(Segment self, Segment other) -> bool"""
        return _cphd.Segment___eq__(self, other)


    def __ne__(self, other: 'Segment') -> "bool":
        """__ne__(Segment self, Segment other) -> bool"""
        return _cphd.Segment___ne__(self, other)

    __swig_setmethods__["startLine"] = _cphd.Segment_startLine_set
    __swig_getmethods__["startLine"] = _cphd.Segment_startLine_get
    if _newclass:
        startLine = _swig_property(_cphd.Segment_startLine_get, _cphd.Segment_startLine_set)
    __swig_setmethods__["startSample"] = _cphd.Segment_startSample_set
    __swig_getmethods__["startSample"] = _cphd.Segment_startSample_get
    if _newclass:
        startSample = _swig_property(_cphd.Segment_startSample_get, _cphd.Segment_startSample_set)
    __swig_setmethods__["endLine"] = _cphd.Segment_endLine_set
    __swig_getmethods__["endLine"] = _cphd.Segment_endLine_get
    if _newclass:
        endLine = _swig_property(_cphd.Segment_endLine_get, _cphd.Segment_endLine_set)
    __swig_setmethods__["endSample"] = _cphd.Segment_endSample_set
    __swig_getmethods__["endSample"] = _cphd.Segment_endSample_get
    if _newclass:
        endSample = _swig_property(_cphd.Segment_endSample_get, _cphd.Segment_endSample_set)
    __swig_setmethods__["identifier"] = _cphd.Segment_identifier_set
    __swig_getmethods__["identifier"] = _cphd.Segment_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.Segment_identifier_get, _cphd.Segment_identifier_set)
    __swig_setmethods__["polygon"] = _cphd.Segment_polygon_set
    __swig_getmethods__["polygon"] = _cphd.Segment_polygon_get
    if _newclass:
        polygon = _swig_property(_cphd.Segment_polygon_get, _cphd.Segment_polygon_set)
    __swig_destroy__ = _cphd.delete_Segment
    __del__ = lambda self: None
Segment_swigregister = _cphd.Segment_swigregister
Segment_swigregister(Segment)

class ImageGrid(_object):
    """Proxy of C++ cphd::ImageGrid class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImageGrid self) -> ImageGrid"""
        this = _cphd.new_ImageGrid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ImageGrid') -> "bool":
        """__eq__(ImageGrid self, ImageGrid other) -> bool"""
        return _cphd.ImageGrid___eq__(self, other)


    def __ne__(self, other: 'ImageGrid') -> "bool":
        """__ne__(ImageGrid self, ImageGrid other) -> bool"""
        return _cphd.ImageGrid___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.ImageGrid_identifier_set
    __swig_getmethods__["identifier"] = _cphd.ImageGrid_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.ImageGrid_identifier_get, _cphd.ImageGrid_identifier_set)
    __swig_setmethods__["iarpLocation"] = _cphd.ImageGrid_iarpLocation_set
    __swig_getmethods__["iarpLocation"] = _cphd.ImageGrid_iarpLocation_get
    if _newclass:
        iarpLocation = _swig_property(_cphd.ImageGrid_iarpLocation_get, _cphd.ImageGrid_iarpLocation_set)
    __swig_setmethods__["xExtent"] = _cphd.ImageGrid_xExtent_set
    __swig_getmethods__["xExtent"] = _cphd.ImageGrid_xExtent_get
    if _newclass:
        xExtent = _swig_property(_cphd.ImageGrid_xExtent_get, _cphd.ImageGrid_xExtent_set)
    __swig_setmethods__["yExtent"] = _cphd.ImageGrid_yExtent_set
    __swig_getmethods__["yExtent"] = _cphd.ImageGrid_yExtent_get
    if _newclass:
        yExtent = _swig_property(_cphd.ImageGrid_yExtent_get, _cphd.ImageGrid_yExtent_set)
    __swig_setmethods__["segments"] = _cphd.ImageGrid_segments_set
    __swig_getmethods__["segments"] = _cphd.ImageGrid_segments_get
    if _newclass:
        segments = _swig_property(_cphd.ImageGrid_segments_get, _cphd.ImageGrid_segments_set)
    __swig_destroy__ = _cphd.delete_ImageGrid
    __del__ = lambda self: None
ImageGrid_swigregister = _cphd.ImageGrid_swigregister
ImageGrid_swigregister(ImageGrid)

class SceneCoordinates(_object):
    """Proxy of C++ cphd::SceneCoordinates class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneCoordinates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneCoordinates, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::SceneCoordinates self) -> SceneCoordinates"""
        this = _cphd.new_SceneCoordinates()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'SceneCoordinates') -> "bool":
        """__eq__(SceneCoordinates self, SceneCoordinates other) -> bool"""
        return _cphd.SceneCoordinates___eq__(self, other)


    def __ne__(self, other: 'SceneCoordinates') -> "bool":
        """__ne__(SceneCoordinates self, SceneCoordinates other) -> bool"""
        return _cphd.SceneCoordinates___ne__(self, other)

    __swig_setmethods__["earthModel"] = _cphd.SceneCoordinates_earthModel_set
    __swig_getmethods__["earthModel"] = _cphd.SceneCoordinates_earthModel_get
    if _newclass:
        earthModel = _swig_property(_cphd.SceneCoordinates_earthModel_get, _cphd.SceneCoordinates_earthModel_set)
    __swig_setmethods__["iarp"] = _cphd.SceneCoordinates_iarp_set
    __swig_getmethods__["iarp"] = _cphd.SceneCoordinates_iarp_get
    if _newclass:
        iarp = _swig_property(_cphd.SceneCoordinates_iarp_get, _cphd.SceneCoordinates_iarp_set)
    __swig_setmethods__["referenceSurface"] = _cphd.SceneCoordinates_referenceSurface_set
    __swig_getmethods__["referenceSurface"] = _cphd.SceneCoordinates_referenceSurface_get
    if _newclass:
        referenceSurface = _swig_property(_cphd.SceneCoordinates_referenceSurface_get, _cphd.SceneCoordinates_referenceSurface_set)
    __swig_setmethods__["imageArea"] = _cphd.SceneCoordinates_imageArea_set
    __swig_getmethods__["imageArea"] = _cphd.SceneCoordinates_imageArea_get
    if _newclass:
        imageArea = _swig_property(_cphd.SceneCoordinates_imageArea_get, _cphd.SceneCoordinates_imageArea_set)
    __swig_setmethods__["imageAreaCorners"] = _cphd.SceneCoordinates_imageAreaCorners_set
    __swig_getmethods__["imageAreaCorners"] = _cphd.SceneCoordinates_imageAreaCorners_get
    if _newclass:
        imageAreaCorners = _swig_property(_cphd.SceneCoordinates_imageAreaCorners_get, _cphd.SceneCoordinates_imageAreaCorners_set)
    __swig_setmethods__["extendedArea"] = _cphd.SceneCoordinates_extendedArea_set
    __swig_getmethods__["extendedArea"] = _cphd.SceneCoordinates_extendedArea_get
    if _newclass:
        extendedArea = _swig_property(_cphd.SceneCoordinates_extendedArea_get, _cphd.SceneCoordinates_extendedArea_set)
    __swig_setmethods__["imageGrid"] = _cphd.SceneCoordinates_imageGrid_set
    __swig_getmethods__["imageGrid"] = _cphd.SceneCoordinates_imageGrid_get
    if _newclass:
        imageGrid = _swig_property(_cphd.SceneCoordinates_imageGrid_get, _cphd.SceneCoordinates_imageGrid_set)
    __swig_destroy__ = _cphd.delete_SceneCoordinates
    __del__ = lambda self: None
SceneCoordinates_swigregister = _cphd.SceneCoordinates_swigregister
SceneCoordinates_swigregister(SceneCoordinates)

class SRP(_object):
    """Proxy of C++ cphd::SRP class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SRP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SRP, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::SRP self) -> SRP"""
        this = _cphd.new_SRP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'SRP') -> "bool":
        """__eq__(SRP self, SRP other) -> bool"""
        return _cphd.SRP___eq__(self, other)


    def __ne__(self, other: 'SRP') -> "bool":
        """__ne__(SRP self, SRP other) -> bool"""
        return _cphd.SRP___ne__(self, other)

    __swig_setmethods__["ecf"] = _cphd.SRP_ecf_set
    __swig_getmethods__["ecf"] = _cphd.SRP_ecf_get
    if _newclass:
        ecf = _swig_property(_cphd.SRP_ecf_get, _cphd.SRP_ecf_set)
    __swig_setmethods__["iac"] = _cphd.SRP_iac_set
    __swig_getmethods__["iac"] = _cphd.SRP_iac_get
    if _newclass:
        iac = _swig_property(_cphd.SRP_iac_get, _cphd.SRP_iac_set)
    __swig_destroy__ = _cphd.delete_SRP
    __del__ = lambda self: None
SRP_swigregister = _cphd.SRP_swigregister
SRP_swigregister(SRP)

class ImagingType(_object):
    """Proxy of C++ cphd::ImagingType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImagingType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImagingType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ImagingType self) -> ImagingType"""
        this = _cphd.new_ImagingType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ImagingType') -> "bool":
        """__eq__(ImagingType self, ImagingType other) -> bool"""
        return _cphd.ImagingType___eq__(self, other)


    def __ne__(self, other: 'ImagingType') -> "bool":
        """__ne__(ImagingType self, ImagingType other) -> bool"""
        return _cphd.ImagingType___ne__(self, other)

    __swig_destroy__ = _cphd.delete_ImagingType
    __del__ = lambda self: None
    __swig_setmethods__["azimuthAngle"] = _cphd.ImagingType_azimuthAngle_set
    __swig_getmethods__["azimuthAngle"] = _cphd.ImagingType_azimuthAngle_get
    if _newclass:
        azimuthAngle = _swig_property(_cphd.ImagingType_azimuthAngle_get, _cphd.ImagingType_azimuthAngle_set)
    __swig_setmethods__["grazeAngle"] = _cphd.ImagingType_grazeAngle_set
    __swig_getmethods__["grazeAngle"] = _cphd.ImagingType_grazeAngle_get
    if _newclass:
        grazeAngle = _swig_property(_cphd.ImagingType_grazeAngle_get, _cphd.ImagingType_grazeAngle_set)
    __swig_setmethods__["twistAngle"] = _cphd.ImagingType_twistAngle_set
    __swig_getmethods__["twistAngle"] = _cphd.ImagingType_twistAngle_get
    if _newclass:
        twistAngle = _swig_property(_cphd.ImagingType_twistAngle_get, _cphd.ImagingType_twistAngle_set)
    __swig_setmethods__["slopeAngle"] = _cphd.ImagingType_slopeAngle_set
    __swig_getmethods__["slopeAngle"] = _cphd.ImagingType_slopeAngle_get
    if _newclass:
        slopeAngle = _swig_property(_cphd.ImagingType_slopeAngle_get, _cphd.ImagingType_slopeAngle_set)
    __swig_setmethods__["layoverAngle"] = _cphd.ImagingType_layoverAngle_set
    __swig_getmethods__["layoverAngle"] = _cphd.ImagingType_layoverAngle_get
    if _newclass:
        layoverAngle = _swig_property(_cphd.ImagingType_layoverAngle_get, _cphd.ImagingType_layoverAngle_set)
ImagingType_swigregister = _cphd.ImagingType_swigregister
ImagingType_swigregister(ImagingType)

class Monostatic(ImagingType):
    """Proxy of C++ cphd::Monostatic class."""

    __swig_setmethods__ = {}
    for _s in [ImagingType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Monostatic, name, value)
    __swig_getmethods__ = {}
    for _s in [ImagingType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monostatic, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Monostatic self) -> Monostatic"""
        this = _cphd.new_Monostatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Monostatic') -> "bool":
        """__eq__(Monostatic self, Monostatic other) -> bool"""
        return _cphd.Monostatic___eq__(self, other)


    def __ne__(self, other: 'Monostatic') -> "bool":
        """__ne__(Monostatic self, Monostatic other) -> bool"""
        return _cphd.Monostatic___ne__(self, other)

    __swig_setmethods__["sideOfTrack"] = _cphd.Monostatic_sideOfTrack_set
    __swig_getmethods__["sideOfTrack"] = _cphd.Monostatic_sideOfTrack_get
    if _newclass:
        sideOfTrack = _swig_property(_cphd.Monostatic_sideOfTrack_get, _cphd.Monostatic_sideOfTrack_set)
    __swig_setmethods__["slantRange"] = _cphd.Monostatic_slantRange_set
    __swig_getmethods__["slantRange"] = _cphd.Monostatic_slantRange_get
    if _newclass:
        slantRange = _swig_property(_cphd.Monostatic_slantRange_get, _cphd.Monostatic_slantRange_set)
    __swig_setmethods__["groundRange"] = _cphd.Monostatic_groundRange_set
    __swig_getmethods__["groundRange"] = _cphd.Monostatic_groundRange_get
    if _newclass:
        groundRange = _swig_property(_cphd.Monostatic_groundRange_get, _cphd.Monostatic_groundRange_set)
    __swig_setmethods__["dopplerConeAngle"] = _cphd.Monostatic_dopplerConeAngle_set
    __swig_getmethods__["dopplerConeAngle"] = _cphd.Monostatic_dopplerConeAngle_get
    if _newclass:
        dopplerConeAngle = _swig_property(_cphd.Monostatic_dopplerConeAngle_get, _cphd.Monostatic_dopplerConeAngle_set)
    __swig_setmethods__["incidenceAngle"] = _cphd.Monostatic_incidenceAngle_set
    __swig_getmethods__["incidenceAngle"] = _cphd.Monostatic_incidenceAngle_get
    if _newclass:
        incidenceAngle = _swig_property(_cphd.Monostatic_incidenceAngle_get, _cphd.Monostatic_incidenceAngle_set)
    __swig_setmethods__["arpPos"] = _cphd.Monostatic_arpPos_set
    __swig_getmethods__["arpPos"] = _cphd.Monostatic_arpPos_get
    if _newclass:
        arpPos = _swig_property(_cphd.Monostatic_arpPos_get, _cphd.Monostatic_arpPos_set)
    __swig_setmethods__["arpVel"] = _cphd.Monostatic_arpVel_set
    __swig_getmethods__["arpVel"] = _cphd.Monostatic_arpVel_get
    if _newclass:
        arpVel = _swig_property(_cphd.Monostatic_arpVel_get, _cphd.Monostatic_arpVel_set)
    __swig_destroy__ = _cphd.delete_Monostatic
    __del__ = lambda self: None
Monostatic_swigregister = _cphd.Monostatic_swigregister
Monostatic_swigregister(Monostatic)

class Bistatic(ImagingType):
    """Proxy of C++ cphd::Bistatic class."""

    __swig_setmethods__ = {}
    for _s in [ImagingType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bistatic, name, value)
    __swig_getmethods__ = {}
    for _s in [ImagingType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bistatic, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Bistatic self) -> Bistatic"""
        this = _cphd.new_Bistatic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Bistatic') -> "bool":
        """__eq__(Bistatic self, Bistatic other) -> bool"""
        return _cphd.Bistatic___eq__(self, other)


    def __ne__(self, other: 'Bistatic') -> "bool":
        """__ne__(Bistatic self, Bistatic other) -> bool"""
        return _cphd.Bistatic___ne__(self, other)

    __swig_setmethods__["azimuthAngleRate"] = _cphd.Bistatic_azimuthAngleRate_set
    __swig_getmethods__["azimuthAngleRate"] = _cphd.Bistatic_azimuthAngleRate_get
    if _newclass:
        azimuthAngleRate = _swig_property(_cphd.Bistatic_azimuthAngleRate_get, _cphd.Bistatic_azimuthAngleRate_set)
    __swig_setmethods__["bistaticAngle"] = _cphd.Bistatic_bistaticAngle_set
    __swig_getmethods__["bistaticAngle"] = _cphd.Bistatic_bistaticAngle_get
    if _newclass:
        bistaticAngle = _swig_property(_cphd.Bistatic_bistaticAngle_get, _cphd.Bistatic_bistaticAngle_set)
    __swig_setmethods__["bistaticAngleRate"] = _cphd.Bistatic_bistaticAngleRate_set
    __swig_getmethods__["bistaticAngleRate"] = _cphd.Bistatic_bistaticAngleRate_get
    if _newclass:
        bistaticAngleRate = _swig_property(_cphd.Bistatic_bistaticAngleRate_get, _cphd.Bistatic_bistaticAngleRate_set)
    __swig_setmethods__["txPlatform"] = _cphd.Bistatic_txPlatform_set
    __swig_getmethods__["txPlatform"] = _cphd.Bistatic_txPlatform_get
    if _newclass:
        txPlatform = _swig_property(_cphd.Bistatic_txPlatform_get, _cphd.Bistatic_txPlatform_set)
    __swig_setmethods__["rcvPlatform"] = _cphd.Bistatic_rcvPlatform_set
    __swig_getmethods__["rcvPlatform"] = _cphd.Bistatic_rcvPlatform_get
    if _newclass:
        rcvPlatform = _swig_property(_cphd.Bistatic_rcvPlatform_get, _cphd.Bistatic_rcvPlatform_set)
    __swig_destroy__ = _cphd.delete_Bistatic
    __del__ = lambda self: None
Bistatic_swigregister = _cphd.Bistatic_swigregister
Bistatic_swigregister(Bistatic)

class ReferenceGeometry(_object):
    """Proxy of C++ cphd::ReferenceGeometry class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceGeometry, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ReferenceGeometry self) -> ReferenceGeometry"""
        this = _cphd.new_ReferenceGeometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ReferenceGeometry') -> "bool":
        """__eq__(ReferenceGeometry self, ReferenceGeometry other) -> bool"""
        return _cphd.ReferenceGeometry___eq__(self, other)


    def __ne__(self, other: 'ReferenceGeometry') -> "bool":
        """__ne__(ReferenceGeometry self, ReferenceGeometry other) -> bool"""
        return _cphd.ReferenceGeometry___ne__(self, other)

    __swig_setmethods__["referenceTime"] = _cphd.ReferenceGeometry_referenceTime_set
    __swig_getmethods__["referenceTime"] = _cphd.ReferenceGeometry_referenceTime_get
    if _newclass:
        referenceTime = _swig_property(_cphd.ReferenceGeometry_referenceTime_get, _cphd.ReferenceGeometry_referenceTime_set)
    __swig_setmethods__["srpCODTime"] = _cphd.ReferenceGeometry_srpCODTime_set
    __swig_getmethods__["srpCODTime"] = _cphd.ReferenceGeometry_srpCODTime_get
    if _newclass:
        srpCODTime = _swig_property(_cphd.ReferenceGeometry_srpCODTime_get, _cphd.ReferenceGeometry_srpCODTime_set)
    __swig_setmethods__["srpDwellTime"] = _cphd.ReferenceGeometry_srpDwellTime_set
    __swig_getmethods__["srpDwellTime"] = _cphd.ReferenceGeometry_srpDwellTime_get
    if _newclass:
        srpDwellTime = _swig_property(_cphd.ReferenceGeometry_srpDwellTime_get, _cphd.ReferenceGeometry_srpDwellTime_set)
    __swig_setmethods__["srp"] = _cphd.ReferenceGeometry_srp_set
    __swig_getmethods__["srp"] = _cphd.ReferenceGeometry_srp_get
    if _newclass:
        srp = _swig_property(_cphd.ReferenceGeometry_srp_get, _cphd.ReferenceGeometry_srp_set)
    __swig_setmethods__["monostatic"] = _cphd.ReferenceGeometry_monostatic_set
    __swig_getmethods__["monostatic"] = _cphd.ReferenceGeometry_monostatic_get
    if _newclass:
        monostatic = _swig_property(_cphd.ReferenceGeometry_monostatic_get, _cphd.ReferenceGeometry_monostatic_set)
    __swig_setmethods__["bistatic"] = _cphd.ReferenceGeometry_bistatic_set
    __swig_getmethods__["bistatic"] = _cphd.ReferenceGeometry_bistatic_get
    if _newclass:
        bistatic = _swig_property(_cphd.ReferenceGeometry_bistatic_get, _cphd.ReferenceGeometry_bistatic_set)
    __swig_destroy__ = _cphd.delete_ReferenceGeometry
    __del__ = lambda self: None
ReferenceGeometry_swigregister = _cphd.ReferenceGeometry_swigregister
ReferenceGeometry_swigregister(ReferenceGeometry)

class SupportArrayParameter(_object):
    """Proxy of C++ cphd::SupportArrayParameter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupportArrayParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupportArrayParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::SupportArrayParameter self) -> SupportArrayParameter
        __init__(cphd::SupportArrayParameter self, std::string const & format, size_t id, double x0_in, double y0_in, double xSS_in, double ySS_in) -> SupportArrayParameter
        """
        this = _cphd.new_SupportArrayParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'SupportArrayParameter') -> "bool":
        """__eq__(SupportArrayParameter self, SupportArrayParameter other) -> bool"""
        return _cphd.SupportArrayParameter___eq__(self, other)


    def __ne__(self, other: 'SupportArrayParameter') -> "bool":
        """__ne__(SupportArrayParameter self, SupportArrayParameter other) -> bool"""
        return _cphd.SupportArrayParameter___ne__(self, other)


    def setIdentifier(self, identifierIn: 'size_t') -> "void":
        """setIdentifier(SupportArrayParameter self, size_t identifierIn)"""
        return _cphd.SupportArrayParameter_setIdentifier(self, identifierIn)


    def getIdentifier(self) -> "size_t":
        """getIdentifier(SupportArrayParameter self) -> size_t"""
        return _cphd.SupportArrayParameter_getIdentifier(self)

    __swig_setmethods__["elementFormat"] = _cphd.SupportArrayParameter_elementFormat_set
    __swig_getmethods__["elementFormat"] = _cphd.SupportArrayParameter_elementFormat_get
    if _newclass:
        elementFormat = _swig_property(_cphd.SupportArrayParameter_elementFormat_get, _cphd.SupportArrayParameter_elementFormat_set)
    __swig_setmethods__["x0"] = _cphd.SupportArrayParameter_x0_set
    __swig_getmethods__["x0"] = _cphd.SupportArrayParameter_x0_get
    if _newclass:
        x0 = _swig_property(_cphd.SupportArrayParameter_x0_get, _cphd.SupportArrayParameter_x0_set)
    __swig_setmethods__["y0"] = _cphd.SupportArrayParameter_y0_set
    __swig_getmethods__["y0"] = _cphd.SupportArrayParameter_y0_get
    if _newclass:
        y0 = _swig_property(_cphd.SupportArrayParameter_y0_get, _cphd.SupportArrayParameter_y0_set)
    __swig_setmethods__["xSS"] = _cphd.SupportArrayParameter_xSS_set
    __swig_getmethods__["xSS"] = _cphd.SupportArrayParameter_xSS_get
    if _newclass:
        xSS = _swig_property(_cphd.SupportArrayParameter_xSS_get, _cphd.SupportArrayParameter_xSS_set)
    __swig_setmethods__["ySS"] = _cphd.SupportArrayParameter_ySS_set
    __swig_getmethods__["ySS"] = _cphd.SupportArrayParameter_ySS_get
    if _newclass:
        ySS = _swig_property(_cphd.SupportArrayParameter_ySS_get, _cphd.SupportArrayParameter_ySS_set)
    __swig_destroy__ = _cphd.delete_SupportArrayParameter
    __del__ = lambda self: None
SupportArrayParameter_swigregister = _cphd.SupportArrayParameter_swigregister
SupportArrayParameter_swigregister(SupportArrayParameter)

class AdditionalSupportArray(SupportArrayParameter):
    """Proxy of C++ cphd::AdditionalSupportArray class."""

    __swig_setmethods__ = {}
    for _s in [SupportArrayParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdditionalSupportArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SupportArrayParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdditionalSupportArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::AdditionalSupportArray self) -> AdditionalSupportArray
        __init__(cphd::AdditionalSupportArray self, std::string const & format, std::string const & id, double x0_in, double y0_in, double xSS_in, double ySS_in, std::string const & xUnits_in, std::string const & yUnits_in, std::string const & zUnits_in) -> AdditionalSupportArray
        """
        this = _cphd.new_AdditionalSupportArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AdditionalSupportArray') -> "bool":
        """__eq__(AdditionalSupportArray self, AdditionalSupportArray other) -> bool"""
        return _cphd.AdditionalSupportArray___eq__(self, other)


    def __ne__(self, other: 'AdditionalSupportArray') -> "bool":
        """__ne__(AdditionalSupportArray self, AdditionalSupportArray other) -> bool"""
        return _cphd.AdditionalSupportArray___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.AdditionalSupportArray_identifier_set
    __swig_getmethods__["identifier"] = _cphd.AdditionalSupportArray_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.AdditionalSupportArray_identifier_get, _cphd.AdditionalSupportArray_identifier_set)
    __swig_setmethods__["xUnits"] = _cphd.AdditionalSupportArray_xUnits_set
    __swig_getmethods__["xUnits"] = _cphd.AdditionalSupportArray_xUnits_get
    if _newclass:
        xUnits = _swig_property(_cphd.AdditionalSupportArray_xUnits_get, _cphd.AdditionalSupportArray_xUnits_set)
    __swig_setmethods__["yUnits"] = _cphd.AdditionalSupportArray_yUnits_set
    __swig_getmethods__["yUnits"] = _cphd.AdditionalSupportArray_yUnits_get
    if _newclass:
        yUnits = _swig_property(_cphd.AdditionalSupportArray_yUnits_get, _cphd.AdditionalSupportArray_yUnits_set)
    __swig_setmethods__["zUnits"] = _cphd.AdditionalSupportArray_zUnits_set
    __swig_getmethods__["zUnits"] = _cphd.AdditionalSupportArray_zUnits_get
    if _newclass:
        zUnits = _swig_property(_cphd.AdditionalSupportArray_zUnits_get, _cphd.AdditionalSupportArray_zUnits_set)
    __swig_setmethods__["parameter"] = _cphd.AdditionalSupportArray_parameter_set
    __swig_getmethods__["parameter"] = _cphd.AdditionalSupportArray_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.AdditionalSupportArray_parameter_get, _cphd.AdditionalSupportArray_parameter_set)
    __swig_destroy__ = _cphd.delete_AdditionalSupportArray
    __del__ = lambda self: None
AdditionalSupportArray_swigregister = _cphd.AdditionalSupportArray_swigregister
AdditionalSupportArray_swigregister(AdditionalSupportArray)

class SupportArray(_object):
    """Proxy of C++ cphd::SupportArray class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupportArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupportArray, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'SupportArray') -> "bool":
        """__eq__(SupportArray self, SupportArray other) -> bool"""
        return _cphd.SupportArray___eq__(self, other)


    def __ne__(self, other: 'SupportArray') -> "bool":
        """__ne__(SupportArray self, SupportArray other) -> bool"""
        return _cphd.SupportArray___ne__(self, other)


    def getIAZSupportArray(self, key: 'std::string const &') -> "cphd::SupportArrayParameter":
        """getIAZSupportArray(SupportArray self, std::string const & key) -> SupportArrayParameter"""
        return _cphd.SupportArray_getIAZSupportArray(self, key)


    def getAGPSupportArray(self, key: 'std::string const &') -> "cphd::SupportArrayParameter":
        """getAGPSupportArray(SupportArray self, std::string const & key) -> SupportArrayParameter"""
        return _cphd.SupportArray_getAGPSupportArray(self, key)


    def getAddedSupportArray(self, key: 'std::string const &') -> "cphd::AdditionalSupportArray":
        """getAddedSupportArray(SupportArray self, std::string const & key) -> AdditionalSupportArray"""
        return _cphd.SupportArray_getAddedSupportArray(self, key)

    __swig_setmethods__["iazArray"] = _cphd.SupportArray_iazArray_set
    __swig_getmethods__["iazArray"] = _cphd.SupportArray_iazArray_get
    if _newclass:
        iazArray = _swig_property(_cphd.SupportArray_iazArray_get, _cphd.SupportArray_iazArray_set)
    __swig_setmethods__["antGainPhase"] = _cphd.SupportArray_antGainPhase_set
    __swig_getmethods__["antGainPhase"] = _cphd.SupportArray_antGainPhase_get
    if _newclass:
        antGainPhase = _swig_property(_cphd.SupportArray_antGainPhase_get, _cphd.SupportArray_antGainPhase_set)
    __swig_setmethods__["addedSupportArray"] = _cphd.SupportArray_addedSupportArray_set
    __swig_getmethods__["addedSupportArray"] = _cphd.SupportArray_addedSupportArray_get
    if _newclass:
        addedSupportArray = _swig_property(_cphd.SupportArray_addedSupportArray_get, _cphd.SupportArray_addedSupportArray_set)

    def __init__(self):
        """__init__(cphd::SupportArray self) -> SupportArray"""
        this = _cphd.new_SupportArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_SupportArray
    __del__ = lambda self: None
SupportArray_swigregister = _cphd.SupportArray_swigregister
SupportArray_swigregister(SupportArray)

class ErrorParameters(_object):
    """Proxy of C++ cphd::ErrorParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorParameters, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'ErrorParameters') -> "bool":
        """__eq__(ErrorParameters self, ErrorParameters other) -> bool"""
        return _cphd.ErrorParameters___eq__(self, other)


    def __ne__(self, other: 'ErrorParameters') -> "bool":
        """__ne__(ErrorParameters self, ErrorParameters other) -> bool"""
        return _cphd.ErrorParameters___ne__(self, other)

    __swig_setmethods__["monostatic"] = _cphd.ErrorParameters_monostatic_set
    __swig_getmethods__["monostatic"] = _cphd.ErrorParameters_monostatic_get
    if _newclass:
        monostatic = _swig_property(_cphd.ErrorParameters_monostatic_get, _cphd.ErrorParameters_monostatic_set)
    __swig_setmethods__["bistatic"] = _cphd.ErrorParameters_bistatic_set
    __swig_getmethods__["bistatic"] = _cphd.ErrorParameters_bistatic_get
    if _newclass:
        bistatic = _swig_property(_cphd.ErrorParameters_bistatic_get, _cphd.ErrorParameters_bistatic_set)

    def __init__(self):
        """__init__(cphd::ErrorParameters self) -> ErrorParameters"""
        this = _cphd.new_ErrorParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_ErrorParameters
    __del__ = lambda self: None
ErrorParameters_swigregister = _cphd.ErrorParameters_swigregister
ErrorParameters_swigregister(ErrorParameters)

class ProductInfo(_object):
    """Proxy of C++ cphd::ProductInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProductInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProductInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ProductInfo self) -> ProductInfo"""
        this = _cphd.new_ProductInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ProductInfo') -> "bool":
        """__eq__(ProductInfo self, ProductInfo other) -> bool"""
        return _cphd.ProductInfo___eq__(self, other)


    def __ne__(self, other: 'ProductInfo') -> "bool":
        """__ne__(ProductInfo self, ProductInfo other) -> bool"""
        return _cphd.ProductInfo___ne__(self, other)

    __swig_setmethods__["profile"] = _cphd.ProductInfo_profile_set
    __swig_getmethods__["profile"] = _cphd.ProductInfo_profile_get
    if _newclass:
        profile = _swig_property(_cphd.ProductInfo_profile_get, _cphd.ProductInfo_profile_set)
    __swig_setmethods__["creationInfo"] = _cphd.ProductInfo_creationInfo_set
    __swig_getmethods__["creationInfo"] = _cphd.ProductInfo_creationInfo_get
    if _newclass:
        creationInfo = _swig_property(_cphd.ProductInfo_creationInfo_get, _cphd.ProductInfo_creationInfo_set)
    __swig_setmethods__["parameter"] = _cphd.ProductInfo_parameter_set
    __swig_getmethods__["parameter"] = _cphd.ProductInfo_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.ProductInfo_parameter_get, _cphd.ProductInfo_parameter_set)
    __swig_destroy__ = _cphd.delete_ProductInfo
    __del__ = lambda self: None
ProductInfo_swigregister = _cphd.ProductInfo_swigregister
ProductInfo_swigregister(ProductInfo)

class SupportBlock(_object):
    """Proxy of C++ cphd::SupportBlock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupportBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupportBlock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::SupportBlock self, std::string const & pathname, Data data, sys::Off_T startSupport, sys::Off_T sizeSupport) -> SupportBlock
        __init__(cphd::SupportBlock self, std::shared_ptr< io::SeekableInputStream > inStream, Data data, sys::Off_T startSupport, sys::Off_T sizeSupport) -> SupportBlock
        """
        this = _cphd.new_SupportBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getFileOffset(self, id: 'std::string const &') -> "sys::Off_T":
        """getFileOffset(SupportBlock self, std::string const & id) -> sys::Off_T"""
        return _cphd.SupportBlock_getFileOffset(self, id)


    def read(self, *args) -> "void":
        """
        read(SupportBlock self, std::string const & id, size_t numThreads, mem::BufferView< sys::ubyte > const & data)
        read(SupportBlock self, std::string const & id, size_t numThreads, mem::ScopedArray< sys::ubyte > & data)
        """
        return _cphd.SupportBlock_read(self, *args)


    def readAll(self, numThreads: 'size_t', data: 'mem::ScopedArray< sys::ubyte > &') -> "void":
        """readAll(SupportBlock self, size_t numThreads, mem::ScopedArray< sys::ubyte > & data)"""
        return _cphd.SupportBlock_readAll(self, numThreads, data)

    __swig_destroy__ = _cphd.delete_SupportBlock
    __del__ = lambda self: None
SupportBlock_swigregister = _cphd.SupportBlock_swigregister
SupportBlock_swigregister(SupportBlock)

class Polarization(_object):
    """Proxy of C++ cphd::Polarization class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polarization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polarization, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'Polarization') -> "bool":
        """__eq__(Polarization self, Polarization other) -> bool"""
        return _cphd.Polarization___eq__(self, other)


    def __ne__(self, other: 'Polarization') -> "bool":
        """__ne__(Polarization self, Polarization other) -> bool"""
        return _cphd.Polarization___ne__(self, other)

    __swig_setmethods__["txPol"] = _cphd.Polarization_txPol_set
    __swig_getmethods__["txPol"] = _cphd.Polarization_txPol_get
    if _newclass:
        txPol = _swig_property(_cphd.Polarization_txPol_get, _cphd.Polarization_txPol_set)
    __swig_setmethods__["rcvPol"] = _cphd.Polarization_rcvPol_set
    __swig_getmethods__["rcvPol"] = _cphd.Polarization_rcvPol_get
    if _newclass:
        rcvPol = _swig_property(_cphd.Polarization_rcvPol_get, _cphd.Polarization_rcvPol_set)

    def __init__(self):
        """__init__(cphd::Polarization self) -> Polarization"""
        this = _cphd.new_Polarization()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_Polarization
    __del__ = lambda self: None
Polarization_swigregister = _cphd.Polarization_swigregister
Polarization_swigregister(Polarization)

class TOAExtended(_object):
    """Proxy of C++ cphd::TOAExtended class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOAExtended, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TOAExtended, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TOAExtended self) -> TOAExtended"""
        this = _cphd.new_TOAExtended()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TOAExtended') -> "bool":
        """__eq__(TOAExtended self, TOAExtended other) -> bool"""
        return _cphd.TOAExtended___eq__(self, other)


    def __ne__(self, other: 'TOAExtended') -> "bool":
        """__ne__(TOAExtended self, TOAExtended other) -> bool"""
        return _cphd.TOAExtended___ne__(self, other)

    __swig_setmethods__["toaExtSaved"] = _cphd.TOAExtended_toaExtSaved_set
    __swig_getmethods__["toaExtSaved"] = _cphd.TOAExtended_toaExtSaved_get
    if _newclass:
        toaExtSaved = _swig_property(_cphd.TOAExtended_toaExtSaved_get, _cphd.TOAExtended_toaExtSaved_set)
    __swig_setmethods__["lfmEclipse"] = _cphd.TOAExtended_lfmEclipse_set
    __swig_getmethods__["lfmEclipse"] = _cphd.TOAExtended_lfmEclipse_get
    if _newclass:
        lfmEclipse = _swig_property(_cphd.TOAExtended_lfmEclipse_get, _cphd.TOAExtended_lfmEclipse_set)
    __swig_destroy__ = _cphd.delete_TOAExtended
    __del__ = lambda self: None
TOAExtended_swigregister = _cphd.TOAExtended_swigregister
TOAExtended_swigregister(TOAExtended)

class DwellTimes(_object):
    """Proxy of C++ cphd::DwellTimes class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DwellTimes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DwellTimes, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::DwellTimes self) -> DwellTimes"""
        this = _cphd.new_DwellTimes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'DwellTimes') -> "bool":
        """__eq__(DwellTimes self, DwellTimes other) -> bool"""
        return _cphd.DwellTimes___eq__(self, other)


    def __ne__(self, other: 'DwellTimes') -> "bool":
        """__ne__(DwellTimes self, DwellTimes other) -> bool"""
        return _cphd.DwellTimes___ne__(self, other)

    __swig_setmethods__["codId"] = _cphd.DwellTimes_codId_set
    __swig_getmethods__["codId"] = _cphd.DwellTimes_codId_get
    if _newclass:
        codId = _swig_property(_cphd.DwellTimes_codId_get, _cphd.DwellTimes_codId_set)
    __swig_setmethods__["dwellId"] = _cphd.DwellTimes_dwellId_set
    __swig_getmethods__["dwellId"] = _cphd.DwellTimes_dwellId_get
    if _newclass:
        dwellId = _swig_property(_cphd.DwellTimes_dwellId_get, _cphd.DwellTimes_dwellId_set)
    __swig_destroy__ = _cphd.delete_DwellTimes
    __del__ = lambda self: None
DwellTimes_swigregister = _cphd.DwellTimes_swigregister
DwellTimes_swigregister(DwellTimes)

class TgtRefLevel(_object):
    """Proxy of C++ cphd::TgtRefLevel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TgtRefLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TgtRefLevel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TgtRefLevel self) -> TgtRefLevel"""
        this = _cphd.new_TgtRefLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TgtRefLevel') -> "bool":
        """__eq__(TgtRefLevel self, TgtRefLevel other) -> bool"""
        return _cphd.TgtRefLevel___eq__(self, other)


    def __ne__(self, other: 'TgtRefLevel') -> "bool":
        """__ne__(TgtRefLevel self, TgtRefLevel other) -> bool"""
        return _cphd.TgtRefLevel___ne__(self, other)

    __swig_setmethods__["ptRef"] = _cphd.TgtRefLevel_ptRef_set
    __swig_getmethods__["ptRef"] = _cphd.TgtRefLevel_ptRef_get
    if _newclass:
        ptRef = _swig_property(_cphd.TgtRefLevel_ptRef_get, _cphd.TgtRefLevel_ptRef_set)
    __swig_destroy__ = _cphd.delete_TgtRefLevel
    __del__ = lambda self: None
TgtRefLevel_swigregister = _cphd.TgtRefLevel_swigregister
TgtRefLevel_swigregister(TgtRefLevel)

class Point(_object):
    """Proxy of C++ cphd::Point class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Point self) -> Point"""
        this = _cphd.new_Point()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Point') -> "bool":
        """__eq__(Point self, Point other) -> bool"""
        return _cphd.Point___eq__(self, other)


    def __ne__(self, other: 'Point') -> "bool":
        """__ne__(Point self, Point other) -> bool"""
        return _cphd.Point___ne__(self, other)

    __swig_setmethods__["fx"] = _cphd.Point_fx_set
    __swig_getmethods__["fx"] = _cphd.Point_fx_get
    if _newclass:
        fx = _swig_property(_cphd.Point_fx_get, _cphd.Point_fx_set)
    __swig_setmethods__["pn"] = _cphd.Point_pn_set
    __swig_getmethods__["pn"] = _cphd.Point_pn_get
    if _newclass:
        pn = _swig_property(_cphd.Point_pn_get, _cphd.Point_pn_set)
    __swig_destroy__ = _cphd.delete_Point
    __del__ = lambda self: None
Point_swigregister = _cphd.Point_swigregister
Point_swigregister(Point)

class FxNoiseProfile(_object):
    """Proxy of C++ cphd::FxNoiseProfile class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FxNoiseProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FxNoiseProfile, name)
    __repr__ = _swig_repr

    def __eq__(self, other: 'FxNoiseProfile') -> "bool":
        """__eq__(FxNoiseProfile self, FxNoiseProfile other) -> bool"""
        return _cphd.FxNoiseProfile___eq__(self, other)


    def __ne__(self, other: 'FxNoiseProfile') -> "bool":
        """__ne__(FxNoiseProfile self, FxNoiseProfile other) -> bool"""
        return _cphd.FxNoiseProfile___ne__(self, other)

    __swig_setmethods__["point"] = _cphd.FxNoiseProfile_point_set
    __swig_getmethods__["point"] = _cphd.FxNoiseProfile_point_get
    if _newclass:
        point = _swig_property(_cphd.FxNoiseProfile_point_get, _cphd.FxNoiseProfile_point_set)

    def __init__(self):
        """__init__(cphd::FxNoiseProfile self) -> FxNoiseProfile"""
        this = _cphd.new_FxNoiseProfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_FxNoiseProfile
    __del__ = lambda self: None
FxNoiseProfile_swigregister = _cphd.FxNoiseProfile_swigregister
FxNoiseProfile_swigregister(FxNoiseProfile)

class NoiseLevel(_object):
    """Proxy of C++ cphd::NoiseLevel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseLevel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::NoiseLevel self) -> NoiseLevel"""
        this = _cphd.new_NoiseLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'NoiseLevel') -> "bool":
        """__eq__(NoiseLevel self, NoiseLevel other) -> bool"""
        return _cphd.NoiseLevel___eq__(self, other)


    def __ne__(self, other: 'NoiseLevel') -> "bool":
        """__ne__(NoiseLevel self, NoiseLevel other) -> bool"""
        return _cphd.NoiseLevel___ne__(self, other)

    __swig_setmethods__["pnRef"] = _cphd.NoiseLevel_pnRef_set
    __swig_getmethods__["pnRef"] = _cphd.NoiseLevel_pnRef_get
    if _newclass:
        pnRef = _swig_property(_cphd.NoiseLevel_pnRef_get, _cphd.NoiseLevel_pnRef_set)
    __swig_setmethods__["bnRef"] = _cphd.NoiseLevel_bnRef_set
    __swig_getmethods__["bnRef"] = _cphd.NoiseLevel_bnRef_get
    if _newclass:
        bnRef = _swig_property(_cphd.NoiseLevel_bnRef_get, _cphd.NoiseLevel_bnRef_set)
    __swig_setmethods__["fxNoiseProfile"] = _cphd.NoiseLevel_fxNoiseProfile_set
    __swig_getmethods__["fxNoiseProfile"] = _cphd.NoiseLevel_fxNoiseProfile_get
    if _newclass:
        fxNoiseProfile = _swig_property(_cphd.NoiseLevel_fxNoiseProfile_get, _cphd.NoiseLevel_fxNoiseProfile_set)
    __swig_destroy__ = _cphd.delete_NoiseLevel
    __del__ = lambda self: None
NoiseLevel_swigregister = _cphd.NoiseLevel_swigregister
NoiseLevel_swigregister(NoiseLevel)

class ChannelParameter(_object):
    """Proxy of C++ cphd::ChannelParameter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelParameter, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ChannelParameter self) -> ChannelParameter"""
        this = _cphd.new_ChannelParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ChannelParameter') -> "bool":
        """__eq__(ChannelParameter self, ChannelParameter other) -> bool"""
        return _cphd.ChannelParameter___eq__(self, other)


    def __ne__(self, other: 'ChannelParameter') -> "bool":
        """__ne__(ChannelParameter self, ChannelParameter other) -> bool"""
        return _cphd.ChannelParameter___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.ChannelParameter_identifier_set
    __swig_getmethods__["identifier"] = _cphd.ChannelParameter_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.ChannelParameter_identifier_get, _cphd.ChannelParameter_identifier_set)
    __swig_setmethods__["refVectorIndex"] = _cphd.ChannelParameter_refVectorIndex_set
    __swig_getmethods__["refVectorIndex"] = _cphd.ChannelParameter_refVectorIndex_get
    if _newclass:
        refVectorIndex = _swig_property(_cphd.ChannelParameter_refVectorIndex_get, _cphd.ChannelParameter_refVectorIndex_set)
    __swig_setmethods__["fxFixed"] = _cphd.ChannelParameter_fxFixed_set
    __swig_getmethods__["fxFixed"] = _cphd.ChannelParameter_fxFixed_get
    if _newclass:
        fxFixed = _swig_property(_cphd.ChannelParameter_fxFixed_get, _cphd.ChannelParameter_fxFixed_set)
    __swig_setmethods__["toaFixed"] = _cphd.ChannelParameter_toaFixed_set
    __swig_getmethods__["toaFixed"] = _cphd.ChannelParameter_toaFixed_get
    if _newclass:
        toaFixed = _swig_property(_cphd.ChannelParameter_toaFixed_get, _cphd.ChannelParameter_toaFixed_set)
    __swig_setmethods__["srpFixed"] = _cphd.ChannelParameter_srpFixed_set
    __swig_getmethods__["srpFixed"] = _cphd.ChannelParameter_srpFixed_get
    if _newclass:
        srpFixed = _swig_property(_cphd.ChannelParameter_srpFixed_get, _cphd.ChannelParameter_srpFixed_set)
    __swig_setmethods__["signalNormal"] = _cphd.ChannelParameter_signalNormal_set
    __swig_getmethods__["signalNormal"] = _cphd.ChannelParameter_signalNormal_get
    if _newclass:
        signalNormal = _swig_property(_cphd.ChannelParameter_signalNormal_get, _cphd.ChannelParameter_signalNormal_set)
    __swig_setmethods__["polarization"] = _cphd.ChannelParameter_polarization_set
    __swig_getmethods__["polarization"] = _cphd.ChannelParameter_polarization_get
    if _newclass:
        polarization = _swig_property(_cphd.ChannelParameter_polarization_get, _cphd.ChannelParameter_polarization_set)
    __swig_setmethods__["fxC"] = _cphd.ChannelParameter_fxC_set
    __swig_getmethods__["fxC"] = _cphd.ChannelParameter_fxC_get
    if _newclass:
        fxC = _swig_property(_cphd.ChannelParameter_fxC_get, _cphd.ChannelParameter_fxC_set)
    __swig_setmethods__["fxBW"] = _cphd.ChannelParameter_fxBW_set
    __swig_getmethods__["fxBW"] = _cphd.ChannelParameter_fxBW_get
    if _newclass:
        fxBW = _swig_property(_cphd.ChannelParameter_fxBW_get, _cphd.ChannelParameter_fxBW_set)
    __swig_setmethods__["fxBWNoise"] = _cphd.ChannelParameter_fxBWNoise_set
    __swig_getmethods__["fxBWNoise"] = _cphd.ChannelParameter_fxBWNoise_get
    if _newclass:
        fxBWNoise = _swig_property(_cphd.ChannelParameter_fxBWNoise_get, _cphd.ChannelParameter_fxBWNoise_set)
    __swig_setmethods__["toaSaved"] = _cphd.ChannelParameter_toaSaved_set
    __swig_getmethods__["toaSaved"] = _cphd.ChannelParameter_toaSaved_get
    if _newclass:
        toaSaved = _swig_property(_cphd.ChannelParameter_toaSaved_get, _cphd.ChannelParameter_toaSaved_set)
    __swig_setmethods__["dwellTimes"] = _cphd.ChannelParameter_dwellTimes_set
    __swig_getmethods__["dwellTimes"] = _cphd.ChannelParameter_dwellTimes_get
    if _newclass:
        dwellTimes = _swig_property(_cphd.ChannelParameter_dwellTimes_get, _cphd.ChannelParameter_dwellTimes_set)
    __swig_setmethods__["imageArea"] = _cphd.ChannelParameter_imageArea_set
    __swig_getmethods__["imageArea"] = _cphd.ChannelParameter_imageArea_get
    if _newclass:
        imageArea = _swig_property(_cphd.ChannelParameter_imageArea_get, _cphd.ChannelParameter_imageArea_set)
    __swig_setmethods__["toaExtended"] = _cphd.ChannelParameter_toaExtended_set
    __swig_getmethods__["toaExtended"] = _cphd.ChannelParameter_toaExtended_get
    if _newclass:
        toaExtended = _swig_property(_cphd.ChannelParameter_toaExtended_get, _cphd.ChannelParameter_toaExtended_set)
    __swig_setmethods__["antenna"] = _cphd.ChannelParameter_antenna_set
    __swig_getmethods__["antenna"] = _cphd.ChannelParameter_antenna_get
    if _newclass:
        antenna = _swig_property(_cphd.ChannelParameter_antenna_get, _cphd.ChannelParameter_antenna_set)
    __swig_setmethods__["txRcv"] = _cphd.ChannelParameter_txRcv_set
    __swig_getmethods__["txRcv"] = _cphd.ChannelParameter_txRcv_get
    if _newclass:
        txRcv = _swig_property(_cphd.ChannelParameter_txRcv_get, _cphd.ChannelParameter_txRcv_set)
    __swig_setmethods__["tgtRefLevel"] = _cphd.ChannelParameter_tgtRefLevel_set
    __swig_getmethods__["tgtRefLevel"] = _cphd.ChannelParameter_tgtRefLevel_get
    if _newclass:
        tgtRefLevel = _swig_property(_cphd.ChannelParameter_tgtRefLevel_get, _cphd.ChannelParameter_tgtRefLevel_set)
    __swig_setmethods__["noiseLevel"] = _cphd.ChannelParameter_noiseLevel_set
    __swig_getmethods__["noiseLevel"] = _cphd.ChannelParameter_noiseLevel_get
    if _newclass:
        noiseLevel = _swig_property(_cphd.ChannelParameter_noiseLevel_get, _cphd.ChannelParameter_noiseLevel_set)
    __swig_destroy__ = _cphd.delete_ChannelParameter
    __del__ = lambda self: None
ChannelParameter_swigregister = _cphd.ChannelParameter_swigregister
ChannelParameter_swigregister(ChannelParameter)

class Channel(_object):
    """Proxy of C++ cphd::Channel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channel, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Channel self) -> Channel"""
        this = _cphd.new_Channel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Channel') -> "bool":
        """__eq__(Channel self, Channel other) -> bool"""
        return _cphd.Channel___eq__(self, other)


    def __ne__(self, other: 'Channel') -> "bool":
        """__ne__(Channel self, Channel other) -> bool"""
        return _cphd.Channel___ne__(self, other)

    __swig_setmethods__["refChId"] = _cphd.Channel_refChId_set
    __swig_getmethods__["refChId"] = _cphd.Channel_refChId_get
    if _newclass:
        refChId = _swig_property(_cphd.Channel_refChId_get, _cphd.Channel_refChId_set)
    __swig_setmethods__["fxFixedCphd"] = _cphd.Channel_fxFixedCphd_set
    __swig_getmethods__["fxFixedCphd"] = _cphd.Channel_fxFixedCphd_get
    if _newclass:
        fxFixedCphd = _swig_property(_cphd.Channel_fxFixedCphd_get, _cphd.Channel_fxFixedCphd_set)
    __swig_setmethods__["toaFixedCphd"] = _cphd.Channel_toaFixedCphd_set
    __swig_getmethods__["toaFixedCphd"] = _cphd.Channel_toaFixedCphd_get
    if _newclass:
        toaFixedCphd = _swig_property(_cphd.Channel_toaFixedCphd_get, _cphd.Channel_toaFixedCphd_set)
    __swig_setmethods__["srpFixedCphd"] = _cphd.Channel_srpFixedCphd_set
    __swig_getmethods__["srpFixedCphd"] = _cphd.Channel_srpFixedCphd_get
    if _newclass:
        srpFixedCphd = _swig_property(_cphd.Channel_srpFixedCphd_get, _cphd.Channel_srpFixedCphd_set)
    __swig_setmethods__["parameters"] = _cphd.Channel_parameters_set
    __swig_getmethods__["parameters"] = _cphd.Channel_parameters_get
    if _newclass:
        parameters = _swig_property(_cphd.Channel_parameters_get, _cphd.Channel_parameters_set)
    __swig_setmethods__["addedParameters"] = _cphd.Channel_addedParameters_set
    __swig_getmethods__["addedParameters"] = _cphd.Channel_addedParameters_get
    if _newclass:
        addedParameters = _swig_property(_cphd.Channel_addedParameters_get, _cphd.Channel_addedParameters_set)
    __swig_destroy__ = _cphd.delete_Channel
    __del__ = lambda self: None
Channel_swigregister = _cphd.Channel_swigregister
Channel_swigregister(Channel)

class Data(_object):
    """Proxy of C++ cphd::Data class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Data self) -> Data"""
        this = _cphd.new_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_Data
    __del__ = lambda self: None

    def __eq__(self, other: 'Data') -> "bool":
        """__eq__(Data self, Data other) -> bool"""
        return _cphd.Data___eq__(self, other)


    def __ne__(self, other: 'Data') -> "bool":
        """__ne__(Data self, Data other) -> bool"""
        return _cphd.Data___ne__(self, other)


    def getNumVectors(self, channel: 'size_t') -> "size_t":
        """getNumVectors(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getNumVectors(self, channel)


    def getNumSamples(self, channel: 'size_t') -> "size_t":
        """getNumSamples(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getNumSamples(self, channel)


    def getCompressedSignalSize(self, channel: 'size_t') -> "size_t":
        """getCompressedSignalSize(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getCompressedSignalSize(self, channel)


    def getSignalSize(self, channel: 'size_t') -> "size_t":
        """getSignalSize(Data self, size_t channel) -> size_t"""
        return _cphd.Data_getSignalSize(self, channel)


    def getNumChannels(self) -> "size_t":
        """getNumChannels(Data self) -> size_t"""
        return _cphd.Data_getNumChannels(self)


    def getNumBytesPVPSet(self) -> "size_t":
        """getNumBytesPVPSet(Data self) -> size_t"""
        return _cphd.Data_getNumBytesPVPSet(self)


    def getCompressionID(self) -> "std::string":
        """getCompressionID(Data self) -> std::string"""
        return _cphd.Data_getCompressionID(self)


    def getSampleType(self) -> "cphd::SignalArrayFormat":
        """getSampleType(Data self) -> SignalArrayFormat"""
        return _cphd.Data_getSampleType(self)


    def getNumBytesPerSample(self) -> "size_t":
        """getNumBytesPerSample(Data self) -> size_t"""
        return _cphd.Data_getNumBytesPerSample(self)


    def getNumSupportArrays(self) -> "size_t":
        """getNumSupportArrays(Data self) -> size_t"""
        return _cphd.Data_getNumSupportArrays(self)


    def getSupportArrayById(self, id: 'std::string const &') -> "cphd::Data::SupportArray":
        """getSupportArrayById(Data self, std::string const & id) -> cphd::Data::SupportArray"""
        return _cphd.Data_getSupportArrayById(self, id)


    def getElementSize(self, id: 'std::string const &') -> "size_t":
        """getElementSize(Data self, std::string const & id) -> size_t"""
        return _cphd.Data_getElementSize(self, id)


    def getAllSupportSize(self) -> "size_t":
        """getAllSupportSize(Data self) -> size_t"""
        return _cphd.Data_getAllSupportSize(self)


    def setSupportArray(self, id: 'std::string const &', numRows: 'size_t', numCols: 'size_t', numBytes: 'size_t', offset: 'sys::Off_T') -> "void":
        """setSupportArray(Data self, std::string const & id, size_t numRows, size_t numCols, size_t numBytes, sys::Off_T offset)"""
        return _cphd.Data_setSupportArray(self, id, numRows, numCols, numBytes, offset)


    def isCompressed(self) -> "bool":
        """isCompressed(Data self) -> bool"""
        return _cphd.Data_isCompressed(self)

    __swig_setmethods__["signalArrayFormat"] = _cphd.Data_signalArrayFormat_set
    __swig_getmethods__["signalArrayFormat"] = _cphd.Data_signalArrayFormat_get
    if _newclass:
        signalArrayFormat = _swig_property(_cphd.Data_signalArrayFormat_get, _cphd.Data_signalArrayFormat_set)
    __swig_setmethods__["numBytesPVP"] = _cphd.Data_numBytesPVP_set
    __swig_getmethods__["numBytesPVP"] = _cphd.Data_numBytesPVP_get
    if _newclass:
        numBytesPVP = _swig_property(_cphd.Data_numBytesPVP_get, _cphd.Data_numBytesPVP_set)
    __swig_setmethods__["channels"] = _cphd.Data_channels_set
    __swig_getmethods__["channels"] = _cphd.Data_channels_get
    if _newclass:
        channels = _swig_property(_cphd.Data_channels_get, _cphd.Data_channels_set)
    __swig_setmethods__["signalCompressionID"] = _cphd.Data_signalCompressionID_set
    __swig_getmethods__["signalCompressionID"] = _cphd.Data_signalCompressionID_get
    if _newclass:
        signalCompressionID = _swig_property(_cphd.Data_signalCompressionID_get, _cphd.Data_signalCompressionID_set)
    __swig_setmethods__["supportArrayMap"] = _cphd.Data_supportArrayMap_set
    __swig_getmethods__["supportArrayMap"] = _cphd.Data_supportArrayMap_get
    if _newclass:
        supportArrayMap = _swig_property(_cphd.Data_supportArrayMap_get, _cphd.Data_supportArrayMap_set)
Data_swigregister = _cphd.Data_swigregister
Data_swigregister(Data)

class DwellTime(_object):
    """Proxy of C++ cphd::DwellTime class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DwellTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DwellTime, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::DwellTime self) -> DwellTime"""
        this = _cphd.new_DwellTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'DwellTime') -> "bool":
        """__eq__(DwellTime self, DwellTime other) -> bool"""
        return _cphd.DwellTime___eq__(self, other)


    def __ne__(self, other: 'DwellTime') -> "bool":
        """__ne__(DwellTime self, DwellTime other) -> bool"""
        return _cphd.DwellTime___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.DwellTime_identifier_set
    __swig_getmethods__["identifier"] = _cphd.DwellTime_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.DwellTime_identifier_get, _cphd.DwellTime_identifier_set)
    __swig_setmethods__["dwellTimePoly"] = _cphd.DwellTime_dwellTimePoly_set
    __swig_getmethods__["dwellTimePoly"] = _cphd.DwellTime_dwellTimePoly_get
    if _newclass:
        dwellTimePoly = _swig_property(_cphd.DwellTime_dwellTimePoly_get, _cphd.DwellTime_dwellTimePoly_set)
    __swig_destroy__ = _cphd.delete_DwellTime
    __del__ = lambda self: None
DwellTime_swigregister = _cphd.DwellTime_swigregister
DwellTime_swigregister(DwellTime)

class COD(_object):
    """Proxy of C++ cphd::COD class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COD, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::COD self) -> COD"""
        this = _cphd.new_COD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'COD') -> "bool":
        """__eq__(COD self, COD other) -> bool"""
        return _cphd.COD___eq__(self, other)


    def __ne__(self, other: 'COD') -> "bool":
        """__ne__(COD self, COD other) -> bool"""
        return _cphd.COD___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.COD_identifier_set
    __swig_getmethods__["identifier"] = _cphd.COD_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.COD_identifier_get, _cphd.COD_identifier_set)
    __swig_setmethods__["codTimePoly"] = _cphd.COD_codTimePoly_set
    __swig_getmethods__["codTimePoly"] = _cphd.COD_codTimePoly_get
    if _newclass:
        codTimePoly = _swig_property(_cphd.COD_codTimePoly_get, _cphd.COD_codTimePoly_set)
    __swig_destroy__ = _cphd.delete_COD
    __del__ = lambda self: None
COD_swigregister = _cphd.COD_swigregister
COD_swigregister(COD)

class Dwell(_object):
    """Proxy of C++ cphd::Dwell class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dwell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dwell, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Dwell self) -> Dwell"""
        this = _cphd.new_Dwell()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Dwell') -> "bool":
        """__eq__(Dwell self, Dwell other) -> bool"""
        return _cphd.Dwell___eq__(self, other)


    def __ne__(self, other: 'Dwell') -> "bool":
        """__ne__(Dwell self, Dwell other) -> bool"""
        return _cphd.Dwell___ne__(self, other)

    __swig_setmethods__["cod"] = _cphd.Dwell_cod_set
    __swig_getmethods__["cod"] = _cphd.Dwell_cod_get
    if _newclass:
        cod = _swig_property(_cphd.Dwell_cod_get, _cphd.Dwell_cod_set)
    __swig_setmethods__["dtime"] = _cphd.Dwell_dtime_set
    __swig_getmethods__["dtime"] = _cphd.Dwell_dtime_get
    if _newclass:
        dtime = _swig_property(_cphd.Dwell_dtime_get, _cphd.Dwell_dtime_set)
    __swig_destroy__ = _cphd.delete_Dwell
    __del__ = lambda self: None
Dwell_swigregister = _cphd.Dwell_swigregister
Dwell_swigregister(Dwell)

class ParameterType(_object):
    """Proxy of C++ cphd::ParameterType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::ParameterType self) -> ParameterType"""
        this = _cphd.new_ParameterType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'ParameterType') -> "bool":
        """__eq__(ParameterType self, ParameterType other) -> bool"""
        return _cphd.ParameterType___eq__(self, other)


    def __ne__(self, other: 'ParameterType') -> "bool":
        """__ne__(ParameterType self, ParameterType other) -> bool"""
        return _cphd.ParameterType___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.ParameterType_identifier_set
    __swig_getmethods__["identifier"] = _cphd.ParameterType_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.ParameterType_identifier_get, _cphd.ParameterType_identifier_set)
    __swig_setmethods__["freqCenter"] = _cphd.ParameterType_freqCenter_set
    __swig_getmethods__["freqCenter"] = _cphd.ParameterType_freqCenter_get
    if _newclass:
        freqCenter = _swig_property(_cphd.ParameterType_freqCenter_get, _cphd.ParameterType_freqCenter_set)
    __swig_setmethods__["lfmRate"] = _cphd.ParameterType_lfmRate_set
    __swig_getmethods__["lfmRate"] = _cphd.ParameterType_lfmRate_get
    if _newclass:
        lfmRate = _swig_property(_cphd.ParameterType_lfmRate_get, _cphd.ParameterType_lfmRate_set)
    __swig_setmethods__["polarization"] = _cphd.ParameterType_polarization_set
    __swig_getmethods__["polarization"] = _cphd.ParameterType_polarization_get
    if _newclass:
        polarization = _swig_property(_cphd.ParameterType_polarization_get, _cphd.ParameterType_polarization_set)
    __swig_destroy__ = _cphd.delete_ParameterType
    __del__ = lambda self: None
ParameterType_swigregister = _cphd.ParameterType_swigregister
ParameterType_swigregister(ParameterType)

class TxWFParameters(ParameterType):
    """Proxy of C++ cphd::TxWFParameters class."""

    __swig_setmethods__ = {}
    for _s in [ParameterType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxWFParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ParameterType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TxWFParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TxWFParameters self) -> TxWFParameters"""
        this = _cphd.new_TxWFParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TxWFParameters') -> "bool":
        """__eq__(TxWFParameters self, TxWFParameters other) -> bool"""
        return _cphd.TxWFParameters___eq__(self, other)


    def __ne__(self, other: 'TxWFParameters') -> "bool":
        """__ne__(TxWFParameters self, TxWFParameters other) -> bool"""
        return _cphd.TxWFParameters___ne__(self, other)

    __swig_setmethods__["pulseLength"] = _cphd.TxWFParameters_pulseLength_set
    __swig_getmethods__["pulseLength"] = _cphd.TxWFParameters_pulseLength_get
    if _newclass:
        pulseLength = _swig_property(_cphd.TxWFParameters_pulseLength_get, _cphd.TxWFParameters_pulseLength_set)
    __swig_setmethods__["rfBandwidth"] = _cphd.TxWFParameters_rfBandwidth_set
    __swig_getmethods__["rfBandwidth"] = _cphd.TxWFParameters_rfBandwidth_get
    if _newclass:
        rfBandwidth = _swig_property(_cphd.TxWFParameters_rfBandwidth_get, _cphd.TxWFParameters_rfBandwidth_set)
    __swig_setmethods__["power"] = _cphd.TxWFParameters_power_set
    __swig_getmethods__["power"] = _cphd.TxWFParameters_power_get
    if _newclass:
        power = _swig_property(_cphd.TxWFParameters_power_get, _cphd.TxWFParameters_power_set)
    __swig_destroy__ = _cphd.delete_TxWFParameters
    __del__ = lambda self: None
TxWFParameters_swigregister = _cphd.TxWFParameters_swigregister
TxWFParameters_swigregister(TxWFParameters)

class RcvParameters(ParameterType):
    """Proxy of C++ cphd::RcvParameters class."""

    __swig_setmethods__ = {}
    for _s in [ParameterType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcvParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ParameterType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RcvParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::RcvParameters self) -> RcvParameters"""
        this = _cphd.new_RcvParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'RcvParameters') -> "bool":
        """__eq__(RcvParameters self, RcvParameters other) -> bool"""
        return _cphd.RcvParameters___eq__(self, other)


    def __ne__(self, other: 'RcvParameters') -> "bool":
        """__ne__(RcvParameters self, RcvParameters other) -> bool"""
        return _cphd.RcvParameters___ne__(self, other)

    __swig_setmethods__["windowLength"] = _cphd.RcvParameters_windowLength_set
    __swig_getmethods__["windowLength"] = _cphd.RcvParameters_windowLength_get
    if _newclass:
        windowLength = _swig_property(_cphd.RcvParameters_windowLength_get, _cphd.RcvParameters_windowLength_set)
    __swig_setmethods__["sampleRate"] = _cphd.RcvParameters_sampleRate_set
    __swig_getmethods__["sampleRate"] = _cphd.RcvParameters_sampleRate_get
    if _newclass:
        sampleRate = _swig_property(_cphd.RcvParameters_sampleRate_get, _cphd.RcvParameters_sampleRate_set)
    __swig_setmethods__["ifFilterBW"] = _cphd.RcvParameters_ifFilterBW_set
    __swig_getmethods__["ifFilterBW"] = _cphd.RcvParameters_ifFilterBW_get
    if _newclass:
        ifFilterBW = _swig_property(_cphd.RcvParameters_ifFilterBW_get, _cphd.RcvParameters_ifFilterBW_set)
    __swig_setmethods__["pathGain"] = _cphd.RcvParameters_pathGain_set
    __swig_getmethods__["pathGain"] = _cphd.RcvParameters_pathGain_get
    if _newclass:
        pathGain = _swig_property(_cphd.RcvParameters_pathGain_get, _cphd.RcvParameters_pathGain_set)
    __swig_destroy__ = _cphd.delete_RcvParameters
    __del__ = lambda self: None
RcvParameters_swigregister = _cphd.RcvParameters_swigregister
RcvParameters_swigregister(RcvParameters)

class TxRcv(_object):
    """Proxy of C++ cphd::TxRcv class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxRcv, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::TxRcv self) -> TxRcv"""
        this = _cphd.new_TxRcv()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'TxRcv') -> "bool":
        """__eq__(TxRcv self, TxRcv other) -> bool"""
        return _cphd.TxRcv___eq__(self, other)


    def __ne__(self, other: 'TxRcv') -> "bool":
        """__ne__(TxRcv self, TxRcv other) -> bool"""
        return _cphd.TxRcv___ne__(self, other)

    __swig_setmethods__["txWFParameters"] = _cphd.TxRcv_txWFParameters_set
    __swig_getmethods__["txWFParameters"] = _cphd.TxRcv_txWFParameters_get
    if _newclass:
        txWFParameters = _swig_property(_cphd.TxRcv_txWFParameters_get, _cphd.TxRcv_txWFParameters_set)
    __swig_setmethods__["rcvParameters"] = _cphd.TxRcv_rcvParameters_set
    __swig_getmethods__["rcvParameters"] = _cphd.TxRcv_rcvParameters_get
    if _newclass:
        rcvParameters = _swig_property(_cphd.TxRcv_rcvParameters_get, _cphd.TxRcv_rcvParameters_set)
    __swig_destroy__ = _cphd.delete_TxRcv
    __del__ = lambda self: None
TxRcv_swigregister = _cphd.TxRcv_swigregister
TxRcv_swigregister(TxRcv)

class PVPType(_object):
    """Proxy of C++ cphd::PVPType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVPType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PVPType, name)
    __repr__ = _swig_repr
    WORD_BYTE_SIZE = _cphd.PVPType_WORD_BYTE_SIZE

    def __init__(self):
        """__init__(cphd::PVPType self) -> PVPType"""
        this = _cphd.new_PVPType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'PVPType') -> "bool":
        """__eq__(PVPType self, PVPType other) -> bool"""
        return _cphd.PVPType___eq__(self, other)


    def __ne__(self, other: 'PVPType') -> "bool":
        """__ne__(PVPType self, PVPType other) -> bool"""
        return _cphd.PVPType___ne__(self, other)


    def setOffset(self, offset: 'size_t') -> "void":
        """setOffset(PVPType self, size_t offset)"""
        return _cphd.PVPType_setOffset(self, offset)


    def setSize(self, size: 'size_t') -> "void":
        """setSize(PVPType self, size_t size)"""
        return _cphd.PVPType_setSize(self, size)


    def setFormat(self, format: 'std::string const &') -> "void":
        """setFormat(PVPType self, std::string const & format)"""
        return _cphd.PVPType_setFormat(self, format)


    def getSize(self) -> "size_t":
        """getSize(PVPType self) -> size_t"""
        return _cphd.PVPType_getSize(self)


    def getByteSize(self) -> "size_t":
        """getByteSize(PVPType self) -> size_t"""
        return _cphd.PVPType_getByteSize(self)


    def getOffset(self) -> "size_t":
        """getOffset(PVPType self) -> size_t"""
        return _cphd.PVPType_getOffset(self)


    def getByteOffset(self) -> "size_t":
        """getByteOffset(PVPType self) -> size_t"""
        return _cphd.PVPType_getByteOffset(self)


    def getFormat(self) -> "std::string":
        """getFormat(PVPType self) -> std::string"""
        return _cphd.PVPType_getFormat(self)

    __swig_destroy__ = _cphd.delete_PVPType
    __del__ = lambda self: None
PVPType_swigregister = _cphd.PVPType_swigregister
PVPType_swigregister(PVPType)

class APVPType(PVPType):
    """Proxy of C++ cphd::APVPType class."""

    __swig_setmethods__ = {}
    for _s in [PVPType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, APVPType, name, value)
    __swig_getmethods__ = {}
    for _s in [PVPType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, APVPType, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::APVPType self) -> APVPType"""
        this = _cphd.new_APVPType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'APVPType') -> "bool":
        """__eq__(APVPType self, APVPType other) -> bool"""
        return _cphd.APVPType___eq__(self, other)


    def __ne__(self, other: 'APVPType') -> "bool":
        """__ne__(APVPType self, APVPType other) -> bool"""
        return _cphd.APVPType___ne__(self, other)


    def setData(self, size: 'size_t', offset: 'size_t', format: 'std::string const &', name: 'std::string const &') -> "void":
        """setData(APVPType self, size_t size, size_t offset, std::string const & format, std::string const & name)"""
        return _cphd.APVPType_setData(self, size, offset, format, name)


    def getName(self) -> "std::string":
        """getName(APVPType self) -> std::string"""
        return _cphd.APVPType_getName(self)

    __swig_destroy__ = _cphd.delete_APVPType
    __del__ = lambda self: None
APVPType_swigregister = _cphd.APVPType_swigregister
APVPType_swigregister(APVPType)

class Pvp(_object):
    """Proxy of C++ cphd::Pvp class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pvp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pvp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["txTime"] = _cphd.Pvp_txTime_set
    __swig_getmethods__["txTime"] = _cphd.Pvp_txTime_get
    if _newclass:
        txTime = _swig_property(_cphd.Pvp_txTime_get, _cphd.Pvp_txTime_set)
    __swig_setmethods__["txPos"] = _cphd.Pvp_txPos_set
    __swig_getmethods__["txPos"] = _cphd.Pvp_txPos_get
    if _newclass:
        txPos = _swig_property(_cphd.Pvp_txPos_get, _cphd.Pvp_txPos_set)
    __swig_setmethods__["txVel"] = _cphd.Pvp_txVel_set
    __swig_getmethods__["txVel"] = _cphd.Pvp_txVel_get
    if _newclass:
        txVel = _swig_property(_cphd.Pvp_txVel_get, _cphd.Pvp_txVel_set)
    __swig_setmethods__["rcvTime"] = _cphd.Pvp_rcvTime_set
    __swig_getmethods__["rcvTime"] = _cphd.Pvp_rcvTime_get
    if _newclass:
        rcvTime = _swig_property(_cphd.Pvp_rcvTime_get, _cphd.Pvp_rcvTime_set)
    __swig_setmethods__["rcvPos"] = _cphd.Pvp_rcvPos_set
    __swig_getmethods__["rcvPos"] = _cphd.Pvp_rcvPos_get
    if _newclass:
        rcvPos = _swig_property(_cphd.Pvp_rcvPos_get, _cphd.Pvp_rcvPos_set)
    __swig_setmethods__["rcvVel"] = _cphd.Pvp_rcvVel_set
    __swig_getmethods__["rcvVel"] = _cphd.Pvp_rcvVel_get
    if _newclass:
        rcvVel = _swig_property(_cphd.Pvp_rcvVel_get, _cphd.Pvp_rcvVel_set)
    __swig_setmethods__["srpPos"] = _cphd.Pvp_srpPos_set
    __swig_getmethods__["srpPos"] = _cphd.Pvp_srpPos_get
    if _newclass:
        srpPos = _swig_property(_cphd.Pvp_srpPos_get, _cphd.Pvp_srpPos_set)
    __swig_setmethods__["ampSF"] = _cphd.Pvp_ampSF_set
    __swig_getmethods__["ampSF"] = _cphd.Pvp_ampSF_get
    if _newclass:
        ampSF = _swig_property(_cphd.Pvp_ampSF_get, _cphd.Pvp_ampSF_set)
    __swig_setmethods__["aFDOP"] = _cphd.Pvp_aFDOP_set
    __swig_getmethods__["aFDOP"] = _cphd.Pvp_aFDOP_get
    if _newclass:
        aFDOP = _swig_property(_cphd.Pvp_aFDOP_get, _cphd.Pvp_aFDOP_set)
    __swig_setmethods__["aFRR1"] = _cphd.Pvp_aFRR1_set
    __swig_getmethods__["aFRR1"] = _cphd.Pvp_aFRR1_get
    if _newclass:
        aFRR1 = _swig_property(_cphd.Pvp_aFRR1_get, _cphd.Pvp_aFRR1_set)
    __swig_setmethods__["aFRR2"] = _cphd.Pvp_aFRR2_set
    __swig_getmethods__["aFRR2"] = _cphd.Pvp_aFRR2_get
    if _newclass:
        aFRR2 = _swig_property(_cphd.Pvp_aFRR2_get, _cphd.Pvp_aFRR2_set)
    __swig_setmethods__["fx1"] = _cphd.Pvp_fx1_set
    __swig_getmethods__["fx1"] = _cphd.Pvp_fx1_get
    if _newclass:
        fx1 = _swig_property(_cphd.Pvp_fx1_get, _cphd.Pvp_fx1_set)
    __swig_setmethods__["fx2"] = _cphd.Pvp_fx2_set
    __swig_getmethods__["fx2"] = _cphd.Pvp_fx2_get
    if _newclass:
        fx2 = _swig_property(_cphd.Pvp_fx2_get, _cphd.Pvp_fx2_set)
    __swig_setmethods__["fxN1"] = _cphd.Pvp_fxN1_set
    __swig_getmethods__["fxN1"] = _cphd.Pvp_fxN1_get
    if _newclass:
        fxN1 = _swig_property(_cphd.Pvp_fxN1_get, _cphd.Pvp_fxN1_set)
    __swig_setmethods__["fxN2"] = _cphd.Pvp_fxN2_set
    __swig_getmethods__["fxN2"] = _cphd.Pvp_fxN2_get
    if _newclass:
        fxN2 = _swig_property(_cphd.Pvp_fxN2_get, _cphd.Pvp_fxN2_set)
    __swig_setmethods__["toa1"] = _cphd.Pvp_toa1_set
    __swig_getmethods__["toa1"] = _cphd.Pvp_toa1_get
    if _newclass:
        toa1 = _swig_property(_cphd.Pvp_toa1_get, _cphd.Pvp_toa1_set)
    __swig_setmethods__["toa2"] = _cphd.Pvp_toa2_set
    __swig_getmethods__["toa2"] = _cphd.Pvp_toa2_get
    if _newclass:
        toa2 = _swig_property(_cphd.Pvp_toa2_get, _cphd.Pvp_toa2_set)
    __swig_setmethods__["toaE1"] = _cphd.Pvp_toaE1_set
    __swig_getmethods__["toaE1"] = _cphd.Pvp_toaE1_get
    if _newclass:
        toaE1 = _swig_property(_cphd.Pvp_toaE1_get, _cphd.Pvp_toaE1_set)
    __swig_setmethods__["toaE2"] = _cphd.Pvp_toaE2_set
    __swig_getmethods__["toaE2"] = _cphd.Pvp_toaE2_get
    if _newclass:
        toaE2 = _swig_property(_cphd.Pvp_toaE2_get, _cphd.Pvp_toaE2_set)
    __swig_setmethods__["tdTropoSRP"] = _cphd.Pvp_tdTropoSRP_set
    __swig_getmethods__["tdTropoSRP"] = _cphd.Pvp_tdTropoSRP_get
    if _newclass:
        tdTropoSRP = _swig_property(_cphd.Pvp_tdTropoSRP_get, _cphd.Pvp_tdTropoSRP_set)
    __swig_setmethods__["tdIonoSRP"] = _cphd.Pvp_tdIonoSRP_set
    __swig_getmethods__["tdIonoSRP"] = _cphd.Pvp_tdIonoSRP_get
    if _newclass:
        tdIonoSRP = _swig_property(_cphd.Pvp_tdIonoSRP_get, _cphd.Pvp_tdIonoSRP_set)
    __swig_setmethods__["sc0"] = _cphd.Pvp_sc0_set
    __swig_getmethods__["sc0"] = _cphd.Pvp_sc0_get
    if _newclass:
        sc0 = _swig_property(_cphd.Pvp_sc0_get, _cphd.Pvp_sc0_set)
    __swig_setmethods__["scss"] = _cphd.Pvp_scss_set
    __swig_getmethods__["scss"] = _cphd.Pvp_scss_get
    if _newclass:
        scss = _swig_property(_cphd.Pvp_scss_get, _cphd.Pvp_scss_set)
    __swig_setmethods__["signal"] = _cphd.Pvp_signal_set
    __swig_getmethods__["signal"] = _cphd.Pvp_signal_get
    if _newclass:
        signal = _swig_property(_cphd.Pvp_signal_get, _cphd.Pvp_signal_set)
    __swig_setmethods__["addedPVP"] = _cphd.Pvp_addedPVP_set
    __swig_getmethods__["addedPVP"] = _cphd.Pvp_addedPVP_get
    if _newclass:
        addedPVP = _swig_property(_cphd.Pvp_addedPVP_get, _cphd.Pvp_addedPVP_set)

    def __init__(self):
        """__init__(cphd::Pvp self) -> Pvp"""
        this = _cphd.new_Pvp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'Pvp') -> "bool":
        """__eq__(Pvp self, Pvp other) -> bool"""
        return _cphd.Pvp___eq__(self, other)


    def __ne__(self, other: 'Pvp') -> "bool":
        """__ne__(Pvp self, Pvp other) -> bool"""
        return _cphd.Pvp___ne__(self, other)


    def getReqSetSize(self) -> "size_t":
        """getReqSetSize(Pvp self) -> size_t"""
        return _cphd.Pvp_getReqSetSize(self)


    def sizeInBytes(self) -> "size_t":
        """sizeInBytes(Pvp self) -> size_t"""
        return _cphd.Pvp_sizeInBytes(self)


    def setOffset(self, offset: 'size_t', param: 'PVPType') -> "void":
        """setOffset(Pvp self, size_t offset, PVPType param)"""
        return _cphd.Pvp_setOffset(self, offset, param)


    def append(self, param: 'PVPType') -> "void":
        """append(Pvp self, PVPType param)"""
        return _cphd.Pvp_append(self, param)


    def setCustomParameter(self, size: 'size_t', offset: 'size_t', format: 'std::string const &', name: 'std::string const &') -> "void":
        """setCustomParameter(Pvp self, size_t size, size_t offset, std::string const & format, std::string const & name)"""
        return _cphd.Pvp_setCustomParameter(self, size, offset, format, name)


    def appendCustomParameter(self, size: 'size_t', format: 'std::string const &', name: 'std::string const &') -> "void":
        """appendCustomParameter(Pvp self, size_t size, std::string const & format, std::string const & name)"""
        return _cphd.Pvp_appendCustomParameter(self, size, format, name)

    __swig_destroy__ = _cphd.delete_Pvp
    __del__ = lambda self: None
Pvp_swigregister = _cphd.Pvp_swigregister
Pvp_swigregister(Pvp)

class AntCoordFrame(_object):
    """Proxy of C++ cphd::AntCoordFrame class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntCoordFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntCoordFrame, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AntCoordFrame self) -> AntCoordFrame"""
        this = _cphd.new_AntCoordFrame()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AntCoordFrame') -> "bool":
        """__eq__(AntCoordFrame self, AntCoordFrame other) -> bool"""
        return _cphd.AntCoordFrame___eq__(self, other)


    def __ne__(self, other: 'AntCoordFrame') -> "bool":
        """__ne__(AntCoordFrame self, AntCoordFrame other) -> bool"""
        return _cphd.AntCoordFrame___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.AntCoordFrame_identifier_set
    __swig_getmethods__["identifier"] = _cphd.AntCoordFrame_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.AntCoordFrame_identifier_get, _cphd.AntCoordFrame_identifier_set)
    __swig_setmethods__["xAxisPoly"] = _cphd.AntCoordFrame_xAxisPoly_set
    __swig_getmethods__["xAxisPoly"] = _cphd.AntCoordFrame_xAxisPoly_get
    if _newclass:
        xAxisPoly = _swig_property(_cphd.AntCoordFrame_xAxisPoly_get, _cphd.AntCoordFrame_xAxisPoly_set)
    __swig_setmethods__["yAxisPoly"] = _cphd.AntCoordFrame_yAxisPoly_set
    __swig_getmethods__["yAxisPoly"] = _cphd.AntCoordFrame_yAxisPoly_get
    if _newclass:
        yAxisPoly = _swig_property(_cphd.AntCoordFrame_yAxisPoly_get, _cphd.AntCoordFrame_yAxisPoly_set)
    __swig_destroy__ = _cphd.delete_AntCoordFrame
    __del__ = lambda self: None
AntCoordFrame_swigregister = _cphd.AntCoordFrame_swigregister
AntCoordFrame_swigregister(AntCoordFrame)

class AntPhaseCenter(_object):
    """Proxy of C++ cphd::AntPhaseCenter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntPhaseCenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntPhaseCenter, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AntPhaseCenter self) -> AntPhaseCenter"""
        this = _cphd.new_AntPhaseCenter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AntPhaseCenter') -> "bool":
        """__eq__(AntPhaseCenter self, AntPhaseCenter other) -> bool"""
        return _cphd.AntPhaseCenter___eq__(self, other)


    def __ne__(self, other: 'AntPhaseCenter') -> "bool":
        """__ne__(AntPhaseCenter self, AntPhaseCenter other) -> bool"""
        return _cphd.AntPhaseCenter___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.AntPhaseCenter_identifier_set
    __swig_getmethods__["identifier"] = _cphd.AntPhaseCenter_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.AntPhaseCenter_identifier_get, _cphd.AntPhaseCenter_identifier_set)
    __swig_setmethods__["acfId"] = _cphd.AntPhaseCenter_acfId_set
    __swig_getmethods__["acfId"] = _cphd.AntPhaseCenter_acfId_get
    if _newclass:
        acfId = _swig_property(_cphd.AntPhaseCenter_acfId_get, _cphd.AntPhaseCenter_acfId_set)
    __swig_setmethods__["apcXYZ"] = _cphd.AntPhaseCenter_apcXYZ_set
    __swig_getmethods__["apcXYZ"] = _cphd.AntPhaseCenter_apcXYZ_get
    if _newclass:
        apcXYZ = _swig_property(_cphd.AntPhaseCenter_apcXYZ_get, _cphd.AntPhaseCenter_apcXYZ_set)
    __swig_destroy__ = _cphd.delete_AntPhaseCenter
    __del__ = lambda self: None
AntPhaseCenter_swigregister = _cphd.AntPhaseCenter_swigregister
AntPhaseCenter_swigregister(AntPhaseCenter)

class AntPattern(_object):
    """Proxy of C++ cphd::AntPattern class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AntPattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AntPattern, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::AntPattern self) -> AntPattern"""
        this = _cphd.new_AntPattern()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'AntPattern') -> "bool":
        """__eq__(AntPattern self, AntPattern other) -> bool"""
        return _cphd.AntPattern___eq__(self, other)


    def __ne__(self, other: 'AntPattern') -> "bool":
        """__ne__(AntPattern self, AntPattern other) -> bool"""
        return _cphd.AntPattern___ne__(self, other)

    __swig_setmethods__["identifier"] = _cphd.AntPattern_identifier_set
    __swig_getmethods__["identifier"] = _cphd.AntPattern_identifier_get
    if _newclass:
        identifier = _swig_property(_cphd.AntPattern_identifier_get, _cphd.AntPattern_identifier_set)
    __swig_setmethods__["freqZero"] = _cphd.AntPattern_freqZero_set
    __swig_getmethods__["freqZero"] = _cphd.AntPattern_freqZero_get
    if _newclass:
        freqZero = _swig_property(_cphd.AntPattern_freqZero_get, _cphd.AntPattern_freqZero_set)
    __swig_setmethods__["gainZero"] = _cphd.AntPattern_gainZero_set
    __swig_getmethods__["gainZero"] = _cphd.AntPattern_gainZero_get
    if _newclass:
        gainZero = _swig_property(_cphd.AntPattern_gainZero_get, _cphd.AntPattern_gainZero_set)
    __swig_setmethods__["ebFreqShift"] = _cphd.AntPattern_ebFreqShift_set
    __swig_getmethods__["ebFreqShift"] = _cphd.AntPattern_ebFreqShift_get
    if _newclass:
        ebFreqShift = _swig_property(_cphd.AntPattern_ebFreqShift_get, _cphd.AntPattern_ebFreqShift_set)
    __swig_setmethods__["mlFreqDilation"] = _cphd.AntPattern_mlFreqDilation_set
    __swig_getmethods__["mlFreqDilation"] = _cphd.AntPattern_mlFreqDilation_get
    if _newclass:
        mlFreqDilation = _swig_property(_cphd.AntPattern_mlFreqDilation_get, _cphd.AntPattern_mlFreqDilation_set)
    __swig_setmethods__["gainBSPoly"] = _cphd.AntPattern_gainBSPoly_set
    __swig_getmethods__["gainBSPoly"] = _cphd.AntPattern_gainBSPoly_get
    if _newclass:
        gainBSPoly = _swig_property(_cphd.AntPattern_gainBSPoly_get, _cphd.AntPattern_gainBSPoly_set)
    __swig_setmethods__["eb"] = _cphd.AntPattern_eb_set
    __swig_getmethods__["eb"] = _cphd.AntPattern_eb_get
    if _newclass:
        eb = _swig_property(_cphd.AntPattern_eb_get, _cphd.AntPattern_eb_set)
    __swig_setmethods__["array"] = _cphd.AntPattern_array_set
    __swig_getmethods__["array"] = _cphd.AntPattern_array_get
    if _newclass:
        array = _swig_property(_cphd.AntPattern_array_get, _cphd.AntPattern_array_set)
    __swig_setmethods__["element"] = _cphd.AntPattern_element_set
    __swig_getmethods__["element"] = _cphd.AntPattern_element_get
    if _newclass:
        element = _swig_property(_cphd.AntPattern_element_get, _cphd.AntPattern_element_set)
    __swig_setmethods__["gainPhaseArray"] = _cphd.AntPattern_gainPhaseArray_set
    __swig_getmethods__["gainPhaseArray"] = _cphd.AntPattern_gainPhaseArray_get
    if _newclass:
        gainPhaseArray = _swig_property(_cphd.AntPattern_gainPhaseArray_get, _cphd.AntPattern_gainPhaseArray_set)
    __swig_destroy__ = _cphd.delete_AntPattern
    __del__ = lambda self: None
AntPattern_swigregister = _cphd.AntPattern_swigregister
AntPattern_swigregister(AntPattern)

class CphdAntenna(_object):
    """Proxy of C++ cphd::Antenna class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Antenna self) -> CphdAntenna"""
        this = _cphd.new_CphdAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other: 'CphdAntenna') -> "bool":
        """__eq__(CphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.CphdAntenna___eq__(self, other)


    def __ne__(self, other: 'CphdAntenna') -> "bool":
        """__ne__(CphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.CphdAntenna___ne__(self, other)

    __swig_setmethods__["antCoordFrame"] = _cphd.CphdAntenna_antCoordFrame_set
    __swig_getmethods__["antCoordFrame"] = _cphd.CphdAntenna_antCoordFrame_get
    if _newclass:
        antCoordFrame = _swig_property(_cphd.CphdAntenna_antCoordFrame_get, _cphd.CphdAntenna_antCoordFrame_set)
    __swig_setmethods__["antPhaseCenter"] = _cphd.CphdAntenna_antPhaseCenter_set
    __swig_getmethods__["antPhaseCenter"] = _cphd.CphdAntenna_antPhaseCenter_get
    if _newclass:
        antPhaseCenter = _swig_property(_cphd.CphdAntenna_antPhaseCenter_get, _cphd.CphdAntenna_antPhaseCenter_set)
    __swig_setmethods__["antPattern"] = _cphd.CphdAntenna_antPattern_set
    __swig_getmethods__["antPattern"] = _cphd.CphdAntenna_antPattern_get
    if _newclass:
        antPattern = _swig_property(_cphd.CphdAntenna_antPattern_get, _cphd.CphdAntenna_antPattern_set)
    __swig_destroy__ = _cphd.delete_CphdAntenna
    __del__ = lambda self: None
CphdAntenna_swigregister = _cphd.CphdAntenna_swigregister
CphdAntenna_swigregister(CphdAntenna)

class Metadata(MetadataBase):
    """Proxy of C++ cphd::Metadata class."""

    __swig_setmethods__ = {}
    for _s in [MetadataBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(cphd::Metadata self) -> Metadata"""
        this = _cphd.new_Metadata()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumChannels(self) -> "size_t":
        """getNumChannels(Metadata self) -> size_t"""
        return _cphd.Metadata_getNumChannels(self)


    def getNumVectors(self, channel: 'size_t') -> "size_t":
        """getNumVectors(Metadata self, size_t channel) -> size_t"""
        return _cphd.Metadata_getNumVectors(self, channel)


    def getNumSamples(self, channel: 'size_t') -> "size_t":
        """getNumSamples(Metadata self, size_t channel) -> size_t"""
        return _cphd.Metadata_getNumSamples(self, channel)


    def getNumBytesPerSample(self) -> "size_t":
        """getNumBytesPerSample(Metadata self) -> size_t"""
        return _cphd.Metadata_getNumBytesPerSample(self)


    def getCompressedSignalSize(self, channel: 'size_t') -> "size_t":
        """getCompressedSignalSize(Metadata self, size_t channel) -> size_t"""
        return _cphd.Metadata_getCompressedSignalSize(self, channel)


    def isCompressed(self) -> "bool":
        """isCompressed(Metadata self) -> bool"""
        return _cphd.Metadata_isCompressed(self)


    def getDomainType(self) -> "cphd::DomainType":
        """getDomainType(Metadata self) -> DomainType"""
        return _cphd.Metadata_getDomainType(self)


    def getVersion(self) -> "std::string":
        """getVersion(Metadata self) -> std::string"""
        return _cphd.Metadata_getVersion(self)


    def setVersion(self, version: 'std::string const &') -> "void":
        """setVersion(Metadata self, std::string const & version)"""
        return _cphd.Metadata_setVersion(self, version)

    __swig_setmethods__["collectionID"] = _cphd.Metadata_collectionID_set
    __swig_getmethods__["collectionID"] = _cphd.Metadata_collectionID_get
    if _newclass:
        collectionID = _swig_property(_cphd.Metadata_collectionID_get, _cphd.Metadata_collectionID_set)
    __swig_setmethods__["_global"] = _cphd.Metadata__global_set
    __swig_getmethods__["_global"] = _cphd.Metadata__global_get
    if _newclass:
        _global = _swig_property(_cphd.Metadata__global_get, _cphd.Metadata__global_set)
    __swig_setmethods__["sceneCoordinates"] = _cphd.Metadata_sceneCoordinates_set
    __swig_getmethods__["sceneCoordinates"] = _cphd.Metadata_sceneCoordinates_get
    if _newclass:
        sceneCoordinates = _swig_property(_cphd.Metadata_sceneCoordinates_get, _cphd.Metadata_sceneCoordinates_set)
    __swig_setmethods__["data"] = _cphd.Metadata_data_set
    __swig_getmethods__["data"] = _cphd.Metadata_data_get
    if _newclass:
        data = _swig_property(_cphd.Metadata_data_get, _cphd.Metadata_data_set)
    __swig_setmethods__["channel"] = _cphd.Metadata_channel_set
    __swig_getmethods__["channel"] = _cphd.Metadata_channel_get
    if _newclass:
        channel = _swig_property(_cphd.Metadata_channel_get, _cphd.Metadata_channel_set)
    __swig_setmethods__["pvp"] = _cphd.Metadata_pvp_set
    __swig_getmethods__["pvp"] = _cphd.Metadata_pvp_get
    if _newclass:
        pvp = _swig_property(_cphd.Metadata_pvp_get, _cphd.Metadata_pvp_set)
    __swig_setmethods__["dwell"] = _cphd.Metadata_dwell_set
    __swig_getmethods__["dwell"] = _cphd.Metadata_dwell_get
    if _newclass:
        dwell = _swig_property(_cphd.Metadata_dwell_get, _cphd.Metadata_dwell_set)
    __swig_setmethods__["referenceGeometry"] = _cphd.Metadata_referenceGeometry_set
    __swig_getmethods__["referenceGeometry"] = _cphd.Metadata_referenceGeometry_get
    if _newclass:
        referenceGeometry = _swig_property(_cphd.Metadata_referenceGeometry_get, _cphd.Metadata_referenceGeometry_set)
    __swig_setmethods__["supportArray"] = _cphd.Metadata_supportArray_set
    __swig_getmethods__["supportArray"] = _cphd.Metadata_supportArray_get
    if _newclass:
        supportArray = _swig_property(_cphd.Metadata_supportArray_get, _cphd.Metadata_supportArray_set)
    __swig_setmethods__["antenna"] = _cphd.Metadata_antenna_set
    __swig_getmethods__["antenna"] = _cphd.Metadata_antenna_get
    if _newclass:
        antenna = _swig_property(_cphd.Metadata_antenna_get, _cphd.Metadata_antenna_set)
    __swig_setmethods__["txRcv"] = _cphd.Metadata_txRcv_set
    __swig_getmethods__["txRcv"] = _cphd.Metadata_txRcv_get
    if _newclass:
        txRcv = _swig_property(_cphd.Metadata_txRcv_get, _cphd.Metadata_txRcv_set)
    __swig_setmethods__["errorParameters"] = _cphd.Metadata_errorParameters_set
    __swig_getmethods__["errorParameters"] = _cphd.Metadata_errorParameters_get
    if _newclass:
        errorParameters = _swig_property(_cphd.Metadata_errorParameters_get, _cphd.Metadata_errorParameters_set)
    __swig_setmethods__["productInfo"] = _cphd.Metadata_productInfo_set
    __swig_getmethods__["productInfo"] = _cphd.Metadata_productInfo_get
    if _newclass:
        productInfo = _swig_property(_cphd.Metadata_productInfo_get, _cphd.Metadata_productInfo_set)
    __swig_setmethods__["geoInfo"] = _cphd.Metadata_geoInfo_set
    __swig_getmethods__["geoInfo"] = _cphd.Metadata_geoInfo_get
    if _newclass:
        geoInfo = _swig_property(_cphd.Metadata_geoInfo_get, _cphd.Metadata_geoInfo_set)
    __swig_setmethods__["matchInfo"] = _cphd.Metadata_matchInfo_set
    __swig_getmethods__["matchInfo"] = _cphd.Metadata_matchInfo_get
    if _newclass:
        matchInfo = _swig_property(_cphd.Metadata_matchInfo_get, _cphd.Metadata_matchInfo_set)

    def __eq__(self, other: 'Metadata') -> "bool":
        """__eq__(Metadata self, Metadata other) -> bool"""
        return _cphd.Metadata___eq__(self, other)


    def __ne__(self, other: 'Metadata') -> "bool":
        """__ne__(Metadata self, Metadata other) -> bool"""
        return _cphd.Metadata___ne__(self, other)


    def __str__(self) -> "std::string":
        """__str__(Metadata self) -> std::string"""
        return _cphd.Metadata___str__(self)

    __swig_destroy__ = _cphd.delete_Metadata
    __del__ = lambda self: None
Metadata_swigregister = _cphd.Metadata_swigregister
Metadata_swigregister(Metadata)


def __lshift__(*args) -> "std::ostream &":
    """
    __lshift__(std::ostream & os, Global d) -> std::ostream
    __lshift__(std::ostream & os, Timeline d) -> std::ostream
    __lshift__(std::ostream & os, FxBand d) -> std::ostream
    __lshift__(std::ostream & os, TOASwath d) -> std::ostream
    __lshift__(std::ostream & os, TropoParameters d) -> std::ostream
    __lshift__(std::ostream & os, IonoParameters d) -> std::ostream
    __lshift__(std::ostream & os, SceneCoordinates d) -> std::ostream
    __lshift__(std::ostream & os, IARP d) -> std::ostream
    __lshift__(std::ostream & os, ReferenceSurface d) -> std::ostream
    __lshift__(std::ostream & os, Planar d) -> std::ostream
    __lshift__(std::ostream & os, HAE d) -> std::ostream
    __lshift__(std::ostream & os, AreaType d) -> std::ostream
    __lshift__(std::ostream & os, ImageGrid d) -> std::ostream
    __lshift__(std::ostream & os, LineSample d) -> std::ostream
    __lshift__(std::ostream & os, ImageAreaXExtent d) -> std::ostream
    __lshift__(std::ostream & os, ImageAreaYExtent d) -> std::ostream
    __lshift__(std::ostream & os, Segment d) -> std::ostream
    __lshift__(std::ostream & os, SRP s) -> std::ostream
    __lshift__(std::ostream & os, ImagingType i) -> std::ostream
    __lshift__(std::ostream & os, Monostatic m) -> std::ostream
    __lshift__(std::ostream & os, cphd::Bistatic::PlatformParams const & p) -> std::ostream
    __lshift__(std::ostream & os, Bistatic b) -> std::ostream
    __lshift__(std::ostream & os, ReferenceGeometry r) -> std::ostream
    __lshift__(std::ostream & os, SupportArrayParameter s) -> std::ostream
    __lshift__(std::ostream & os, AdditionalSupportArray a) -> std::ostream
    __lshift__(std::ostream & os, SupportArray s) -> std::ostream
    __lshift__(std::ostream & os, PosVelError p) -> std::ostream
    __lshift__(std::ostream & os, ErrorParameters e) -> std::ostream
    __lshift__(std::ostream & os, ProductInfo p) -> std::ostream
    __lshift__(std::ostream & os, Polarization p) -> std::ostream
    __lshift__(std::ostream & os, TOAExtended t) -> std::ostream
    __lshift__(std::ostream & os, DwellTimes d) -> std::ostream
    __lshift__(std::ostream & os, TgtRefLevel t) -> std::ostream
    __lshift__(std::ostream & os, Point p) -> std::ostream
    __lshift__(std::ostream & os, FxNoiseProfile f) -> std::ostream
    __lshift__(std::ostream & os, NoiseLevel n) -> std::ostream
    __lshift__(std::ostream & os, ChannelParameter c) -> std::ostream
    __lshift__(std::ostream & os, Channel c) -> std::ostream
    __lshift__(std::ostream & os, cphd::Data::SupportArray const & s) -> std::ostream
    __lshift__(std::ostream & os, cphd::Data::Channel const & c) -> std::ostream
    __lshift__(std::ostream & os, Data d) -> std::ostream
    __lshift__(std::ostream & os, DwellTime d) -> std::ostream
    __lshift__(std::ostream & os, COD c) -> std::ostream
    __lshift__(std::ostream & os, Dwell d) -> std::ostream
    __lshift__(std::ostream & os, ParameterType p) -> std::ostream
    __lshift__(std::ostream & os, TxWFParameters t) -> std::ostream
    __lshift__(std::ostream & os, RcvParameters r) -> std::ostream
    __lshift__(std::ostream & os, TxRcv t) -> std::ostream
    __lshift__(std::ostream & os, PVPType p) -> std::ostream
    __lshift__(std::ostream & os, APVPType a) -> std::ostream
    __lshift__(std::ostream & os, Pvp p) -> std::ostream
    __lshift__(std::ostream & os, AntCoordFrame a) -> std::ostream
    __lshift__(std::ostream & os, AntPhaseCenter a) -> std::ostream
    __lshift__(std::ostream & os, cphd::AntPattern::GainPhaseArray const & g) -> std::ostream
    __lshift__(std::ostream & os, AntPattern a) -> std::ostream
    __lshift__(std::ostream & os, CphdAntenna a) -> std::ostream
    __lshift__(std::ostream & os, Metadata d) -> std::ostream &
    """
    return _cphd.__lshift__(*args)
class PVPBlock(_object):
    """Proxy of C++ cphd::PVPBlock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVPBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PVPBlock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::PVPBlock self) -> PVPBlock
        __init__(cphd::PVPBlock self, Pvp pvp, Data data) -> PVPBlock
        __init__(cphd::PVPBlock self, size_t numChannels, VectorSizeT numVectors, Pvp pvp) -> PVPBlock
        __init__(cphd::PVPBlock self, size_t numChannels, VectorSizeT numVectors, Pvp pvp, std::vector< void const *,std::allocator< void const * > > const & data) -> PVPBlock
        """
        this = _cphd.new_PVPBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def verifyChannelVector(self, channel: 'size_t', vector: 'size_t') -> "void":
        """verifyChannelVector(PVPBlock self, size_t channel, size_t vector)"""
        return _cphd.PVPBlock_verifyChannelVector(self, channel, vector)


    def getTxTime(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTxTime(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTxTime(self, channel, set)


    def getTxPos(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getTxPos(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getTxPos(self, channel, set)


    def getTxVel(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getTxVel(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getTxVel(self, channel, set)


    def getRcvTime(self, channel: 'size_t', set: 'size_t') -> "double":
        """getRcvTime(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getRcvTime(self, channel, set)


    def getRcvPos(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getRcvPos(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getRcvPos(self, channel, set)


    def getRcvVel(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getRcvVel(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getRcvVel(self, channel, set)


    def getSRPPos(self, channel: 'size_t', set: 'size_t') -> "cphd::Vector3":
        """getSRPPos(PVPBlock self, size_t channel, size_t set) -> Vector3"""
        return _cphd.PVPBlock_getSRPPos(self, channel, set)


    def getaFDOP(self, channel: 'size_t', set: 'size_t') -> "double":
        """getaFDOP(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getaFDOP(self, channel, set)


    def getaFRR1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getaFRR1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getaFRR1(self, channel, set)


    def getaFRR2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getaFRR2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getaFRR2(self, channel, set)


    def getFx1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getFx1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getFx1(self, channel, set)


    def getFx2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getFx2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getFx2(self, channel, set)


    def getTOA1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTOA1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTOA1(self, channel, set)


    def getTOA2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTOA2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTOA2(self, channel, set)


    def getTdTropoSRP(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTdTropoSRP(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTdTropoSRP(self, channel, set)


    def getSC0(self, channel: 'size_t', set: 'size_t') -> "double":
        """getSC0(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getSC0(self, channel, set)


    def getSCSS(self, channel: 'size_t', set: 'size_t') -> "double":
        """getSCSS(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getSCSS(self, channel, set)


    def getAmpSF(self, channel: 'size_t', set: 'size_t') -> "double":
        """getAmpSF(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getAmpSF(self, channel, set)


    def getFxN1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getFxN1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getFxN1(self, channel, set)


    def getFxN2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getFxN2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getFxN2(self, channel, set)


    def getTOAE1(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTOAE1(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTOAE1(self, channel, set)


    def getTOAE2(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTOAE2(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTOAE2(self, channel, set)


    def getTdIonoSRP(self, channel: 'size_t', set: 'size_t') -> "double":
        """getTdIonoSRP(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getTdIonoSRP(self, channel, set)


    def getSignal(self, channel: 'size_t', set: 'size_t') -> "double":
        """getSignal(PVPBlock self, size_t channel, size_t set) -> double"""
        return _cphd.PVPBlock_getSignal(self, channel, set)


    def setTxTime(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTxTime(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTxTime(self, value, channel, set)


    def setTxPos(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setTxPos(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTxPos(self, value, channel, set)


    def setTxVel(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setTxVel(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTxVel(self, value, channel, set)


    def setRcvTime(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setRcvTime(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setRcvTime(self, value, channel, set)


    def setRcvPos(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setRcvPos(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setRcvPos(self, value, channel, set)


    def setRcvVel(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setRcvVel(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setRcvVel(self, value, channel, set)


    def setSRPPos(self, value: 'Vector3', channel: 'size_t', set: 'size_t') -> "void":
        """setSRPPos(PVPBlock self, Vector3 value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setSRPPos(self, value, channel, set)


    def setaFDOP(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setaFDOP(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setaFDOP(self, value, channel, set)


    def setaFRR1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setaFRR1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setaFRR1(self, value, channel, set)


    def setaFRR2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setaFRR2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setaFRR2(self, value, channel, set)


    def setFx1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setFx1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setFx1(self, value, channel, set)


    def setFx2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setFx2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setFx2(self, value, channel, set)


    def setTOA1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTOA1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTOA1(self, value, channel, set)


    def setTOA2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTOA2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTOA2(self, value, channel, set)


    def setTdTropoSRP(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTdTropoSRP(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTdTropoSRP(self, value, channel, set)


    def setSC0(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setSC0(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setSC0(self, value, channel, set)


    def setSCSS(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setSCSS(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setSCSS(self, value, channel, set)


    def setAmpSF(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setAmpSF(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setAmpSF(self, value, channel, set)


    def setFxN1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setFxN1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setFxN1(self, value, channel, set)


    def setFxN2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setFxN2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setFxN2(self, value, channel, set)


    def setTOAE1(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTOAE1(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTOAE1(self, value, channel, set)


    def setTOAE2(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTOAE2(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTOAE2(self, value, channel, set)


    def setTdIonoSRP(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setTdIonoSRP(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setTdIonoSRP(self, value, channel, set)


    def setSignal(self, value: 'double', channel: 'size_t', set: 'size_t') -> "void":
        """setSignal(PVPBlock self, double value, size_t channel, size_t set)"""
        return _cphd.PVPBlock_setSignal(self, value, channel, set)


    def getNumBytesPVPSet(self) -> "size_t":
        """getNumBytesPVPSet(PVPBlock self) -> size_t"""
        return _cphd.PVPBlock_getNumBytesPVPSet(self)


    def getPVPsize(self, channel: 'size_t') -> "size_t":
        """getPVPsize(PVPBlock self, size_t channel) -> size_t"""
        return _cphd.PVPBlock_getPVPsize(self, channel)


    def hasAmpSF(self) -> "bool":
        """hasAmpSF(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasAmpSF(self)


    def hasFxN1(self) -> "bool":
        """hasFxN1(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasFxN1(self)


    def hasFxN2(self) -> "bool":
        """hasFxN2(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasFxN2(self)


    def hasToaE1(self) -> "bool":
        """hasToaE1(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasToaE1(self)


    def hasToaE2(self) -> "bool":
        """hasToaE2(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasToaE2(self)


    def hasTDIonoSRP(self) -> "bool":
        """hasTDIonoSRP(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasTDIonoSRP(self)


    def hasSignal(self) -> "bool":
        """hasSignal(PVPBlock self) -> bool"""
        return _cphd.PVPBlock_hasSignal(self)


    def load(self, inStream: 'SeekableInputStream', startPVP: 'sys::Off_T', sizePVP: 'sys::Off_T', numThreads: 'size_t') -> "sys::Off_T":
        """load(PVPBlock self, SeekableInputStream inStream, sys::Off_T startPVP, sys::Off_T sizePVP, size_t numThreads) -> sys::Off_T"""
        return _cphd.PVPBlock_load(self, inStream, startPVP, sizePVP, numThreads)


    def __eq__(self, other: 'PVPBlock') -> "bool":
        """__eq__(PVPBlock self, PVPBlock other) -> bool"""
        return _cphd.PVPBlock___eq__(self, other)


    def __ne__(self, other: 'PVPBlock') -> "bool":
        """__ne__(PVPBlock self, PVPBlock other) -> bool"""
        return _cphd.PVPBlock___ne__(self, other)


    def __str__(self) -> "std::string":
        """__str__(PVPBlock self) -> std::string"""
        return _cphd.PVPBlock___str__(self)


    def getPVPdata(self, *args) -> "void":
        """
        getPVPdata(PVPBlock self, size_t channel, std::vector< sys::ubyte,std::allocator< sys::ubyte > > & data)
        getPVPdata(PVPBlock self, size_t channel, void * data)
        getPVPdata(PVPBlock self, size_t channel, size_t data)
        """
        return _cphd.PVPBlock_getPVPdata(self, *args)

    __swig_destroy__ = _cphd.delete_PVPBlock
    __del__ = lambda self: None
PVPBlock_swigregister = _cphd.PVPBlock_swigregister
PVPBlock_swigregister(PVPBlock)

class CPHDXMLControl(_object):
    """Proxy of C++ cphd::CPHDXMLControl class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDXMLControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDXMLControl, name)
    __repr__ = _swig_repr

    def __init__(self, log: 'logging::Logger *'=None, ownLog: 'bool'=False):
        """
        __init__(cphd::CPHDXMLControl self, logging::Logger * log=None, bool ownLog=False) -> CPHDXMLControl
        __init__(cphd::CPHDXMLControl self, logging::Logger * log=None) -> CPHDXMLControl
        __init__(cphd::CPHDXMLControl self) -> CPHDXMLControl
        """
        this = _cphd.new_CPHDXMLControl(log, ownLog)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_CPHDXMLControl
    __del__ = lambda self: None

    def setLogger(self, log: 'logging::Logger *', ownLog: 'bool'=False) -> "void":
        """
        setLogger(CPHDXMLControl self, logging::Logger * log, bool ownLog=False)
        setLogger(CPHDXMLControl self, logging::Logger * log)
        """
        return _cphd.CPHDXMLControl_setLogger(self, log, ownLog)


    def toXMLString(self, *args) -> "std::string":
        """
        toXMLString(CPHDXMLControl self, Metadata metadata, VectorString schemaPaths, bool prettyPrint=False) -> std::string
        toXMLString(CPHDXMLControl self, Metadata metadata, VectorString schemaPaths) -> std::string
        toXMLString(CPHDXMLControl self, Metadata metadata) -> std::string
        """
        return _cphd.CPHDXMLControl_toXMLString(self, *args)


    def fromXMLString(self, xmlString: 'std::string const &') -> "cphd::Metadata":
        """fromXMLString(CPHDXMLControl self, std::string const & xmlString) -> Metadata"""
        return _cphd.CPHDXMLControl_fromXMLString(self, xmlString)

CPHDXMLControl_swigregister = _cphd.CPHDXMLControl_swigregister
CPHDXMLControl_swigregister(CPHDXMLControl)

class Wideband(_object):
    """Proxy of C++ cphd::Wideband class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wideband, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wideband, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::Wideband self, std::string const & pathname, MetadataBase metadata, sys::Off_T startWB, sys::Off_T sizeWB) -> Wideband
        __init__(cphd::Wideband self, std::shared_ptr< io::SeekableInputStream > inStream, MetadataBase metadata, sys::Off_T startWB, sys::Off_T sizeWB) -> Wideband
        """
        this = _cphd.new_Wideband(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getFileOffset(self, *args) -> "sys::Off_T":
        """
        getFileOffset(Wideband self, size_t channel, size_t vector, size_t sample) -> sys::Off_T
        getFileOffset(Wideband self, size_t channel) -> sys::Off_T
        """
        return _cphd.Wideband_getFileOffset(self, *args)


    def read(self, *args) -> "void":
        """
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, mem::BufferView< sys::ubyte > const & data)
        read(Wideband self, size_t channel, mem::BufferView< sys::ubyte > const & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, mem::ScopedArray< sys::ubyte > & data)
        read(Wideband self, size_t channel, mem::ScopedArray< sys::ubyte > & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, std_vector_double vectorScaleFactors, size_t numThreads, mem::BufferView< sys::ubyte > const & scratch, mem::BufferView< std::complex< float > > const & data)
        read(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, RowColSizeT dims, void * data)
        """
        return _cphd.Wideband_read(self, *args)


    def getBytesRequiredForRead(self, *args) -> "size_t":
        """
        getBytesRequiredForRead(Wideband self, size_t channel) -> size_t
        getBytesRequiredForRead(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample) -> size_t
        """
        return _cphd.Wideband_getBytesRequiredForRead(self, *args)


    def getBufferDims(self, channel: 'size_t', firstVector: 'size_t', lastVector: 'size_t', firstSample: 'size_t', lastSample: 'size_t') -> "types::RowCol< size_t >":
        """getBufferDims(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample) -> RowColSizeT"""
        return _cphd.Wideband_getBufferDims(self, channel, firstVector, lastVector, firstSample, lastSample)


    def getElementSize(self) -> "size_t":
        """getElementSize(Wideband self) -> size_t"""
        return _cphd.Wideband_getElementSize(self)


    def readImpl(self, channel: 'size_t', firstVector: 'size_t', lastVector: 'size_t', firstSample: 'size_t', lastSample: 'size_t', numThreads: 'size_t', dims: 'RowColSizeT', data: 'long long') -> "void":
        """readImpl(Wideband self, size_t channel, size_t firstVector, size_t lastVector, size_t firstSample, size_t lastSample, size_t numThreads, RowColSizeT dims, long long data)"""
        return _cphd.Wideband_readImpl(self, channel, firstVector, lastVector, firstSample, lastSample, numThreads, dims, data)

    __swig_destroy__ = _cphd.delete_Wideband
    __del__ = lambda self: None
Wideband_swigregister = _cphd.Wideband_swigregister
Wideband_swigregister(Wideband)
Wideband.ALL = _cphd.cvar.Wideband_ALL

class CPHDReader(_object):
    """Proxy of C++ cphd::CPHDReader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::CPHDReader self, std::shared_ptr< io::SeekableInputStream > inStream, size_t numThreads, VectorString schemaPaths, std::shared_ptr< logging::Logger > logger) -> CPHDReader
        __init__(cphd::CPHDReader self, std::shared_ptr< io::SeekableInputStream > inStream, size_t numThreads, VectorString schemaPaths) -> CPHDReader
        __init__(cphd::CPHDReader self, std::shared_ptr< io::SeekableInputStream > inStream, size_t numThreads) -> CPHDReader
        __init__(cphd::CPHDReader self, std::string const & fromFile, size_t numThreads, VectorString schemaPaths, std::shared_ptr< logging::Logger > logger) -> CPHDReader
        __init__(cphd::CPHDReader self, std::string const & fromFile, size_t numThreads, VectorString schemaPaths) -> CPHDReader
        __init__(cphd::CPHDReader self, std::string const & fromFile, size_t numThreads) -> CPHDReader
        """
        this = _cphd.new_CPHDReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumChannels(self) -> "size_t":
        """getNumChannels(CPHDReader self) -> size_t"""
        return _cphd.CPHDReader_getNumChannels(self)


    def getNumVectors(self, channel: 'size_t') -> "size_t":
        """getNumVectors(CPHDReader self, size_t channel) -> size_t"""
        return _cphd.CPHDReader_getNumVectors(self, channel)


    def getNumSamples(self, channel: 'size_t') -> "size_t":
        """getNumSamples(CPHDReader self, size_t channel) -> size_t"""
        return _cphd.CPHDReader_getNumSamples(self, channel)


    def getNumBytesPerSample(self) -> "size_t":
        """getNumBytesPerSample(CPHDReader self) -> size_t"""
        return _cphd.CPHDReader_getNumBytesPerSample(self)


    def getFileOffset(self, channel: 'size_t', vector: 'size_t', sample: 'size_t') -> "sys::Off_T":
        """getFileOffset(CPHDReader self, size_t channel, size_t vector, size_t sample) -> sys::Off_T"""
        return _cphd.CPHDReader_getFileOffset(self, channel, vector, sample)


    def getFileHeader(self) -> "cphd::FileHeader const &":
        """getFileHeader(CPHDReader self) -> FileHeader"""
        return _cphd.CPHDReader_getFileHeader(self)


    def getMetadata(self) -> "cphd::Metadata const &":
        """getMetadata(CPHDReader self) -> Metadata"""
        return _cphd.CPHDReader_getMetadata(self)


    def getPVPBlock(self) -> "cphd::PVPBlock const &":
        """getPVPBlock(CPHDReader self) -> PVPBlock"""
        return _cphd.CPHDReader_getPVPBlock(self)


    def getWideband(self) -> "cphd::Wideband const &":
        """getWideband(CPHDReader self) -> Wideband"""
        return _cphd.CPHDReader_getWideband(self)


    def getSupportBlock(self) -> "cphd::SupportBlock const &":
        """getSupportBlock(CPHDReader self) -> SupportBlock"""
        return _cphd.CPHDReader_getSupportBlock(self)


    def getPHD(self, channel: 'size_t') -> "PyObject *":
        """getPHD(CPHDReader self, size_t channel) -> PyObject *"""
        return _cphd.CPHDReader_getPHD(self, channel)

    __swig_destroy__ = _cphd.delete_CPHDReader
    __del__ = lambda self: None
CPHDReader_swigregister = _cphd.CPHDReader_swigregister
CPHDReader_swigregister(CPHDReader)

class DataWriter(_object):
    """Proxy of C++ cphd::DataWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cphd.delete_DataWriter
    __del__ = lambda self: None

    def __call__(self, data: 'sys::ubyte const *', numElements: 'size_t', elementSize: 'size_t') -> "void":
        """__call__(DataWriter self, sys::ubyte const * data, size_t numElements, size_t elementSize)"""
        return _cphd.DataWriter___call__(self, data, numElements, elementSize)

DataWriter_swigregister = _cphd.DataWriter_swigregister
DataWriter_swigregister(DataWriter)

class DataWriterLittleEndian(DataWriter):
    """Proxy of C++ cphd::DataWriterLittleEndian class."""

    __swig_setmethods__ = {}
    for _s in [DataWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataWriterLittleEndian, name, value)
    __swig_getmethods__ = {}
    for _s in [DataWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataWriterLittleEndian, name)
    __repr__ = _swig_repr

    def __init__(self, stream: 'std::shared_ptr< io::SeekableOutputStream >', numThreads: 'size_t', scratchSize: 'size_t'):
        """__init__(cphd::DataWriterLittleEndian self, std::shared_ptr< io::SeekableOutputStream > stream, size_t numThreads, size_t scratchSize) -> DataWriterLittleEndian"""
        this = _cphd.new_DataWriterLittleEndian(stream, numThreads, scratchSize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, data: 'sys::ubyte const *', numElements: 'size_t', elementSize: 'size_t') -> "void":
        """__call__(DataWriterLittleEndian self, sys::ubyte const * data, size_t numElements, size_t elementSize)"""
        return _cphd.DataWriterLittleEndian___call__(self, data, numElements, elementSize)

    __swig_destroy__ = _cphd.delete_DataWriterLittleEndian
    __del__ = lambda self: None
DataWriterLittleEndian_swigregister = _cphd.DataWriterLittleEndian_swigregister
DataWriterLittleEndian_swigregister(DataWriterLittleEndian)

class DataWriterBigEndian(DataWriter):
    """Proxy of C++ cphd::DataWriterBigEndian class."""

    __swig_setmethods__ = {}
    for _s in [DataWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataWriterBigEndian, name, value)
    __swig_getmethods__ = {}
    for _s in [DataWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataWriterBigEndian, name)
    __repr__ = _swig_repr

    def __init__(self, stream: 'std::shared_ptr< io::SeekableOutputStream >', numThreads: 'size_t'):
        """__init__(cphd::DataWriterBigEndian self, std::shared_ptr< io::SeekableOutputStream > stream, size_t numThreads) -> DataWriterBigEndian"""
        this = _cphd.new_DataWriterBigEndian(stream, numThreads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, data: 'sys::ubyte const *', numElements: 'size_t', elementSize: 'size_t') -> "void":
        """__call__(DataWriterBigEndian self, sys::ubyte const * data, size_t numElements, size_t elementSize)"""
        return _cphd.DataWriterBigEndian___call__(self, data, numElements, elementSize)

    __swig_destroy__ = _cphd.delete_DataWriterBigEndian
    __del__ = lambda self: None
DataWriterBigEndian_swigregister = _cphd.DataWriterBigEndian_swigregister
DataWriterBigEndian_swigregister(DataWriterBigEndian)

class CPHDWriter(_object):
    """Proxy of C++ cphd::CPHDWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPHDWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPHDWriter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(cphd::CPHDWriter self, Metadata metadata, std::shared_ptr< io::SeekableOutputStream > stream, VectorString schemaPaths, size_t numThreads=0, size_t scratchSpaceSize=4) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::shared_ptr< io::SeekableOutputStream > stream, VectorString schemaPaths, size_t numThreads=0) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::shared_ptr< io::SeekableOutputStream > stream, VectorString schemaPaths) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::shared_ptr< io::SeekableOutputStream > stream) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::string const & pathname, VectorString schemaPaths, size_t numThreads=0, size_t scratchSpaceSize=4) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::string const & pathname, VectorString schemaPaths, size_t numThreads=0) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::string const & pathname, VectorString schemaPaths) -> CPHDWriter
        __init__(cphd::CPHDWriter self, Metadata metadata, std::string const & pathname) -> CPHDWriter
        """
        this = _cphd.new_CPHDWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def writeMetadata(self, pvpBlock: 'PVPBlock') -> "void":
        """writeMetadata(CPHDWriter self, PVPBlock pvpBlock)"""
        return _cphd.CPHDWriter_writeMetadata(self, pvpBlock)


    def writePVPData(self, PVPBlock: 'PVPBlock') -> "void":
        """writePVPData(CPHDWriter self, PVPBlock PVPBlock)"""
        return _cphd.CPHDWriter_writePVPData(self, PVPBlock)


    def close(self) -> "void":
        """close(CPHDWriter self)"""
        return _cphd.CPHDWriter_close(self)


    def __del__(self):
        self.close()

    __swig_destroy__ = _cphd.delete_CPHDWriter
    __del__ = lambda self: None
CPHDWriter_swigregister = _cphd.CPHDWriter_swigregister
CPHDWriter_swigregister(CPHDWriter)


import numpy
import multiprocessing
from coda.coda_types import RowColSizeT

def read(self,
         channel = 0,
         firstVector = 0,
         lastVector = Wideband.ALL,
         firstSample = 0,
         lastSample = Wideband.ALL,
         numThreads = multiprocessing.cpu_count()):

    dims = self.getBufferDims(channel, firstVector, lastVector, firstSample, lastSample)
    sampleTypeSize = self.getElementSize()

# RF32F_IM32F
    if sampleTypeSize == 8:
        dtype = 'complex64'
    else:
        raise Exception('Unknown element type')

    numpyArray = numpy.empty(shape = (dims.row, dims.col), dtype = dtype)
    pointer, ro = numpyArray.__array_interface__['data']
    self.readImpl(channel, firstVector, lastVector, firstSample, lastSample, numThreads, dims, pointer)
    return numpyArray

Wideband.read = read

class VectorVector3(_object):
    """Proxy of C++ std::vector<(math::linear::VectorN<(3,double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVector3, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorVector3 self) -> SwigPyIterator"""
        return _cphd.VectorVector3_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3___bool__(self)


    def __len__(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
        """__len__(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3___len__(self)


    def __getslice__(self, i: 'std::vector< math::linear::VectorN< 3,double > >::difference_type', j: 'std::vector< math::linear::VectorN< 3,double > >::difference_type') -> "std::vector< math::linear::VectorN< 3,double >,std::allocator< math::linear::VectorN< 3,double > > > *":
        """__getslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j) -> Vector3Coefficients"""
        return _cphd.VectorVector3___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)
        __setslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j, Vector3Coefficients v)
        """
        return _cphd.VectorVector3___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< math::linear::VectorN< 3,double > >::difference_type', j: 'std::vector< math::linear::VectorN< 3,double > >::difference_type') -> "void":
        """__delslice__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)"""
        return _cphd.VectorVector3___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i)
        __delitem__(VectorVector3 self, PySliceObject * slice)
        """
        return _cphd.VectorVector3___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
        """
        __getitem__(VectorVector3 self, PySliceObject * slice) -> Vector3Coefficients
        __getitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i) -> Vector3
        """
        return _cphd.VectorVector3___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorVector3 self, PySliceObject * slice, Vector3Coefficients v)
        __setitem__(VectorVector3 self, PySliceObject * slice)
        __setitem__(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, Vector3 x)
        """
        return _cphd.VectorVector3___setitem__(self, *args)


    def pop(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type":
        """pop(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_pop(self)


    def append(self, x: 'Vector3') -> "void":
        """append(VectorVector3 self, Vector3 x)"""
        return _cphd.VectorVector3_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorVector3 self) -> bool"""
        return _cphd.VectorVector3_empty(self)


    def size(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
        """size(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3_size(self)


    def swap(self, v: 'Vector3Coefficients') -> "void":
        """swap(VectorVector3 self, Vector3Coefficients v)"""
        return _cphd.VectorVector3_swap(self, v)


    def begin(self) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
        """begin(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
        return _cphd.VectorVector3_begin(self)


    def end(self) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
        """end(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
        return _cphd.VectorVector3_end(self)


    def rbegin(self) -> "std::vector< math::linear::VectorN< 3,double > >::reverse_iterator":
        """rbegin(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
        return _cphd.VectorVector3_rbegin(self)


    def rend(self) -> "std::vector< math::linear::VectorN< 3,double > >::reverse_iterator":
        """rend(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
        return _cphd.VectorVector3_rend(self)


    def clear(self) -> "void":
        """clear(VectorVector3 self)"""
        return _cphd.VectorVector3_clear(self)


    def get_allocator(self) -> "std::vector< math::linear::VectorN< 3,double > >::allocator_type":
        """get_allocator(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::allocator_type"""
        return _cphd.VectorVector3_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorVector3 self)"""
        return _cphd.VectorVector3_pop_back(self)


    def erase(self, *args) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
        """
        erase(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        erase(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator first, std::vector< math::linear::VectorN< 3,double > >::iterator last) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        """
        return _cphd.VectorVector3_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, Vector3Coefficients arg2) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, std::vector< math::linear::VectorN< 3,double > >::size_type size) -> VectorVector3
        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, std::vector< math::linear::VectorN< 3,double > >::size_type size, Vector3 value) -> VectorVector3
        """
        this = _cphd.new_VectorVector3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Vector3') -> "void":
        """push_back(VectorVector3 self, Vector3 x)"""
        return _cphd.VectorVector3_push_back(self, x)


    def front(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
        """front(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_front(self)


    def back(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
        """back(VectorVector3 self) -> Vector3"""
        return _cphd.VectorVector3_back(self)


    def assign(self, n: 'std::vector< math::linear::VectorN< 3,double > >::size_type', x: 'Vector3') -> "void":
        """assign(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)"""
        return _cphd.VectorVector3_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type new_size)
        resize(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type new_size, Vector3 x)
        """
        return _cphd.VectorVector3_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos, Vector3 x) -> std::vector< math::linear::VectorN< 3,double > >::iterator
        insert(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::iterator pos, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)
        """
        return _cphd.VectorVector3_insert(self, *args)


    def reserve(self, n: 'std::vector< math::linear::VectorN< 3,double > >::size_type') -> "void":
        """reserve(VectorVector3 self, std::vector< math::linear::VectorN< 3,double > >::size_type n)"""
        return _cphd.VectorVector3_reserve(self, n)


    def capacity(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
        """capacity(VectorVector3 self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
        return _cphd.VectorVector3_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorVector3
    __del__ = lambda self: None
VectorVector3_swigregister = _cphd.VectorVector3_swigregister
VectorVector3_swigregister(VectorVector3)

class VectorAntennaParameters(_object):
    """Proxy of C++ std::vector<(six::sicd::AntennaParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorAntennaParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorAntennaParameters, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(VectorAntennaParameters self) -> SwigPyIterator"""
        return _cphd.VectorAntennaParameters_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters___bool__(self)


    def __len__(self) -> "std::vector< six::sicd::AntennaParameters >::size_type":
        """__len__(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters___len__(self)


    def __getslice__(self, i: 'std::vector< six::sicd::AntennaParameters >::difference_type', j: 'std::vector< six::sicd::AntennaParameters >::difference_type') -> "std::vector< six::sicd::AntennaParameters,std::allocator< six::sicd::AntennaParameters > > *":
        """__getslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j) -> VectorAntennaParameters"""
        return _cphd.VectorAntennaParameters___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j)
        __setslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j, VectorAntennaParameters v)
        """
        return _cphd.VectorAntennaParameters___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< six::sicd::AntennaParameters >::difference_type', j: 'std::vector< six::sicd::AntennaParameters >::difference_type') -> "void":
        """__delslice__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, std::vector< six::sicd::AntennaParameters >::difference_type j)"""
        return _cphd.VectorAntennaParameters___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i)
        __delitem__(VectorAntennaParameters self, PySliceObject * slice)
        """
        return _cphd.VectorAntennaParameters___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< six::sicd::AntennaParameters >::value_type const &":
        """
        __getitem__(VectorAntennaParameters self, PySliceObject * slice) -> VectorAntennaParameters
        __getitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i) -> AntennaParameters
        """
        return _cphd.VectorAntennaParameters___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(VectorAntennaParameters self, PySliceObject * slice, VectorAntennaParameters v)
        __setitem__(VectorAntennaParameters self, PySliceObject * slice)
        __setitem__(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::difference_type i, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters___setitem__(self, *args)


    def pop(self) -> "std::vector< six::sicd::AntennaParameters >::value_type":
        """pop(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_pop(self)


    def append(self, x: 'AntennaParameters') -> "void":
        """append(VectorAntennaParameters self, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_append(self, x)


    def empty(self) -> "bool":
        """empty(VectorAntennaParameters self) -> bool"""
        return _cphd.VectorAntennaParameters_empty(self)


    def size(self) -> "std::vector< six::sicd::AntennaParameters >::size_type":
        """size(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters_size(self)


    def swap(self, v: 'VectorAntennaParameters') -> "void":
        """swap(VectorAntennaParameters self, VectorAntennaParameters v)"""
        return _cphd.VectorAntennaParameters_swap(self, v)


    def begin(self) -> "std::vector< six::sicd::AntennaParameters >::iterator":
        """begin(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::iterator"""
        return _cphd.VectorAntennaParameters_begin(self)


    def end(self) -> "std::vector< six::sicd::AntennaParameters >::iterator":
        """end(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::iterator"""
        return _cphd.VectorAntennaParameters_end(self)


    def rbegin(self) -> "std::vector< six::sicd::AntennaParameters >::reverse_iterator":
        """rbegin(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::reverse_iterator"""
        return _cphd.VectorAntennaParameters_rbegin(self)


    def rend(self) -> "std::vector< six::sicd::AntennaParameters >::reverse_iterator":
        """rend(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::reverse_iterator"""
        return _cphd.VectorAntennaParameters_rend(self)


    def clear(self) -> "void":
        """clear(VectorAntennaParameters self)"""
        return _cphd.VectorAntennaParameters_clear(self)


    def get_allocator(self) -> "std::vector< six::sicd::AntennaParameters >::allocator_type":
        """get_allocator(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::allocator_type"""
        return _cphd.VectorAntennaParameters_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(VectorAntennaParameters self)"""
        return _cphd.VectorAntennaParameters_pop_back(self)


    def erase(self, *args) -> "std::vector< six::sicd::AntennaParameters >::iterator":
        """
        erase(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos) -> std::vector< six::sicd::AntennaParameters >::iterator
        erase(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator first, std::vector< six::sicd::AntennaParameters >::iterator last) -> std::vector< six::sicd::AntennaParameters >::iterator
        """
        return _cphd.VectorAntennaParameters_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(six::sicd::AntennaParameters)> self) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, VectorAntennaParameters arg2) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, std::vector< six::sicd::AntennaParameters >::size_type size) -> VectorAntennaParameters
        __init__(std::vector<(six::sicd::AntennaParameters)> self, std::vector< six::sicd::AntennaParameters >::size_type size, AntennaParameters value) -> VectorAntennaParameters
        """
        this = _cphd.new_VectorAntennaParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'AntennaParameters') -> "void":
        """push_back(VectorAntennaParameters self, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_push_back(self, x)


    def front(self) -> "std::vector< six::sicd::AntennaParameters >::value_type const &":
        """front(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_front(self)


    def back(self) -> "std::vector< six::sicd::AntennaParameters >::value_type const &":
        """back(VectorAntennaParameters self) -> AntennaParameters"""
        return _cphd.VectorAntennaParameters_back(self)


    def assign(self, n: 'std::vector< six::sicd::AntennaParameters >::size_type', x: 'AntennaParameters') -> "void":
        """assign(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type n, AntennaParameters x)"""
        return _cphd.VectorAntennaParameters_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type new_size)
        resize(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type new_size, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos, AntennaParameters x) -> std::vector< six::sicd::AntennaParameters >::iterator
        insert(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::iterator pos, std::vector< six::sicd::AntennaParameters >::size_type n, AntennaParameters x)
        """
        return _cphd.VectorAntennaParameters_insert(self, *args)


    def reserve(self, n: 'std::vector< six::sicd::AntennaParameters >::size_type') -> "void":
        """reserve(VectorAntennaParameters self, std::vector< six::sicd::AntennaParameters >::size_type n)"""
        return _cphd.VectorAntennaParameters_reserve(self, n)


    def capacity(self) -> "std::vector< six::sicd::AntennaParameters >::size_type":
        """capacity(VectorAntennaParameters self) -> std::vector< six::sicd::AntennaParameters >::size_type"""
        return _cphd.VectorAntennaParameters_capacity(self)


    def __getstate__(self):
    # Return a nonempty (thus non-false) tuple with dummy value in first position
        return (-1, tuple(pickle.dumps(elem) for elem in self))

    def __setstate__(self, state):
        self.__init__()
    # State will have a dummy entry in the first position
        for elem in state[1]:
            self.push_back(pickle.loads(elem))

    __swig_destroy__ = _cphd.delete_VectorAntennaParameters
    __del__ = lambda self: None
VectorAntennaParameters_swigregister = _cphd.VectorAntennaParameters_swigregister
VectorAntennaParameters_swigregister(VectorAntennaParameters)

class StdAutoSupportArray(_object):
    """Proxy of C++ std::auto_ptr<(cphd::SupportArray)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoSupportArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoSupportArray, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::SupportArray)> self) -> StdAutoSupportArray"""
        this = _cphd.new_StdAutoSupportArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoSupportArray
    __del__ = lambda self: None
StdAutoSupportArray_swigregister = _cphd.StdAutoSupportArray_swigregister
StdAutoSupportArray_swigregister(StdAutoSupportArray)

class ScopedCopyableSupportArray(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::SupportArray)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableSupportArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableSupportArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::SupportArray)> self, SupportArray ptr=None) -> ScopedCopyableSupportArray
        __init__(mem::ScopedCopyablePtr<(cphd::SupportArray)> self) -> ScopedCopyableSupportArray
        __init__(mem::ScopedCopyablePtr<(cphd::SupportArray)> self, ScopedCopyableSupportArray rhs) -> ScopedCopyableSupportArray
        """
        this = _cphd.new_ScopedCopyableSupportArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableSupportArray___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::SupportArray *":
        """get(ScopedCopyableSupportArray self) -> SupportArray"""
        return _cphd.ScopedCopyableSupportArray_get(self)


    def __ref__(self) -> "cphd::SupportArray &":
        """__ref__(ScopedCopyableSupportArray self) -> SupportArray"""
        return _cphd.ScopedCopyableSupportArray___ref__(self)


    def __deref__(self) -> "cphd::SupportArray *":
        """__deref__(ScopedCopyableSupportArray self) -> SupportArray"""
        return _cphd.ScopedCopyableSupportArray___deref__(self)


    def reset(self, ptr: 'SupportArray'=None) -> "void":
        """
        reset(ScopedCopyableSupportArray self, SupportArray ptr=None)
        reset(ScopedCopyableSupportArray self)
        """
        return _cphd.ScopedCopyableSupportArray_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableSupportArray
    __del__ = lambda self: None

    def __eq__(self, other: 'SupportArray') -> "bool":
        """__eq__(ScopedCopyableSupportArray self, SupportArray other) -> bool"""
        return _cphd.ScopedCopyableSupportArray___eq__(self, other)


    def __ne__(self, other: 'SupportArray') -> "bool":
        """__ne__(ScopedCopyableSupportArray self, SupportArray other) -> bool"""
        return _cphd.ScopedCopyableSupportArray___ne__(self, other)


    def getIAZSupportArray(self, key: 'std::string const &') -> "cphd::SupportArrayParameter":
        """getIAZSupportArray(ScopedCopyableSupportArray self, std::string const & key) -> SupportArrayParameter"""
        return _cphd.ScopedCopyableSupportArray_getIAZSupportArray(self, key)


    def getAGPSupportArray(self, key: 'std::string const &') -> "cphd::SupportArrayParameter":
        """getAGPSupportArray(ScopedCopyableSupportArray self, std::string const & key) -> SupportArrayParameter"""
        return _cphd.ScopedCopyableSupportArray_getAGPSupportArray(self, key)


    def getAddedSupportArray(self, key: 'std::string const &') -> "cphd::AdditionalSupportArray":
        """getAddedSupportArray(ScopedCopyableSupportArray self, std::string const & key) -> AdditionalSupportArray"""
        return _cphd.ScopedCopyableSupportArray_getAddedSupportArray(self, key)

    __swig_setmethods__["iazArray"] = _cphd.ScopedCopyableSupportArray_iazArray_set
    __swig_getmethods__["iazArray"] = _cphd.ScopedCopyableSupportArray_iazArray_get
    if _newclass:
        iazArray = _swig_property(_cphd.ScopedCopyableSupportArray_iazArray_get, _cphd.ScopedCopyableSupportArray_iazArray_set)
    __swig_setmethods__["antGainPhase"] = _cphd.ScopedCopyableSupportArray_antGainPhase_set
    __swig_getmethods__["antGainPhase"] = _cphd.ScopedCopyableSupportArray_antGainPhase_get
    if _newclass:
        antGainPhase = _swig_property(_cphd.ScopedCopyableSupportArray_antGainPhase_get, _cphd.ScopedCopyableSupportArray_antGainPhase_set)
    __swig_setmethods__["addedSupportArray"] = _cphd.ScopedCopyableSupportArray_addedSupportArray_set
    __swig_getmethods__["addedSupportArray"] = _cphd.ScopedCopyableSupportArray_addedSupportArray_get
    if _newclass:
        addedSupportArray = _swig_property(_cphd.ScopedCopyableSupportArray_addedSupportArray_get, _cphd.ScopedCopyableSupportArray_addedSupportArray_set)
ScopedCopyableSupportArray_swigregister = _cphd.ScopedCopyableSupportArray_swigregister
ScopedCopyableSupportArray_swigregister(ScopedCopyableSupportArray)


def makeScopedCopyableSupportArray() -> "mem::ScopedCopyablePtr< cphd::SupportArray >":
    """makeScopedCopyableSupportArray() -> ScopedCopyableSupportArray"""
    return _cphd.makeScopedCopyableSupportArray()
class StdAutoTxRcv(_object):
    """Proxy of C++ std::auto_ptr<(cphd::TxRcv)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoTxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoTxRcv, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::TxRcv)> self) -> StdAutoTxRcv"""
        this = _cphd.new_StdAutoTxRcv()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoTxRcv
    __del__ = lambda self: None
StdAutoTxRcv_swigregister = _cphd.StdAutoTxRcv_swigregister
StdAutoTxRcv_swigregister(StdAutoTxRcv)

class ScopedCopyableTxRcv(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::TxRcv)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableTxRcv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableTxRcv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::TxRcv)> self, TxRcv ptr=None) -> ScopedCopyableTxRcv
        __init__(mem::ScopedCopyablePtr<(cphd::TxRcv)> self) -> ScopedCopyableTxRcv
        __init__(mem::ScopedCopyablePtr<(cphd::TxRcv)> self, ScopedCopyableTxRcv rhs) -> ScopedCopyableTxRcv
        """
        this = _cphd.new_ScopedCopyableTxRcv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableTxRcv___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::TxRcv *":
        """get(ScopedCopyableTxRcv self) -> TxRcv"""
        return _cphd.ScopedCopyableTxRcv_get(self)


    def __ref__(self) -> "cphd::TxRcv &":
        """__ref__(ScopedCopyableTxRcv self) -> TxRcv"""
        return _cphd.ScopedCopyableTxRcv___ref__(self)


    def __deref__(self) -> "cphd::TxRcv *":
        """__deref__(ScopedCopyableTxRcv self) -> TxRcv"""
        return _cphd.ScopedCopyableTxRcv___deref__(self)


    def reset(self, ptr: 'TxRcv'=None) -> "void":
        """
        reset(ScopedCopyableTxRcv self, TxRcv ptr=None)
        reset(ScopedCopyableTxRcv self)
        """
        return _cphd.ScopedCopyableTxRcv_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableTxRcv
    __del__ = lambda self: None

    def __eq__(self, other: 'TxRcv') -> "bool":
        """__eq__(ScopedCopyableTxRcv self, TxRcv other) -> bool"""
        return _cphd.ScopedCopyableTxRcv___eq__(self, other)


    def __ne__(self, other: 'TxRcv') -> "bool":
        """__ne__(ScopedCopyableTxRcv self, TxRcv other) -> bool"""
        return _cphd.ScopedCopyableTxRcv___ne__(self, other)

    __swig_setmethods__["txWFParameters"] = _cphd.ScopedCopyableTxRcv_txWFParameters_set
    __swig_getmethods__["txWFParameters"] = _cphd.ScopedCopyableTxRcv_txWFParameters_get
    if _newclass:
        txWFParameters = _swig_property(_cphd.ScopedCopyableTxRcv_txWFParameters_get, _cphd.ScopedCopyableTxRcv_txWFParameters_set)
    __swig_setmethods__["rcvParameters"] = _cphd.ScopedCopyableTxRcv_rcvParameters_set
    __swig_getmethods__["rcvParameters"] = _cphd.ScopedCopyableTxRcv_rcvParameters_get
    if _newclass:
        rcvParameters = _swig_property(_cphd.ScopedCopyableTxRcv_rcvParameters_get, _cphd.ScopedCopyableTxRcv_rcvParameters_set)
ScopedCopyableTxRcv_swigregister = _cphd.ScopedCopyableTxRcv_swigregister
ScopedCopyableTxRcv_swigregister(ScopedCopyableTxRcv)


def makeScopedCopyableTxRcv() -> "mem::ScopedCopyablePtr< cphd::TxRcv >":
    """makeScopedCopyableTxRcv() -> ScopedCopyableTxRcv"""
    return _cphd.makeScopedCopyableTxRcv()
class StdAutoErrorParameters(_object):
    """Proxy of C++ std::auto_ptr<(cphd::ErrorParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoErrorParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoErrorParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::ErrorParameters)> self) -> StdAutoErrorParameters"""
        this = _cphd.new_StdAutoErrorParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoErrorParameters
    __del__ = lambda self: None
StdAutoErrorParameters_swigregister = _cphd.StdAutoErrorParameters_swigregister
StdAutoErrorParameters_swigregister(StdAutoErrorParameters)

class ScopedCopyableErrorParameters(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::ErrorParameters)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableErrorParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableErrorParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters)> self, ErrorParameters ptr=None) -> ScopedCopyableErrorParameters
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters)> self) -> ScopedCopyableErrorParameters
        __init__(mem::ScopedCopyablePtr<(cphd::ErrorParameters)> self, ScopedCopyableErrorParameters rhs) -> ScopedCopyableErrorParameters
        """
        this = _cphd.new_ScopedCopyableErrorParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableErrorParameters___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::ErrorParameters *":
        """get(ScopedCopyableErrorParameters self) -> ErrorParameters"""
        return _cphd.ScopedCopyableErrorParameters_get(self)


    def __ref__(self) -> "cphd::ErrorParameters &":
        """__ref__(ScopedCopyableErrorParameters self) -> ErrorParameters"""
        return _cphd.ScopedCopyableErrorParameters___ref__(self)


    def __deref__(self) -> "cphd::ErrorParameters *":
        """__deref__(ScopedCopyableErrorParameters self) -> ErrorParameters"""
        return _cphd.ScopedCopyableErrorParameters___deref__(self)


    def reset(self, ptr: 'ErrorParameters'=None) -> "void":
        """
        reset(ScopedCopyableErrorParameters self, ErrorParameters ptr=None)
        reset(ScopedCopyableErrorParameters self)
        """
        return _cphd.ScopedCopyableErrorParameters_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableErrorParameters
    __del__ = lambda self: None

    def __eq__(self, other: 'ErrorParameters') -> "bool":
        """__eq__(ScopedCopyableErrorParameters self, ErrorParameters other) -> bool"""
        return _cphd.ScopedCopyableErrorParameters___eq__(self, other)


    def __ne__(self, other: 'ErrorParameters') -> "bool":
        """__ne__(ScopedCopyableErrorParameters self, ErrorParameters other) -> bool"""
        return _cphd.ScopedCopyableErrorParameters___ne__(self, other)

    __swig_setmethods__["monostatic"] = _cphd.ScopedCopyableErrorParameters_monostatic_set
    __swig_getmethods__["monostatic"] = _cphd.ScopedCopyableErrorParameters_monostatic_get
    if _newclass:
        monostatic = _swig_property(_cphd.ScopedCopyableErrorParameters_monostatic_get, _cphd.ScopedCopyableErrorParameters_monostatic_set)
    __swig_setmethods__["bistatic"] = _cphd.ScopedCopyableErrorParameters_bistatic_set
    __swig_getmethods__["bistatic"] = _cphd.ScopedCopyableErrorParameters_bistatic_get
    if _newclass:
        bistatic = _swig_property(_cphd.ScopedCopyableErrorParameters_bistatic_get, _cphd.ScopedCopyableErrorParameters_bistatic_set)
ScopedCopyableErrorParameters_swigregister = _cphd.ScopedCopyableErrorParameters_swigregister
ScopedCopyableErrorParameters_swigregister(ScopedCopyableErrorParameters)


def makeScopedCopyableErrorParameters() -> "mem::ScopedCopyablePtr< cphd::ErrorParameters >":
    """makeScopedCopyableErrorParameters() -> ScopedCopyableErrorParameters"""
    return _cphd.makeScopedCopyableErrorParameters()
class StdAutoProductInfo(_object):
    """Proxy of C++ std::auto_ptr<(cphd::ProductInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoProductInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoProductInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::ProductInfo)> self) -> StdAutoProductInfo"""
        this = _cphd.new_StdAutoProductInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoProductInfo
    __del__ = lambda self: None
StdAutoProductInfo_swigregister = _cphd.StdAutoProductInfo_swigregister
StdAutoProductInfo_swigregister(StdAutoProductInfo)

class ScopedCopyableProductInfo(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::ProductInfo)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableProductInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableProductInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::ProductInfo)> self, ProductInfo ptr=None) -> ScopedCopyableProductInfo
        __init__(mem::ScopedCopyablePtr<(cphd::ProductInfo)> self) -> ScopedCopyableProductInfo
        __init__(mem::ScopedCopyablePtr<(cphd::ProductInfo)> self, ScopedCopyableProductInfo rhs) -> ScopedCopyableProductInfo
        """
        this = _cphd.new_ScopedCopyableProductInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableProductInfo___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::ProductInfo *":
        """get(ScopedCopyableProductInfo self) -> ProductInfo"""
        return _cphd.ScopedCopyableProductInfo_get(self)


    def __ref__(self) -> "cphd::ProductInfo &":
        """__ref__(ScopedCopyableProductInfo self) -> ProductInfo"""
        return _cphd.ScopedCopyableProductInfo___ref__(self)


    def __deref__(self) -> "cphd::ProductInfo *":
        """__deref__(ScopedCopyableProductInfo self) -> ProductInfo"""
        return _cphd.ScopedCopyableProductInfo___deref__(self)


    def reset(self, ptr: 'ProductInfo'=None) -> "void":
        """
        reset(ScopedCopyableProductInfo self, ProductInfo ptr=None)
        reset(ScopedCopyableProductInfo self)
        """
        return _cphd.ScopedCopyableProductInfo_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableProductInfo
    __del__ = lambda self: None

    def __eq__(self, other: 'ProductInfo') -> "bool":
        """__eq__(ScopedCopyableProductInfo self, ProductInfo other) -> bool"""
        return _cphd.ScopedCopyableProductInfo___eq__(self, other)


    def __ne__(self, other: 'ProductInfo') -> "bool":
        """__ne__(ScopedCopyableProductInfo self, ProductInfo other) -> bool"""
        return _cphd.ScopedCopyableProductInfo___ne__(self, other)

    __swig_setmethods__["profile"] = _cphd.ScopedCopyableProductInfo_profile_set
    __swig_getmethods__["profile"] = _cphd.ScopedCopyableProductInfo_profile_get
    if _newclass:
        profile = _swig_property(_cphd.ScopedCopyableProductInfo_profile_get, _cphd.ScopedCopyableProductInfo_profile_set)
    __swig_setmethods__["creationInfo"] = _cphd.ScopedCopyableProductInfo_creationInfo_set
    __swig_getmethods__["creationInfo"] = _cphd.ScopedCopyableProductInfo_creationInfo_get
    if _newclass:
        creationInfo = _swig_property(_cphd.ScopedCopyableProductInfo_creationInfo_get, _cphd.ScopedCopyableProductInfo_creationInfo_set)
    __swig_setmethods__["parameter"] = _cphd.ScopedCopyableProductInfo_parameter_set
    __swig_getmethods__["parameter"] = _cphd.ScopedCopyableProductInfo_parameter_get
    if _newclass:
        parameter = _swig_property(_cphd.ScopedCopyableProductInfo_parameter_get, _cphd.ScopedCopyableProductInfo_parameter_set)
ScopedCopyableProductInfo_swigregister = _cphd.ScopedCopyableProductInfo_swigregister
ScopedCopyableProductInfo_swigregister(ScopedCopyableProductInfo)


def makeScopedCopyableProductInfo() -> "mem::ScopedCopyablePtr< cphd::ProductInfo >":
    """makeScopedCopyableProductInfo() -> ScopedCopyableProductInfo"""
    return _cphd.makeScopedCopyableProductInfo()
class StdAutoCphdAntenna(_object):
    """Proxy of C++ std::auto_ptr<(cphd::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdAutoCphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdAutoCphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::auto_ptr<(cphd::Antenna)> self) -> StdAutoCphdAntenna"""
        this = _cphd.new_StdAutoCphdAntenna()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cphd.delete_StdAutoCphdAntenna
    __del__ = lambda self: None
StdAutoCphdAntenna_swigregister = _cphd.StdAutoCphdAntenna_swigregister
StdAutoCphdAntenna_swigregister(StdAutoCphdAntenna)

class ScopedCopyableCphdAntenna(_object):
    """Proxy of C++ mem::ScopedCopyablePtr<(cphd::Antenna)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedCopyableCphdAntenna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedCopyableCphdAntenna, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self, CphdAntenna ptr=None) -> ScopedCopyableCphdAntenna
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self) -> ScopedCopyableCphdAntenna
        __init__(mem::ScopedCopyablePtr<(cphd::Antenna)> self, ScopedCopyableCphdAntenna rhs) -> ScopedCopyableCphdAntenna
        """
        this = _cphd.new_ScopedCopyableCphdAntenna(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __nonzero__(self):
        return _cphd.ScopedCopyableCphdAntenna___nonzero__(self)
    __bool__ = __nonzero__



    def get(self) -> "cphd::Antenna *":
        """get(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna_get(self)


    def __ref__(self) -> "cphd::Antenna &":
        """__ref__(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna___ref__(self)


    def __deref__(self) -> "cphd::Antenna *":
        """__deref__(ScopedCopyableCphdAntenna self) -> CphdAntenna"""
        return _cphd.ScopedCopyableCphdAntenna___deref__(self)


    def reset(self, ptr: 'CphdAntenna'=None) -> "void":
        """
        reset(ScopedCopyableCphdAntenna self, CphdAntenna ptr=None)
        reset(ScopedCopyableCphdAntenna self)
        """
        return _cphd.ScopedCopyableCphdAntenna_reset(self, ptr)

    __swig_destroy__ = _cphd.delete_ScopedCopyableCphdAntenna
    __del__ = lambda self: None

    def __eq__(self, other: 'CphdAntenna') -> "bool":
        """__eq__(ScopedCopyableCphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.ScopedCopyableCphdAntenna___eq__(self, other)


    def __ne__(self, other: 'CphdAntenna') -> "bool":
        """__ne__(ScopedCopyableCphdAntenna self, CphdAntenna other) -> bool"""
        return _cphd.ScopedCopyableCphdAntenna___ne__(self, other)

    __swig_setmethods__["antCoordFrame"] = _cphd.ScopedCopyableCphdAntenna_antCoordFrame_set
    __swig_getmethods__["antCoordFrame"] = _cphd.ScopedCopyableCphdAntenna_antCoordFrame_get
    if _newclass:
        antCoordFrame = _swig_property(_cphd.ScopedCopyableCphdAntenna_antCoordFrame_get, _cphd.ScopedCopyableCphdAntenna_antCoordFrame_set)
    __swig_setmethods__["antPhaseCenter"] = _cphd.ScopedCopyableCphdAntenna_antPhaseCenter_set
    __swig_getmethods__["antPhaseCenter"] = _cphd.ScopedCopyableCphdAntenna_antPhaseCenter_get
    if _newclass:
        antPhaseCenter = _swig_property(_cphd.ScopedCopyableCphdAntenna_antPhaseCenter_get, _cphd.ScopedCopyableCphdAntenna_antPhaseCenter_set)
    __swig_setmethods__["antPattern"] = _cphd.ScopedCopyableCphdAntenna_antPattern_set
    __swig_getmethods__["antPattern"] = _cphd.ScopedCopyableCphdAntenna_antPattern_get
    if _newclass:
        antPattern = _swig_property(_cphd.ScopedCopyableCphdAntenna_antPattern_get, _cphd.ScopedCopyableCphdAntenna_antPattern_set)
ScopedCopyableCphdAntenna_swigregister = _cphd.ScopedCopyableCphdAntenna_swigregister
ScopedCopyableCphdAntenna_swigregister(ScopedCopyableCphdAntenna)


def makeScopedCopyableCphdAntenna() -> "mem::ScopedCopyablePtr< cphd::Antenna >":
    """makeScopedCopyableCphdAntenna() -> ScopedCopyableCphdAntenna"""
    return _cphd.makeScopedCopyableCphdAntenna()
# This file is compatible with both classic and new-style classes.


